{
  Interface to pipewire library. Generated by h2pas.
}
{$IFNDEF FPC_DOTTEDUNITS}
unit libpipewire;
{$ENDIF}

{$IFDEF FPC}
{$mode objfpc}
{$h+}
{$endif}

interface

{$IFDEF FPC_DOTTEDUNITS}
uses System.CTypes, Api.SPA;
{$ELSE}
uses ctypes, libspa;
{$ENDIF}
const
  libpipewirename = 'libpipewire-0.3';

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
type
  Psize_t = ^csize_t;


  Tpw_proxy = record
      {undefined structure}
    end;

  Tpw_protocol = record
      {undefined structure}
    end;

  Tpw_context = record
      {undefined structure}
    end;

  Tpw_global = record
      {undefined structure}
    end;

  Tpw_impl_client = record
      {undefined structure}
    end;

  Tpw_core = record
      {undefined structure}
    end;

  Tpw_registry = record
      {undefined structure}
    end;
  Tpw_core_info = record
    id : Tuint32_t;
    cookie : Tuint32_t;
    user_name : pchar;
    host_name : pchar;
    version : pchar;
    name : char;
    change_mask : Tuint64_t;
    props : pTspa_dict;
  end;


{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}

{$i array.inc}
// needed in client.inc
{$i permission.inc}
{$i client.inc}
// needed in context.inc
{$i loop.inc}
// needed in context.inc
{$i properties.inc}
{$i work_queue.inc}
{$i context.inc}
{$i device.inc}
// needed for buffers.inc
{$i mem.inc}
{$i buffers.inc}
{$i core.inc}
{$i factory.inc}
{$i keys.inc}
{$i log.inc}
{$i link.inc}
{$i main_loop.inc}
{$i map.inc}
{$i module.inc}
{$i node.inc}
// needed in proxy.inc
{$i protocol.inc}
{$i proxy.inc}
{$i port.inc}
{$i stream.inc}
{$i filter.inc}
{$i data_loop.inc}
{$i type.inc}
{$i utils.inc}
{$i version.inc}
{$i thread_loop.inc}


procedure pw_init(argc: Plongint; argv: PPPchar); cdecl; external libpipewirename Name 'pw_init';
procedure pw_deinit; cdecl; external libpipewirename Name 'pw_deinit';
function pw_debug_is_category_enabled(Name: PChar) : T_Bool; cdecl; external libpipewirename Name 'pw_debug_is_category_enabled';
function pw_get_application_name : PChar; cdecl; external libpipewirename Name 'pw_get_application_name';
function pw_get_prgname : PChar; cdecl; external libpipewirename Name 'pw_get_prgname';
function pw_get_user_name : PChar; cdecl; external libpipewirename Name 'pw_get_user_name';
function pw_get_host_name : PChar; cdecl; external libpipewirename Name 'pw_get_host_name';
function pw_get_client_name : PChar; cdecl; external libpipewirename Name 'pw_get_client_name';
function pw_in_valgrind : T_Bool; cdecl; external libpipewirename Name 'pw_in_valgrind';
function pw_check_option(option: PChar; Value: PChar) : T_Bool; cdecl; external libpipewirename Name 'pw_check_option';
function pw_direction_reverse(direction: Tspa_direction) : Tspa_direction; cdecl; external libpipewirename Name 'pw_direction_reverse';
function pw_set_domain(domain: PChar) : longint; cdecl; external libpipewirename Name 'pw_set_domain';
function pw_get_domain : PChar; cdecl; external libpipewirename Name 'pw_get_domain';
function pw_get_support(support: Pspa_support; max_support: Tuint32_t) : Tuint32_t; cdecl; external libpipewirename Name 'pw_get_support';
function pw_load_spa_handle(lib: PChar; factory_name: PChar; info: Pspa_dict; n_support: Tuint32_t; support: Pspa_support) : Pspa_handle; cdecl; external libpipewirename Name 'pw_load_spa_handle';
function pw_unload_spa_handle(handle: Pspa_handle) : longint; cdecl; external libpipewirename Name 'pw_unload_spa_handle';

implementation

{$i core_impl.inc}

{$i loop_impl.inc}

end.
