{$IFNDEF FPC_DOTTEDUNITS}
unit sharepoint;
{$ENDIF FPC_DOTTEDUNITS}
{$MODE objfpc}
{$H+}

interface

{$IFDEF FPC_DOTTEDUNITS}
uses System.SysUtils, System.Classes, FpJson.Data, FpWeb.Rest.Base, Web.OData.Types, Web.OData.Service;
{$ELSE FPC_DOTTEDUNITS}
uses sysutils, classes, fpjson, restbase, odatabase, odataservice;
{$ENDIF FPC_DOTTEDUNITS}

(*
  Options used to generate: 
  OData version : ODataV2
  BasecomplexType : TODataObject
  BaseEntityType : TODataEntity
  BaseEntityContainerType : TODataEntityContainer
  BaseServiceType : TODataService
  BaseEntitySetType : TODataEntitySet
  SchemaAncestor : TObject
  FieldPrefix : F
  ServiceSuffix : 
  EnumerationMode : emScoped
*)
type
  // Needed for binary data
  TByteArray = Array of byte;
  TInt16Array = Array of SmallInt;
  //
  TSPKeyValue = class;
  TSPKeyValueArray = Array of TSPKeyValue;
  TSPSimpleDataRow = class;
  TSPSimpleDataRowArray = Array of TSPSimpleDataRow;
  TSPSimpleDataTable = class;
  TSPSimpleDataTableArray = Array of TSPSimpleDataTable;
  TSPMethodInformation = class;
  TSPMethodInformationArray = Array of TSPMethodInformation;
  TSPParameterInformation = class;
  TSPParameterInformationArray = Array of TSPParameterInformation;
  TSPPropertyInformation = class;
  TSPPropertyInformationArray = Array of TSPPropertyInformation;
  TSPContentTypeId = class;
  TSPContentTypeIdArray = Array of TSPContentTypeId;
  TSPFieldLookupValue = class;
  TSPFieldLookupValueArray = Array of TSPFieldLookupValue;
  TSPFieldUserValue = class;
  TSPFieldUserValueArray = Array of TSPFieldUserValue;
  TSPCreatableItemInfoCollection = class;
  TSPCreatableItemInfoCollectionArray = Array of TSPCreatableItemInfoCollection;
  TSPCreatableItemInfo = class;
  TSPCreatableItemInfoArray = Array of TSPCreatableItemInfo;
  TSPMenuNode = class;
  TSPMenuNodeArray = Array of TSPMenuNode;
  TSPMenuState = class;
  TSPMenuStateArray = Array of TSPMenuState;
  TSPNavigationNodeCreationInformation = class;
  TSPNavigationNodeCreationInformationArray = Array of TSPNavigationNodeCreationInformation;
  TSPRelatedItem = class;
  TSPRelatedItemArray = Array of TSPRelatedItem;
  TSPAppLicenseCollection = class;
  TSPAppLicenseCollectionArray = Array of TSPAppLicenseCollection;
  TSPAppLicense = class;
  TSPAppLicenseArray = Array of TSPAppLicense;
  TSPAttachmentCreationInformation = class;
  TSPAttachmentCreationInformationArray = Array of TSPAttachmentCreationInformation;
  TSPBasePermissions = class;
  TSPBasePermissionsArray = Array of TSPBasePermissions;
  TSPChangeLogItemQuery = class;
  TSPChangeLogItemQueryArray = Array of TSPChangeLogItemQuery;
  TSPChangeQuery = class;
  TSPChangeQueryArray = Array of TSPChangeQuery;
  TSPChangeToken = class;
  TSPChangeTokenArray = Array of TSPChangeToken;
  TSPContentTypeCreationInformation = class;
  TSPContentTypeCreationInformationArray = Array of TSPContentTypeCreationInformation;
  TSPContextWebInformation = class;
  TSPContextWebInformationArray = Array of TSPContextWebInformation;
  TSPDocumentLibraryInformation = class;
  TSPDocumentLibraryInformationArray = Array of TSPDocumentLibraryInformation;
  TSPEventReceiverDefinitionCreationInformation = class;
  TSPEventReceiverDefinitionCreationInformationArray = Array of TSPEventReceiverDefinitionCreationInformation;
  TSPListDataValidationFailure = class;
  TSPListDataValidationFailureArray = Array of TSPListDataValidationFailure;
  TSPFieldCalculatedErrorValue = class;
  TSPFieldCalculatedErrorValueArray = Array of TSPFieldCalculatedErrorValue;
  TSPFieldCreationInformation = class;
  TSPFieldCreationInformationArray = Array of TSPFieldCreationInformation;
  TSPFieldGeolocationValue = class;
  TSPFieldGeolocationValueArray = Array of TSPFieldGeolocationValue;
  TSPFieldRatingScaleQuestionAnswer = class;
  TSPFieldRatingScaleQuestionAnswerArray = Array of TSPFieldRatingScaleQuestionAnswer;
  TSPFieldUrlValue = class;
  TSPFieldUrlValueArray = Array of TSPFieldUrlValue;
  TSPFileCreationInformation = class;
  TSPFileCreationInformationArray = Array of TSPFileCreationInformation;
  TSPGroupCreationInformation = class;
  TSPGroupCreationInformationArray = Array of TSPGroupCreationInformation;
  TSPSPInvitationCreationResult = class;
  TSPSPInvitationCreationResultArray = Array of TSPSPInvitationCreationResult;
  TSPLanguage = class;
  TSPLanguageArray = Array of TSPLanguage;
  TSPListCreationInformation = class;
  TSPListCreationInformationArray = Array of TSPListCreationInformation;
  TSPListDataSource = class;
  TSPListDataSourceArray = Array of TSPListDataSource;
  TSPListDataValidationExceptionValue = class;
  TSPListDataValidationExceptionValueArray = Array of TSPListDataValidationExceptionValue;
  TSPListItemCollectionPosition = class;
  TSPListItemCollectionPositionArray = Array of TSPListItemCollectionPosition;
  TSPListItemCreationInformation = class;
  TSPListItemCreationInformationArray = Array of TSPListItemCreationInformation;
  TSPListItemFormUpdateValue = class;
  TSPListItemFormUpdateValueArray = Array of TSPListItemFormUpdateValue;
  TSPCamlQuery = class;
  TSPCamlQueryArray = Array of TSPCamlQuery;
  TSPRenderListContextMenuDataParameters = class;
  TSPRenderListContextMenuDataParametersArray = Array of TSPRenderListContextMenuDataParameters;
  TSPRenderListDataOverrideParameters = class;
  TSPRenderListDataOverrideParametersArray = Array of TSPRenderListDataOverrideParameters;
  TSPRenderListDataParameters = class;
  TSPRenderListDataParametersArray = Array of TSPRenderListDataParameters;
  TSPRenderListFilterDataParameters = class;
  TSPRenderListFilterDataParametersArray = Array of TSPRenderListFilterDataParameters;
  TSPRoleDefinitionCreationInformation = class;
  TSPRoleDefinitionCreationInformationArray = Array of TSPRoleDefinitionCreationInformation;
  TSPUpgradeInfo = class;
  TSPUpgradeInfoArray = Array of TSPUpgradeInfo;
  TSPSubwebQuery = class;
  TSPSubwebQueryArray = Array of TSPSubwebQuery;
  TSPTenantAppInformation = class;
  TSPTenantAppInformationArray = Array of TSPTenantAppInformation;
  TSPTimeZoneInformation = class;
  TSPTimeZoneInformationArray = Array of TSPTimeZoneInformation;
  TSPUsageInfo = class;
  TSPUsageInfoArray = Array of TSPUsageInfo;
  TSPUserCreationInformation = class;
  TSPUserCreationInformationArray = Array of TSPUserCreationInformation;
  TSPUserIdInfo = class;
  TSPUserIdInfoArray = Array of TSPUserIdInfo;
  TSPViewCreationInformation = class;
  TSPViewCreationInformationArray = Array of TSPViewCreationInformation;
  TSPWebCreationInformation = class;
  TSPWebCreationInformationArray = Array of TSPWebCreationInformation;
  TSPWebInfoCreationInformation = class;
  TSPWebInfoCreationInformationArray = Array of TSPWebInfoCreationInformation;
  TSPWebRequestInfo = class;
  TSPWebRequestInfoArray = Array of TSPWebRequestInfo;
  TSPWebResponseInfo = class;
  TSPWebResponseInfoArray = Array of TSPWebResponseInfo;
  TSPXmlSchemaFieldCreationInformation = class;
  TSPXmlSchemaFieldCreationInformationArray = Array of TSPXmlSchemaFieldCreationInformation;
  TSPApiMetadata = class;
  TSPApiMetadataArray = Array of TSPApiMetadata;
  TSPTypeInformation = class;
  TSPTypeInformationArray = Array of TSPTypeInformation;
  TSPSite = class;
  TSPSiteArray = Array of TSPSite;
  TSPAudit = class;
  TSPAuditArray = Array of TSPAudit;
  TSPEventReceiverDefinition = class;
  TSPEventReceiverDefinitionArray = Array of TSPEventReceiverDefinition;
  TSPFeature = class;
  TSPFeatureArray = Array of TSPFeature;
  TSPPrincipal = class;
  TSPPrincipalArray = Array of TSPPrincipal;
  TSPUser = class;
  TSPUserArray = Array of TSPUser;
  TSPGroup = class;
  TSPGroupArray = Array of TSPGroup;
  TSPRecycleBinItem = class;
  TSPRecycleBinItemArray = Array of TSPRecycleBinItem;
  TSPSecurableObject = class;
  TSPSecurableObjectArray = Array of TSPSecurableObject;
  TSPRoleAssignment = class;
  TSPRoleAssignmentArray = Array of TSPRoleAssignment;
  TSPRoleDefinition = class;
  TSPRoleDefinitionArray = Array of TSPRoleDefinition;
  TSPWeb = class;
  TSPWebArray = Array of TSPWeb;
  TSPPropertyValues = class;
  TSPPropertyValuesArray = Array of TSPPropertyValues;
  TSPAppTile = class;
  TSPAppTileArray = Array of TSPAppTile;
  TSPContentType = class;
  TSPContentTypeArray = Array of TSPContentType;
  TSPUserResource = class;
  TSPUserResourceArray = Array of TSPUserResource;
  TSPFieldLink = class;
  TSPFieldLinkArray = Array of TSPFieldLink;
  TSPField = class;
  TSPFieldArray = Array of TSPField;
  TSPSPDataLeakagePreventionStatusInfo = class;
  TSPSPDataLeakagePreventionStatusInfoArray = Array of TSPSPDataLeakagePreventionStatusInfo;
  TSPFolder = class;
  TSPFolderArray = Array of TSPFolder;
  TSP_File = class;
  TSP_FileArray = Array of TSP_File;
  TSPListItem = class;
  TSPListItemArray = Array of TSPListItem;
  TSPAttachment = class;
  TSPAttachmentArray = Array of TSPAttachment;
  TSPDlpPolicyTip = class;
  TSPDlpPolicyTipArray = Array of TSPDlpPolicyTip;
  TSPFieldStringValues = class;
  TSPFieldStringValuesArray = Array of TSPFieldStringValues;
  TSPList = class;
  TSPListArray = Array of TSPList;
  TSPCreatablesInfo = class;
  TSPCreatablesInfoArray = Array of TSPCreatablesInfo;
  TSPView = class;
  TSPViewArray = Array of TSPView;
  TSPViewFieldCollection = class;
  TSPViewFieldCollectionArray = Array of TSPViewFieldCollection;
  TSPForm = class;
  TSPFormArray = Array of TSPForm;
  TSPInformationRightsManagementSettings = class;
  TSPInformationRightsManagementSettingsArray = Array of TSPInformationRightsManagementSettings;
  TSPUserCustomAction = class;
  TSPUserCustomActionArray = Array of TSPUserCustomAction;
  TSPFileVersion = class;
  TSPFileVersionArray = Array of TSPFileVersion;
  TSPListTemplate = class;
  TSPListTemplateArray = Array of TSPListTemplate;
  TSPNavigation = class;
  TSPNavigationArray = Array of TSPNavigation;
  TSPNavigationNode = class;
  TSPNavigationNodeArray = Array of TSPNavigationNode;
  TSPWebInformation = class;
  TSPWebInformationArray = Array of TSPWebInformation;
  TSPPushNotificationSubscriber = class;
  TSPPushNotificationSubscriberArray = Array of TSPPushNotificationSubscriber;
  TSPRegionalSettings = class;
  TSPRegionalSettingsArray = Array of TSPRegionalSettings;
  TSPTimeZone = class;
  TSPTimeZoneArray = Array of TSPTimeZone;
  TSPThemeInfo = class;
  TSPThemeInfoArray = Array of TSPThemeInfo;
  TSPSPAppLicenseManager = class;
  TSPSPAppLicenseManagerArray = Array of TSPSPAppLicenseManager;
  TSPSolutionExporter = class;
  TSPSolutionExporterArray = Array of TSPSolutionExporter;
  TSPUserSolution = class;
  TSPUserSolutionArray = Array of TSPUserSolution;
  TSPAppCatalog = class;
  TSPAppCatalogArray = Array of TSPAppCatalog;
  TSPAppInstanceErrorDetails = class;
  TSPAppInstanceErrorDetailsArray = Array of TSPAppInstanceErrorDetails;
  TSPAppInstance = class;
  TSPAppInstanceArray = Array of TSPAppInstance;
  TSPApp = class;
  TSPAppArray = Array of TSPApp;
  TSPAlternateUrl = class;
  TSPAlternateUrlArray = Array of TSPAlternateUrl;
  TSPObjectSharingSettings = class;
  TSPObjectSharingSettingsArray = Array of TSPObjectSharingSettings;
  TSPObjectSharingInformation = class;
  TSPObjectSharingInformationArray = Array of TSPObjectSharingInformation;
  TSPObjectSharingInformationUser = class;
  TSPObjectSharingInformationUserArray = Array of TSPObjectSharingInformationUser;
  TSPSharePointSharingSettings = class;
  TSPSharePointSharingSettingsArray = Array of TSPSharePointSharingSettings;
  TSPPickerSettings = class;
  TSPPickerSettingsArray = Array of TSPPickerSettings;
  TSPRelatedItemManager = class;
  TSPRelatedItemManagerArray = Array of TSPRelatedItemManager;
  TSPServerSettings = class;
  TSPServerSettingsArray = Array of TSPServerSettings;
  TSPSharingResult = class;
  TSPSharingResultArray = Array of TSPSharingResult;
  TSPAccessRequests = class;
  TSPAccessRequestsArray = Array of TSPAccessRequests;
  TSPAppContextSite = class;
  TSPAppContextSiteArray = Array of TSPAppContextSite;
  TSPChange = class;
  TSPChangeArray = Array of TSPChange;
  TSPChangeAlert = class;
  TSPChangeAlertArray = Array of TSPChangeAlert;
  TSPChangeContentType = class;
  TSPChangeContentTypeArray = Array of TSPChangeContentType;
  TSPChangeField = class;
  TSPChangeFieldArray = Array of TSPChangeField;
  TSPChangeFile = class;
  TSPChangeFileArray = Array of TSPChangeFile;
  TSPChangeFolder = class;
  TSPChangeFolderArray = Array of TSPChangeFolder;
  TSPChangeGroup = class;
  TSPChangeGroupArray = Array of TSPChangeGroup;
  TSPChangeItem = class;
  TSPChangeItemArray = Array of TSPChangeItem;
  TSPChangeList = class;
  TSPChangeListArray = Array of TSPChangeList;
  TSPChangeSite = class;
  TSPChangeSiteArray = Array of TSPChangeSite;
  TSPChangeUser = class;
  TSPChangeUserArray = Array of TSPChangeUser;
  TSPChangeView = class;
  TSPChangeViewArray = Array of TSPChangeView;
  TSPChangeWeb = class;
  TSPChangeWebArray = Array of TSPChangeWeb;
  TSPCompatibilityRange = class;
  TSPCompatibilityRangeArray = Array of TSPCompatibilityRange;
  TSPRequestContext = class;
  TSPRequestContextArray = Array of TSPRequestContext;
  TSPFieldCalculated = class;
  TSPFieldCalculatedArray = Array of TSPFieldCalculated;
  TSPFieldMultiChoice = class;
  TSPFieldMultiChoiceArray = Array of TSPFieldMultiChoice;
  TSPFieldChoice = class;
  TSPFieldChoiceArray = Array of TSPFieldChoice;
  TSPFieldComputed = class;
  TSPFieldComputedArray = Array of TSPFieldComputed;
  TSPFieldNumber = class;
  TSPFieldNumberArray = Array of TSPFieldNumber;
  TSPFieldCurrency = class;
  TSPFieldCurrencyArray = Array of TSPFieldCurrency;
  TSPFieldDateTime = class;
  TSPFieldDateTimeArray = Array of TSPFieldDateTime;
  TSPFieldGeolocation = class;
  TSPFieldGeolocationArray = Array of TSPFieldGeolocation;
  TSPFieldGuid = class;
  TSPFieldGuidArray = Array of TSPFieldGuid;
  TSPFieldLookup = class;
  TSPFieldLookupArray = Array of TSPFieldLookup;
  TSPFieldMultiLineText = class;
  TSPFieldMultiLineTextArray = Array of TSPFieldMultiLineText;
  TSPFieldRatingScale = class;
  TSPFieldRatingScaleArray = Array of TSPFieldRatingScale;
  TSPFieldText = class;
  TSPFieldTextArray = Array of TSPFieldText;
  TSPFieldUrl = class;
  TSPFieldUrlArray = Array of TSPFieldUrl;
  TSPFieldUser = class;
  TSPFieldUserArray = Array of TSPFieldUser;
  TSPMountedFolderInfo = class;
  TSPMountedFolderInfoArray = Array of TSPMountedFolderInfo;
  TSPMountPoint = class;
  TSPMountPointArray = Array of TSPMountPoint;
  TSPMountPointInfo = class;
  TSPMountPointInfoArray = Array of TSPMountPointInfo;
  TSPMoveCopyUtil = class;
  TSPMoveCopyUtilArray = Array of TSPMoveCopyUtil;
  TSPRelatedField = class;
  TSPRelatedFieldArray = Array of TSPRelatedField;
  TSPRemoteWeb = class;
  TSPRemoteWebArray = Array of TSPRemoteWeb;
  TSPRequestUserContext = class;
  TSPRequestUserContextArray = Array of TSPRequestUserContext;
  TSPSiteUrl = class;
  TSPSiteUrlArray = Array of TSPSiteUrl;
  TSPTenantAppInstance = class;
  TSPTenantAppInstanceArray = Array of TSPTenantAppInstance;
  TSPWebProxy = class;
  TSPWebProxyArray = Array of TSPWebProxy;
  TSPWebTemplate = class;
  TSPWebTemplateArray = Array of TSPWebTemplate;
  TSPTenantAppUtility = class;
  TSPTenantAppUtilityArray = Array of TSPTenantAppUtility;
  TSPTenantSettings = class;
  TSPTenantSettingsArray = Array of TSPTenantSettings;
  TSPAppPrincipalIdentityProvider = class;
  TSPAppPrincipalIdentityProviderArray = Array of TSPAppPrincipalIdentityProvider;
  TSPAppPrincipalManager = class;
  TSPAppPrincipalManagerArray = Array of TSPAppPrincipalManager;
  TSPAppPrincipalCredential = class;
  TSPAppPrincipalCredentialArray = Array of TSPAppPrincipalCredential;
  TSPAppPrincipalName = class;
  TSPAppPrincipalNameArray = Array of TSPAppPrincipalName;
  TMS_AppDataExternalEntityItemValue = class;
  TMS_AppDataExternalEntityItemValueArray = Array of TMS_AppDataExternalEntityItemValue;
  TMS_AppDataDocumentEntityItemValue = class;
  TMS_AppDataDocumentEntityItemValueArray = Array of TMS_AppDataDocumentEntityItemValue;
  TMS_AppDataEntityItemValue = class;
  TMS_AppDataEntityItemValueArray = Array of TMS_AppDataEntityItemValue;
  TMS_AppDataEntityTypeCreationInformation = class;
  TMS_AppDataEntityTypeCreationInformationArray = Array of TMS_AppDataEntityTypeCreationInformation;
  TMS_AppDataExternalEntityTypeCreationInformation = class;
  TMS_AppDataExternalEntityTypeCreationInformationArray = Array of TMS_AppDataExternalEntityTypeCreationInformation;
  TMS_AppDataFieldCreationInformation = class;
  TMS_AppDataFieldCreationInformationArray = Array of TMS_AppDataFieldCreationInformation;
  TMS_AppDataItemQuery = class;
  TMS_AppDataItemQueryArray = Array of TMS_AppDataItemQuery;
  TMS_AppDataItemCollectionQuery = class;
  TMS_AppDataItemCollectionQueryArray = Array of TMS_AppDataItemCollectionQuery;
  TMS_AppDataUrlFieldValue = class;
  TMS_AppDataUrlFieldValueArray = Array of TMS_AppDataUrlFieldValue;
  TMS_AppDataUserEntityItemValue = class;
  TMS_AppDataUserEntityItemValueArray = Array of TMS_AppDataUserEntityItemValue;
  TMS_AppDataApp = class;
  TMS_AppDataAppArray = Array of TMS_AppDataApp;
  TMS_AppDataEntityTypeBase = class;
  TMS_AppDataEntityTypeBaseArray = Array of TMS_AppDataEntityTypeBase;
  TMS_AppDataField = class;
  TMS_AppDataFieldArray = Array of TMS_AppDataField;
  TMS_AppDataEntityType = class;
  TMS_AppDataEntityTypeArray = Array of TMS_AppDataEntityType;
  TMS_AppDataEntityItem = class;
  TMS_AppDataEntityItemArray = Array of TMS_AppDataEntityItem;
  TMS_AppDataExternalEntityType = class;
  TMS_AppDataExternalEntityTypeArray = Array of TMS_AppDataExternalEntityType;
  TMS_AppDataStoreContextBase = class;
  TMS_AppDataStoreContextBaseArray = Array of TMS_AppDataStoreContextBase;
  TMS_AppDataODataStoreContext = class;
  TMS_AppDataODataStoreContextArray = Array of TMS_AppDataODataStoreContext;
  TMS_AppDataRequestContext = class;
  TMS_AppDataRequestContextArray = Array of TMS_AppDataRequestContext;
  TMS_AppDataSqlStoreContext = class;
  TMS_AppDataSqlStoreContextArray = Array of TMS_AppDataSqlStoreContext;
  TSP_DirectoryLinkRequestSchema = class;
  TSP_DirectoryLinkRequestSchemaArray = Array of TSP_DirectoryLinkRequestSchema;
  TSP_DirectoryDirectorySession = class;
  TSP_DirectoryDirectorySessionArray = Array of TSP_DirectoryDirectorySession;
  TSP_DirectoryGroupAndUserStatus = class;
  TSP_DirectoryGroupAndUserStatusArray = Array of TSP_DirectoryGroupAndUserStatus;
  TSP_DirectoryGroup = class;
  TSP_DirectoryGroupArray = Array of TSP_DirectoryGroup;
  TSP_DirectoryLinkCollection = class;
  TSP_DirectoryLinkCollectionArray = Array of TSP_DirectoryLinkCollection;
  TSP_DirectoryMembershipResult = class;
  TSP_DirectoryMembershipResultArray = Array of TSP_DirectoryMembershipResult;
  TSP_DirectoryMembersInfo = class;
  TSP_DirectoryMembersInfoArray = Array of TSP_DirectoryMembersInfo;
  TSP_DirectoryMyGroupsResult = class;
  TSP_DirectoryMyGroupsResultArray = Array of TSP_DirectoryMyGroupsResult;
  TSP_DirectoryPropertyDictionary = class;
  TSP_DirectoryPropertyDictionaryArray = Array of TSP_DirectoryPropertyDictionary;
  TSP_Directory_Property = class;
  TSP_Directory_PropertyArray = Array of TSP_Directory_Property;
  TSP_DirectorySPHelper = class;
  TSP_DirectorySPHelperArray = Array of TSP_DirectorySPHelper;
  TSP_DirectoryUserRequestSchema = class;
  TSP_DirectoryUserRequestSchemaArray = Array of TSP_DirectoryUserRequestSchema;
  TSP_DirectoryUser = class;
  TSP_DirectoryUserArray = Array of TSP_DirectoryUser;
  TMS_FileServicesUserInformation = class;
  TMS_FileServicesUserInformationArray = Array of TMS_FileServicesUserInformation;
  TMS_FileServicesFileSystemItem = class;
  TMS_FileServicesFileSystemItemArray = Array of TMS_FileServicesFileSystemItem;
  TMS_FileServices_File = class;
  TMS_FileServices_FileArray = Array of TMS_FileServices_File;
  TMS_FileServicesFileService = class;
  TMS_FileServicesFileServiceArray = Array of TMS_FileServicesFileService;
  TMS_FileServicesFolder = class;
  TMS_FileServicesFolderArray = Array of TMS_FileServicesFolder;
  TMS_FileServicesMeFileService = class;
  TMS_FileServicesMeFileServiceArray = Array of TMS_FileServicesMeFileService;
  TSP_Directory_ProviderDirectoryObjectData = class;
  TSP_Directory_ProviderDirectoryObjectDataArray = Array of TSP_Directory_ProviderDirectoryObjectData;
  TSP_Directory_ProviderSchemaData = class;
  TSP_Directory_ProviderSchemaDataArray = Array of TSP_Directory_ProviderSchemaData;
  TSP_Directory_ProviderPropertyData = class;
  TSP_Directory_ProviderPropertyDataArray = Array of TSP_Directory_ProviderPropertyData;
  TSP_Directory_ProviderRelationData = class;
  TSP_Directory_ProviderRelationDataArray = Array of TSP_Directory_ProviderRelationData;
  TSP_Directory_ProviderRelationSetData = class;
  TSP_Directory_ProviderRelationSetDataArray = Array of TSP_Directory_ProviderRelationSetData;
  TSP_Directory_ProviderResourceData = class;
  TSP_Directory_ProviderResourceDataArray = Array of TSP_Directory_ProviderResourceData;
  TSP_Directory_ProviderStateData = class;
  TSP_Directory_ProviderStateDataArray = Array of TSP_Directory_ProviderStateData;
  TSP_Directory_ProviderSharePointDirectoryProvider = class;
  TSP_Directory_ProviderSharePointDirectoryProviderArray = Array of TSP_Directory_ProviderSharePointDirectoryProvider;
  TSP_MicrofeedMicroBlogEntityCollection = class;
  TSP_MicrofeedMicroBlogEntityCollectionArray = Array of TSP_MicrofeedMicroBlogEntityCollection;
  TSP_MicrofeedMicroBlogEntity = class;
  TSP_MicrofeedMicroBlogEntityArray = Array of TSP_MicrofeedMicroBlogEntity;
  TSP_MicrofeedMicrofeedPostDefinition = class;
  TSP_MicrofeedMicrofeedPostDefinitionArray = Array of TSP_MicrofeedMicrofeedPostDefinition;
  TSP_MicrofeedMicrofeedDataLinkCollection = class;
  TSP_MicrofeedMicrofeedDataLinkCollectionArray = Array of TSP_MicrofeedMicrofeedDataLinkCollection;
  TSP_MicrofeedMicrofeedDataLink = class;
  TSP_MicrofeedMicrofeedDataLinkArray = Array of TSP_MicrofeedMicrofeedDataLink;
  TSP_MicrofeedMicrofeedDataQuery = class;
  TSP_MicrofeedMicrofeedDataQueryArray = Array of TSP_MicrofeedMicrofeedDataQuery;
  TSP_MicrofeedMicrofeedLinkAction = class;
  TSP_MicrofeedMicrofeedLinkActionArray = Array of TSP_MicrofeedMicrofeedLinkAction;
  TSP_MicrofeedMicrofeedLink = class;
  TSP_MicrofeedMicrofeedLinkArray = Array of TSP_MicrofeedMicrofeedLink;
  TSP_MicrofeedMicrofeedPostCollection = class;
  TSP_MicrofeedMicrofeedPostCollectionArray = Array of TSP_MicrofeedMicrofeedPostCollection;
  TSP_MicrofeedMicrofeedPost = class;
  TSP_MicrofeedMicrofeedPostArray = Array of TSP_MicrofeedMicrofeedPost;
  TSP_MicrofeedMicrofeedPostDefinitionNames = class;
  TSP_MicrofeedMicrofeedPostDefinitionNamesArray = Array of TSP_MicrofeedMicrofeedPostDefinitionNames;
  TSP_MicrofeedMicrofeedPostDefinitionNameCollection = class;
  TSP_MicrofeedMicrofeedPostDefinitionNameCollectionArray = Array of TSP_MicrofeedMicrofeedPostDefinitionNameCollection;
  TSP_MicrofeedMicrofeedPostOptions = class;
  TSP_MicrofeedMicrofeedPostOptionsArray = Array of TSP_MicrofeedMicrofeedPostOptions;
  TSP_MicrofeedMicrofeedRetrievalOptions = class;
  TSP_MicrofeedMicrofeedRetrievalOptionsArray = Array of TSP_MicrofeedMicrofeedRetrievalOptions;
  TSP_MicrofeedMicrofeedThreadCollection = class;
  TSP_MicrofeedMicrofeedThreadCollectionArray = Array of TSP_MicrofeedMicrofeedThreadCollection;
  TSP_MicrofeedMicrofeedThread = class;
  TSP_MicrofeedMicrofeedThreadArray = Array of TSP_MicrofeedMicrofeedThread;
  TSP_MicrofeedMicrofeedUserPostCollection = class;
  TSP_MicrofeedMicrofeedUserPostCollectionArray = Array of TSP_MicrofeedMicrofeedUserPostCollection;
  TSP_MicrofeedMicrofeedUserPosts = class;
  TSP_MicrofeedMicrofeedUserPostsArray = Array of TSP_MicrofeedMicrofeedUserPosts;
  TSP_MicrofeedMicrofeedPostDefinitionManager = class;
  TSP_MicrofeedMicrofeedPostDefinitionManagerArray = Array of TSP_MicrofeedMicrofeedPostDefinitionManager;
  TSP_MicrofeedMicrofeedAttachmentStore = class;
  TSP_MicrofeedMicrofeedAttachmentStoreArray = Array of TSP_MicrofeedMicrofeedAttachmentStore;
  TSP_MicrofeedMicrofeedData = class;
  TSP_MicrofeedMicrofeedDataArray = Array of TSP_MicrofeedMicrofeedData;
  TSP_MicrofeedMicrofeedManager = class;
  TSP_MicrofeedMicrofeedManagerArray = Array of TSP_MicrofeedMicrofeedManager;
  TSP_MicrofeedMicrofeedPostOptionCollection = class;
  TSP_MicrofeedMicrofeedPostOptionCollectionArray = Array of TSP_MicrofeedMicrofeedPostOptionCollection;
  TSP_MicrofeedMicrofeedStore = class;
  TSP_MicrofeedMicrofeedStoreArray = Array of TSP_MicrofeedMicrofeedStore;
  TSP_SocialSocialActorInfo = class;
  TSP_SocialSocialActorInfoArray = Array of TSP_SocialSocialActorInfo;
  TSP_SocialSocialActor = class;
  TSP_SocialSocialActorArray = Array of TSP_SocialSocialActor;
  TSP_SocialSocialAttachmentAction = class;
  TSP_SocialSocialAttachmentActionArray = Array of TSP_SocialSocialAttachmentAction;
  TSP_SocialSocialAttachment = class;
  TSP_SocialSocialAttachmentArray = Array of TSP_SocialSocialAttachment;
  TSP_SocialSocialDataItem = class;
  TSP_SocialSocialDataItemArray = Array of TSP_SocialSocialDataItem;
  TSP_SocialSocialDataOverlay = class;
  TSP_SocialSocialDataOverlayArray = Array of TSP_SocialSocialDataOverlay;
  TSP_SocialSocialExceptionDetails = class;
  TSP_SocialSocialExceptionDetailsArray = Array of TSP_SocialSocialExceptionDetails;
  TSP_SocialSocialFeedOptions = class;
  TSP_SocialSocialFeedOptionsArray = Array of TSP_SocialSocialFeedOptions;
  TSP_SocialSocialFeed = class;
  TSP_SocialSocialFeedArray = Array of TSP_SocialSocialFeed;
  TSP_SocialSocialThread = class;
  TSP_SocialSocialThreadArray = Array of TSP_SocialSocialThread;
  TSP_SocialSocialPostReference = class;
  TSP_SocialSocialPostReferenceArray = Array of TSP_SocialSocialPostReference;
  TSP_SocialSocialPost = class;
  TSP_SocialSocialPostArray = Array of TSP_SocialSocialPost;
  TSP_SocialSocialPostActorInfo = class;
  TSP_SocialSocialPostActorInfoArray = Array of TSP_SocialSocialPostActorInfo;
  TSP_SocialSocialLink = class;
  TSP_SocialSocialLinkArray = Array of TSP_SocialSocialLink;
  TSP_SocialSocialPostCreationData = class;
  TSP_SocialSocialPostCreationDataArray = Array of TSP_SocialSocialPostCreationData;
  TSP_SocialSocialPostDefinitionData = class;
  TSP_SocialSocialPostDefinitionDataArray = Array of TSP_SocialSocialPostDefinitionData;
  TSP_SocialSocialPostDefinitionDataItem = class;
  TSP_SocialSocialPostDefinitionDataItemArray = Array of TSP_SocialSocialPostDefinitionDataItem;
  TSP_SocialSocialRestPostCreationData = class;
  TSP_SocialSocialRestPostCreationDataArray = Array of TSP_SocialSocialRestPostCreationData;
  TSP_SocialSocialAnnouncementManager = class;
  TSP_SocialSocialAnnouncementManagerArray = Array of TSP_SocialSocialAnnouncementManager;
  TSP_SocialSocialFeedManager = class;
  TSP_SocialSocialFeedManagerArray = Array of TSP_SocialSocialFeedManager;
  TSP_SocialSocialFollowingManager = class;
  TSP_SocialSocialFollowingManagerArray = Array of TSP_SocialSocialFollowingManager;
  TSP_SocialSocialRestActor = class;
  TSP_SocialSocialRestActorArray = Array of TSP_SocialSocialRestActor;
  TSP_SocialSocialRestFeedManager = class;
  TSP_SocialSocialRestFeedManagerArray = Array of TSP_SocialSocialRestFeedManager;
  TSP_SocialSocialRestFeed = class;
  TSP_SocialSocialRestFeedArray = Array of TSP_SocialSocialRestFeed;
  TSP_SocialSocialRestFollowingManager = class;
  TSP_SocialSocialRestFollowingManagerArray = Array of TSP_SocialSocialRestFollowingManager;
  TSP_SocialSocialRestThread = class;
  TSP_SocialSocialRestThreadArray = Array of TSP_SocialSocialRestThread;
  TSP_UserProfilesFollowedItem = class;
  TSP_UserProfilesFollowedItemArray = Array of TSP_UserProfilesFollowedItem;
  TSP_UserProfilesFollowResult = class;
  TSP_UserProfilesFollowResultArray = Array of TSP_UserProfilesFollowResult;
  TSP_UserProfilesHashTag = class;
  TSP_UserProfilesHashTagArray = Array of TSP_UserProfilesHashTag;
  TSP_UserProfilesFollowedContent = class;
  TSP_UserProfilesFollowedContentArray = Array of TSP_UserProfilesFollowedContent;
  TSP_UserProfilesFollowedItemData = class;
  TSP_UserProfilesFollowedItemDataArray = Array of TSP_UserProfilesFollowedItemData;
  TSP_UserProfilesHashTagCollection = class;
  TSP_UserProfilesHashTagCollectionArray = Array of TSP_UserProfilesHashTagCollection;
  TSP_UserProfilesPeopleManager = class;
  TSP_UserProfilesPeopleManagerArray = Array of TSP_UserProfilesPeopleManager;
  TSP_UserProfilesPersonProperties = class;
  TSP_UserProfilesPersonPropertiesArray = Array of TSP_UserProfilesPersonProperties;
  TSP_UserProfilesProfileImageStore = class;
  TSP_UserProfilesProfileImageStoreArray = Array of TSP_UserProfilesProfileImageStore;
  TSP_UserProfilesProfileLoader = class;
  TSP_UserProfilesProfileLoaderArray = Array of TSP_UserProfilesProfileLoader;
  TSP_UserProfilesUserProfilePropertiesForUser = class;
  TSP_UserProfilesUserProfilePropertiesForUserArray = Array of TSP_UserProfilesUserProfilePropertiesForUser;
  TSP_UserProfilesUserProfile = class;
  TSP_UserProfilesUserProfileArray = Array of TSP_UserProfilesUserProfile;
  TPSAssignmentCreationInformation = class;
  TPSAssignmentCreationInformationArray = Array of TPSAssignmentCreationInformation;
  TPSCalendarCreationInformation = class;
  TPSCalendarCreationInformationArray = Array of TPSCalendarCreationInformation;
  TPSCalendarExceptionCreationInformation = class;
  TPSCalendarExceptionCreationInformationArray = Array of TPSCalendarExceptionCreationInformation;
  TPSCustomFieldCreationInformation = class;
  TPSCustomFieldCreationInformationArray = Array of TPSCustomFieldCreationInformation;
  TPSEnterpriseProjectTypeCreationInformation = class;
  TPSEnterpriseProjectTypeCreationInformationArray = Array of TPSEnterpriseProjectTypeCreationInformation;
  TPSProjectDetailPageCreationInformation = class;
  TPSProjectDetailPageCreationInformationArray = Array of TPSProjectDetailPageCreationInformation;
  TPSEnterpriseResourceCreationInformation = class;
  TPSEnterpriseResourceCreationInformationArray = Array of TPSEnterpriseResourceCreationInformation;
  TPSEventHandlerCreationInformation = class;
  TPSEventHandlerCreationInformationArray = Array of TPSEventHandlerCreationInformation;
  TPSLookupEntryCreationInformation = class;
  TPSLookupEntryCreationInformationArray = Array of TPSLookupEntryCreationInformation;
  TPSLookupEntryValue = class;
  TPSLookupEntryValueArray = Array of TPSLookupEntryValue;
  TPSLookupMask = class;
  TPSLookupMaskArray = Array of TPSLookupMask;
  TPSLookupTableCreationInformation = class;
  TPSLookupTableCreationInformationArray = Array of TPSLookupTableCreationInformation;
  TPSPhaseCreationInformation = class;
  TPSPhaseCreationInformationArray = Array of TPSPhaseCreationInformation;
  TPSPlanAssignmentCreationInformation = class;
  TPSPlanAssignmentCreationInformationArray = Array of TPSPlanAssignmentCreationInformation;
  TPSPlanAssignmentIntervalCreationInformation = class;
  TPSPlanAssignmentIntervalCreationInformationArray = Array of TPSPlanAssignmentIntervalCreationInformation;
  TPSProjectCreationInformation = class;
  TPSProjectCreationInformationArray = Array of TPSProjectCreationInformation;
  TPSProjectResourceCreationInformation = class;
  TPSProjectResourceCreationInformationArray = Array of TPSProjectResourceCreationInformation;
  TPSStageCreationInformation = class;
  TPSStageCreationInformationArray = Array of TPSStageCreationInformation;
  TPSStageCustomFieldCreationInformation = class;
  TPSStageCustomFieldCreationInformationArray = Array of TPSStageCustomFieldCreationInformation;
  TPSStageDetailPageCreationInformation = class;
  TPSStageDetailPageCreationInformationArray = Array of TPSStageDetailPageCreationInformation;
  TPSStatusAssignmentCreationInformation = class;
  TPSStatusAssignmentCreationInformationArray = Array of TPSStatusAssignmentCreationInformation;
  TPSStatusTaskCreationInformation = class;
  TPSStatusTaskCreationInformationArray = Array of TPSStatusTaskCreationInformation;
  TPSTaskCreationInformation = class;
  TPSTaskCreationInformationArray = Array of TPSTaskCreationInformation;
  TPSTaskLinkCreationInformation = class;
  TPSTaskLinkCreationInformationArray = Array of TPSTaskLinkCreationInformation;
  TPSTimeSheetLineCreationInformation = class;
  TPSTimeSheetLineCreationInformationArray = Array of TPSTimeSheetLineCreationInformation;
  TPSTimeSheetWorkCreationInformation = class;
  TPSTimeSheetWorkCreationInformationArray = Array of TPSTimeSheetWorkCreationInformation;
  TPSEntityType = class;
  TPSEntityTypeArray = Array of TPSEntityType;
  TPSLookupTables = class;
  TPSLookupTablesArray = Array of TPSLookupTables;
  TPSAssignment = class;
  TPSAssignmentArray = Array of TPSAssignment;
  TPSCustomField = class;
  TPSCustomFieldArray = Array of TPSCustomField;
  TPSLookupEntry = class;
  TPSLookupEntryArray = Array of TPSLookupEntry;
  TPSLookupTable = class;
  TPSLookupTableArray = Array of TPSLookupTable;
  TPSCalendarException = class;
  TPSCalendarExceptionArray = Array of TPSCalendarException;
  TPSCalendar = class;
  TPSCalendarArray = Array of TPSCalendar;
  TPSBaseCalendarException = class;
  TPSBaseCalendarExceptionArray = Array of TPSBaseCalendarException;
  TPSDraftAssignment = class;
  TPSDraftAssignmentArray = Array of TPSDraftAssignment;
  TPSProjectResource = class;
  TPSProjectResourceArray = Array of TPSProjectResource;
  TPSEnterpriseResource = class;
  TPSEnterpriseResourceArray = Array of TPSEnterpriseResource;
  TPSStatusAssignment = class;
  TPSStatusAssignmentArray = Array of TPSStatusAssignment;
  TPSProject = class;
  TPSProjectArray = Array of TPSProject;
  TPSEnterpriseProjectType = class;
  TPSEnterpriseProjectTypeArray = Array of TPSEnterpriseProjectType;
  TPSProjectDetailPage = class;
  TPSProjectDetailPageArray = Array of TPSProjectDetailPage;
  TPSPhase = class;
  TPSPhaseArray = Array of TPSPhase;
  TPSStage = class;
  TPSStageArray = Array of TPSStage;
  TPSStageCustomField = class;
  TPSStageCustomFieldArray = Array of TPSStageCustomField;
  TPSStageDetailPage = class;
  TPSStageDetailPageArray = Array of TPSStageDetailPage;
  TPSQueueJob = class;
  TPSQueueJobArray = Array of TPSQueueJob;
  TPSPublishedProject = class;
  TPSPublishedProjectArray = Array of TPSPublishedProject;
  TPSPublishedAssignment = class;
  TPSPublishedAssignmentArray = Array of TPSPublishedAssignment;
  TPSPublishedProjectResource = class;
  TPSPublishedProjectResourceArray = Array of TPSPublishedProjectResource;
  TPSTask = class;
  TPSTaskArray = Array of TPSTask;
  TPSPublishedTask = class;
  TPSPublishedTaskArray = Array of TPSPublishedTask;
  TPSTaskLink = class;
  TPSTaskLinkArray = Array of TPSTaskLink;
  TPSPublishedTaskLink = class;
  TPSPublishedTaskLinkArray = Array of TPSPublishedTaskLink;
  TPSDraftProject = class;
  TPSDraftProjectArray = Array of TPSDraftProject;
  TPSDraftProjectResource = class;
  TPSDraftProjectResourceArray = Array of TPSDraftProjectResource;
  TPSDraftTaskLink = class;
  TPSDraftTaskLinkArray = Array of TPSDraftTaskLink;
  TPSDraftTask = class;
  TPSDraftTaskArray = Array of TPSDraftTask;
  TPSStatusTask = class;
  TPSStatusTaskArray = Array of TPSStatusTask;
  TPSEntityTypes = class;
  TPSEntityTypesArray = Array of TPSEntityTypes;
  TPSEvent = class;
  TPSEventArray = Array of TPSEvent;
  TPSEventHandler = class;
  TPSEventHandlerArray = Array of TPSEventHandler;
  TPSLookupCost = class;
  TPSLookupCostArray = Array of TPSLookupCost;
  TPSLookupDate = class;
  TPSLookupDateArray = Array of TPSLookupDate;
  TPSLookupDuration = class;
  TPSLookupDurationArray = Array of TPSLookupDuration;
  TPSLookupNumber = class;
  TPSLookupNumberArray = Array of TPSLookupNumber;
  TPSLookupText = class;
  TPSLookupTextArray = Array of TPSLookupText;
  TPSPlanAssignment = class;
  TPSPlanAssignmentArray = Array of TPSPlanAssignment;
  TPSPlanAssignmentInterval = class;
  TPSPlanAssignmentIntervalArray = Array of TPSPlanAssignmentInterval;
  TPSProjectServerData = class;
  TPSProjectServerDataArray = Array of TPSProjectServerData;
  TPSProjectServer = class;
  TPSProjectServerArray = Array of TPSProjectServer;
  TPSTimeSheetPeriod = class;
  TPSTimeSheetPeriodArray = Array of TPSTimeSheetPeriod;
  TPSTimeSheet = class;
  TPSTimeSheetArray = Array of TPSTimeSheet;
  TPSTimeSheetLine = class;
  TPSTimeSheetLineArray = Array of TPSTimeSheetLine;
  TPSTimeSheetWork = class;
  TPSTimeSheetWorkArray = Array of TPSTimeSheetWork;
  TPSWorkflowActivities = class;
  TPSWorkflowActivitiesArray = Array of TPSWorkflowActivities;
  TPSWorkflowDesigner = class;
  TPSWorkflowDesignerArray = Array of TPSWorkflowDesigner;
  TPSWorkflowDesignerField = class;
  TPSWorkflowDesignerFieldArray = Array of TPSWorkflowDesignerField;
  TPSResourceCalendarException = class;
  TPSResourceCalendarExceptionArray = Array of TPSResourceCalendarException;
  TPSResourcePlan = class;
  TPSResourcePlanArray = Array of TPSResourcePlan;
  TPSServiceStatus = class;
  TPSServiceStatusArray = Array of TPSServiceStatus;
  TPSTaskServiceOdataEndpoint = class;
  TPSTaskServiceOdataEndpointArray = Array of TPSTaskServiceOdataEndpoint;
  TPSTimePhase = class;
  TPSTimePhaseArray = Array of TPSTimePhase;
  TSP_PublishingPersonMagazineData = class;
  TSP_PublishingPersonMagazineDataArray = Array of TSP_PublishingPersonMagazineData;
  TSP_PublishingPersonMagazinePeopleBasicInfo = class;
  TSP_PublishingPersonMagazinePeopleBasicInfoArray = Array of TSP_PublishingPersonMagazinePeopleBasicInfo;
  TSP_PublishingPersonMagazinePeopleModel = class;
  TSP_PublishingPersonMagazinePeopleModelArray = Array of TSP_PublishingPersonMagazinePeopleModel;
  TSP_PublishingPersonMagazineUserProfileDirectsData = class;
  TSP_PublishingPersonMagazineUserProfileDirectsDataArray = Array of TSP_PublishingPersonMagazineUserProfileDirectsData;
  TSP_PublishingPersonMagazineUserProfile = class;
  TSP_PublishingPersonMagazineUserProfileArray = Array of TSP_PublishingPersonMagazineUserProfile;
  TSP_PublishingPersonMagazineUserProfileData = class;
  TSP_PublishingPersonMagazineUserProfileDataArray = Array of TSP_PublishingPersonMagazineUserProfileData;
  TSP_PublishingPublishSiteInformation = class;
  TSP_PublishingPublishSiteInformationArray = Array of TSP_PublishingPublishSiteInformation;
  TSP_PublishingVideoItem = class;
  TSP_PublishingVideoItemArray = Array of TSP_PublishingVideoItem;
  TSP_PublishingPersonMagazine = class;
  TSP_PublishingPersonMagazineArray = Array of TSP_PublishingPersonMagazine;
  TSP_PublishingPointPublishingDocProps = class;
  TSP_PublishingPointPublishingDocPropsArray = Array of TSP_PublishingPointPublishingDocProps;
  TSP_PublishingPointPublishingMagazineProps = class;
  TSP_PublishingPointPublishingMagazinePropsArray = Array of TSP_PublishingPointPublishingMagazineProps;
  TSP_PublishingPointPublishingPost = class;
  TSP_PublishingPointPublishingPostArray = Array of TSP_PublishingPointPublishingPost;
  TSP_PublishingPointPublishingPostServiceManager = class;
  TSP_PublishingPointPublishingPostServiceManagerArray = Array of TSP_PublishingPointPublishingPostServiceManager;
  TSP_PublishingPointPublishingUser = class;
  TSP_PublishingPointPublishingUserArray = Array of TSP_PublishingPointPublishingUser;
  TSP_PublishingPointPublishingSiteManager = class;
  TSP_PublishingPointPublishingSiteManagerArray = Array of TSP_PublishingPointPublishingSiteManager;
  TSP_PublishingPointPublishingSiteStatus = class;
  TSP_PublishingPointPublishingSiteStatusArray = Array of TSP_PublishingPointPublishingSiteStatus;
  TSP_PublishingSpotlightChannel = class;
  TSP_PublishingSpotlightChannelArray = Array of TSP_PublishingSpotlightChannel;
  TSP_PublishingVideoChannel = class;
  TSP_PublishingVideoChannelArray = Array of TSP_PublishingVideoChannel;
  TSP_PublishingSearch = class;
  TSP_PublishingSearchArray = Array of TSP_PublishingSearch;
  TSP_PublishingSpotlightVideo = class;
  TSP_PublishingSpotlightVideoArray = Array of TSP_PublishingSpotlightVideo;
  TSP_PublishingVideoPermissionGroup = class;
  TSP_PublishingVideoPermissionGroupArray = Array of TSP_PublishingVideoPermissionGroup;
  TSP_PublishingVideoServiceDiscoverer = class;
  TSP_PublishingVideoServiceDiscovererArray = Array of TSP_PublishingVideoServiceDiscoverer;
  TSP_PublishingVideoServiceManager = class;
  TSP_PublishingVideoServiceManagerArray = Array of TSP_PublishingVideoServiceManager;
  TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion = class;
  TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestionArray = Array of TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion;
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch = class;
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatchArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch;
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults = class;
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResultsArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults;
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion = class;
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion;
  TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue = class;
  TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValueArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue;
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery = class;
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQueryArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery;
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange = class;
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRangeArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange;
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults = class;
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResultsArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults;
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRule = class;
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray = Array of TMicrosoft_SharePoint_Client_Search_QueryReorderingRule;
  TMicrosoft_SharePoint_Client_Search_QuerySort = class;
  TMicrosoft_SharePoint_Client_Search_QuerySortArray = Array of TMicrosoft_SharePoint_Client_Search_QuerySort;
  TMicrosoft_SharePoint_Client_Search_QueryStringCollection = class;
  TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray = Array of TMicrosoft_SharePoint_Client_Search_QueryStringCollection;
  TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData = class;
  TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray = Array of TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData;
  TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling = class;
  TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray = Array of TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling;
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection = class;
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray = Array of TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection;
  TMicrosoft_SharePoint_Client_Search_QuerySortCollection = class;
  TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray = Array of TMicrosoft_SharePoint_Client_Search_QuerySortCollection;
  TMicrosoft_Office_Server_Search_RESTCustomResult = class;
  TMicrosoft_Office_Server_Search_RESTCustomResultArray = Array of TMicrosoft_Office_Server_Search_RESTCustomResult;
  TMicrosoft_Office_Server_Search_RESTQueryProperty = class;
  TMicrosoft_Office_Server_Search_RESTQueryPropertyArray = Array of TMicrosoft_Office_Server_Search_RESTQueryProperty;
  TMicrosoft_Office_Server_Search_RESTQueryResult = class;
  TMicrosoft_Office_Server_Search_RESTQueryResultArray = Array of TMicrosoft_Office_Server_Search_RESTQueryResult;
  TMicrosoft_Office_Server_Search_RESTRefinementResults = class;
  TMicrosoft_Office_Server_Search_RESTRefinementResultsArray = Array of TMicrosoft_Office_Server_Search_RESTRefinementResults;
  TMicrosoft_Office_Server_Search_RESTRefiner = class;
  TMicrosoft_Office_Server_Search_RESTRefinerArray = Array of TMicrosoft_Office_Server_Search_RESTRefiner;
  TMicrosoft_Office_Server_Search_RESTRefinerEntry = class;
  TMicrosoft_Office_Server_Search_RESTRefinerEntryArray = Array of TMicrosoft_Office_Server_Search_RESTRefinerEntry;
  TMicrosoft_Office_Server_Search_RESTRelevantResults = class;
  TMicrosoft_Office_Server_Search_RESTRelevantResultsArray = Array of TMicrosoft_Office_Server_Search_RESTRelevantResults;
  TMicrosoft_Office_Server_Search_RESTSpecialTermResults = class;
  TMicrosoft_Office_Server_Search_RESTSpecialTermResultsArray = Array of TMicrosoft_Office_Server_Search_RESTSpecialTermResults;
  TMicrosoft_Office_Server_Search_RESTSpecialTermResult = class;
  TMicrosoft_Office_Server_Search_RESTSpecialTermResultArray = Array of TMicrosoft_Office_Server_Search_RESTSpecialTermResult;
  TMicrosoft_Office_Server_Search_RESTSearchRequest = class;
  TMicrosoft_Office_Server_Search_RESTSearchRequestArray = Array of TMicrosoft_Office_Server_Search_RESTSearchRequest;
  TMicrosoft_Office_Server_Search_RESTSearchResult = class;
  TMicrosoft_Office_Server_Search_RESTSearchResultArray = Array of TMicrosoft_Office_Server_Search_RESTSearchResult;
  TMicrosoft_Office_Server_Search_RESTSearchService = class;
  TMicrosoft_Office_Server_Search_RESTSearchServiceArray = Array of TMicrosoft_Office_Server_Search_RESTSearchService;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction = class;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActionArray = Array of TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor = class;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActorArray = Array of TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem = class;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItemArray = Array of TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal = class;
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignalArray = Array of TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal;
  TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore = class;
  TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray = Array of TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore;
  TMicrosoft_SharePoint_YammerWacToken = class;
  TMicrosoft_SharePoint_YammerWacTokenArray = Array of TMicrosoft_SharePoint_YammerWacToken;
  TMicrosoft_SharePoint_YammerWacApi = class;
  TMicrosoft_SharePoint_YammerWacApiArray = Array of TMicrosoft_SharePoint_YammerWacApi;
  TMicrosoft_SharePoint_PortalCollaborationMailboxResponse = class;
  TMicrosoft_SharePoint_PortalCollaborationMailboxResponseArray = Array of TMicrosoft_SharePoint_PortalCollaborationMailboxResponse;
  TMicrosoft_SharePoint_PortalCollaborationMailbox = class;
  TMicrosoft_SharePoint_PortalCollaborationMailboxArray = Array of TMicrosoft_SharePoint_PortalCollaborationMailbox;
  TMicrosoft_SharePoint_PortalCommunityModeration = class;
  TMicrosoft_SharePoint_PortalCommunityModerationArray = Array of TMicrosoft_SharePoint_PortalCommunityModeration;
  TMicrosoft_SharePoint_PortalMySiteRecommendations = class;
  TMicrosoft_SharePoint_PortalMySiteRecommendationsArray = Array of TMicrosoft_SharePoint_PortalMySiteRecommendations;
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser = class;
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser;
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks = class;
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks;
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText = class;
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText;
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility = class;
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility;
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument = class;
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument;
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe = class;
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe;
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup = class;
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup;
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson = class;
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson;
  TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites = class;
  TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray = Array of TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites;
  TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob = class;
  TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlobArray = Array of TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob;
  TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo = class;
  TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfoArray = Array of TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo;
  TSP_SiteHealthSiteHealthResult = class;
  TSP_SiteHealthSiteHealthResultArray = Array of TSP_SiteHealthSiteHealthResult;
  TSP_SiteHealthSiteHealthSummary = class;
  TSP_SiteHealthSiteHealthSummaryArray = Array of TSP_SiteHealthSiteHealthSummary;
  TMicrosoft_SharePoint_AdministrationUsageEntry = class;
  TMicrosoft_SharePoint_AdministrationUsageEntryArray = Array of TMicrosoft_SharePoint_AdministrationUsageEntry;
  TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition = class;
  TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray = Array of TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition;
  TMicrosoft_SharePoint_AdministrationSPFarm = class;
  TMicrosoft_SharePoint_AdministrationSPFarmArray = Array of TMicrosoft_SharePoint_AdministrationSPFarm;
  TMicrosoft_SharePoint_AdministrationFeatureDefinition = class;
  TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray = Array of TMicrosoft_SharePoint_AdministrationFeatureDefinition;
  TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData = class;
  TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray = Array of TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData;
  TMicrosoft_SharePoint_AdministrationSPWebApplication = class;
  TMicrosoft_SharePoint_AdministrationSPWebApplicationArray = Array of TMicrosoft_SharePoint_AdministrationSPWebApplication;
  TMicrosoft_SharePoint_AdministrationSPWebService = class;
  TMicrosoft_SharePoint_AdministrationSPWebServiceArray = Array of TMicrosoft_SharePoint_AdministrationSPWebService;
  TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService = class;
  TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray = Array of TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService;
  TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters = class;
  TSP_UI_ApplicationPagesClientPeoplePickerQueryParametersArray = Array of TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters;
  TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface = class;
  TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray = Array of TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface;
  TSP_PageInstrumentationPageImpressionClient = class;
  TSP_PageInstrumentationPageImpressionClientArray = Array of TSP_PageInstrumentationPageImpressionClient;
  TSP_PageInstrumentationClickManager = class;
  TSP_PageInstrumentationClickManagerArray = Array of TSP_PageInstrumentationClickManager;
  TSP_UtilitiesEmailProperties = class;
  TSP_UtilitiesEmailPropertiesArray = Array of TSP_UtilitiesEmailProperties;
  TSP_UtilitiesPrincipalInfo = class;
  TSP_UtilitiesPrincipalInfoArray = Array of TSP_UtilitiesPrincipalInfo;
  TSP_UtilitiesWikiPageCreationInformation = class;
  TSP_UtilitiesWikiPageCreationInformationArray = Array of TSP_UtilitiesWikiPageCreationInformation;
  TSP_UtilitiesMarketplaceUtilities = class;
  TSP_UtilitiesMarketplaceUtilitiesArray = Array of TSP_UtilitiesMarketplaceUtilities;
  TSP_UtilitiesUtility = class;
  TSP_UtilitiesUtilityArray = Array of TSP_UtilitiesUtility;
  TSP_WebPartsTileData = class;
  TSP_WebPartsTileDataArray = Array of TSP_WebPartsTileData;
  TSP_WebPartsLimitedWebPartManager = class;
  TSP_WebPartsLimitedWebPartManagerArray = Array of TSP_WebPartsLimitedWebPartManager;
  TSP_WebPartsWebPartDefinition = class;
  TSP_WebPartsWebPartDefinitionArray = Array of TSP_WebPartsWebPartDefinition;
  TSP_WebPartsWebPart = class;
  TSP_WebPartsWebPartArray = Array of TSP_WebPartsWebPart;
  TSP_WorkflowWorkflowAssociationCreationInformation = class;
  TSP_WorkflowWorkflowAssociationCreationInformationArray = Array of TSP_WorkflowWorkflowAssociationCreationInformation;
  TSP_WorkflowWorkflowAssociation = class;
  TSP_WorkflowWorkflowAssociationArray = Array of TSP_WorkflowWorkflowAssociation;
  TSP_WorkflowWorkflowTemplate = class;
  TSP_WorkflowWorkflowTemplateArray = Array of TSP_WorkflowWorkflowTemplate;
  TSP_WorkflowSPWorkflow = class;
  TSP_WorkflowSPWorkflowArray = Array of TSP_WorkflowSPWorkflow;
  TSP_WorkflowSPWorkflowManager = class;
  TSP_WorkflowSPWorkflowManagerArray = Array of TSP_WorkflowSPWorkflowManager;
  TSP_WorkflowSPWorkflowTask = class;
  TSP_WorkflowSPWorkflowTaskArray = Array of TSP_WorkflowSPWorkflowTask;
  TSP_SharingUserRoleAssignment = class;
  TSP_SharingUserRoleAssignmentArray = Array of TSP_SharingUserRoleAssignment;
  TSP_SharingUserSharingResult = class;
  TSP_SharingUserSharingResultArray = Array of TSP_SharingUserSharingResult;
  TSP_SharingDocumentSharingManager = class;
  TSP_SharingDocumentSharingManagerArray = Array of TSP_SharingDocumentSharingManager;
  TSP_SharingWebSharingManager = class;
  TSP_SharingWebSharingManagerArray = Array of TSP_SharingWebSharingManager;
  TSP_TaxonomyTaxonomyFieldValue = class;
  TSP_TaxonomyTaxonomyFieldValueArray = Array of TSP_TaxonomyTaxonomyFieldValue;
  TSP_TranslationTranslationItemInfo = class;
  TSP_TranslationTranslationItemInfoArray = Array of TSP_TranslationTranslationItemInfo;
  TSP_TranslationTranslationJobInfo = class;
  TSP_TranslationTranslationJobInfoArray = Array of TSP_TranslationTranslationJobInfo;
  TSP_TranslationSyncTranslator = class;
  TSP_TranslationSyncTranslatorArray = Array of TSP_TranslationSyncTranslator;
  TSP_TranslationTranslationJob = class;
  TSP_TranslationTranslationJobArray = Array of TSP_TranslationTranslationJob;
  TSP_TranslationTranslationJobStatus = class;
  TSP_TranslationTranslationJobStatusArray = Array of TSP_TranslationTranslationJobStatus;
  TSP_TranslationVariationsTranslationTimerJob = class;
  TSP_TranslationVariationsTranslationTimerJobArray = Array of TSP_TranslationVariationsTranslationTimerJob;
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate = class;
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateArray = Array of TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate;
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection = class;
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray = Array of TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection;
  TMicrosoft_Online_AppData_AccessAccessApp = class;
  TMicrosoft_Online_AppData_AccessAccessAppArray = Array of TMicrosoft_Online_AppData_AccessAccessApp;
  TSP_WorkManagement_OMBaseSession = class;
  TSP_WorkManagement_OMBaseSessionArray = Array of TSP_WorkManagement_OMBaseSession;
  TSP_WorkManagement_OMBooleanCriterion = class;
  TSP_WorkManagement_OMBooleanCriterionArray = Array of TSP_WorkManagement_OMBooleanCriterion;
  TSP_WorkManagement_OMCalloutInfo = class;
  TSP_WorkManagement_OMCalloutInfoArray = Array of TSP_WorkManagement_OMCalloutInfo;
  TSP_WorkManagement_OMCreateRefreshJobResult = class;
  TSP_WorkManagement_OMCreateRefreshJobResultArray = Array of TSP_WorkManagement_OMCreateRefreshJobResult;
  TSP_WorkManagement_OMCustomAttributeFilter = class;
  TSP_WorkManagement_OMCustomAttributeFilterArray = Array of TSP_WorkManagement_OMCustomAttributeFilter;
  TSP_WorkManagement_OMDashboardScriptExtensionInfo = class;
  TSP_WorkManagement_OMDashboardScriptExtensionInfoArray = Array of TSP_WorkManagement_OMDashboardScriptExtensionInfo;
  TSP_WorkManagement_OMDateRangeCriterion = class;
  TSP_WorkManagement_OMDateRangeCriterionArray = Array of TSP_WorkManagement_OMDateRangeCriterion;
  TSP_WorkManagement_OMExchangeUserSyncState = class;
  TSP_WorkManagement_OMExchangeUserSyncStateArray = Array of TSP_WorkManagement_OMExchangeUserSyncState;
  TSP_WorkManagement_OMLocation = class;
  TSP_WorkManagement_OMLocationArray = Array of TSP_WorkManagement_OMLocation;
  TSP_WorkManagement_OMLocationDisplaySetting = class;
  TSP_WorkManagement_OMLocationDisplaySettingArray = Array of TSP_WorkManagement_OMLocationDisplaySetting;
  TSP_WorkManagement_OMLocationFilter = class;
  TSP_WorkManagement_OMLocationFilterArray = Array of TSP_WorkManagement_OMLocationFilter;
  TSP_WorkManagement_OMTask = class;
  TSP_WorkManagement_OMTaskArray = Array of TSP_WorkManagement_OMTask;
  TSP_WorkManagement_OMLocationOrientedSortableSession = class;
  TSP_WorkManagement_OMLocationOrientedSortableSessionArray = Array of TSP_WorkManagement_OMLocationOrientedSortableSession;
  TSP_WorkManagement_OMLocationOrientedUserOrderedSession = class;
  TSP_WorkManagement_OMLocationOrientedUserOrderedSessionArray = Array of TSP_WorkManagement_OMLocationOrientedUserOrderedSession;
  TSP_WorkManagement_OMLocationUpdateResult = class;
  TSP_WorkManagement_OMLocationUpdateResultArray = Array of TSP_WorkManagement_OMLocationUpdateResult;
  TSP_WorkManagement_OMNameCriterion = class;
  TSP_WorkManagement_OMNameCriterionArray = Array of TSP_WorkManagement_OMNameCriterion;
  TSP_WorkManagement_OMNonTaskDataReadResult = class;
  TSP_WorkManagement_OMNonTaskDataReadResultArray = Array of TSP_WorkManagement_OMNonTaskDataReadResult;
  TSP_WorkManagement_OMPersistedProperties = class;
  TSP_WorkManagement_OMPersistedPropertiesArray = Array of TSP_WorkManagement_OMPersistedProperties;
  TSP_WorkManagement_OMRefreshHistory = class;
  TSP_WorkManagement_OMRefreshHistoryArray = Array of TSP_WorkManagement_OMRefreshHistory;
  TSP_WorkManagement_OMRefreshResult = class;
  TSP_WorkManagement_OMRefreshResultArray = Array of TSP_WorkManagement_OMRefreshResult;
  TSP_WorkManagement_OMProviderRefreshStatus = class;
  TSP_WorkManagement_OMProviderRefreshStatusArray = Array of TSP_WorkManagement_OMProviderRefreshStatus;
  TSP_WorkManagement_OMUserSettings = class;
  TSP_WorkManagement_OMUserSettingsArray = Array of TSP_WorkManagement_OMUserSettings;
  TSP_WorkManagement_OMOrderInfo = class;
  TSP_WorkManagement_OMOrderInfoArray = Array of TSP_WorkManagement_OMOrderInfo;
  TSP_WorkManagement_OMProviderErrorInfo = class;
  TSP_WorkManagement_OMProviderErrorInfoArray = Array of TSP_WorkManagement_OMProviderErrorInfo;
  TSP_WorkManagement_OMRefreshHealthInfo = class;
  TSP_WorkManagement_OMRefreshHealthInfoArray = Array of TSP_WorkManagement_OMRefreshHealthInfo;
  TSP_WorkManagement_OMSortableSessionManager = class;
  TSP_WorkManagement_OMSortableSessionManagerArray = Array of TSP_WorkManagement_OMSortableSessionManager;
  TSP_WorkManagement_OMSortableSession = class;
  TSP_WorkManagement_OMSortableSessionArray = Array of TSP_WorkManagement_OMSortableSession;
  TSP_WorkManagement_OMSortableTaskQuery = class;
  TSP_WorkManagement_OMSortableTaskQueryArray = Array of TSP_WorkManagement_OMSortableTaskQuery;
  TSP_WorkManagement_OMTaskQuery = class;
  TSP_WorkManagement_OMTaskQueryArray = Array of TSP_WorkManagement_OMTaskQuery;
  TSP_WorkManagement_OMTaskFilter = class;
  TSP_WorkManagement_OMTaskFilterArray = Array of TSP_WorkManagement_OMTaskFilter;
  TSP_WorkManagement_OMTaskQueryByLocationResult = class;
  TSP_WorkManagement_OMTaskQueryByLocationResultArray = Array of TSP_WorkManagement_OMTaskQueryByLocationResult;
  TSP_WorkManagement_OMTaskQueryResult = class;
  TSP_WorkManagement_OMTaskQueryResultArray = Array of TSP_WorkManagement_OMTaskQueryResult;
  TSP_WorkManagement_OMTaskRefreshResult = class;
  TSP_WorkManagement_OMTaskRefreshResultArray = Array of TSP_WorkManagement_OMTaskRefreshResult;
  TSP_WorkManagement_OMTaskWriteResult = class;
  TSP_WorkManagement_OMTaskWriteResultArray = Array of TSP_WorkManagement_OMTaskWriteResult;
  TSP_WorkManagement_OMUserOrderedSessionManager = class;
  TSP_WorkManagement_OMUserOrderedSessionManagerArray = Array of TSP_WorkManagement_OMUserOrderedSessionManager;
  TSP_WorkManagement_OMUserOrderedSession = class;
  TSP_WorkManagement_OMUserOrderedSessionArray = Array of TSP_WorkManagement_OMUserOrderedSession;
  TSP_WorkManagement_OMUserSettingsManager = class;
  TSP_WorkManagement_OMUserSettingsManagerArray = Array of TSP_WorkManagement_OMUserSettingsManager;
  TSP_WorkManagement_OMViewSelectionInfo = class;
  TSP_WorkManagement_OMViewSelectionInfoArray = Array of TSP_WorkManagement_OMViewSelectionInfo;
  TMicrosoft_AppServicesApp = class;
  TMicrosoft_AppServicesAppArray = Array of TMicrosoft_AppServicesApp;
  TMicrosoft_AppServicesAppStore = class;
  TMicrosoft_AppServicesAppStoreArray = Array of TMicrosoft_AppServicesAppStore;
  TSP_CompliancePolicyPolicyEvaluationInfo = class;
  TSP_CompliancePolicyPolicyEvaluationInfoArray = Array of TSP_CompliancePolicyPolicyEvaluationInfo;
  TSP_CompliancePolicySPPolicyStoreProxy = class;
  TSP_CompliancePolicySPPolicyStoreProxyArray = Array of TSP_CompliancePolicySPPolicyStoreProxy;
  TSPO_IdentitySPOIdentityHelper = class;
  TSPO_IdentitySPOIdentityHelperArray = Array of TSPO_IdentitySPOIdentityHelper;
  TOBA_Server_ServerWrapperDiagnostics = class;
  TOBA_Server_ServerWrapperDiagnosticsArray = Array of TOBA_Server_ServerWrapperDiagnostics;
  TOBA_Server_ServerWrapperReporting = class;
  TOBA_Server_ServerWrapperReportingArray = Array of TOBA_Server_ServerWrapperReporting;
  TOBA_Server_ServerWrapperTaskflow = class;
  TOBA_Server_ServerWrapperTaskflowArray = Array of TOBA_Server_ServerWrapperTaskflow;
  TSP_WorkflowServicesWorkflowDefinition = class;
  TSP_WorkflowServicesWorkflowDefinitionArray = Array of TSP_WorkflowServicesWorkflowDefinition;
  TSP_WorkflowServicesWorkflowDeploymentService = class;
  TSP_WorkflowServicesWorkflowDeploymentServiceArray = Array of TSP_WorkflowServicesWorkflowDeploymentService;
  TSP_WorkflowServicesWorkflowInstance = class;
  TSP_WorkflowServicesWorkflowInstanceArray = Array of TSP_WorkflowServicesWorkflowInstance;
  TSP_WorkflowServicesWorkflowInstanceService = class;
  TSP_WorkflowServicesWorkflowInstanceServiceArray = Array of TSP_WorkflowServicesWorkflowInstanceService;
  TSP_WorkflowServicesInteropService = class;
  TSP_WorkflowServicesInteropServiceArray = Array of TSP_WorkflowServicesInteropService;
  TSP_WorkflowServicesWorkflowServicesManager = class;
  TSP_WorkflowServicesWorkflowServicesManagerArray = Array of TSP_WorkflowServicesWorkflowServicesManager;
  TSP_WorkflowServicesWorkflowSubscription = class;
  TSP_WorkflowServicesWorkflowSubscriptionArray = Array of TSP_WorkflowServicesWorkflowSubscription;
  TSP_WorkflowServicesWorkflowSubscriptionService = class;
  TSP_WorkflowServicesWorkflowSubscriptionServiceArray = Array of TSP_WorkflowServicesWorkflowSubscriptionService;
  TSP_WorkflowServicesWorkflowMessagingService = class;
  TSP_WorkflowServicesWorkflowMessagingServiceArray = Array of TSP_WorkflowServicesWorkflowMessagingService;
  TMicrosoft_Office_Server_ReputationModelReputation = class;
  TMicrosoft_Office_Server_ReputationModelReputationArray = Array of TMicrosoft_Office_Server_ReputationModelReputation;
  TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog = class;
  TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray = Array of TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog;
  TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings = class;
  TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray = Array of TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings;
  TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField = class;
  TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray = Array of TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField;
  TMicrosoft_Office_SecureStoreService_ServerTargetApplication = class;
  TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray = Array of TMicrosoft_Office_SecureStoreService_ServerTargetApplication;
  TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo = class;
  TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray = Array of TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo;
  TMicrosoft_SharePoint_Flighting_RuntimeSPFlight = class;
  TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray = Array of TMicrosoft_SharePoint_Flighting_RuntimeSPFlight;
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase = class;
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray = Array of TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase;
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory = class;
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray = Array of TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory;
  TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings = class;
  TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray = Array of TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings;
  TMicrosoft_SharePoint_Portal_WebControlsRecentDocument = class;
  TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray = Array of TMicrosoft_SharePoint_Portal_WebControlsRecentDocument;
  TSP_BusinessData_RuntimeEntityIdentity = class;
  TSP_BusinessData_RuntimeEntityIdentityArray = Array of TSP_BusinessData_RuntimeEntityIdentity;
  TSP_BusinessData_RuntimeNotificationCallback = class;
  TSP_BusinessData_RuntimeNotificationCallbackArray = Array of TSP_BusinessData_RuntimeNotificationCallback;
  TSP_BusinessData_RuntimeSubscription = class;
  TSP_BusinessData_RuntimeSubscriptionArray = Array of TSP_BusinessData_RuntimeSubscription;
  TSP_BusinessData_RuntimeEntityInstance = class;
  TSP_BusinessData_RuntimeEntityInstanceArray = Array of TSP_BusinessData_RuntimeEntityInstance;
  TSP_BusinessData_RuntimeEntityFieldValueDictionary = class;
  TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray = Array of TSP_BusinessData_RuntimeEntityFieldValueDictionary;
  TSP_BusinessDataEntityField = class;
  TSP_BusinessDataEntityFieldArray = Array of TSP_BusinessDataEntityField;
  TSP_BusinessDataFilter = class;
  TSP_BusinessDataFilterArray = Array of TSP_BusinessDataFilter;
  TSP_BusinessDataEntityIdentifier = class;
  TSP_BusinessDataEntityIdentifierArray = Array of TSP_BusinessDataEntityIdentifier;
  TSP_BusinessDataLobSystemInstance = class;
  TSP_BusinessDataLobSystemInstanceArray = Array of TSP_BusinessDataLobSystemInstance;
  TSP_BusinessDataTypeDescriptor = class;
  TSP_BusinessDataTypeDescriptorArray = Array of TSP_BusinessDataTypeDescriptor;
  TSP_BusinessDataEntity = class;
  TSP_BusinessDataEntityArray = Array of TSP_BusinessDataEntity;
  TSP_BusinessDataLobSystem = class;
  TSP_BusinessDataLobSystemArray = Array of TSP_BusinessDataLobSystem;
  TSP_BusinessDataMethodExecutionResult = class;
  TSP_BusinessDataMethodExecutionResultArray = Array of TSP_BusinessDataMethodExecutionResult;
  TSP_BusinessDataEntityView = class;
  TSP_BusinessDataEntityViewArray = Array of TSP_BusinessDataEntityView;
  TSP_BusinessDataAppBdcCatalog = class;
  TSP_BusinessDataAppBdcCatalogArray = Array of TSP_BusinessDataAppBdcCatalog;
  TSP_AnalyticsAnalyticsUsageEntry = class;
  TSP_AnalyticsAnalyticsUsageEntryArray = Array of TSP_AnalyticsAnalyticsUsageEntry;
  TSP_BusinessData_InfrastructureExternalSubscriptionStore = class;
  TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray = Array of TSP_BusinessData_InfrastructureExternalSubscriptionStore;
  TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest = class;
  TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray = Array of TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest;
  TMicrosoft_SharePoint_PackagingAppDetails = class;
  TMicrosoft_SharePoint_PackagingAppDetailsArray = Array of TMicrosoft_SharePoint_PackagingAppDetails;
  TMicrosoft_SharePoint_PackagingAppIconInfo = class;
  TMicrosoft_SharePoint_PackagingAppIconInfoArray = Array of TMicrosoft_SharePoint_PackagingAppIconInfo;
  TSP_OAuthNativeClient = class;
  TSP_OAuthNativeClientArray = Array of TSP_OAuthNativeClient;
  TMicrosoft_SharePoint_WebControlsModuleLink = class;
  TMicrosoft_SharePoint_WebControlsModuleLinkArray = Array of TMicrosoft_SharePoint_WebControlsModuleLink;
  TMicrosoft_SharePoint_WebControlsResourceManifestInformation = class;
  TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray = Array of TMicrosoft_SharePoint_WebControlsResourceManifestInformation;
  TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin = class;
  TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray = Array of TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin;
  TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter = class;
  TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray = Array of TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter;
  TMicrosoft_Online_SharePoint_TenantManagementExternalUser = class;
  TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray = Array of TMicrosoft_Online_SharePoint_TenantManagementExternalUser;
  TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults = class;
  TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray = Array of TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults;
  TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant = class;
  TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray = Array of TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant;
  TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults = class;
  TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray = Array of TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults;
  TSP_DataOData__x005f_catalogs_x002f_appdataItem = class;
  TSP_DataOData__x005f_catalogs_x002f_appdataItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_appdataItem;
  TSP_DataUserInfoItem = class;
  TSP_DataUserInfoItemArray = Array of TSP_DataUserInfoItem;
  TSP_DataOData__x005f_catalogs_x002f_designItem = class;
  TSP_DataOData__x005f_catalogs_x002f_designItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_designItem;
  TSP_DataContentTypeSyncLogListItem = class;
  TSP_DataContentTypeSyncLogListItemArray = Array of TSP_DataContentTypeSyncLogListItem;
  TSP_DataIWConvertedFormsItem = class;
  TSP_DataIWConvertedFormsItemArray = Array of TSP_DataIWConvertedFormsItem;
  TSP_DataDocumentsItem = class;
  TSP_DataDocumentsItemArray = Array of TSP_DataDocumentsItem;
  TSP_DataFormServerTemplatesItem = class;
  TSP_DataFormServerTemplatesItemArray = Array of TSP_DataFormServerTemplatesItem;
  TSP_DataOData__x005f_catalogs_x002f_ltItem = class;
  TSP_DataOData__x005f_catalogs_x002f_ltItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_ltItem;
  TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem = class;
  TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem;
  TSP_DataOData__x005f_catalogs_x002f_masterpageItem = class;
  TSP_DataOData__x005f_catalogs_x002f_masterpageItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_masterpageItem;
  TSP_DataPublishedFeedListItem = class;
  TSP_DataPublishedFeedListItemArray = Array of TSP_DataPublishedFeedListItem;
  TSP_DataTaxonomyHiddenListListItem = class;
  TSP_DataTaxonomyHiddenListListItemArray = Array of TSP_DataTaxonomyHiddenListListItem;
  TSP_DataSiteAssetsItem = class;
  TSP_DataSiteAssetsItemArray = Array of TSP_DataSiteAssetsItem;
  TSP_DataSocialItem = class;
  TSP_DataSocialItemArray = Array of TSP_DataSocialItem;
  TSP_DataOData__x005f_catalogs_x002f_solutionsItem = class;
  TSP_DataOData__x005f_catalogs_x002f_solutionsItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_solutionsItem;
  TSP_DataStyle_x0020_LibraryItem = class;
  TSP_DataStyle_x0020_LibraryItemArray = Array of TSP_DataStyle_x0020_LibraryItem;
  TSP_DataOData__x005f_catalogs_x002f_themeItem = class;
  TSP_DataOData__x005f_catalogs_x002f_themeItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_themeItem;
  TSP_DataOData__x005f_catalogs_x002f_wpItem = class;
  TSP_DataOData__x005f_catalogs_x002f_wpItemArray = Array of TSP_DataOData__x005f_catalogs_x002f_wpItem;
  TSPApiData = class;
  TSPApiDataArray = Array of TSPApiData;
  TSPAppsEntitySet = class;
  TSPAppsEntitySetArray = Array of TSPAppsEntitySet;
  TSPFilesEntitySet = class;
  TSPFilesEntitySetArray = Array of TSPFilesEntitySet;
  TSPListsEntitySet = class;
  TSPListsEntitySetArray = Array of TSPListsEntitySet;
  TSPMesEntitySet = class;
  TSPMesEntitySetArray = Array of TSPMesEntitySet;
  TSPSitesEntitySet = class;
  TSPSitesEntitySetArray = Array of TSPSitesEntitySet;
  TSPWebsEntitySet = class;
  TSPWebsEntitySetArray = Array of TSPWebsEntitySet;
  TSPAppStoresEntitySet = class;
  TSPAppStoresEntitySetArray = Array of TSPAppStoresEntitySet;
  TSPConnectionSettingssEntitySet = class;
  TSPConnectionSettingssEntitySetArray = Array of TSPConnectionSettingssEntitySet;
  TSPTargetApplicationsEntitySet = class;
  TSPTargetApplicationsEntitySetArray = Array of TSPTargetApplicationsEntitySet;
  TSPTargetApplicationFieldsEntitySet = class;
  TSPTargetApplicationFieldsEntitySetArray = Array of TSPTargetApplicationFieldsEntitySet;
  TSPReputationsEntitySet = class;
  TSPReputationsEntitySetArray = Array of TSPReputationsEntitySet;
  TSPSearchServicesEntitySet = class;
  TSPSearchServicesEntitySetArray = Array of TSPSearchServicesEntitySet;
  TSPApps1EntitySet = class;
  TSPApps1EntitySetArray = Array of TSPApps1EntitySet;
  TSPPointPublishingAdminsEntitySet = class;
  TSPPointPublishingAdminsEntitySetArray = Array of TSPPointPublishingAdminsEntitySet;
  TSPDDIAdaptersEntitySet = class;
  TSPDDIAdaptersEntitySetArray = Array of TSPDDIAdaptersEntitySet;
  TSPSPOTenantWebTemplateCollectionsEntitySet = class;
  TSPSPOTenantWebTemplateCollectionsEntitySetArray = Array of TSPSPOTenantWebTemplateCollectionsEntitySet;
  TSPExternalUsersEntitySet = class;
  TSPExternalUsersEntitySetArray = Array of TSPExternalUsersEntitySet;
  TSPGetExternalUsersResultssEntitySet = class;
  TSPGetExternalUsersResultssEntitySetArray = Array of TSPGetExternalUsersResultssEntitySet;
  TSPOffice365TenantsEntitySet = class;
  TSPOffice365TenantsEntitySetArray = Array of TSPOffice365TenantsEntitySet;
  TSPRemoveExternalUsersResultssEntitySet = class;
  TSPRemoveExternalUsersResultssEntitySetArray = Array of TSPRemoveExternalUsersResultssEntitySet;
  TSPFeatureDefinitionsEntitySet = class;
  TSPFeatureDefinitionsEntitySetArray = Array of TSPFeatureDefinitionsEntitySet;
  TSPSPAnalyticsUsageServicesEntitySet = class;
  TSPSPAnalyticsUsageServicesEntitySetArray = Array of TSPSPAnalyticsUsageServicesEntitySet;
  TSPSPAppStateQueryJobDefinitionsEntitySet = class;
  TSPSPAppStateQueryJobDefinitionsEntitySetArray = Array of TSPSPAppStateQueryJobDefinitionsEntitySet;
  TSPSPFarmsEntitySet = class;
  TSPSPFarmsEntitySetArray = Array of TSPSPFarmsEntitySet;
  TSPSPTenantAppInstanceDatasEntitySet = class;
  TSPSPTenantAppInstanceDatasEntitySetArray = Array of TSPSPTenantAppInstanceDatasEntitySet;
  TSPSPWebApplicationsEntitySet = class;
  TSPSPWebApplicationsEntitySetArray = Array of TSPSPWebApplicationsEntitySet;
  TSPSPWebServicesEntitySet = class;
  TSPSPWebServicesEntitySetArray = Array of TSPSPWebServicesEntitySet;
  TSPSPAppPrincipalInfosEntitySet = class;
  TSPSPAppPrincipalInfosEntitySetArray = Array of TSPSPAppPrincipalInfosEntitySet;
  TSPDocumentCrawlLogsEntitySet = class;
  TSPDocumentCrawlLogsEntitySetArray = Array of TSPDocumentCrawlLogsEntitySet;
  TSPSignalStoresEntitySet = class;
  TSPSignalStoresEntitySetArray = Array of TSPSignalStoresEntitySet;
  TSPQueryPersonalizationDatasEntitySet = class;
  TSPQueryPersonalizationDatasEntitySetArray = Array of TSPQueryPersonalizationDatasEntitySet;
  TSPRankingLabelingsEntitySet = class;
  TSPRankingLabelingsEntitySetArray = Array of TSPRankingLabelingsEntitySet;
  TSPReorderingRuleCollectionsEntitySet = class;
  TSPReorderingRuleCollectionsEntitySetArray = Array of TSPReorderingRuleCollectionsEntitySet;
  TSPSortCollectionsEntitySet = class;
  TSPSortCollectionsEntitySetArray = Array of TSPSortCollectionsEntitySet;
  TSPStringCollectionsEntitySet = class;
  TSPStringCollectionsEntitySetArray = Array of TSPStringCollectionsEntitySet;
  TSPSPFlightsEntitySet = class;
  TSPSPFlightsEntitySetArray = Array of TSPSPFlightsEntitySet;
  TSPSPCorporateCuratedGallerySettingsBasesEntitySet = class;
  TSPSPCorporateCuratedGallerySettingsBasesEntitySetArray = Array of TSPSPCorporateCuratedGallerySettingsBasesEntitySet;
  TSPSPCorporateCuratedGallerySettingsFactorysEntitySet = class;
  TSPSPCorporateCuratedGallerySettingsFactorysEntitySetArray = Array of TSPSPCorporateCuratedGallerySettingsFactorysEntitySet;
  TSPSPMarketplaceSettingssEntitySet = class;
  TSPSPMarketplaceSettingssEntitySetArray = Array of TSPSPMarketplaceSettingssEntitySet;
  TSPNavigationServiceRestsEntitySet = class;
  TSPNavigationServiceRestsEntitySetArray = Array of TSPNavigationServiceRestsEntitySet;
  TSPAppDetailssEntitySet = class;
  TSPAppDetailssEntitySetArray = Array of TSPAppDetailssEntitySet;
  TSPAppIconInfosEntitySet = class;
  TSPAppIconInfosEntitySetArray = Array of TSPAppIconInfosEntitySet;
  TSPCollaborationMailboxsEntitySet = class;
  TSPCollaborationMailboxsEntitySetArray = Array of TSPCollaborationMailboxsEntitySet;
  TSPCommunityModerationsEntitySet = class;
  TSPCommunityModerationsEntitySetArray = Array of TSPCommunityModerationsEntitySet;
  TSPMySiteRecommendationssEntitySet = class;
  TSPMySiteRecommendationssEntitySetArray = Array of TSPMySiteRecommendationssEntitySet;
  TSPDocumentsSharedWithGroupsEntitySet = class;
  TSPDocumentsSharedWithGroupsEntitySetArray = Array of TSPDocumentsSharedWithGroupsEntitySet;
  TSPDocumentsSharedWithMesEntitySet = class;
  TSPDocumentsSharedWithMesEntitySetArray = Array of TSPDocumentsSharedWithMesEntitySet;
  TSPDocumentsSharedWithPersonsEntitySet = class;
  TSPDocumentsSharedWithPersonsEntitySetArray = Array of TSPDocumentsSharedWithPersonsEntitySet;
  TSPMySiteDismissStatusTextsEntitySet = class;
  TSPMySiteDismissStatusTextsEntitySetArray = Array of TSPMySiteDismissStatusTextsEntitySet;
  TSPMySiteDocumentMoveUtilitysEntitySet = class;
  TSPMySiteDocumentMoveUtilitysEntitySetArray = Array of TSPMySiteDocumentMoveUtilitysEntitySet;
  TSPMySiteLinkssEntitySet = class;
  TSPMySiteLinkssEntitySetArray = Array of TSPMySiteLinkssEntitySet;
  TSPPromotedSitessEntitySet = class;
  TSPPromotedSitessEntitySetArray = Array of TSPPromotedSitessEntitySet;
  TSPSharedWithMeDocumentsEntitySet = class;
  TSPSharedWithMeDocumentsEntitySetArray = Array of TSPSharedWithMeDocumentsEntitySet;
  TSPRecentDocumentsEntitySet = class;
  TSPRecentDocumentsEntitySetArray = Array of TSPRecentDocumentsEntitySet;
  TSPModuleLinksEntitySet = class;
  TSPModuleLinksEntitySetArray = Array of TSPModuleLinksEntitySet;
  TSPResourceManifestInformationsEntitySet = class;
  TSPResourceManifestInformationsEntitySetArray = Array of TSPResourceManifestInformationsEntitySet;
  TSPWacApisEntitySet = class;
  TSPWacApisEntitySetArray = Array of TSPWacApisEntitySet;
  TSPEntityItemsEntitySet = class;
  TSPEntityItemsEntitySetArray = Array of TSPEntityItemsEntitySet;
  TSPEntityTypesEntitySet = class;
  TSPEntityTypesEntitySetArray = Array of TSPEntityTypesEntitySet;
  TSPEntityTypeBasesEntitySet = class;
  TSPEntityTypeBasesEntitySetArray = Array of TSPEntityTypeBasesEntitySet;
  TSPExternalEntityTypesEntitySet = class;
  TSPExternalEntityTypesEntitySetArray = Array of TSPExternalEntityTypesEntitySet;
  TSPFieldsEntitySet = class;
  TSPFieldsEntitySetArray = Array of TSPFieldsEntitySet;
  TSPODataStoreContextsEntitySet = class;
  TSPODataStoreContextsEntitySetArray = Array of TSPODataStoreContextsEntitySet;
  TSPRequestContextsEntitySet = class;
  TSPRequestContextsEntitySetArray = Array of TSPRequestContextsEntitySet;
  TSPSqlStoreContextsEntitySet = class;
  TSPSqlStoreContextsEntitySetArray = Array of TSPSqlStoreContextsEntitySet;
  TSPStoreContextBasesEntitySet = class;
  TSPStoreContextBasesEntitySetArray = Array of TSPStoreContextBasesEntitySet;
  TSPFiles1EntitySet = class;
  TSPFiles1EntitySetArray = Array of TSPFiles1EntitySet;
  TSPFileServicesEntitySet = class;
  TSPFileServicesEntitySetArray = Array of TSPFileServicesEntitySet;
  TSPFoldersEntitySet = class;
  TSPFoldersEntitySetArray = Array of TSPFoldersEntitySet;
  TSPMeFileServicesEntitySet = class;
  TSPMeFileServicesEntitySetArray = Array of TSPMeFileServicesEntitySet;
  TSPDiagnosticssEntitySet = class;
  TSPDiagnosticssEntitySetArray = Array of TSPDiagnosticssEntitySet;
  TSPReportingsEntitySet = class;
  TSPReportingsEntitySetArray = Array of TSPReportingsEntitySet;
  TSPTaskflowsEntitySet = class;
  TSPTaskflowsEntitySetArray = Array of TSPTaskflowsEntitySet;
  TSPAssignmentsEntitySet = class;
  TSPAssignmentsEntitySetArray = Array of TSPAssignmentsEntitySet;
  TSPBaseCalendarExceptionsEntitySet = class;
  TSPBaseCalendarExceptionsEntitySetArray = Array of TSPBaseCalendarExceptionsEntitySet;
  TSPCalendarsEntitySet = class;
  TSPCalendarsEntitySetArray = Array of TSPCalendarsEntitySet;
  TSPCalendarExceptionsEntitySet = class;
  TSPCalendarExceptionsEntitySetArray = Array of TSPCalendarExceptionsEntitySet;
  TSPCustomFieldsEntitySet = class;
  TSPCustomFieldsEntitySetArray = Array of TSPCustomFieldsEntitySet;
  TSPDraftAssignmentsEntitySet = class;
  TSPDraftAssignmentsEntitySetArray = Array of TSPDraftAssignmentsEntitySet;
  TSPDraftProjectsEntitySet = class;
  TSPDraftProjectsEntitySetArray = Array of TSPDraftProjectsEntitySet;
  TSPDraftProjectResourcesEntitySet = class;
  TSPDraftProjectResourcesEntitySetArray = Array of TSPDraftProjectResourcesEntitySet;
  TSPDraftTasksEntitySet = class;
  TSPDraftTasksEntitySetArray = Array of TSPDraftTasksEntitySet;
  TSPDraftTaskLinksEntitySet = class;
  TSPDraftTaskLinksEntitySetArray = Array of TSPDraftTaskLinksEntitySet;
  TSPEnterpriseProjectTypesEntitySet = class;
  TSPEnterpriseProjectTypesEntitySetArray = Array of TSPEnterpriseProjectTypesEntitySet;
  TSPEnterpriseResourcesEntitySet = class;
  TSPEnterpriseResourcesEntitySetArray = Array of TSPEnterpriseResourcesEntitySet;
  TSPEntityTypes1EntitySet = class;
  TSPEntityTypes1EntitySetArray = Array of TSPEntityTypes1EntitySet;
  TSPEntityTypessEntitySet = class;
  TSPEntityTypessEntitySetArray = Array of TSPEntityTypessEntitySet;
  TSPEventsEntitySet = class;
  TSPEventsEntitySetArray = Array of TSPEventsEntitySet;
  TSPEventHandlersEntitySet = class;
  TSPEventHandlersEntitySetArray = Array of TSPEventHandlersEntitySet;
  TSPLookupCostsEntitySet = class;
  TSPLookupCostsEntitySetArray = Array of TSPLookupCostsEntitySet;
  TSPLookupDatesEntitySet = class;
  TSPLookupDatesEntitySetArray = Array of TSPLookupDatesEntitySet;
  TSPLookupDurationsEntitySet = class;
  TSPLookupDurationsEntitySetArray = Array of TSPLookupDurationsEntitySet;
  TSPLookupEntrysEntitySet = class;
  TSPLookupEntrysEntitySetArray = Array of TSPLookupEntrysEntitySet;
  TSPLookupNumbersEntitySet = class;
  TSPLookupNumbersEntitySetArray = Array of TSPLookupNumbersEntitySet;
  TSPLookupTablesEntitySet = class;
  TSPLookupTablesEntitySetArray = Array of TSPLookupTablesEntitySet;
  TSPLookupTablessEntitySet = class;
  TSPLookupTablessEntitySetArray = Array of TSPLookupTablessEntitySet;
  TSPLookupTextsEntitySet = class;
  TSPLookupTextsEntitySetArray = Array of TSPLookupTextsEntitySet;
  TSPPhasesEntitySet = class;
  TSPPhasesEntitySetArray = Array of TSPPhasesEntitySet;
  TSPPlanAssignmentsEntitySet = class;
  TSPPlanAssignmentsEntitySetArray = Array of TSPPlanAssignmentsEntitySet;
  TSPPlanAssignmentIntervalsEntitySet = class;
  TSPPlanAssignmentIntervalsEntitySetArray = Array of TSPPlanAssignmentIntervalsEntitySet;
  TSPProjectsEntitySet = class;
  TSPProjectsEntitySetArray = Array of TSPProjectsEntitySet;
  TSPProjectDetailPagesEntitySet = class;
  TSPProjectDetailPagesEntitySetArray = Array of TSPProjectDetailPagesEntitySet;
  TSPProjectResourcesEntitySet = class;
  TSPProjectResourcesEntitySetArray = Array of TSPProjectResourcesEntitySet;
  TSPProjectServersEntitySet = class;
  TSPProjectServersEntitySetArray = Array of TSPProjectServersEntitySet;
  TSPProjectServerDatasEntitySet = class;
  TSPProjectServerDatasEntitySetArray = Array of TSPProjectServerDatasEntitySet;
  TSPPublishedAssignmentsEntitySet = class;
  TSPPublishedAssignmentsEntitySetArray = Array of TSPPublishedAssignmentsEntitySet;
  TSPPublishedProjectsEntitySet = class;
  TSPPublishedProjectsEntitySetArray = Array of TSPPublishedProjectsEntitySet;
  TSPPublishedProjectResourcesEntitySet = class;
  TSPPublishedProjectResourcesEntitySetArray = Array of TSPPublishedProjectResourcesEntitySet;
  TSPPublishedTasksEntitySet = class;
  TSPPublishedTasksEntitySetArray = Array of TSPPublishedTasksEntitySet;
  TSPPublishedTaskLinksEntitySet = class;
  TSPPublishedTaskLinksEntitySetArray = Array of TSPPublishedTaskLinksEntitySet;
  TSPQueueJobsEntitySet = class;
  TSPQueueJobsEntitySetArray = Array of TSPQueueJobsEntitySet;
  TSPResourceCalendarExceptionsEntitySet = class;
  TSPResourceCalendarExceptionsEntitySetArray = Array of TSPResourceCalendarExceptionsEntitySet;
  TSPResourcePlansEntitySet = class;
  TSPResourcePlansEntitySetArray = Array of TSPResourcePlansEntitySet;
  TSPServiceStatussEntitySet = class;
  TSPServiceStatussEntitySetArray = Array of TSPServiceStatussEntitySet;
  TSPStagesEntitySet = class;
  TSPStagesEntitySetArray = Array of TSPStagesEntitySet;
  TSPStageCustomFieldsEntitySet = class;
  TSPStageCustomFieldsEntitySetArray = Array of TSPStageCustomFieldsEntitySet;
  TSPStageDetailPagesEntitySet = class;
  TSPStageDetailPagesEntitySetArray = Array of TSPStageDetailPagesEntitySet;
  TSPStatusAssignmentsEntitySet = class;
  TSPStatusAssignmentsEntitySetArray = Array of TSPStatusAssignmentsEntitySet;
  TSPStatusTasksEntitySet = class;
  TSPStatusTasksEntitySetArray = Array of TSPStatusTasksEntitySet;
  TSPTasksEntitySet = class;
  TSPTasksEntitySetArray = Array of TSPTasksEntitySet;
  TSPTaskLinksEntitySet = class;
  TSPTaskLinksEntitySetArray = Array of TSPTaskLinksEntitySet;
  TSPTaskServiceOdataEndpointsEntitySet = class;
  TSPTaskServiceOdataEndpointsEntitySetArray = Array of TSPTaskServiceOdataEndpointsEntitySet;
  TSPTimePhasesEntitySet = class;
  TSPTimePhasesEntitySetArray = Array of TSPTimePhasesEntitySet;
  TSPTimeSheetsEntitySet = class;
  TSPTimeSheetsEntitySetArray = Array of TSPTimeSheetsEntitySet;
  TSPTimeSheetLinesEntitySet = class;
  TSPTimeSheetLinesEntitySetArray = Array of TSPTimeSheetLinesEntitySet;
  TSPTimeSheetPeriodsEntitySet = class;
  TSPTimeSheetPeriodsEntitySetArray = Array of TSPTimeSheetPeriodsEntitySet;
  TSPTimeSheetWorksEntitySet = class;
  TSPTimeSheetWorksEntitySetArray = Array of TSPTimeSheetWorksEntitySet;
  TSPWorkflowActivitiessEntitySet = class;
  TSPWorkflowActivitiessEntitySetArray = Array of TSPWorkflowActivitiessEntitySet;
  TSPWorkflowDesignersEntitySet = class;
  TSPWorkflowDesignersEntitySetArray = Array of TSPWorkflowDesignersEntitySet;
  TSPWorkflowDesignerFieldsEntitySet = class;
  TSPWorkflowDesignerFieldsEntitySetArray = Array of TSPWorkflowDesignerFieldsEntitySet;
  TSPAccessRequestssEntitySet = class;
  TSPAccessRequestssEntitySetArray = Array of TSPAccessRequestssEntitySet;
  TSPAlternateUrlsEntitySet = class;
  TSPAlternateUrlsEntitySetArray = Array of TSPAlternateUrlsEntitySet;
  TSPAnalyticsUsageEntrysEntitySet = class;
  TSPAnalyticsUsageEntrysEntitySetArray = Array of TSPAnalyticsUsageEntrysEntitySet;
  TSPApiMetadatasEntitySet = class;
  TSPApiMetadatasEntitySetArray = Array of TSPApiMetadatasEntitySet;
  TSPApps12EntitySet = class;
  TSPApps12EntitySetArray = Array of TSPApps12EntitySet;
  TSPAppCatalogsEntitySet = class;
  TSPAppCatalogsEntitySetArray = Array of TSPAppCatalogsEntitySet;
  TSPAppContextSitesEntitySet = class;
  TSPAppContextSitesEntitySetArray = Array of TSPAppContextSitesEntitySet;
  TSPAppInstancesEntitySet = class;
  TSPAppInstancesEntitySetArray = Array of TSPAppInstancesEntitySet;
  TSPAppInstanceErrorDetailssEntitySet = class;
  TSPAppInstanceErrorDetailssEntitySetArray = Array of TSPAppInstanceErrorDetailssEntitySet;
  TSPAppTilesEntitySet = class;
  TSPAppTilesEntitySetArray = Array of TSPAppTilesEntitySet;
  TSPAttachmentsEntitySet = class;
  TSPAttachmentsEntitySetArray = Array of TSPAttachmentsEntitySet;
  TSPAuditsEntitySet = class;
  TSPAuditsEntitySetArray = Array of TSPAuditsEntitySet;
  TSPAppBdcCatalogsEntitySet = class;
  TSPAppBdcCatalogsEntitySetArray = Array of TSPAppBdcCatalogsEntitySet;
  TSPEntitysEntitySet = class;
  TSPEntitysEntitySetArray = Array of TSPEntitysEntitySet;
  TSPEntityFieldsEntitySet = class;
  TSPEntityFieldsEntitySetArray = Array of TSPEntityFieldsEntitySet;
  TSPEntityIdentifiersEntitySet = class;
  TSPEntityIdentifiersEntitySetArray = Array of TSPEntityIdentifiersEntitySet;
  TSPEntityViewsEntitySet = class;
  TSPEntityViewsEntitySetArray = Array of TSPEntityViewsEntitySet;
  TSPFiltersEntitySet = class;
  TSPFiltersEntitySetArray = Array of TSPFiltersEntitySet;
  TSPExternalSubscriptionStoresEntitySet = class;
  TSPExternalSubscriptionStoresEntitySetArray = Array of TSPExternalSubscriptionStoresEntitySet;
  TSPLobSystemsEntitySet = class;
  TSPLobSystemsEntitySetArray = Array of TSPLobSystemsEntitySet;
  TSPLobSystemInstancesEntitySet = class;
  TSPLobSystemInstancesEntitySetArray = Array of TSPLobSystemInstancesEntitySet;
  TSPMethodExecutionResultsEntitySet = class;
  TSPMethodExecutionResultsEntitySetArray = Array of TSPMethodExecutionResultsEntitySet;
  TSPEntityFieldValueDictionarysEntitySet = class;
  TSPEntityFieldValueDictionarysEntitySetArray = Array of TSPEntityFieldValueDictionarysEntitySet;
  TSPEntityIdentitysEntitySet = class;
  TSPEntityIdentitysEntitySetArray = Array of TSPEntityIdentitysEntitySet;
  TSPEntityInstancesEntitySet = class;
  TSPEntityInstancesEntitySetArray = Array of TSPEntityInstancesEntitySet;
  TSPNotificationCallbacksEntitySet = class;
  TSPNotificationCallbacksEntitySetArray = Array of TSPNotificationCallbacksEntitySet;
  TSPSubscriptionsEntitySet = class;
  TSPSubscriptionsEntitySetArray = Array of TSPSubscriptionsEntitySet;
  TSPTypeDescriptorsEntitySet = class;
  TSPTypeDescriptorsEntitySetArray = Array of TSPTypeDescriptorsEntitySet;
  TSPChangesEntitySet = class;
  TSPChangesEntitySetArray = Array of TSPChangesEntitySet;
  TSPCompatibilityRangesEntitySet = class;
  TSPCompatibilityRangesEntitySetArray = Array of TSPCompatibilityRangesEntitySet;
  TSPPolicyEvaluationInfosEntitySet = class;
  TSPPolicyEvaluationInfosEntitySetArray = Array of TSPPolicyEvaluationInfosEntitySet;
  TSPSPPolicyStoreProxysEntitySet = class;
  TSPSPPolicyStoreProxysEntitySetArray = Array of TSPSPPolicyStoreProxysEntitySet;
  TSPContentTypesEntitySet = class;
  TSPContentTypesEntitySetArray = Array of TSPContentTypesEntitySet;
  TSPCreatablesInfosEntitySet = class;
  TSPCreatablesInfosEntitySetArray = Array of TSPCreatablesInfosEntitySet;
  TSPDirectorySessionsEntitySet = class;
  TSPDirectorySessionsEntitySetArray = Array of TSPDirectorySessionsEntitySet;
  TSPGroupsEntitySet = class;
  TSPGroupsEntitySetArray = Array of TSPGroupsEntitySet;
  TSPGroupAndUserStatussEntitySet = class;
  TSPGroupAndUserStatussEntitySetArray = Array of TSPGroupAndUserStatussEntitySet;
  TSPLinkCollectionsEntitySet = class;
  TSPLinkCollectionsEntitySetArray = Array of TSPLinkCollectionsEntitySet;
  TSPMembershipResultsEntitySet = class;
  TSPMembershipResultsEntitySetArray = Array of TSPMembershipResultsEntitySet;
  TSPMembersInfosEntitySet = class;
  TSPMembersInfosEntitySetArray = Array of TSPMembersInfosEntitySet;
  TSPMyGroupsResultsEntitySet = class;
  TSPMyGroupsResultsEntitySetArray = Array of TSPMyGroupsResultsEntitySet;
  TSPPropertysEntitySet = class;
  TSPPropertysEntitySetArray = Array of TSPPropertysEntitySet;
  TSPPropertyDictionarysEntitySet = class;
  TSPPropertyDictionarysEntitySetArray = Array of TSPPropertyDictionarysEntitySet;
  TSPSharePointDirectoryProvidersEntitySet = class;
  TSPSharePointDirectoryProvidersEntitySetArray = Array of TSPSharePointDirectoryProvidersEntitySet;
  TSPSPHelpersEntitySet = class;
  TSPSPHelpersEntitySetArray = Array of TSPSPHelpersEntitySet;
  TSPUsersEntitySet = class;
  TSPUsersEntitySetArray = Array of TSPUsersEntitySet;
  TSPUserRequestSchemasEntitySet = class;
  TSPUserRequestSchemasEntitySetArray = Array of TSPUserRequestSchemasEntitySet;
  TSPDlpPolicyTipsEntitySet = class;
  TSPDlpPolicyTipsEntitySetArray = Array of TSPDlpPolicyTipsEntitySet;
  TSPEventReceiverDefinitionsEntitySet = class;
  TSPEventReceiverDefinitionsEntitySetArray = Array of TSPEventReceiverDefinitionsEntitySet;
  TSPFeaturesEntitySet = class;
  TSPFeaturesEntitySetArray = Array of TSPFeaturesEntitySet;
  TSPFields1EntitySet = class;
  TSPFields1EntitySetArray = Array of TSPFields1EntitySet;
  TSPFieldLinksEntitySet = class;
  TSPFieldLinksEntitySetArray = Array of TSPFieldLinksEntitySet;
  TSPFieldStringValuessEntitySet = class;
  TSPFieldStringValuessEntitySetArray = Array of TSPFieldStringValuessEntitySet;
  TSPFiles12EntitySet = class;
  TSPFiles12EntitySetArray = Array of TSPFiles12EntitySet;
  TSPFileVersionsEntitySet = class;
  TSPFileVersionsEntitySetArray = Array of TSPFileVersionsEntitySet;
  TSPFolders1EntitySet = class;
  TSPFolders1EntitySetArray = Array of TSPFolders1EntitySet;
  TSPFormsEntitySet = class;
  TSPFormsEntitySetArray = Array of TSPFormsEntitySet;
  TSPGroups1EntitySet = class;
  TSPGroups1EntitySetArray = Array of TSPGroups1EntitySet;
  TSPInformationRightsManagementSettingssEntitySet = class;
  TSPInformationRightsManagementSettingssEntitySetArray = Array of TSPInformationRightsManagementSettingssEntitySet;
  TSPListItemsEntitySet = class;
  TSPListItemsEntitySetArray = Array of TSPListItemsEntitySet;
  TSPListTemplatesEntitySet = class;
  TSPListTemplatesEntitySetArray = Array of TSPListTemplatesEntitySet;
  TSPMicrofeedAttachmentStoresEntitySet = class;
  TSPMicrofeedAttachmentStoresEntitySetArray = Array of TSPMicrofeedAttachmentStoresEntitySet;
  TSPMicrofeedDatasEntitySet = class;
  TSPMicrofeedDatasEntitySetArray = Array of TSPMicrofeedDatasEntitySet;
  TSPMicrofeedManagersEntitySet = class;
  TSPMicrofeedManagersEntitySetArray = Array of TSPMicrofeedManagersEntitySet;
  TSPMicrofeedPostDefinitionManagersEntitySet = class;
  TSPMicrofeedPostDefinitionManagersEntitySetArray = Array of TSPMicrofeedPostDefinitionManagersEntitySet;
  TSPMicrofeedPostOptionCollectionsEntitySet = class;
  TSPMicrofeedPostOptionCollectionsEntitySetArray = Array of TSPMicrofeedPostOptionCollectionsEntitySet;
  TSPMicrofeedStoresEntitySet = class;
  TSPMicrofeedStoresEntitySetArray = Array of TSPMicrofeedStoresEntitySet;
  TSPMountedFolderInfosEntitySet = class;
  TSPMountedFolderInfosEntitySetArray = Array of TSPMountedFolderInfosEntitySet;
  TSPMountPointsEntitySet = class;
  TSPMountPointsEntitySetArray = Array of TSPMountPointsEntitySet;
  TSPMountPointInfosEntitySet = class;
  TSPMountPointInfosEntitySetArray = Array of TSPMountPointInfosEntitySet;
  TSPMoveCopyUtilsEntitySet = class;
  TSPMoveCopyUtilsEntitySetArray = Array of TSPMoveCopyUtilsEntitySet;
  TSPNavigationsEntitySet = class;
  TSPNavigationsEntitySetArray = Array of TSPNavigationsEntitySet;
  TSPNavigationNodesEntitySet = class;
  TSPNavigationNodesEntitySetArray = Array of TSPNavigationNodesEntitySet;
  TSPNativeClientsEntitySet = class;
  TSPNativeClientsEntitySetArray = Array of TSPNativeClientsEntitySet;
  TSPObjectSharingInformationsEntitySet = class;
  TSPObjectSharingInformationsEntitySetArray = Array of TSPObjectSharingInformationsEntitySet;
  TSPObjectSharingInformationUsersEntitySet = class;
  TSPObjectSharingInformationUsersEntitySetArray = Array of TSPObjectSharingInformationUsersEntitySet;
  TSPObjectSharingSettingssEntitySet = class;
  TSPObjectSharingSettingssEntitySetArray = Array of TSPObjectSharingSettingssEntitySet;
  TSPClickManagersEntitySet = class;
  TSPClickManagersEntitySetArray = Array of TSPClickManagersEntitySet;
  TSPPickerSettingssEntitySet = class;
  TSPPickerSettingssEntitySetArray = Array of TSPPickerSettingssEntitySet;
  TSPPrincipalsEntitySet = class;
  TSPPrincipalsEntitySetArray = Array of TSPPrincipalsEntitySet;
  TSPPropertyValuessEntitySet = class;
  TSPPropertyValuessEntitySetArray = Array of TSPPropertyValuessEntitySet;
  TSPPersonMagazinesEntitySet = class;
  TSPPersonMagazinesEntitySetArray = Array of TSPPersonMagazinesEntitySet;
  TSPPointPublishingDocPropssEntitySet = class;
  TSPPointPublishingDocPropssEntitySetArray = Array of TSPPointPublishingDocPropssEntitySet;
  TSPPointPublishingMagazinePropssEntitySet = class;
  TSPPointPublishingMagazinePropssEntitySetArray = Array of TSPPointPublishingMagazinePropssEntitySet;
  TSPPointPublishingPostsEntitySet = class;
  TSPPointPublishingPostsEntitySetArray = Array of TSPPointPublishingPostsEntitySet;
  TSPPointPublishingPostServiceManagersEntitySet = class;
  TSPPointPublishingPostServiceManagersEntitySetArray = Array of TSPPointPublishingPostServiceManagersEntitySet;
  TSPPointPublishingSiteManagersEntitySet = class;
  TSPPointPublishingSiteManagersEntitySetArray = Array of TSPPointPublishingSiteManagersEntitySet;
  TSPPointPublishingSiteStatussEntitySet = class;
  TSPPointPublishingSiteStatussEntitySetArray = Array of TSPPointPublishingSiteStatussEntitySet;
  TSPPointPublishingUsersEntitySet = class;
  TSPPointPublishingUsersEntitySetArray = Array of TSPPointPublishingUsersEntitySet;
  TSPSearchsEntitySet = class;
  TSPSearchsEntitySetArray = Array of TSPSearchsEntitySet;
  TSPSpotlightChannelsEntitySet = class;
  TSPSpotlightChannelsEntitySetArray = Array of TSPSpotlightChannelsEntitySet;
  TSPSpotlightVideosEntitySet = class;
  TSPSpotlightVideosEntitySetArray = Array of TSPSpotlightVideosEntitySet;
  TSPVideoChannelsEntitySet = class;
  TSPVideoChannelsEntitySetArray = Array of TSPVideoChannelsEntitySet;
  TSPVideoItemsEntitySet = class;
  TSPVideoItemsEntitySetArray = Array of TSPVideoItemsEntitySet;
  TSPVideoPermissionGroupsEntitySet = class;
  TSPVideoPermissionGroupsEntitySetArray = Array of TSPVideoPermissionGroupsEntitySet;
  TSPVideoServiceDiscoverersEntitySet = class;
  TSPVideoServiceDiscoverersEntitySetArray = Array of TSPVideoServiceDiscoverersEntitySet;
  TSPVideoServiceManagersEntitySet = class;
  TSPVideoServiceManagersEntitySetArray = Array of TSPVideoServiceManagersEntitySet;
  TSPPushNotificationSubscribersEntitySet = class;
  TSPPushNotificationSubscribersEntitySetArray = Array of TSPPushNotificationSubscribersEntitySet;
  TSPRecycleBinItemsEntitySet = class;
  TSPRecycleBinItemsEntitySetArray = Array of TSPRecycleBinItemsEntitySet;
  TSPRegionalSettingssEntitySet = class;
  TSPRegionalSettingssEntitySetArray = Array of TSPRegionalSettingssEntitySet;
  TSPRelatedFieldsEntitySet = class;
  TSPRelatedFieldsEntitySetArray = Array of TSPRelatedFieldsEntitySet;
  TSPRelatedItemManagersEntitySet = class;
  TSPRelatedItemManagersEntitySetArray = Array of TSPRelatedItemManagersEntitySet;
  TSPRemoteWebsEntitySet = class;
  TSPRemoteWebsEntitySetArray = Array of TSPRemoteWebsEntitySet;
  TSPRequestContexts1EntitySet = class;
  TSPRequestContexts1EntitySetArray = Array of TSPRequestContexts1EntitySet;
  TSPRoleAssignmentsEntitySet = class;
  TSPRoleAssignmentsEntitySetArray = Array of TSPRoleAssignmentsEntitySet;
  TSPRoleDefinitionsEntitySet = class;
  TSPRoleDefinitionsEntitySetArray = Array of TSPRoleDefinitionsEntitySet;
  TSPSecurableObjectsEntitySet = class;
  TSPSecurableObjectsEntitySetArray = Array of TSPSecurableObjectsEntitySet;
  TSPServerSettingssEntitySet = class;
  TSPServerSettingssEntitySetArray = Array of TSPServerSettingssEntitySet;
  TSPSharePointSharingSettingssEntitySet = class;
  TSPSharePointSharingSettingssEntitySetArray = Array of TSPSharePointSharingSettingssEntitySet;
  TSPDocumentSharingManagersEntitySet = class;
  TSPDocumentSharingManagersEntitySetArray = Array of TSPDocumentSharingManagersEntitySet;
  TSPWebSharingManagersEntitySet = class;
  TSPWebSharingManagersEntitySetArray = Array of TSPWebSharingManagersEntitySet;
  TSPSharingResultsEntitySet = class;
  TSPSharingResultsEntitySetArray = Array of TSPSharingResultsEntitySet;
  TSPSiteHealthSummarysEntitySet = class;
  TSPSiteHealthSummarysEntitySetArray = Array of TSPSiteHealthSummarysEntitySet;
  TSPSiteUrlsEntitySet = class;
  TSPSiteUrlsEntitySetArray = Array of TSPSiteUrlsEntitySet;
  TSPSocialAnnouncementManagersEntitySet = class;
  TSPSocialAnnouncementManagersEntitySetArray = Array of TSPSocialAnnouncementManagersEntitySet;
  TSPSocialFeedManagersEntitySet = class;
  TSPSocialFeedManagersEntitySetArray = Array of TSPSocialFeedManagersEntitySet;
  TSPSocialFollowingManagersEntitySet = class;
  TSPSocialFollowingManagersEntitySetArray = Array of TSPSocialFollowingManagersEntitySet;
  TSPSocialRestActorsEntitySet = class;
  TSPSocialRestActorsEntitySetArray = Array of TSPSocialRestActorsEntitySet;
  TSPSocialRestFeedsEntitySet = class;
  TSPSocialRestFeedsEntitySetArray = Array of TSPSocialRestFeedsEntitySet;
  TSPSocialRestFeedManagersEntitySet = class;
  TSPSocialRestFeedManagersEntitySetArray = Array of TSPSocialRestFeedManagersEntitySet;
  TSPSocialRestFollowingManagersEntitySet = class;
  TSPSocialRestFollowingManagersEntitySetArray = Array of TSPSocialRestFollowingManagersEntitySet;
  TSPSocialRestThreadsEntitySet = class;
  TSPSocialRestThreadsEntitySetArray = Array of TSPSocialRestThreadsEntitySet;
  TSPSolutionExportersEntitySet = class;
  TSPSolutionExportersEntitySetArray = Array of TSPSolutionExportersEntitySet;
  TSPSPAppLicenseManagersEntitySet = class;
  TSPSPAppLicenseManagersEntitySetArray = Array of TSPSPAppLicenseManagersEntitySet;
  TSPSPDataLeakagePreventionStatusInfosEntitySet = class;
  TSPSPDataLeakagePreventionStatusInfosEntitySetArray = Array of TSPSPDataLeakagePreventionStatusInfosEntitySet;
  TSPTenantAppInstancesEntitySet = class;
  TSPTenantAppInstancesEntitySetArray = Array of TSPTenantAppInstancesEntitySet;
  TSPTenantAppUtilitysEntitySet = class;
  TSPTenantAppUtilitysEntitySetArray = Array of TSPTenantAppUtilitysEntitySet;
  TSPTenantSettingssEntitySet = class;
  TSPTenantSettingssEntitySetArray = Array of TSPTenantSettingssEntitySet;
  TSPThemeInfosEntitySet = class;
  TSPThemeInfosEntitySetArray = Array of TSPThemeInfosEntitySet;
  TSPTimeZonesEntitySet = class;
  TSPTimeZonesEntitySetArray = Array of TSPTimeZonesEntitySet;
  TSPSyncTranslatorsEntitySet = class;
  TSPSyncTranslatorsEntitySetArray = Array of TSPSyncTranslatorsEntitySet;
  TSPTranslationJobsEntitySet = class;
  TSPTranslationJobsEntitySetArray = Array of TSPTranslationJobsEntitySet;
  TSPTranslationJobStatussEntitySet = class;
  TSPTranslationJobStatussEntitySetArray = Array of TSPTranslationJobStatussEntitySet;
  TSPVariationsTranslationTimerJobsEntitySet = class;
  TSPVariationsTranslationTimerJobsEntitySetArray = Array of TSPVariationsTranslationTimerJobsEntitySet;
  TSPTypeInformationsEntitySet = class;
  TSPTypeInformationsEntitySetArray = Array of TSPTypeInformationsEntitySet;
  TSPClientPeoplePickerWebServiceInterfacesEntitySet = class;
  TSPClientPeoplePickerWebServiceInterfacesEntitySetArray = Array of TSPClientPeoplePickerWebServiceInterfacesEntitySet;
  TSPUsers1EntitySet = class;
  TSPUsers1EntitySetArray = Array of TSPUsers1EntitySet;
  TSPUserCustomActionsEntitySet = class;
  TSPUserCustomActionsEntitySetArray = Array of TSPUserCustomActionsEntitySet;
  TSPFollowedContentsEntitySet = class;
  TSPFollowedContentsEntitySetArray = Array of TSPFollowedContentsEntitySet;
  TSPFollowedItemDatasEntitySet = class;
  TSPFollowedItemDatasEntitySetArray = Array of TSPFollowedItemDatasEntitySet;
  TSPHashTagCollectionsEntitySet = class;
  TSPHashTagCollectionsEntitySetArray = Array of TSPHashTagCollectionsEntitySet;
  TSPPeopleManagersEntitySet = class;
  TSPPeopleManagersEntitySetArray = Array of TSPPeopleManagersEntitySet;
  TSPPersonPropertiessEntitySet = class;
  TSPPersonPropertiessEntitySetArray = Array of TSPPersonPropertiessEntitySet;
  TSPProfileImageStoresEntitySet = class;
  TSPProfileImageStoresEntitySetArray = Array of TSPProfileImageStoresEntitySet;
  TSPProfileLoadersEntitySet = class;
  TSPProfileLoadersEntitySetArray = Array of TSPProfileLoadersEntitySet;
  TSPUserProfilesEntitySet = class;
  TSPUserProfilesEntitySetArray = Array of TSPUserProfilesEntitySet;
  TSPUserProfilePropertiesForUsersEntitySet = class;
  TSPUserProfilePropertiesForUsersEntitySetArray = Array of TSPUserProfilePropertiesForUsersEntitySet;
  TSPUserResourcesEntitySet = class;
  TSPUserResourcesEntitySetArray = Array of TSPUserResourcesEntitySet;
  TSPUserSolutionsEntitySet = class;
  TSPUserSolutionsEntitySetArray = Array of TSPUserSolutionsEntitySet;
  TSPMarketplaceUtilitiessEntitySet = class;
  TSPMarketplaceUtilitiessEntitySetArray = Array of TSPMarketplaceUtilitiessEntitySet;
  TSPUtilitysEntitySet = class;
  TSPUtilitysEntitySetArray = Array of TSPUtilitysEntitySet;
  TSPViewsEntitySet = class;
  TSPViewsEntitySetArray = Array of TSPViewsEntitySet;
  TSPViewFieldCollectionsEntitySet = class;
  TSPViewFieldCollectionsEntitySetArray = Array of TSPViewFieldCollectionsEntitySet;
  TSPWebInformationsEntitySet = class;
  TSPWebInformationsEntitySetArray = Array of TSPWebInformationsEntitySet;
  TSPLimitedWebPartManagersEntitySet = class;
  TSPLimitedWebPartManagersEntitySetArray = Array of TSPLimitedWebPartManagersEntitySet;
  TSPWebPartsEntitySet = class;
  TSPWebPartsEntitySetArray = Array of TSPWebPartsEntitySet;
  TSPWebPartDefinitionsEntitySet = class;
  TSPWebPartDefinitionsEntitySetArray = Array of TSPWebPartDefinitionsEntitySet;
  TSPWebProxysEntitySet = class;
  TSPWebProxysEntitySetArray = Array of TSPWebProxysEntitySet;
  TSPWebTemplatesEntitySet = class;
  TSPWebTemplatesEntitySetArray = Array of TSPWebTemplatesEntitySet;
  TSPSPWorkflowsEntitySet = class;
  TSPSPWorkflowsEntitySetArray = Array of TSPSPWorkflowsEntitySet;
  TSPSPWorkflowManagersEntitySet = class;
  TSPSPWorkflowManagersEntitySetArray = Array of TSPSPWorkflowManagersEntitySet;
  TSPWorkflowAssociationsEntitySet = class;
  TSPWorkflowAssociationsEntitySetArray = Array of TSPWorkflowAssociationsEntitySet;
  TSPWorkflowTemplatesEntitySet = class;
  TSPWorkflowTemplatesEntitySetArray = Array of TSPWorkflowTemplatesEntitySet;
  TSPInteropServicesEntitySet = class;
  TSPInteropServicesEntitySetArray = Array of TSPInteropServicesEntitySet;
  TSPWorkflowDefinitionsEntitySet = class;
  TSPWorkflowDefinitionsEntitySetArray = Array of TSPWorkflowDefinitionsEntitySet;
  TSPWorkflowDeploymentServicesEntitySet = class;
  TSPWorkflowDeploymentServicesEntitySetArray = Array of TSPWorkflowDeploymentServicesEntitySet;
  TSPWorkflowInstancesEntitySet = class;
  TSPWorkflowInstancesEntitySetArray = Array of TSPWorkflowInstancesEntitySet;
  TSPWorkflowInstanceServicesEntitySet = class;
  TSPWorkflowInstanceServicesEntitySetArray = Array of TSPWorkflowInstanceServicesEntitySet;
  TSPWorkflowMessagingServicesEntitySet = class;
  TSPWorkflowMessagingServicesEntitySetArray = Array of TSPWorkflowMessagingServicesEntitySet;
  TSPWorkflowServicesManagersEntitySet = class;
  TSPWorkflowServicesManagersEntitySetArray = Array of TSPWorkflowServicesManagersEntitySet;
  TSPWorkflowSubscriptionsEntitySet = class;
  TSPWorkflowSubscriptionsEntitySetArray = Array of TSPWorkflowSubscriptionsEntitySet;
  TSPWorkflowSubscriptionServicesEntitySet = class;
  TSPWorkflowSubscriptionServicesEntitySetArray = Array of TSPWorkflowSubscriptionServicesEntitySet;
  TSPBaseSessionsEntitySet = class;
  TSPBaseSessionsEntitySetArray = Array of TSPBaseSessionsEntitySet;
  TSPBooleanCriterionsEntitySet = class;
  TSPBooleanCriterionsEntitySetArray = Array of TSPBooleanCriterionsEntitySet;
  TSPCalloutInfosEntitySet = class;
  TSPCalloutInfosEntitySetArray = Array of TSPCalloutInfosEntitySet;
  TSPCreateRefreshJobResultsEntitySet = class;
  TSPCreateRefreshJobResultsEntitySetArray = Array of TSPCreateRefreshJobResultsEntitySet;
  TSPCustomAttributeFiltersEntitySet = class;
  TSPCustomAttributeFiltersEntitySetArray = Array of TSPCustomAttributeFiltersEntitySet;
  TSPDashboardScriptExtensionInfosEntitySet = class;
  TSPDashboardScriptExtensionInfosEntitySetArray = Array of TSPDashboardScriptExtensionInfosEntitySet;
  TSPDateRangeCriterionsEntitySet = class;
  TSPDateRangeCriterionsEntitySetArray = Array of TSPDateRangeCriterionsEntitySet;
  TSPExchangeUserSyncStatesEntitySet = class;
  TSPExchangeUserSyncStatesEntitySetArray = Array of TSPExchangeUserSyncStatesEntitySet;
  TSPLocationsEntitySet = class;
  TSPLocationsEntitySetArray = Array of TSPLocationsEntitySet;
  TSPLocationDisplaySettingsEntitySet = class;
  TSPLocationDisplaySettingsEntitySetArray = Array of TSPLocationDisplaySettingsEntitySet;
  TSPLocationFiltersEntitySet = class;
  TSPLocationFiltersEntitySetArray = Array of TSPLocationFiltersEntitySet;
  TSPLocationUpdateResultsEntitySet = class;
  TSPLocationUpdateResultsEntitySetArray = Array of TSPLocationUpdateResultsEntitySet;
  TSPNameCriterionsEntitySet = class;
  TSPNameCriterionsEntitySetArray = Array of TSPNameCriterionsEntitySet;
  TSPNonTaskDataReadResultsEntitySet = class;
  TSPNonTaskDataReadResultsEntitySetArray = Array of TSPNonTaskDataReadResultsEntitySet;
  TSPOrderInfosEntitySet = class;
  TSPOrderInfosEntitySetArray = Array of TSPOrderInfosEntitySet;
  TSPPersistedPropertiessEntitySet = class;
  TSPPersistedPropertiessEntitySetArray = Array of TSPPersistedPropertiessEntitySet;
  TSPProviderErrorInfosEntitySet = class;
  TSPProviderErrorInfosEntitySetArray = Array of TSPProviderErrorInfosEntitySet;
  TSPProviderRefreshStatussEntitySet = class;
  TSPProviderRefreshStatussEntitySetArray = Array of TSPProviderRefreshStatussEntitySet;
  TSPRefreshHealthInfosEntitySet = class;
  TSPRefreshHealthInfosEntitySetArray = Array of TSPRefreshHealthInfosEntitySet;
  TSPRefreshHistorysEntitySet = class;
  TSPRefreshHistorysEntitySetArray = Array of TSPRefreshHistorysEntitySet;
  TSPRefreshResultsEntitySet = class;
  TSPRefreshResultsEntitySetArray = Array of TSPRefreshResultsEntitySet;
  TSPSortableSessionManagersEntitySet = class;
  TSPSortableSessionManagersEntitySetArray = Array of TSPSortableSessionManagersEntitySet;
  TSPSortableTaskQuerysEntitySet = class;
  TSPSortableTaskQuerysEntitySetArray = Array of TSPSortableTaskQuerysEntitySet;
  TSPTasks1EntitySet = class;
  TSPTasks1EntitySetArray = Array of TSPTasks1EntitySet;
  TSPTaskFiltersEntitySet = class;
  TSPTaskFiltersEntitySetArray = Array of TSPTaskFiltersEntitySet;
  TSPTaskQuerysEntitySet = class;
  TSPTaskQuerysEntitySetArray = Array of TSPTaskQuerysEntitySet;
  TSPTaskQueryByLocationResultsEntitySet = class;
  TSPTaskQueryByLocationResultsEntitySetArray = Array of TSPTaskQueryByLocationResultsEntitySet;
  TSPTaskQueryResultsEntitySet = class;
  TSPTaskQueryResultsEntitySetArray = Array of TSPTaskQueryResultsEntitySet;
  TSPTaskRefreshResultsEntitySet = class;
  TSPTaskRefreshResultsEntitySetArray = Array of TSPTaskRefreshResultsEntitySet;
  TSPTaskWriteResultsEntitySet = class;
  TSPTaskWriteResultsEntitySetArray = Array of TSPTaskWriteResultsEntitySet;
  TSPUserOrderedSessionManagersEntitySet = class;
  TSPUserOrderedSessionManagersEntitySetArray = Array of TSPUserOrderedSessionManagersEntitySet;
  TSPUserSettingssEntitySet = class;
  TSPUserSettingssEntitySetArray = Array of TSPUserSettingssEntitySet;
  TSPUserSettingsManagersEntitySet = class;
  TSPUserSettingsManagersEntitySetArray = Array of TSPUserSettingsManagersEntitySet;
  TSPViewSelectionInfosEntitySet = class;
  TSPViewSelectionInfosEntitySetArray = Array of TSPViewSelectionInfosEntitySet;
  TSPSPOIdentityHelpersEntitySet = class;
  TSPSPOIdentityHelpersEntitySetArray = Array of TSPSPOIdentityHelpersEntitySet;
  TSPAppPrincipalIdentityProvidersEntitySet = class;
  TSPAppPrincipalIdentityProvidersEntitySetArray = Array of TSPAppPrincipalIdentityProvidersEntitySet;
  TSPAppPrincipalManagersEntitySet = class;
  TSPAppPrincipalManagersEntitySetArray = Array of TSPAppPrincipalManagersEntitySet;
  TSPAppPrincipalCredentialsEntitySet = class;
  TSPAppPrincipalCredentialsEntitySetArray = Array of TSPAppPrincipalCredentialsEntitySet;
  TSPAppPrincipalNamesEntitySet = class;
  TSPAppPrincipalNamesEntitySetArray = Array of TSPAppPrincipalNamesEntitySet;
  TSPDraftProjectResources1EntitySet = class;
  TSPDraftProjectResources1EntitySetArray = Array of TSPDraftProjectResources1EntitySet;
  TSP_DataUserInfoItemImplicitEntitySet = class;
  TSP_DataUserInfoItemImplicitEntitySetArray = Array of TSP_DataUserInfoItemImplicitEntitySet;
  TSP_DataTaxonomyHiddenListListItemImplicitEntitySet = class;
  TSP_DataTaxonomyHiddenListListItemImplicitEntitySetArray = Array of TSP_DataTaxonomyHiddenListListItemImplicitEntitySet;
  TSPService = class;
  TSPServiceArray = Array of TSPService;
  //
  
  // Enumerations
  
  {$SCOPEDENUMS ON}
  
  { --------------------------------------------------------------------
    SP: KeyValue
    --------------------------------------------------------------------}
  
  TSPKeyValue = Class(TODataEntity)
  private
    FKey : string;
    FValue : string;
    FValueType : string;
    procedure SetKey(AIndex: Integer; const AValue: string);
    procedure SetValue(AIndex: Integer; const AValue: string);
    procedure SetValueType(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Key : string index 0 read FKey write SetKey;
    Property Value : string index 8 read FValue write SetValue;
    Property ValueType : string index 16 read FValueType write SetValueType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SimpleDataRow
    --------------------------------------------------------------------}
  
  TSPSimpleDataRow = Class(TODataEntity)
  private
    FCells : TSPKeyValueArray;
    procedure SetCells(AIndex: Integer; const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Cells : TSPKeyValueArray index 0 read FCells write SetCells;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SimpleDataTable
    --------------------------------------------------------------------}
  
  TSPSimpleDataTable = Class(TODataEntity)
  private
    FRows : TSPSimpleDataRowArray;
    procedure SetRows(AIndex: Integer; const AValue: TSPSimpleDataRowArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Rows : TSPSimpleDataRowArray index 0 read FRows write SetRows;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MethodInformation
    --------------------------------------------------------------------}
  
  TSPMethodInformation = Class(TODataEntity)
  private
    FIsBeta : boolean;
    FName : string;
    FParameters : TSPParameterInformationArray;
    FReturnTypeFullName : string;
    procedure SetIsBeta(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetParameters(AIndex: Integer; 
                       const AValue: TSPParameterInformationArray);
    procedure SetReturnTypeFullName(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property IsBeta : boolean index 0 read FIsBeta write SetIsBeta;
    Property Name : string index 8 read FName write SetName;
    Property Parameters : TSPParameterInformationArray index 16 read FParameters write SetParameters;
    Property ReturnTypeFullName : string index 24 read FReturnTypeFullName write SetReturnTypeFullName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ParameterInformation
    --------------------------------------------------------------------}
  
  TSPParameterInformation = Class(TODataEntity)
  private
    FName : string;
    FParameterTypeFullName : string;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetParameterTypeFullName(AIndex: Integer; 
                                  const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
    Property ParameterTypeFullName : string index 8 read FParameterTypeFullName write SetParameterTypeFullName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PropertyInformation
    --------------------------------------------------------------------}
  
  TSPPropertyInformation = Class(TODataEntity)
  private
    FExcludeFromDefaultRetrieval : boolean;
    FIsBeta : boolean;
    FName : string;
    FPropertyTypeFullName : string;
    FReadOnly : boolean;
    procedure SetExcludeFromDefaultRetrieval(AIndex: Integer; 
                                        const AValue: boolean);
    procedure SetIsBeta(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPropertyTypeFullName(AIndex: Integer; const AValue: string);
    procedure SetReadOnly(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ExcludeFromDefaultRetrieval : boolean index 0 read FExcludeFromDefaultRetrieval write SetExcludeFromDefaultRetrieval;
    Property IsBeta : boolean index 8 read FIsBeta write SetIsBeta;
    Property Name : string index 16 read FName write SetName;
    Property PropertyTypeFullName : string index 24 read FPropertyTypeFullName write SetPropertyTypeFullName;
    Property ReadOnly : boolean index 32 read FReadOnly write SetReadOnly;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ContentTypeId
    --------------------------------------------------------------------}
  
  TSPContentTypeId = Class(TODataEntity)
  private
    FStringValue : string;
    procedure SetStringValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property StringValue : string index 0 read FStringValue write SetStringValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldLookupValue
    --------------------------------------------------------------------}
  
  TSPFieldLookupValue = Class(TODataEntity)
  private
    FLookupId : TInt32;
    FLookupValue : string;
    procedure SetLookupId(AIndex: Integer; const AValue: TInt32);
    procedure SetLookupValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property LookupId : TInt32 index 0 read FLookupId write SetLookupId;
    Property LookupValue : string index 8 read FLookupValue write SetLookupValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldUserValue
    --------------------------------------------------------------------}
  
  TSPFieldUserValue = Class(TODataEntity)
  private
    FEmail : string;
    procedure SetEmail(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Email : string index 0 read FEmail write SetEmail;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CreatableItemInfoCollection
    --------------------------------------------------------------------}
  
  TSPCreatableItemInfoCollection = Class(TODataEntity)
  private
    FItems : TSPCreatableItemInfoArray;
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSPCreatableItemInfoArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSPCreatableItemInfoArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CreatableItemInfo
    --------------------------------------------------------------------}
  
  TSPCreatableItemInfo = Class(TODataEntity)
  private
    FDocumentTemplate : TInt32;
    FFileExtension : string;
    FItemType : string;
    procedure SetDocumentTemplate(AIndex: Integer; const AValue: TInt32);
    procedure SetFileExtension(AIndex: Integer; const AValue: string);
    procedure SetItemType(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DocumentTemplate : TInt32 index 0 read FDocumentTemplate write SetDocumentTemplate;
    Property FileExtension : string index 8 read FFileExtension write SetFileExtension;
    Property ItemType : string index 16 read FItemType write SetItemType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MenuNode
    --------------------------------------------------------------------}
  
  TSPMenuNode = Class(TODataEntity)
  private
    FCustomProperties : TSPKeyValueArray;
    FFriendlyUrlSegment : string;
    FIsHidden : boolean;
    FKey : string;
    FNodes : TSPMenuNodeArray;
    FNodeType : TInt32;
    FSimpleUrl : string;
    FTitle : string;
    procedure SetCustomProperties(AIndex: Integer; 
                             const AValue: TSPKeyValueArray);
    procedure SetFriendlyUrlSegment(AIndex: Integer; const AValue: string);
    procedure SetIsHidden(AIndex: Integer; const AValue: boolean);
    procedure SetKey(AIndex: Integer; const AValue: string);
    procedure SetNodes(AIndex: Integer; const AValue: TSPMenuNodeArray);
    procedure SetNodeType(AIndex: Integer; const AValue: TInt32);
    procedure SetSimpleUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CustomProperties : TSPKeyValueArray index 0 read FCustomProperties write SetCustomProperties;
    Property FriendlyUrlSegment : string index 8 read FFriendlyUrlSegment write SetFriendlyUrlSegment;
    Property IsHidden : boolean index 16 read FIsHidden write SetIsHidden;
    Property Key : string index 24 read FKey write SetKey;
    Property Nodes : TSPMenuNodeArray index 32 read FNodes write SetNodes;
    Property NodeType : TInt32 index 40 read FNodeType write SetNodeType;
    Property SimpleUrl : string index 48 read FSimpleUrl write SetSimpleUrl;
    Property Title : string index 56 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MenuState
    --------------------------------------------------------------------}
  
  TSPMenuState = Class(TODataEntity)
  private
    FFriendlyUrlPrefix : string;
    FNodes : TSPMenuNodeArray;
    FSimpleUrl : string;
    FSPSitePrefix : string;
    FSPWebPrefix : string;
    FStartingNodeKey : string;
    FStartingNodeTitle : string;
    FVersion : string;
    procedure SetFriendlyUrlPrefix(AIndex: Integer; const AValue: string);
    procedure SetNodes(AIndex: Integer; const AValue: TSPMenuNodeArray);
    procedure SetSimpleUrl(AIndex: Integer; const AValue: string);
    procedure SetSPSitePrefix(AIndex: Integer; const AValue: string);
    procedure SetSPWebPrefix(AIndex: Integer; const AValue: string);
    procedure SetStartingNodeKey(AIndex: Integer; const AValue: string);
    procedure SetStartingNodeTitle(AIndex: Integer; const AValue: string);
    procedure SetVersion(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FriendlyUrlPrefix : string index 0 read FFriendlyUrlPrefix write SetFriendlyUrlPrefix;
    Property Nodes : TSPMenuNodeArray index 8 read FNodes write SetNodes;
    Property SimpleUrl : string index 16 read FSimpleUrl write SetSimpleUrl;
    Property SPSitePrefix : string index 24 read FSPSitePrefix write SetSPSitePrefix;
    Property SPWebPrefix : string index 32 read FSPWebPrefix write SetSPWebPrefix;
    Property StartingNodeKey : string index 40 read FStartingNodeKey write SetStartingNodeKey;
    Property StartingNodeTitle : string index 48 read FStartingNodeTitle write SetStartingNodeTitle;
    Property Version : string index 56 read FVersion write SetVersion;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NavigationNodeCreationInformation
    --------------------------------------------------------------------}
  
  TSPNavigationNodeCreationInformation = Class(TODataEntity)
  private
    FAsLastNode : boolean;
    FIsExternal : boolean;
    FTitle : string;
    FUrl : string;
    procedure SetAsLastNode(AIndex: Integer; const AValue: boolean);
    procedure SetIsExternal(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AsLastNode : boolean index 0 read FAsLastNode write SetAsLastNode;
    Property IsExternal : boolean index 8 read FIsExternal write SetIsExternal;
    Property Title : string index 16 read FTitle write SetTitle;
    Property Url : string index 24 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RelatedItem
    --------------------------------------------------------------------}
  
  TSPRelatedItem = Class(TODataEntity)
  private
    FIconUrl : string;
    FItemId : TInt32;
    FListId : string;
    FTitle : string;
    FUrl : string;
    FWebId : string;
    procedure SetIconUrl(AIndex: Integer; const AValue: string);
    procedure SetItemId(AIndex: Integer; const AValue: TInt32);
    procedure SetListId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetWebId(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property IconUrl : string index 0 read FIconUrl write SetIconUrl;
    Property ItemId : TInt32 index 8 read FItemId write SetItemId;
    Property ListId : string index 16 read FListId write SetListId;
    Property Title : string index 24 read FTitle write SetTitle;
    Property Url : string index 32 read FUrl write SetUrl;
    Property WebId : string index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppLicenseCollection
    --------------------------------------------------------------------}
  
  TSPAppLicenseCollection = Class(TODataEntity)
  private
    FItems : TSPAppLicenseArray;
    procedure SetItems(AIndex: Integer; const AValue: TSPAppLicenseArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSPAppLicenseArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppLicense
    --------------------------------------------------------------------}
  
  TSPAppLicense = Class(TODataEntity)
  private
    FRawXMLLicenseToken : string;
    procedure SetRawXMLLicenseToken(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property RawXMLLicenseToken : string index 0 read FRawXMLLicenseToken write SetRawXMLLicenseToken;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AttachmentCreationInformation
    --------------------------------------------------------------------}
  
  TSPAttachmentCreationInformation = Class(TODataEntity)
  private
    FFileName : string;
    procedure SetFileName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FileName : string index 0 read FFileName write SetFileName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: BasePermissions
    --------------------------------------------------------------------}
  
  TSPBasePermissions = Class(TODataEntity)
  private
    FHigh : int64;
    FLow : int64;
    procedure SetHigh(AIndex: Integer; const AValue: int64);
    procedure SetLow(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property High : int64 index 0 read FHigh write SetHigh;
    Property Low : int64 index 8 read FLow write SetLow;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeLogItemQuery
    --------------------------------------------------------------------}
  
  TSPChangeLogItemQuery = Class(TODataEntity)
  private
    FChangeToken : string;
    FContains : string;
    FQuery : string;
    FQueryOptions : string;
    FRowLimit : string;
    FViewFields : string;
    FViewName : string;
    procedure SetChangeToken(AIndex: Integer; const AValue: string);
    procedure SetContains(AIndex: Integer; const AValue: string);
    procedure SetQuery(AIndex: Integer; const AValue: string);
    procedure SetQueryOptions(AIndex: Integer; const AValue: string);
    procedure SetRowLimit(AIndex: Integer; const AValue: string);
    procedure SetViewFields(AIndex: Integer; const AValue: string);
    procedure SetViewName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ChangeToken : string index 0 read FChangeToken write SetChangeToken;
    Property Contains : string index 8 read FContains write SetContains;
    Property Query : string index 16 read FQuery write SetQuery;
    Property QueryOptions : string index 24 read FQueryOptions write SetQueryOptions;
    Property RowLimit : string index 32 read FRowLimit write SetRowLimit;
    Property ViewFields : string index 40 read FViewFields write SetViewFields;
    Property ViewName : string index 48 read FViewName write SetViewName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeQuery
    --------------------------------------------------------------------}
  
  TSPChangeQuery = Class(TODataEntity)
  private
    FAdd : boolean;
    FAlert : boolean;
    FChangeTokenEnd : TSPChangeToken;
    FChangeTokenStart : TSPChangeToken;
    FContentType : boolean;
    FDeleteObject : boolean;
    FField : boolean;
    F_File : boolean;
    FFolder : boolean;
    FGroup : boolean;
    FGroupMembershipAdd : boolean;
    FGroupMembershipDelete : boolean;
    FItem : boolean;
    FList : boolean;
    FMove : boolean;
    FNavigation : boolean;
    FRename : boolean;
    FRestore : boolean;
    FRoleAssignmentAdd : boolean;
    FRoleAssignmentDelete : boolean;
    FRoleDefinitionAdd : boolean;
    FRoleDefinitionDelete : boolean;
    FRoleDefinitionUpdate : boolean;
    FSecurityPolicy : boolean;
    FSite : boolean;
    FSystemUpdate : boolean;
    FUpdate : boolean;
    FUser : boolean;
    FView : boolean;
    FWeb : boolean;
    procedure SetAdd(AIndex: Integer; const AValue: boolean);
    procedure SetAlert(AIndex: Integer; const AValue: boolean);
    procedure SetChangeTokenEnd(AIndex: Integer; 
                           const AValue: TSPChangeToken);
    procedure SetChangeTokenStart(AIndex: Integer; 
                             const AValue: TSPChangeToken);
    procedure SetContentType(AIndex: Integer; const AValue: boolean);
    procedure SetDeleteObject(AIndex: Integer; const AValue: boolean);
    procedure SetField(AIndex: Integer; const AValue: boolean);
    procedure Set_File(AIndex: Integer; const AValue: boolean);
    procedure SetFolder(AIndex: Integer; const AValue: boolean);
    procedure SetGroup(AIndex: Integer; const AValue: boolean);
    procedure SetGroupMembershipAdd(AIndex: Integer; const AValue: boolean);
    procedure SetGroupMembershipDelete(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetItem(AIndex: Integer; const AValue: boolean);
    procedure SetList(AIndex: Integer; const AValue: boolean);
    procedure SetMove(AIndex: Integer; const AValue: boolean);
    procedure SetNavigation(AIndex: Integer; const AValue: boolean);
    procedure SetRename(AIndex: Integer; const AValue: boolean);
    procedure SetRestore(AIndex: Integer; const AValue: boolean);
    procedure SetRoleAssignmentAdd(AIndex: Integer; const AValue: boolean);
    procedure SetRoleAssignmentDelete(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetRoleDefinitionAdd(AIndex: Integer; const AValue: boolean);
    procedure SetRoleDefinitionDelete(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetRoleDefinitionUpdate(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetSecurityPolicy(AIndex: Integer; const AValue: boolean);
    procedure SetSite(AIndex: Integer; const AValue: boolean);
    procedure SetSystemUpdate(AIndex: Integer; const AValue: boolean);
    procedure SetUpdate(AIndex: Integer; const AValue: boolean);
    procedure SetUser(AIndex: Integer; const AValue: boolean);
    procedure SetView(AIndex: Integer; const AValue: boolean);
    procedure SetWeb(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property Add : boolean index 0 read FAdd write SetAdd;
    Property Alert : boolean index 8 read FAlert write SetAlert;
    Property ChangeTokenEnd : TSPChangeToken index 16 read FChangeTokenEnd write SetChangeTokenEnd;
    Property ChangeTokenStart : TSPChangeToken index 24 read FChangeTokenStart write SetChangeTokenStart;
    Property ContentType : boolean index 32 read FContentType write SetContentType;
    Property DeleteObject : boolean index 40 read FDeleteObject write SetDeleteObject;
    Property Field : boolean index 48 read FField write SetField;
    Property _File : boolean index 56 read F_File write Set_File;
    Property Folder : boolean index 64 read FFolder write SetFolder;
    Property Group : boolean index 72 read FGroup write SetGroup;
    Property GroupMembershipAdd : boolean index 80 read FGroupMembershipAdd write SetGroupMembershipAdd;
    Property GroupMembershipDelete : boolean index 88 read FGroupMembershipDelete write SetGroupMembershipDelete;
    Property Item : boolean index 96 read FItem write SetItem;
    Property List : boolean index 104 read FList write SetList;
    Property Move : boolean index 112 read FMove write SetMove;
    Property Navigation : boolean index 120 read FNavigation write SetNavigation;
    Property Rename : boolean index 128 read FRename write SetRename;
    Property Restore : boolean index 136 read FRestore write SetRestore;
    Property RoleAssignmentAdd : boolean index 144 read FRoleAssignmentAdd write SetRoleAssignmentAdd;
    Property RoleAssignmentDelete : boolean index 152 read FRoleAssignmentDelete write SetRoleAssignmentDelete;
    Property RoleDefinitionAdd : boolean index 160 read FRoleDefinitionAdd write SetRoleDefinitionAdd;
    Property RoleDefinitionDelete : boolean index 168 read FRoleDefinitionDelete write SetRoleDefinitionDelete;
    Property RoleDefinitionUpdate : boolean index 176 read FRoleDefinitionUpdate write SetRoleDefinitionUpdate;
    Property SecurityPolicy : boolean index 184 read FSecurityPolicy write SetSecurityPolicy;
    Property Site : boolean index 192 read FSite write SetSite;
    Property SystemUpdate : boolean index 200 read FSystemUpdate write SetSystemUpdate;
    Property Update : boolean index 208 read FUpdate write SetUpdate;
    Property User : boolean index 216 read FUser write SetUser;
    Property View : boolean index 224 read FView write SetView;
    Property Web : boolean index 232 read FWeb write SetWeb;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeToken
    --------------------------------------------------------------------}
  
  TSPChangeToken = Class(TODataEntity)
  private
    FStringValue : string;
    procedure SetStringValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property StringValue : string index 0 read FStringValue write SetStringValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ContentTypeCreationInformation
    --------------------------------------------------------------------}
  
  TSPContentTypeCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FGroup : string;
    FId : string;
    FName : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Group : string index 8 read FGroup write SetGroup;
    Property Id : string index 16 read FId write SetId;
    Property Name : string index 24 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ContextWebInformation
    --------------------------------------------------------------------}
  
  TSPContextWebInformation = Class(TODataEntity)
  private
    FFormDigestTimeoutSeconds : TInt32;
    FFormDigestValue : string;
    FLibraryVersion : string;
    FSiteFullUrl : string;
    FSupportedSchemaVersions : TStringArray;
    FWebFullUrl : string;
    procedure SetFormDigestTimeoutSeconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetFormDigestValue(AIndex: Integer; const AValue: string);
    procedure SetLibraryVersion(AIndex: Integer; const AValue: string);
    procedure SetSiteFullUrl(AIndex: Integer; const AValue: string);
    procedure SetSupportedSchemaVersions(AIndex: Integer; 
                                    const AValue: TStringArray);
    procedure SetWebFullUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FormDigestTimeoutSeconds : TInt32 index 0 read FFormDigestTimeoutSeconds write SetFormDigestTimeoutSeconds;
    Property FormDigestValue : string index 8 read FFormDigestValue write SetFormDigestValue;
    Property LibraryVersion : string index 16 read FLibraryVersion write SetLibraryVersion;
    Property SiteFullUrl : string index 24 read FSiteFullUrl write SetSiteFullUrl;
    Property SupportedSchemaVersions : TStringArray index 32 read FSupportedSchemaVersions write SetSupportedSchemaVersions;
    Property WebFullUrl : string index 40 read FWebFullUrl write SetWebFullUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DocumentLibraryInformation
    --------------------------------------------------------------------}
  
  TSPDocumentLibraryInformation = Class(TODataEntity)
  private
    FModified : TDateTime;
    FModifiedFriendlyDisplay : string;
    FServerRelativeUrl : string;
    FTitle : string;
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetModifiedFriendlyDisplay(AIndex: Integer; 
                                    const AValue: string);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Modified : TDateTime index 0 read FModified write SetModified;
    Property ModifiedFriendlyDisplay : string index 8 read FModifiedFriendlyDisplay write SetModifiedFriendlyDisplay;
    Property ServerRelativeUrl : string index 16 read FServerRelativeUrl write SetServerRelativeUrl;
    Property Title : string index 24 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EventReceiverDefinitionCreationInformation
    --------------------------------------------------------------------}
  
  TSPEventReceiverDefinitionCreationInformation = Class(TODataEntity)
  private
    FReceiverAssembly : string;
    FReceiverClass : string;
    FReceiverName : string;
    FSequenceNumber : TInt32;
    FSynchronization : TInt32;
    FEventType : TInt32;
    FReceiverUrl : string;
    procedure SetReceiverAssembly(AIndex: Integer; const AValue: string);
    procedure SetReceiverClass(AIndex: Integer; const AValue: string);
    procedure SetReceiverName(AIndex: Integer; const AValue: string);
    procedure SetSequenceNumber(AIndex: Integer; const AValue: TInt32);
    procedure SetSynchronization(AIndex: Integer; const AValue: TInt32);
    procedure SetEventType(AIndex: Integer; const AValue: TInt32);
    procedure SetReceiverUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ReceiverAssembly : string index 0 read FReceiverAssembly write SetReceiverAssembly;
    Property ReceiverClass : string index 8 read FReceiverClass write SetReceiverClass;
    Property ReceiverName : string index 16 read FReceiverName write SetReceiverName;
    Property SequenceNumber : TInt32 index 24 read FSequenceNumber write SetSequenceNumber;
    Property Synchronization : TInt32 index 32 read FSynchronization write SetSynchronization;
    Property EventType : TInt32 index 40 read FEventType write SetEventType;
    Property ReceiverUrl : string index 48 read FReceiverUrl write SetReceiverUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListDataValidationFailure
    --------------------------------------------------------------------}
  
  TSPListDataValidationFailure = Class(TODataEntity)
  private
    FDisplayName : string;
    FMessage : string;
    FName : string;
    FReason : TInt32;
    FValidationType : TInt32;
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetMessage(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetReason(AIndex: Integer; const AValue: TInt32);
    procedure SetValidationType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DisplayName : string index 0 read FDisplayName write SetDisplayName;
    Property Message : string index 8 read FMessage write SetMessage;
    Property Name : string index 16 read FName write SetName;
    Property Reason : TInt32 index 24 read FReason write SetReason;
    Property ValidationType : TInt32 index 32 read FValidationType write SetValidationType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldCalculatedErrorValue
    --------------------------------------------------------------------}
  
  TSPFieldCalculatedErrorValue = Class(TODataEntity)
  private
    FErrorMessage : string;
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ErrorMessage : string index 0 read FErrorMessage write SetErrorMessage;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldCreationInformation
    --------------------------------------------------------------------}
  
  TSPFieldCreationInformation = Class(TODataEntity)
  private
    FChoices : TStringArray;
    FIsCompactName : boolean;
    FLookupFieldName : string;
    FLookupListId : TGUIDString;
    FLookupWebId : TGUIDString;
    FRequired : boolean;
    FTitle : string;
    FFieldTypeKind : TInt32;
    procedure SetChoices(AIndex: Integer; const AValue: TStringArray);
    procedure SetIsCompactName(AIndex: Integer; const AValue: boolean);
    procedure SetLookupFieldName(AIndex: Integer; const AValue: string);
    procedure SetLookupListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLookupWebId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetRequired(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetFieldTypeKind(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Choices : TStringArray index 0 read FChoices write SetChoices;
    Property IsCompactName : boolean index 8 read FIsCompactName write SetIsCompactName;
    Property LookupFieldName : string index 16 read FLookupFieldName write SetLookupFieldName;
    Property LookupListId : TGUIDString index 24 read FLookupListId write SetLookupListId;
    Property LookupWebId : TGUIDString index 32 read FLookupWebId write SetLookupWebId;
    Property Required : boolean index 40 read FRequired write SetRequired;
    Property Title : string index 48 read FTitle write SetTitle;
    Property FieldTypeKind : TInt32 index 56 read FFieldTypeKind write SetFieldTypeKind;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldGeolocationValue
    --------------------------------------------------------------------}
  
  TSPFieldGeolocationValue = Class(TODataEntity)
  private
    FAltitude : Double;
    FLatitude : Double;
    FLongitude : Double;
    FMeasure : Double;
    procedure SetAltitude(AIndex: Integer; const AValue: Double);
    procedure SetLatitude(AIndex: Integer; const AValue: Double);
    procedure SetLongitude(AIndex: Integer; const AValue: Double);
    procedure SetMeasure(AIndex: Integer; const AValue: Double);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Altitude : Double index 0 read FAltitude write SetAltitude;
    Property Latitude : Double index 8 read FLatitude write SetLatitude;
    Property Longitude : Double index 16 read FLongitude write SetLongitude;
    Property Measure : Double index 24 read FMeasure write SetMeasure;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldRatingScaleQuestionAnswer
    --------------------------------------------------------------------}
  
  TSPFieldRatingScaleQuestionAnswer = Class(TODataEntity)
  private
    FAnswer : TInt32;
    FQuestion : string;
    procedure SetAnswer(AIndex: Integer; const AValue: TInt32);
    procedure SetQuestion(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Answer : TInt32 index 0 read FAnswer write SetAnswer;
    Property Question : string index 8 read FQuestion write SetQuestion;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldUrlValue
    --------------------------------------------------------------------}
  
  TSPFieldUrlValue = Class(TODataEntity)
  private
    FDescription : string;
    FUrl : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Url : string index 8 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FileCreationInformation
    --------------------------------------------------------------------}
  
  TSPFileCreationInformation = Class(TODataEntity)
  private
    FContent : TBinary;
    FOverwrite : boolean;
    FUrl : string;
    procedure SetContent(AIndex: Integer; const AValue: TBinary);
    procedure SetOverwrite(AIndex: Integer; const AValue: boolean);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Content : TBinary index 0 read FContent write SetContent;
    Property Overwrite : boolean index 8 read FOverwrite write SetOverwrite;
    Property Url : string index 16 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: GroupCreationInformation
    --------------------------------------------------------------------}
  
  TSPGroupCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FTitle : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Title : string index 8 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPInvitationCreationResult
    --------------------------------------------------------------------}
  
  TSPSPInvitationCreationResult = Class(TODataEntity)
  private
    FEmail : string;
    FInvitationLink : string;
    FSucceeded : boolean;
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetInvitationLink(AIndex: Integer; const AValue: string);
    procedure SetSucceeded(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Email : string index 0 read FEmail write SetEmail;
    Property InvitationLink : string index 8 read FInvitationLink write SetInvitationLink;
    Property Succeeded : boolean index 16 read FSucceeded write SetSucceeded;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Language
    --------------------------------------------------------------------}
  
  TSPLanguage = Class(TODataEntity)
  private
    FDisplayName : string;
    FLanguageTag : string;
    FLcid : TInt32;
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetLanguageTag(AIndex: Integer; const AValue: string);
    procedure SetLcid(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DisplayName : string index 0 read FDisplayName write SetDisplayName;
    Property LanguageTag : string index 8 read FLanguageTag write SetLanguageTag;
    Property Lcid : TInt32 index 16 read FLcid write SetLcid;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListCreationInformation
    --------------------------------------------------------------------}
  
  TSPListCreationInformation = Class(TODataEntity)
  private
    FCustomSchemaXml : string;
    FDataSourceProperties : TSPKeyValueArray;
    FDescription : string;
    FDocumentTemplateType : TInt32;
    FQuickLaunchOption : TInt32;
    FTemplateFeatureId : TGUIDString;
    FTemplateType : TInt32;
    FTitle : string;
    FUrl : string;
    procedure SetCustomSchemaXml(AIndex: Integer; const AValue: string);
    procedure SetDataSourceProperties(AIndex: Integer; 
                                 const AValue: TSPKeyValueArray);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDocumentTemplateType(AIndex: Integer; const AValue: TInt32);
    procedure SetQuickLaunchOption(AIndex: Integer; const AValue: TInt32);
    procedure SetTemplateFeatureId(AIndex: Integer; 
                              const AValue: TGUIDString);
    procedure SetTemplateType(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CustomSchemaXml : string index 0 read FCustomSchemaXml write SetCustomSchemaXml;
    Property DataSourceProperties : TSPKeyValueArray index 8 read FDataSourceProperties write SetDataSourceProperties;
    Property Description : string index 16 read FDescription write SetDescription;
    Property DocumentTemplateType : TInt32 index 24 read FDocumentTemplateType write SetDocumentTemplateType;
    Property QuickLaunchOption : TInt32 index 32 read FQuickLaunchOption write SetQuickLaunchOption;
    Property TemplateFeatureId : TGUIDString index 40 read FTemplateFeatureId write SetTemplateFeatureId;
    Property TemplateType : TInt32 index 48 read FTemplateType write SetTemplateType;
    Property Title : string index 56 read FTitle write SetTitle;
    Property Url : string index 64 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListDataSource
    --------------------------------------------------------------------}
  
  TSPListDataSource = Class(TODataEntity)
  private
    FProperties : TSPKeyValueArray;
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Properties : TSPKeyValueArray index 0 read FProperties write SetProperties;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListDataValidationExceptionValue
    --------------------------------------------------------------------}
  
  TSPListDataValidationExceptionValue = Class(TODataEntity)
  private
    FFieldFailures : TSPListDataValidationFailureArray;
    FItemFailure : TSPListDataValidationFailure;
    procedure SetFieldFailures(AIndex: Integer; 
                          const AValue: TSPListDataValidationFailureArray);
    procedure SetItemFailure(AIndex: Integer; 
                        const AValue: TSPListDataValidationFailure);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FieldFailures : TSPListDataValidationFailureArray index 0 read FFieldFailures write SetFieldFailures;
    Property ItemFailure : TSPListDataValidationFailure index 8 read FItemFailure write SetItemFailure;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListItemCollectionPosition
    --------------------------------------------------------------------}
  
  TSPListItemCollectionPosition = Class(TODataEntity)
  private
    FPagingInfo : string;
    procedure SetPagingInfo(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property PagingInfo : string index 0 read FPagingInfo write SetPagingInfo;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListItemCreationInformation
    --------------------------------------------------------------------}
  
  TSPListItemCreationInformation = Class(TODataEntity)
  private
    FFolderUrl : string;
    FLeafName : string;
    FUnderlyingObjectType : TInt32;
    procedure SetFolderUrl(AIndex: Integer; const AValue: string);
    procedure SetLeafName(AIndex: Integer; const AValue: string);
    procedure SetUnderlyingObjectType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FolderUrl : string index 0 read FFolderUrl write SetFolderUrl;
    Property LeafName : string index 8 read FLeafName write SetLeafName;
    Property UnderlyingObjectType : TInt32 index 16 read FUnderlyingObjectType write SetUnderlyingObjectType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListItemFormUpdateValue
    --------------------------------------------------------------------}
  
  TSPListItemFormUpdateValue = Class(TODataEntity)
  private
    FErrorMessage : string;
    FFieldName : string;
    FFieldValue : string;
    FHasException : boolean;
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
    procedure SetFieldName(AIndex: Integer; const AValue: string);
    procedure SetFieldValue(AIndex: Integer; const AValue: string);
    procedure SetHasException(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ErrorMessage : string index 0 read FErrorMessage write SetErrorMessage;
    Property FieldName : string index 8 read FFieldName write SetFieldName;
    Property FieldValue : string index 16 read FFieldValue write SetFieldValue;
    Property HasException : boolean index 24 read FHasException write SetHasException;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CamlQuery
    --------------------------------------------------------------------}
  
  TSPCamlQuery = Class(TODataEntity)
  private
    FDatesInUtc : boolean;
    FFolderServerRelativeUrl : string;
    FListItemCollectionPosition : TSPListItemCollectionPosition;
    FViewXml : string;
    procedure SetDatesInUtc(AIndex: Integer; const AValue: boolean);
    procedure SetFolderServerRelativeUrl(AIndex: Integer; 
                                    const AValue: string);
    procedure SetListItemCollectionPosition(AIndex: Integer; 
                                       const AValue: TSPListItemCollectionPosition);
    procedure SetViewXml(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DatesInUtc : boolean index 0 read FDatesInUtc write SetDatesInUtc;
    Property FolderServerRelativeUrl : string index 8 read FFolderServerRelativeUrl write SetFolderServerRelativeUrl;
    Property ListItemCollectionPosition : TSPListItemCollectionPosition index 16 read FListItemCollectionPosition write SetListItemCollectionPosition;
    Property ViewXml : string index 24 read FViewXml write SetViewXml;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RenderListContextMenuDataParameters
    --------------------------------------------------------------------}
  
  TSPRenderListContextMenuDataParameters = Class(TODataEntity)
  private
    FCascDelWarnMessage : string;
    FCustomAction : string;
    FField : string;
    FID : string;
    FInplaceFullListSearch : string;
    FInplaceSearchQuery : string;
    FIsCSR : string;
    FIsXslView : string;
    FItemId : string;
    FListViewPageUrl : string;
    FOverrideScope : string;
    FRootFolder : string;
    FView : string;
    FViewCount : string;
    procedure SetCascDelWarnMessage(AIndex: Integer; const AValue: string);
    procedure SetCustomAction(AIndex: Integer; const AValue: string);
    procedure SetField(AIndex: Integer; const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: string);
    procedure SetInplaceFullListSearch(AIndex: Integer; 
                                  const AValue: string);
    procedure SetInplaceSearchQuery(AIndex: Integer; const AValue: string);
    procedure SetIsCSR(AIndex: Integer; const AValue: string);
    procedure SetIsXslView(AIndex: Integer; const AValue: string);
    procedure SetItemId(AIndex: Integer; const AValue: string);
    procedure SetListViewPageUrl(AIndex: Integer; const AValue: string);
    procedure SetOverrideScope(AIndex: Integer; const AValue: string);
    procedure SetRootFolder(AIndex: Integer; const AValue: string);
    procedure SetView(AIndex: Integer; const AValue: string);
    procedure SetViewCount(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CascDelWarnMessage : string index 0 read FCascDelWarnMessage write SetCascDelWarnMessage;
    Property CustomAction : string index 8 read FCustomAction write SetCustomAction;
    Property Field : string index 16 read FField write SetField;
    Property ID : string index 24 read FID write SetID;
    Property InplaceFullListSearch : string index 32 read FInplaceFullListSearch write SetInplaceFullListSearch;
    Property InplaceSearchQuery : string index 40 read FInplaceSearchQuery write SetInplaceSearchQuery;
    Property IsCSR : string index 48 read FIsCSR write SetIsCSR;
    Property IsXslView : string index 56 read FIsXslView write SetIsXslView;
    Property ItemId : string index 64 read FItemId write SetItemId;
    Property ListViewPageUrl : string index 72 read FListViewPageUrl write SetListViewPageUrl;
    Property OverrideScope : string index 80 read FOverrideScope write SetOverrideScope;
    Property RootFolder : string index 88 read FRootFolder write SetRootFolder;
    Property View : string index 96 read FView write SetView;
    Property ViewCount : string index 104 read FViewCount write SetViewCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RenderListDataOverrideParameters
    --------------------------------------------------------------------}
  
  TSPRenderListDataOverrideParameters = Class(TODataEntity)
  private
    FCascDelWarnMessage : string;
    FCustomAction : string;
    FDrillDown : string;
    FField : string;
    FFieldInternalName : string;
    FFilter : string;
    FFilterData : string;
    FFilterData1 : string;
    FFilterData10 : string;
    FFilterData2 : string;
    FFilterData3 : string;
    FFilterData4 : string;
    FFilterData5 : string;
    FFilterData6 : string;
    FFilterData7 : string;
    FFilterData8 : string;
    FFilterData9 : string;
    FFilterField : string;
    FFilterField1 : string;
    FFilterField10 : string;
    FFilterField2 : string;
    FFilterField3 : string;
    FFilterField4 : string;
    FFilterField5 : string;
    FFilterField6 : string;
    FFilterField7 : string;
    FFilterField8 : string;
    FFilterField9 : string;
    FFilterFields : string;
    FFilterFields1 : string;
    FFilterFields10 : string;
    FFilterFields2 : string;
    FFilterFields3 : string;
    FFilterFields4 : string;
    FFilterFields5 : string;
    FFilterFields6 : string;
    FFilterFields7 : string;
    FFilterFields8 : string;
    FFilterFields9 : string;
    FFilterLookupId : string;
    FFilterLookupId1 : string;
    FFilterLookupId10 : string;
    FFilterLookupId2 : string;
    FFilterLookupId3 : string;
    FFilterLookupId4 : string;
    FFilterLookupId5 : string;
    FFilterLookupId6 : string;
    FFilterLookupId7 : string;
    FFilterLookupId8 : string;
    FFilterLookupId9 : string;
    FFilterOp : string;
    FFilterOp1 : string;
    FFilterOp10 : string;
    FFilterOp2 : string;
    FFilterOp3 : string;
    FFilterOp4 : string;
    FFilterOp5 : string;
    FFilterOp6 : string;
    FFilterOp7 : string;
    FFilterOp8 : string;
    FFilterOp9 : string;
    FFilterValue : string;
    FFilterValue1 : string;
    FFilterValue10 : string;
    FFilterValue2 : string;
    FFilterValue3 : string;
    FFilterValue4 : string;
    FFilterValue5 : string;
    FFilterValue6 : string;
    FFilterValue7 : string;
    FFilterValue8 : string;
    FFilterValue9 : string;
    FFilterValues : string;
    FFilterValues1 : string;
    FFilterValues10 : string;
    FFilterValues2 : string;
    FFilterValues3 : string;
    FFilterValues4 : string;
    FFilterValues5 : string;
    FFilterValues6 : string;
    FFilterValues7 : string;
    FFilterValues8 : string;
    FFilterValues9 : string;
    FGroupString : string;
    FHasOverrideSelectCommand : string;
    FID : string;
    FInplaceFullListSearch : string;
    FInplaceSearchQuery : string;
    FIsCSR : string;
    FIsGroupRender : string;
    FIsXslView : string;
    FListViewPageUrl : string;
    FOverrideScope : string;
    FOverrideSelectCommand : string;
    FPageFirstRow : string;
    FPageLastRow : string;
    FRootFolder : string;
    FSortDir : string;
    FSortDir1 : string;
    FSortDir10 : string;
    FSortDir2 : string;
    FSortDir3 : string;
    FSortDir4 : string;
    FSortDir5 : string;
    FSortDir6 : string;
    FSortDir7 : string;
    FSortDir8 : string;
    FSortDir9 : string;
    FSortField : string;
    FSortField1 : string;
    FSortField10 : string;
    FSortField2 : string;
    FSortField3 : string;
    FSortField4 : string;
    FSortField5 : string;
    FSortField6 : string;
    FSortField7 : string;
    FSortField8 : string;
    FSortField9 : string;
    FSortFields : string;
    FSortFieldValues : string;
    FView : string;
    FViewCount : string;
    FViewId : string;
    FWebPartId : string;
    procedure SetCascDelWarnMessage(AIndex: Integer; const AValue: string);
    procedure SetCustomAction(AIndex: Integer; const AValue: string);
    procedure SetDrillDown(AIndex: Integer; const AValue: string);
    procedure SetField(AIndex: Integer; const AValue: string);
    procedure SetFieldInternalName(AIndex: Integer; const AValue: string);
    procedure SetFilter(AIndex: Integer; const AValue: string);
    procedure SetFilterData(AIndex: Integer; const AValue: string);
    procedure SetFilterData1(AIndex: Integer; const AValue: string);
    procedure SetFilterData10(AIndex: Integer; const AValue: string);
    procedure SetFilterData2(AIndex: Integer; const AValue: string);
    procedure SetFilterData3(AIndex: Integer; const AValue: string);
    procedure SetFilterData4(AIndex: Integer; const AValue: string);
    procedure SetFilterData5(AIndex: Integer; const AValue: string);
    procedure SetFilterData6(AIndex: Integer; const AValue: string);
    procedure SetFilterData7(AIndex: Integer; const AValue: string);
    procedure SetFilterData8(AIndex: Integer; const AValue: string);
    procedure SetFilterData9(AIndex: Integer; const AValue: string);
    procedure SetFilterField(AIndex: Integer; const AValue: string);
    procedure SetFilterField1(AIndex: Integer; const AValue: string);
    procedure SetFilterField10(AIndex: Integer; const AValue: string);
    procedure SetFilterField2(AIndex: Integer; const AValue: string);
    procedure SetFilterField3(AIndex: Integer; const AValue: string);
    procedure SetFilterField4(AIndex: Integer; const AValue: string);
    procedure SetFilterField5(AIndex: Integer; const AValue: string);
    procedure SetFilterField6(AIndex: Integer; const AValue: string);
    procedure SetFilterField7(AIndex: Integer; const AValue: string);
    procedure SetFilterField8(AIndex: Integer; const AValue: string);
    procedure SetFilterField9(AIndex: Integer; const AValue: string);
    procedure SetFilterFields(AIndex: Integer; const AValue: string);
    procedure SetFilterFields1(AIndex: Integer; const AValue: string);
    procedure SetFilterFields10(AIndex: Integer; const AValue: string);
    procedure SetFilterFields2(AIndex: Integer; const AValue: string);
    procedure SetFilterFields3(AIndex: Integer; const AValue: string);
    procedure SetFilterFields4(AIndex: Integer; const AValue: string);
    procedure SetFilterFields5(AIndex: Integer; const AValue: string);
    procedure SetFilterFields6(AIndex: Integer; const AValue: string);
    procedure SetFilterFields7(AIndex: Integer; const AValue: string);
    procedure SetFilterFields8(AIndex: Integer; const AValue: string);
    procedure SetFilterFields9(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId1(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId10(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId2(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId3(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId4(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId5(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId6(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId7(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId8(AIndex: Integer; const AValue: string);
    procedure SetFilterLookupId9(AIndex: Integer; const AValue: string);
    procedure SetFilterOp(AIndex: Integer; const AValue: string);
    procedure SetFilterOp1(AIndex: Integer; const AValue: string);
    procedure SetFilterOp10(AIndex: Integer; const AValue: string);
    procedure SetFilterOp2(AIndex: Integer; const AValue: string);
    procedure SetFilterOp3(AIndex: Integer; const AValue: string);
    procedure SetFilterOp4(AIndex: Integer; const AValue: string);
    procedure SetFilterOp5(AIndex: Integer; const AValue: string);
    procedure SetFilterOp6(AIndex: Integer; const AValue: string);
    procedure SetFilterOp7(AIndex: Integer; const AValue: string);
    procedure SetFilterOp8(AIndex: Integer; const AValue: string);
    procedure SetFilterOp9(AIndex: Integer; const AValue: string);
    procedure SetFilterValue(AIndex: Integer; const AValue: string);
    procedure SetFilterValue1(AIndex: Integer; const AValue: string);
    procedure SetFilterValue10(AIndex: Integer; const AValue: string);
    procedure SetFilterValue2(AIndex: Integer; const AValue: string);
    procedure SetFilterValue3(AIndex: Integer; const AValue: string);
    procedure SetFilterValue4(AIndex: Integer; const AValue: string);
    procedure SetFilterValue5(AIndex: Integer; const AValue: string);
    procedure SetFilterValue6(AIndex: Integer; const AValue: string);
    procedure SetFilterValue7(AIndex: Integer; const AValue: string);
    procedure SetFilterValue8(AIndex: Integer; const AValue: string);
    procedure SetFilterValue9(AIndex: Integer; const AValue: string);
    procedure SetFilterValues(AIndex: Integer; const AValue: string);
    procedure SetFilterValues1(AIndex: Integer; const AValue: string);
    procedure SetFilterValues10(AIndex: Integer; const AValue: string);
    procedure SetFilterValues2(AIndex: Integer; const AValue: string);
    procedure SetFilterValues3(AIndex: Integer; const AValue: string);
    procedure SetFilterValues4(AIndex: Integer; const AValue: string);
    procedure SetFilterValues5(AIndex: Integer; const AValue: string);
    procedure SetFilterValues6(AIndex: Integer; const AValue: string);
    procedure SetFilterValues7(AIndex: Integer; const AValue: string);
    procedure SetFilterValues8(AIndex: Integer; const AValue: string);
    procedure SetFilterValues9(AIndex: Integer; const AValue: string);
    procedure SetGroupString(AIndex: Integer; const AValue: string);
    procedure SetHasOverrideSelectCommand(AIndex: Integer; 
                                     const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: string);
    procedure SetInplaceFullListSearch(AIndex: Integer; 
                                  const AValue: string);
    procedure SetInplaceSearchQuery(AIndex: Integer; const AValue: string);
    procedure SetIsCSR(AIndex: Integer; const AValue: string);
    procedure SetIsGroupRender(AIndex: Integer; const AValue: string);
    procedure SetIsXslView(AIndex: Integer; const AValue: string);
    procedure SetListViewPageUrl(AIndex: Integer; const AValue: string);
    procedure SetOverrideScope(AIndex: Integer; const AValue: string);
    procedure SetOverrideSelectCommand(AIndex: Integer; 
                                  const AValue: string);
    procedure SetPageFirstRow(AIndex: Integer; const AValue: string);
    procedure SetPageLastRow(AIndex: Integer; const AValue: string);
    procedure SetRootFolder(AIndex: Integer; const AValue: string);
    procedure SetSortDir(AIndex: Integer; const AValue: string);
    procedure SetSortDir1(AIndex: Integer; const AValue: string);
    procedure SetSortDir10(AIndex: Integer; const AValue: string);
    procedure SetSortDir2(AIndex: Integer; const AValue: string);
    procedure SetSortDir3(AIndex: Integer; const AValue: string);
    procedure SetSortDir4(AIndex: Integer; const AValue: string);
    procedure SetSortDir5(AIndex: Integer; const AValue: string);
    procedure SetSortDir6(AIndex: Integer; const AValue: string);
    procedure SetSortDir7(AIndex: Integer; const AValue: string);
    procedure SetSortDir8(AIndex: Integer; const AValue: string);
    procedure SetSortDir9(AIndex: Integer; const AValue: string);
    procedure SetSortField(AIndex: Integer; const AValue: string);
    procedure SetSortField1(AIndex: Integer; const AValue: string);
    procedure SetSortField10(AIndex: Integer; const AValue: string);
    procedure SetSortField2(AIndex: Integer; const AValue: string);
    procedure SetSortField3(AIndex: Integer; const AValue: string);
    procedure SetSortField4(AIndex: Integer; const AValue: string);
    procedure SetSortField5(AIndex: Integer; const AValue: string);
    procedure SetSortField6(AIndex: Integer; const AValue: string);
    procedure SetSortField7(AIndex: Integer; const AValue: string);
    procedure SetSortField8(AIndex: Integer; const AValue: string);
    procedure SetSortField9(AIndex: Integer; const AValue: string);
    procedure SetSortFields(AIndex: Integer; const AValue: string);
    procedure SetSortFieldValues(AIndex: Integer; const AValue: string);
    procedure SetView(AIndex: Integer; const AValue: string);
    procedure SetViewCount(AIndex: Integer; const AValue: string);
    procedure SetViewId(AIndex: Integer; const AValue: string);
    procedure SetWebPartId(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CascDelWarnMessage : string index 0 read FCascDelWarnMessage write SetCascDelWarnMessage;
    Property CustomAction : string index 8 read FCustomAction write SetCustomAction;
    Property DrillDown : string index 16 read FDrillDown write SetDrillDown;
    Property Field : string index 24 read FField write SetField;
    Property FieldInternalName : string index 32 read FFieldInternalName write SetFieldInternalName;
    Property Filter : string index 40 read FFilter write SetFilter;
    Property FilterData : string index 48 read FFilterData write SetFilterData;
    Property FilterData1 : string index 56 read FFilterData1 write SetFilterData1;
    Property FilterData10 : string index 64 read FFilterData10 write SetFilterData10;
    Property FilterData2 : string index 72 read FFilterData2 write SetFilterData2;
    Property FilterData3 : string index 80 read FFilterData3 write SetFilterData3;
    Property FilterData4 : string index 88 read FFilterData4 write SetFilterData4;
    Property FilterData5 : string index 96 read FFilterData5 write SetFilterData5;
    Property FilterData6 : string index 104 read FFilterData6 write SetFilterData6;
    Property FilterData7 : string index 112 read FFilterData7 write SetFilterData7;
    Property FilterData8 : string index 120 read FFilterData8 write SetFilterData8;
    Property FilterData9 : string index 128 read FFilterData9 write SetFilterData9;
    Property FilterField : string index 136 read FFilterField write SetFilterField;
    Property FilterField1 : string index 144 read FFilterField1 write SetFilterField1;
    Property FilterField10 : string index 152 read FFilterField10 write SetFilterField10;
    Property FilterField2 : string index 160 read FFilterField2 write SetFilterField2;
    Property FilterField3 : string index 168 read FFilterField3 write SetFilterField3;
    Property FilterField4 : string index 176 read FFilterField4 write SetFilterField4;
    Property FilterField5 : string index 184 read FFilterField5 write SetFilterField5;
    Property FilterField6 : string index 192 read FFilterField6 write SetFilterField6;
    Property FilterField7 : string index 200 read FFilterField7 write SetFilterField7;
    Property FilterField8 : string index 208 read FFilterField8 write SetFilterField8;
    Property FilterField9 : string index 216 read FFilterField9 write SetFilterField9;
    Property FilterFields : string index 224 read FFilterFields write SetFilterFields;
    Property FilterFields1 : string index 232 read FFilterFields1 write SetFilterFields1;
    Property FilterFields10 : string index 240 read FFilterFields10 write SetFilterFields10;
    Property FilterFields2 : string index 248 read FFilterFields2 write SetFilterFields2;
    Property FilterFields3 : string index 256 read FFilterFields3 write SetFilterFields3;
    Property FilterFields4 : string index 264 read FFilterFields4 write SetFilterFields4;
    Property FilterFields5 : string index 272 read FFilterFields5 write SetFilterFields5;
    Property FilterFields6 : string index 280 read FFilterFields6 write SetFilterFields6;
    Property FilterFields7 : string index 288 read FFilterFields7 write SetFilterFields7;
    Property FilterFields8 : string index 296 read FFilterFields8 write SetFilterFields8;
    Property FilterFields9 : string index 304 read FFilterFields9 write SetFilterFields9;
    Property FilterLookupId : string index 312 read FFilterLookupId write SetFilterLookupId;
    Property FilterLookupId1 : string index 320 read FFilterLookupId1 write SetFilterLookupId1;
    Property FilterLookupId10 : string index 328 read FFilterLookupId10 write SetFilterLookupId10;
    Property FilterLookupId2 : string index 336 read FFilterLookupId2 write SetFilterLookupId2;
    Property FilterLookupId3 : string index 344 read FFilterLookupId3 write SetFilterLookupId3;
    Property FilterLookupId4 : string index 352 read FFilterLookupId4 write SetFilterLookupId4;
    Property FilterLookupId5 : string index 360 read FFilterLookupId5 write SetFilterLookupId5;
    Property FilterLookupId6 : string index 368 read FFilterLookupId6 write SetFilterLookupId6;
    Property FilterLookupId7 : string index 376 read FFilterLookupId7 write SetFilterLookupId7;
    Property FilterLookupId8 : string index 384 read FFilterLookupId8 write SetFilterLookupId8;
    Property FilterLookupId9 : string index 392 read FFilterLookupId9 write SetFilterLookupId9;
    Property FilterOp : string index 400 read FFilterOp write SetFilterOp;
    Property FilterOp1 : string index 408 read FFilterOp1 write SetFilterOp1;
    Property FilterOp10 : string index 416 read FFilterOp10 write SetFilterOp10;
    Property FilterOp2 : string index 424 read FFilterOp2 write SetFilterOp2;
    Property FilterOp3 : string index 432 read FFilterOp3 write SetFilterOp3;
    Property FilterOp4 : string index 440 read FFilterOp4 write SetFilterOp4;
    Property FilterOp5 : string index 448 read FFilterOp5 write SetFilterOp5;
    Property FilterOp6 : string index 456 read FFilterOp6 write SetFilterOp6;
    Property FilterOp7 : string index 464 read FFilterOp7 write SetFilterOp7;
    Property FilterOp8 : string index 472 read FFilterOp8 write SetFilterOp8;
    Property FilterOp9 : string index 480 read FFilterOp9 write SetFilterOp9;
    Property FilterValue : string index 488 read FFilterValue write SetFilterValue;
    Property FilterValue1 : string index 496 read FFilterValue1 write SetFilterValue1;
    Property FilterValue10 : string index 504 read FFilterValue10 write SetFilterValue10;
    Property FilterValue2 : string index 512 read FFilterValue2 write SetFilterValue2;
    Property FilterValue3 : string index 520 read FFilterValue3 write SetFilterValue3;
    Property FilterValue4 : string index 528 read FFilterValue4 write SetFilterValue4;
    Property FilterValue5 : string index 536 read FFilterValue5 write SetFilterValue5;
    Property FilterValue6 : string index 544 read FFilterValue6 write SetFilterValue6;
    Property FilterValue7 : string index 552 read FFilterValue7 write SetFilterValue7;
    Property FilterValue8 : string index 560 read FFilterValue8 write SetFilterValue8;
    Property FilterValue9 : string index 568 read FFilterValue9 write SetFilterValue9;
    Property FilterValues : string index 576 read FFilterValues write SetFilterValues;
    Property FilterValues1 : string index 584 read FFilterValues1 write SetFilterValues1;
    Property FilterValues10 : string index 592 read FFilterValues10 write SetFilterValues10;
    Property FilterValues2 : string index 600 read FFilterValues2 write SetFilterValues2;
    Property FilterValues3 : string index 608 read FFilterValues3 write SetFilterValues3;
    Property FilterValues4 : string index 616 read FFilterValues4 write SetFilterValues4;
    Property FilterValues5 : string index 624 read FFilterValues5 write SetFilterValues5;
    Property FilterValues6 : string index 632 read FFilterValues6 write SetFilterValues6;
    Property FilterValues7 : string index 640 read FFilterValues7 write SetFilterValues7;
    Property FilterValues8 : string index 648 read FFilterValues8 write SetFilterValues8;
    Property FilterValues9 : string index 656 read FFilterValues9 write SetFilterValues9;
    Property GroupString : string index 664 read FGroupString write SetGroupString;
    Property HasOverrideSelectCommand : string index 672 read FHasOverrideSelectCommand write SetHasOverrideSelectCommand;
    Property ID : string index 680 read FID write SetID;
    Property InplaceFullListSearch : string index 688 read FInplaceFullListSearch write SetInplaceFullListSearch;
    Property InplaceSearchQuery : string index 696 read FInplaceSearchQuery write SetInplaceSearchQuery;
    Property IsCSR : string index 704 read FIsCSR write SetIsCSR;
    Property IsGroupRender : string index 712 read FIsGroupRender write SetIsGroupRender;
    Property IsXslView : string index 720 read FIsXslView write SetIsXslView;
    Property ListViewPageUrl : string index 728 read FListViewPageUrl write SetListViewPageUrl;
    Property OverrideScope : string index 736 read FOverrideScope write SetOverrideScope;
    Property OverrideSelectCommand : string index 744 read FOverrideSelectCommand write SetOverrideSelectCommand;
    Property PageFirstRow : string index 752 read FPageFirstRow write SetPageFirstRow;
    Property PageLastRow : string index 760 read FPageLastRow write SetPageLastRow;
    Property RootFolder : string index 768 read FRootFolder write SetRootFolder;
    Property SortDir : string index 776 read FSortDir write SetSortDir;
    Property SortDir1 : string index 784 read FSortDir1 write SetSortDir1;
    Property SortDir10 : string index 792 read FSortDir10 write SetSortDir10;
    Property SortDir2 : string index 800 read FSortDir2 write SetSortDir2;
    Property SortDir3 : string index 808 read FSortDir3 write SetSortDir3;
    Property SortDir4 : string index 816 read FSortDir4 write SetSortDir4;
    Property SortDir5 : string index 824 read FSortDir5 write SetSortDir5;
    Property SortDir6 : string index 832 read FSortDir6 write SetSortDir6;
    Property SortDir7 : string index 840 read FSortDir7 write SetSortDir7;
    Property SortDir8 : string index 848 read FSortDir8 write SetSortDir8;
    Property SortDir9 : string index 856 read FSortDir9 write SetSortDir9;
    Property SortField : string index 864 read FSortField write SetSortField;
    Property SortField1 : string index 872 read FSortField1 write SetSortField1;
    Property SortField10 : string index 880 read FSortField10 write SetSortField10;
    Property SortField2 : string index 888 read FSortField2 write SetSortField2;
    Property SortField3 : string index 896 read FSortField3 write SetSortField3;
    Property SortField4 : string index 904 read FSortField4 write SetSortField4;
    Property SortField5 : string index 912 read FSortField5 write SetSortField5;
    Property SortField6 : string index 920 read FSortField6 write SetSortField6;
    Property SortField7 : string index 928 read FSortField7 write SetSortField7;
    Property SortField8 : string index 936 read FSortField8 write SetSortField8;
    Property SortField9 : string index 944 read FSortField9 write SetSortField9;
    Property SortFields : string index 952 read FSortFields write SetSortFields;
    Property SortFieldValues : string index 960 read FSortFieldValues write SetSortFieldValues;
    Property View : string index 968 read FView write SetView;
    Property ViewCount : string index 976 read FViewCount write SetViewCount;
    Property ViewId : string index 984 read FViewId write SetViewId;
    Property WebPartId : string index 992 read FWebPartId write SetWebPartId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RenderListDataParameters
    --------------------------------------------------------------------}
  
  TSPRenderListDataParameters = Class(TODataEntity)
  private
    FFolderServerRelativeUrl : string;
    FPaging : string;
    FRenderOptions : TInt32;
    FViewXml : string;
    procedure SetFolderServerRelativeUrl(AIndex: Integer; 
                                    const AValue: string);
    procedure SetPaging(AIndex: Integer; const AValue: string);
    procedure SetRenderOptions(AIndex: Integer; const AValue: TInt32);
    procedure SetViewXml(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FolderServerRelativeUrl : string index 0 read FFolderServerRelativeUrl write SetFolderServerRelativeUrl;
    Property Paging : string index 8 read FPaging write SetPaging;
    Property RenderOptions : TInt32 index 16 read FRenderOptions write SetRenderOptions;
    Property ViewXml : string index 24 read FViewXml write SetViewXml;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RenderListFilterDataParameters
    --------------------------------------------------------------------}
  
  TSPRenderListFilterDataParameters = Class(TODataEntity)
  private
    FFieldInternalName : string;
    FOverrideScope : string;
    FProcessQStringToCAML : string;
    FViewId : string;
    procedure SetFieldInternalName(AIndex: Integer; const AValue: string);
    procedure SetOverrideScope(AIndex: Integer; const AValue: string);
    procedure SetProcessQStringToCAML(AIndex: Integer; const AValue: string);
    procedure SetViewId(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FieldInternalName : string index 0 read FFieldInternalName write SetFieldInternalName;
    Property OverrideScope : string index 8 read FOverrideScope write SetOverrideScope;
    Property ProcessQStringToCAML : string index 16 read FProcessQStringToCAML write SetProcessQStringToCAML;
    Property ViewId : string index 24 read FViewId write SetViewId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RoleDefinitionCreationInformation
    --------------------------------------------------------------------}
  
  TSPRoleDefinitionCreationInformation = Class(TODataEntity)
  private
    FBasePermissions : TSPBasePermissions;
    FDescription : string;
    FName : string;
    FOrder : TInt32;
    procedure SetBasePermissions(AIndex: Integer; 
                            const AValue: TSPBasePermissions);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOrder(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property BasePermissions : TSPBasePermissions index 0 read FBasePermissions write SetBasePermissions;
    Property Description : string index 8 read FDescription write SetDescription;
    Property Name : string index 16 read FName write SetName;
    Property Order : TInt32 index 24 read FOrder write SetOrder;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UpgradeInfo
    --------------------------------------------------------------------}
  
  TSPUpgradeInfo = Class(TODataEntity)
  private
    FErrorFile : string;
    FErrors : TInt32;
    FLastUpdated : TDateTime;
    FLogFile : string;
    FRequestDate : TDateTime;
    FRetryCount : TInt32;
    FStartTime : TDateTime;
    FStatus : TInt32;
    FUpgradeType : TInt32;
    FWarnings : TInt32;
    procedure SetErrorFile(AIndex: Integer; const AValue: string);
    procedure SetErrors(AIndex: Integer; const AValue: TInt32);
    procedure SetLastUpdated(AIndex: Integer; const AValue: TDateTime);
    procedure SetLogFile(AIndex: Integer; const AValue: string);
    procedure SetRequestDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetRetryCount(AIndex: Integer; const AValue: TInt32);
    procedure SetStartTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetUpgradeType(AIndex: Integer; const AValue: TInt32);
    procedure SetWarnings(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ErrorFile : string index 0 read FErrorFile write SetErrorFile;
    Property Errors : TInt32 index 8 read FErrors write SetErrors;
    Property LastUpdated : TDateTime index 16 read FLastUpdated write SetLastUpdated;
    Property LogFile : string index 24 read FLogFile write SetLogFile;
    Property RequestDate : TDateTime index 32 read FRequestDate write SetRequestDate;
    Property RetryCount : TInt32 index 40 read FRetryCount write SetRetryCount;
    Property StartTime : TDateTime index 48 read FStartTime write SetStartTime;
    Property Status : TInt32 index 56 read FStatus write SetStatus;
    Property UpgradeType : TInt32 index 64 read FUpgradeType write SetUpgradeType;
    Property Warnings : TInt32 index 72 read FWarnings write SetWarnings;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SubwebQuery
    --------------------------------------------------------------------}
  
  TSPSubwebQuery = Class(TODataEntity)
  private
    FConfigurationFilter : TInt32;
    FWebTemplateFilter : TInt32;
    procedure SetConfigurationFilter(AIndex: Integer; const AValue: TInt32);
    procedure SetWebTemplateFilter(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ConfigurationFilter : TInt32 index 0 read FConfigurationFilter write SetConfigurationFilter;
    Property WebTemplateFilter : TInt32 index 8 read FWebTemplateFilter write SetWebTemplateFilter;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantAppInformation
    --------------------------------------------------------------------}
  
  TSPTenantAppInformation = Class(TODataEntity)
  private
    FAppPrincipalId : string;
    FAppWebFullUrl : string;
    FCreationTime : TDateTime;
    FIconAbsoluteUrl : string;
    FIconFallbackAbsoluteUrl : string;
    FId : TGUIDString;
    FLaunchUrl : string;
    FPackageFingerprint : TBinary;
    FProductId : TGUIDString;
    FRemoteAppUrl : string;
    FStatus : TInt32;
    FTitle : string;
    procedure SetAppPrincipalId(AIndex: Integer; const AValue: string);
    procedure SetAppWebFullUrl(AIndex: Integer; const AValue: string);
    procedure SetCreationTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetIconAbsoluteUrl(AIndex: Integer; const AValue: string);
    procedure SetIconFallbackAbsoluteUrl(AIndex: Integer; 
                                    const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLaunchUrl(AIndex: Integer; const AValue: string);
    procedure SetPackageFingerprint(AIndex: Integer; const AValue: TBinary);
    procedure SetProductId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetRemoteAppUrl(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AppPrincipalId : string index 0 read FAppPrincipalId write SetAppPrincipalId;
    Property AppWebFullUrl : string index 8 read FAppWebFullUrl write SetAppWebFullUrl;
    Property CreationTime : TDateTime index 16 read FCreationTime write SetCreationTime;
    Property IconAbsoluteUrl : string index 24 read FIconAbsoluteUrl write SetIconAbsoluteUrl;
    Property IconFallbackAbsoluteUrl : string index 32 read FIconFallbackAbsoluteUrl write SetIconFallbackAbsoluteUrl;
    Property Id : TGUIDString index 40 read FId write SetId;
    Property LaunchUrl : string index 48 read FLaunchUrl write SetLaunchUrl;
    Property PackageFingerprint : TBinary index 56 read FPackageFingerprint write SetPackageFingerprint;
    Property ProductId : TGUIDString index 64 read FProductId write SetProductId;
    Property RemoteAppUrl : string index 72 read FRemoteAppUrl write SetRemoteAppUrl;
    Property Status : TInt32 index 80 read FStatus write SetStatus;
    Property Title : string index 88 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeZoneInformation
    --------------------------------------------------------------------}
  
  TSPTimeZoneInformation = Class(TODataEntity)
  private
    FBias : TInt32;
    FDaylightBias : TInt32;
    FStandardBias : TInt32;
    procedure SetBias(AIndex: Integer; const AValue: TInt32);
    procedure SetDaylightBias(AIndex: Integer; const AValue: TInt32);
    procedure SetStandardBias(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Bias : TInt32 index 0 read FBias write SetBias;
    Property DaylightBias : TInt32 index 8 read FDaylightBias write SetDaylightBias;
    Property StandardBias : TInt32 index 16 read FStandardBias write SetStandardBias;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UsageInfo
    --------------------------------------------------------------------}
  
  TSPUsageInfo = Class(TODataEntity)
  private
    FBandwidth : int64;
    FDiscussionStorage : int64;
    FHits : int64;
    FStorage : int64;
    FStoragePercentageUsed : Double;
    FVisits : int64;
    procedure SetBandwidth(AIndex: Integer; const AValue: int64);
    procedure SetDiscussionStorage(AIndex: Integer; const AValue: int64);
    procedure SetHits(AIndex: Integer; const AValue: int64);
    procedure SetStorage(AIndex: Integer; const AValue: int64);
    procedure SetStoragePercentageUsed(AIndex: Integer; 
                                  const AValue: Double);
    procedure SetVisits(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Bandwidth : int64 index 0 read FBandwidth write SetBandwidth;
    Property DiscussionStorage : int64 index 8 read FDiscussionStorage write SetDiscussionStorage;
    Property Hits : int64 index 16 read FHits write SetHits;
    Property Storage : int64 index 24 read FStorage write SetStorage;
    Property StoragePercentageUsed : Double index 32 read FStoragePercentageUsed write SetStoragePercentageUsed;
    Property Visits : int64 index 40 read FVisits write SetVisits;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserCreationInformation
    --------------------------------------------------------------------}
  
  TSPUserCreationInformation = Class(TODataEntity)
  private
    FEmail : string;
    FLoginName : string;
    FTitle : string;
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Email : string index 0 read FEmail write SetEmail;
    Property LoginName : string index 8 read FLoginName write SetLoginName;
    Property Title : string index 16 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserIdInfo
    --------------------------------------------------------------------}
  
  TSPUserIdInfo = Class(TODataEntity)
  private
    FNameId : string;
    FNameIdIssuer : string;
    procedure SetNameId(AIndex: Integer; const AValue: string);
    procedure SetNameIdIssuer(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property NameId : string index 0 read FNameId write SetNameId;
    Property NameIdIssuer : string index 8 read FNameIdIssuer write SetNameIdIssuer;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ViewCreationInformation
    --------------------------------------------------------------------}
  
  TSPViewCreationInformation = Class(TODataEntity)
  private
    FPaged : boolean;
    FPersonalView : boolean;
    FQuery : string;
    FRowLimit : TInt32;
    FSetAsDefaultView : boolean;
    FTitle : string;
    FViewFields : TStringArray;
    FViewTypeKind : TInt32;
    procedure SetPaged(AIndex: Integer; const AValue: boolean);
    procedure SetPersonalView(AIndex: Integer; const AValue: boolean);
    procedure SetQuery(AIndex: Integer; const AValue: string);
    procedure SetRowLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetSetAsDefaultView(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetViewFields(AIndex: Integer; const AValue: TStringArray);
    procedure SetViewTypeKind(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Paged : boolean index 0 read FPaged write SetPaged;
    Property PersonalView : boolean index 8 read FPersonalView write SetPersonalView;
    Property Query : string index 16 read FQuery write SetQuery;
    Property RowLimit : TInt32 index 24 read FRowLimit write SetRowLimit;
    Property SetAsDefaultView : boolean index 32 read FSetAsDefaultView write SetSetAsDefaultView;
    Property Title : string index 40 read FTitle write SetTitle;
    Property ViewFields : TStringArray index 48 read FViewFields write SetViewFields;
    Property ViewTypeKind : TInt32 index 56 read FViewTypeKind write SetViewTypeKind;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebCreationInformation
    --------------------------------------------------------------------}
  
  TSPWebCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FLanguage : TInt32;
    FTitle : string;
    FUrl : string;
    FUseSamePermissionsAsParentSite : boolean;
    FWebTemplate : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetLanguage(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetUseSamePermissionsAsParentSite(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetWebTemplate(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Language : TInt32 index 8 read FLanguage write SetLanguage;
    Property Title : string index 16 read FTitle write SetTitle;
    Property Url : string index 24 read FUrl write SetUrl;
    Property UseSamePermissionsAsParentSite : boolean index 32 read FUseSamePermissionsAsParentSite write SetUseSamePermissionsAsParentSite;
    Property WebTemplate : string index 40 read FWebTemplate write SetWebTemplate;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebInfoCreationInformation
    --------------------------------------------------------------------}
  
  TSPWebInfoCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FLanguage : TInt32;
    FTitle : string;
    FUrl : string;
    FUseUniquePermissions : boolean;
    FWebTemplate : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetLanguage(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetUseUniquePermissions(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetWebTemplate(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Language : TInt32 index 8 read FLanguage write SetLanguage;
    Property Title : string index 16 read FTitle write SetTitle;
    Property Url : string index 24 read FUrl write SetUrl;
    Property UseUniquePermissions : boolean index 32 read FUseUniquePermissions write SetUseUniquePermissions;
    Property WebTemplate : string index 40 read FWebTemplate write SetWebTemplate;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebRequestInfo
    --------------------------------------------------------------------}
  
  TSPWebRequestInfo = Class(TODataEntity)
  private
    FBody : string;
    FHeaders : TSPKeyValueArray;
    FMethod : string;
    FUrl : string;
    procedure SetBody(AIndex: Integer; const AValue: string);
    procedure SetHeaders(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetMethod(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Body : string index 0 read FBody write SetBody;
    Property Headers : TSPKeyValueArray index 8 read FHeaders write SetHeaders;
    Property Method : string index 16 read FMethod write SetMethod;
    Property Url : string index 24 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebResponseInfo
    --------------------------------------------------------------------}
  
  TSPWebResponseInfo = Class(TODataEntity)
  private
    FBody : string;
    FHeaders : TSPKeyValueArray;
    FStatusCode : TInt32;
    procedure SetBody(AIndex: Integer; const AValue: string);
    procedure SetHeaders(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetStatusCode(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Body : string index 0 read FBody write SetBody;
    Property Headers : TSPKeyValueArray index 8 read FHeaders write SetHeaders;
    Property StatusCode : TInt32 index 16 read FStatusCode write SetStatusCode;
  end;
  
  
  { --------------------------------------------------------------------
    SP: XmlSchemaFieldCreationInformation
    --------------------------------------------------------------------}
  
  TSPXmlSchemaFieldCreationInformation = Class(TODataEntity)
  private
    FOptions : TInt32;
    FSchemaXml : string;
    procedure SetOptions(AIndex: Integer; const AValue: TInt32);
    procedure SetSchemaXml(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Options : TInt32 index 0 read FOptions write SetOptions;
    Property SchemaXml : string index 8 read FSchemaXml write SetSchemaXml;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ApiMetadata
    --------------------------------------------------------------------}
  
  TSPApiMetadata = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService) : TSPApiMetadata;
    function Types(AService: TODataService) : TSPTypeInformation;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TypeInformation
    --------------------------------------------------------------------}
  
  TSPTypeInformation = Class(TODataEntity)
  private
    FBaseTypeFullName : string;
    FFullName : string;
    FIsValueObject : boolean;
    FMethods : TSPMethodInformationArray;
    FProperties : TSPPropertyInformationArray;
    procedure SetBaseTypeFullName(AIndex: Integer; const AValue: string);
    procedure SetFullName(AIndex: Integer; const AValue: string);
    procedure SetIsValueObject(AIndex: Integer; const AValue: boolean);
    procedure SetMethods(AIndex: Integer; 
                    const AValue: TSPMethodInformationArray);
    procedure SetProperties(AIndex: Integer; 
                       const AValue: TSPPropertyInformationArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property BaseTypeFullName : string index 0 read FBaseTypeFullName write SetBaseTypeFullName;
    Property FullName : string index 8 read FFullName write SetFullName;
    Property IsValueObject : boolean index 16 read FIsValueObject write SetIsValueObject;
    Property Methods : TSPMethodInformationArray index 24 read FMethods write SetMethods;
    Property Properties : TSPPropertyInformationArray index 32 read FProperties write SetProperties;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Site
    --------------------------------------------------------------------}
  
  TSPSite = Class(TODataEntity)
  private
    FAllowCreateDeclarativeWorkflow : boolean;
    FAllowDesigner : boolean;
    FAllowMasterPageEditing : boolean;
    FAllowRevertFromTemplate : boolean;
    FAllowSaveDeclarativeWorkflowAsTemplate : boolean;
    FAllowSavePublishDeclarativeWorkflow : boolean;
    FAllowSelfServiceUpgrade : boolean;
    FAllowSelfServiceUpgradeEvaluation : boolean;
    FAuditLogTrimmingRetention : TInt32;
    FCanUpgrade : boolean;
    FCompatibilityLevel : TInt32;
    FExternalSharingTipsEnabled : boolean;
    FId : TGUIDString;
    FLockIssue : string;
    FMaxItemsPerThrottledOperation : TInt32;
    FNeedsB2BUpgrade : boolean;
    FPrimaryUri : string;
    FReadOnly : boolean;
    FRequiredDesignerVersion : string;
    FSandboxedCodeActivationCapability : TInt32;
    FServerRelativeUrl : string;
    FShareByEmailEnabled : boolean;
    FShareByLinkEnabled : boolean;
    FShowUrlStructure : boolean;
    FTrimAuditLog : boolean;
    FUIVersionConfigurationEnabled : boolean;
    FUpgradeInfo : TSPUpgradeInfo;
    FUpgradeReminderDate : TDateTime;
    FUpgradeScheduled : boolean;
    FUpgradeScheduledDate : TDateTime;
    FUpgrading : boolean;
    FUrl : string;
    FUsage : TSPUsageInfo;
    procedure SetAllowCreateDeclarativeWorkflow(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetAllowDesigner(AIndex: Integer; const AValue: boolean);
    procedure SetAllowMasterPageEditing(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetAllowRevertFromTemplate(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAllowSaveDeclarativeWorkflowAsTemplate(AIndex: Integer; 
                                                   const AValue: boolean);
    procedure SetAllowSavePublishDeclarativeWorkflow(AIndex: Integer; 
                                                const AValue: boolean);
    procedure SetAllowSelfServiceUpgrade(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAllowSelfServiceUpgradeEvaluation(AIndex: Integer; 
                                              const AValue: boolean);
    procedure SetAuditLogTrimmingRetention(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetCanUpgrade(AIndex: Integer; const AValue: boolean);
    procedure SetCompatibilityLevel(AIndex: Integer; const AValue: TInt32);
    procedure SetExternalSharingTipsEnabled(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLockIssue(AIndex: Integer; const AValue: string);
    procedure SetMaxItemsPerThrottledOperation(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetNeedsB2BUpgrade(AIndex: Integer; const AValue: boolean);
    procedure SetPrimaryUri(AIndex: Integer; const AValue: string);
    procedure SetReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetRequiredDesignerVersion(AIndex: Integer; 
                                    const AValue: string);
    procedure SetSandboxedCodeActivationCapability(AIndex: Integer; 
                                              const AValue: TInt32);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetShareByEmailEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetShareByLinkEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetShowUrlStructure(AIndex: Integer; const AValue: boolean);
    procedure SetTrimAuditLog(AIndex: Integer; const AValue: boolean);
    procedure SetUIVersionConfigurationEnabled(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetUpgradeInfo(AIndex: Integer; const AValue: TSPUpgradeInfo);
    procedure SetUpgradeReminderDate(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetUpgradeScheduled(AIndex: Integer; const AValue: boolean);
    procedure SetUpgradeScheduledDate(AIndex: Integer; 
                                 const AValue: TDateTime);
    procedure SetUpgrading(AIndex: Integer; const AValue: boolean);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetUsage(AIndex: Integer; const AValue: TSPUsageInfo);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Audit(AService: TODataService) : TSPAudit;
    function EventReceivers(AService: TODataService)
                        : TSPEventReceiverDefinition;
    function Features(AService: TODataService) : TSPFeature;
    function Owner(AService: TODataService) : TSPUser;
    function RecycleBin(AService: TODataService) : TSPRecycleBinItem;
    function RootWeb(AService: TODataService) : TSPWeb;
    function SecondaryContact(AService: TODataService) : TSPUser;
    function UserCustomActions(AService: TODataService)
                           : TSPUserCustomAction;
  published
    Property AllowCreateDeclarativeWorkflow : boolean index 0 read FAllowCreateDeclarativeWorkflow write SetAllowCreateDeclarativeWorkflow;
    Property AllowDesigner : boolean index 8 read FAllowDesigner write SetAllowDesigner;
    Property AllowMasterPageEditing : boolean index 16 read FAllowMasterPageEditing write SetAllowMasterPageEditing;
    Property AllowRevertFromTemplate : boolean index 24 read FAllowRevertFromTemplate write SetAllowRevertFromTemplate;
    Property AllowSaveDeclarativeWorkflowAsTemplate : boolean index 32 read FAllowSaveDeclarativeWorkflowAsTemplate write SetAllowSaveDeclarativeWorkflowAsTemplate;
    Property AllowSavePublishDeclarativeWorkflow : boolean index 40 read FAllowSavePublishDeclarativeWorkflow write SetAllowSavePublishDeclarativeWorkflow;
    Property AllowSelfServiceUpgrade : boolean index 48 read FAllowSelfServiceUpgrade write SetAllowSelfServiceUpgrade;
    Property AllowSelfServiceUpgradeEvaluation : boolean index 56 read FAllowSelfServiceUpgradeEvaluation write SetAllowSelfServiceUpgradeEvaluation;
    Property AuditLogTrimmingRetention : TInt32 index 64 read FAuditLogTrimmingRetention write SetAuditLogTrimmingRetention;
    Property CanUpgrade : boolean index 72 read FCanUpgrade write SetCanUpgrade;
    Property CompatibilityLevel : TInt32 index 80 read FCompatibilityLevel write SetCompatibilityLevel;
    Property ExternalSharingTipsEnabled : boolean index 88 read FExternalSharingTipsEnabled write SetExternalSharingTipsEnabled;
    Property Id : TGUIDString index 96 read FId write SetId;
    Property LockIssue : string index 104 read FLockIssue write SetLockIssue;
    Property MaxItemsPerThrottledOperation : TInt32 index 112 read FMaxItemsPerThrottledOperation write SetMaxItemsPerThrottledOperation;
    Property NeedsB2BUpgrade : boolean index 120 read FNeedsB2BUpgrade write SetNeedsB2BUpgrade;
    Property PrimaryUri : string index 128 read FPrimaryUri write SetPrimaryUri;
    Property ReadOnly : boolean index 136 read FReadOnly write SetReadOnly;
    Property RequiredDesignerVersion : string index 144 read FRequiredDesignerVersion write SetRequiredDesignerVersion;
    Property SandboxedCodeActivationCapability : TInt32 index 152 read FSandboxedCodeActivationCapability write SetSandboxedCodeActivationCapability;
    Property ServerRelativeUrl : string index 160 read FServerRelativeUrl write SetServerRelativeUrl;
    Property ShareByEmailEnabled : boolean index 168 read FShareByEmailEnabled write SetShareByEmailEnabled;
    Property ShareByLinkEnabled : boolean index 176 read FShareByLinkEnabled write SetShareByLinkEnabled;
    Property ShowUrlStructure : boolean index 184 read FShowUrlStructure write SetShowUrlStructure;
    Property TrimAuditLog : boolean index 192 read FTrimAuditLog write SetTrimAuditLog;
    Property UIVersionConfigurationEnabled : boolean index 200 read FUIVersionConfigurationEnabled write SetUIVersionConfigurationEnabled;
    Property UpgradeInfo : TSPUpgradeInfo index 208 read FUpgradeInfo write SetUpgradeInfo;
    Property UpgradeReminderDate : TDateTime index 216 read FUpgradeReminderDate write SetUpgradeReminderDate;
    Property UpgradeScheduled : boolean index 224 read FUpgradeScheduled write SetUpgradeScheduled;
    Property UpgradeScheduledDate : TDateTime index 232 read FUpgradeScheduledDate write SetUpgradeScheduledDate;
    Property Upgrading : boolean index 240 read FUpgrading write SetUpgrading;
    Property Url : string index 248 read FUrl write SetUrl;
    Property Usage : TSPUsageInfo index 256 read FUsage write SetUsage;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Audit
    --------------------------------------------------------------------}
  
  TSPAudit = Class(TODataEntity)
  private
    FAuditFlags : TInt32;
    procedure SetAuditFlags(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AuditFlags : TInt32 index 0 read FAuditFlags write SetAuditFlags;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EventReceiverDefinition
    --------------------------------------------------------------------}
  
  TSPEventReceiverDefinition = Class(TODataEntity)
  private
    FReceiverAssembly : string;
    FReceiverClass : string;
    FReceiverId : TGUIDString;
    FReceiverName : string;
    FSequenceNumber : TInt32;
    FSynchronization : TInt32;
    FEventType : TInt32;
    FReceiverUrl : string;
    procedure SetReceiverAssembly(AIndex: Integer; const AValue: string);
    procedure SetReceiverClass(AIndex: Integer; const AValue: string);
    procedure SetReceiverId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetReceiverName(AIndex: Integer; const AValue: string);
    procedure SetSequenceNumber(AIndex: Integer; const AValue: TInt32);
    procedure SetSynchronization(AIndex: Integer; const AValue: TInt32);
    procedure SetEventType(AIndex: Integer; const AValue: TInt32);
    procedure SetReceiverUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ReceiverAssembly : string index 0 read FReceiverAssembly write SetReceiverAssembly;
    Property ReceiverClass : string index 8 read FReceiverClass write SetReceiverClass;
    Property ReceiverId : TGUIDString index 16 read FReceiverId write SetReceiverId;
    Property ReceiverName : string index 24 read FReceiverName write SetReceiverName;
    Property SequenceNumber : TInt32 index 32 read FSequenceNumber write SetSequenceNumber;
    Property Synchronization : TInt32 index 40 read FSynchronization write SetSynchronization;
    Property EventType : TInt32 index 48 read FEventType write SetEventType;
    Property ReceiverUrl : string index 56 read FReceiverUrl write SetReceiverUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Feature
    --------------------------------------------------------------------}
  
  TSPFeature = Class(TODataEntity)
  private
    FDefinitionId : TGUIDString;
    FDisplayName : string;
    procedure SetDefinitionId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property DefinitionId : TGUIDString index 0 read FDefinitionId write SetDefinitionId;
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Principal
    --------------------------------------------------------------------}
  
  TSPPrincipal = Class(TODataEntity)
  private
    FId : TInt32;
    FIsHiddenInUI : boolean;
    FLoginName : string;
    FTitle : string;
    FPrincipalType : TInt32;
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetIsHiddenInUI(AIndex: Integer; const AValue: boolean);
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetPrincipalType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id : TInt32 index 0 read FId write SetId;
    Property IsHiddenInUI : boolean index 8 read FIsHiddenInUI write SetIsHiddenInUI;
    Property LoginName : string index 16 read FLoginName write SetLoginName;
    Property Title : string index 24 read FTitle write SetTitle;
    Property PrincipalType : TInt32 index 32 read FPrincipalType write SetPrincipalType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: User
    --------------------------------------------------------------------}
  
  TSPUser = Class(TSPPrincipal)
  private
    FEmail : string;
    FIsShareByEmailGuestUser : boolean;
    FIsSiteAdmin : boolean;
    FUserId : TSPUserIdInfo;
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetIsShareByEmailGuestUser(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetIsSiteAdmin(AIndex: Integer; const AValue: boolean);
    procedure SetUserId(AIndex: Integer; const AValue: TSPUserIdInfo);
  public
    class function ObjectRestKind : String;  Override;
    function Groups(AService: TODataService) : TSPGroup;
  published
    Property Email : string index 40 read FEmail write SetEmail;
    Property IsShareByEmailGuestUser : boolean index 48 read FIsShareByEmailGuestUser write SetIsShareByEmailGuestUser;
    Property IsSiteAdmin : boolean index 56 read FIsSiteAdmin write SetIsSiteAdmin;
    Property UserId : TSPUserIdInfo index 64 read FUserId write SetUserId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Group
    --------------------------------------------------------------------}
  
  TSPGroup = Class(TSPPrincipal)
  private
    FAllowMembersEditMembership : boolean;
    FAllowRequestToJoinLeave : boolean;
    FAutoAcceptRequestToJoinLeave : boolean;
    FCanCurrentUserEditMembership : boolean;
    FCanCurrentUserManageGroup : boolean;
    FCanCurrentUserViewMembership : boolean;
    FDescription : string;
    FOnlyAllowMembersViewMembership : boolean;
    FOwnerTitle : string;
    FRequestToJoinLeaveEmailSetting : string;
    procedure SetAllowMembersEditMembership(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetAllowRequestToJoinLeave(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAutoAcceptRequestToJoinLeave(AIndex: Integer; 
                                         const AValue: boolean);
    procedure SetCanCurrentUserEditMembership(AIndex: Integer; 
                                         const AValue: boolean);
    procedure SetCanCurrentUserManageGroup(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetCanCurrentUserViewMembership(AIndex: Integer; 
                                         const AValue: boolean);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetOnlyAllowMembersViewMembership(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetOwnerTitle(AIndex: Integer; const AValue: string);
    procedure SetRequestToJoinLeaveEmailSetting(AIndex: Integer; 
                                           const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Owner(AService: TODataService) : TSPPrincipal;
    function Users(AService: TODataService) : TSPUser;
  published
    Property AllowMembersEditMembership : boolean index 40 read FAllowMembersEditMembership write SetAllowMembersEditMembership;
    Property AllowRequestToJoinLeave : boolean index 48 read FAllowRequestToJoinLeave write SetAllowRequestToJoinLeave;
    Property AutoAcceptRequestToJoinLeave : boolean index 56 read FAutoAcceptRequestToJoinLeave write SetAutoAcceptRequestToJoinLeave;
    Property CanCurrentUserEditMembership : boolean index 64 read FCanCurrentUserEditMembership write SetCanCurrentUserEditMembership;
    Property CanCurrentUserManageGroup : boolean index 72 read FCanCurrentUserManageGroup write SetCanCurrentUserManageGroup;
    Property CanCurrentUserViewMembership : boolean index 80 read FCanCurrentUserViewMembership write SetCanCurrentUserViewMembership;
    Property Description : string index 88 read FDescription write SetDescription;
    Property OnlyAllowMembersViewMembership : boolean index 96 read FOnlyAllowMembersViewMembership write SetOnlyAllowMembersViewMembership;
    Property OwnerTitle : string index 104 read FOwnerTitle write SetOwnerTitle;
    Property RequestToJoinLeaveEmailSetting : string index 112 read FRequestToJoinLeaveEmailSetting write SetRequestToJoinLeaveEmailSetting;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RecycleBinItem
    --------------------------------------------------------------------}
  
  TSPRecycleBinItem = Class(TODataEntity)
  private
    FDeletedDate : TDateTime;
    FDirName : string;
    FId : TGUIDString;
    FItemState : TInt32;
    FItemType : TInt32;
    FLeafName : string;
    FSize : int64;
    FTitle : string;
    procedure SetDeletedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetDirName(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetItemState(AIndex: Integer; const AValue: TInt32);
    procedure SetItemType(AIndex: Integer; const AValue: TInt32);
    procedure SetLeafName(AIndex: Integer; const AValue: string);
    procedure SetSize(AIndex: Integer; const AValue: int64);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Author(AService: TODataService) : TSPUser;
    function DeletedBy(AService: TODataService) : TSPUser;
  published
    Property DeletedDate : TDateTime index 0 read FDeletedDate write SetDeletedDate;
    Property DirName : string index 8 read FDirName write SetDirName;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property ItemState : TInt32 index 24 read FItemState write SetItemState;
    Property ItemType : TInt32 index 32 read FItemType write SetItemType;
    Property LeafName : string index 40 read FLeafName write SetLeafName;
    Property Size : int64 index 48 read FSize write SetSize;
    Property Title : string index 56 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SecurableObject
    --------------------------------------------------------------------}
  
  TSPSecurableObject = Class(TODataEntity)
  private
    FHasUniqueRoleAssignments : boolean;
    procedure SetHasUniqueRoleAssignments(AIndex: Integer; 
                                     const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function FirstUniqueAncestorSecurableObject(AService: TODataService)
                                            : TSPSecurableObject;
    function RoleAssignments(AService: TODataService) : TSPRoleAssignment;
  published
    Property HasUniqueRoleAssignments : boolean index 0 read FHasUniqueRoleAssignments write SetHasUniqueRoleAssignments;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RoleAssignment
    --------------------------------------------------------------------}
  
  TSPRoleAssignment = Class(TODataEntity)
  private
    FPrincipalId : TInt32;
    procedure SetPrincipalId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Member(AService: TODataService) : TSPPrincipal;
    function RoleDefinitionBindings(AService: TODataService)
                                : TSPRoleDefinition;
  published
    Property PrincipalId : TInt32 index 0 read FPrincipalId write SetPrincipalId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RoleDefinition
    --------------------------------------------------------------------}
  
  TSPRoleDefinition = Class(TODataEntity)
  private
    FBasePermissions : TSPBasePermissions;
    FDescription : string;
    FHidden : boolean;
    FId : TInt32;
    FName : string;
    FOrder : TInt32;
    FRoleTypeKind : TInt32;
    procedure SetBasePermissions(AIndex: Integer; 
                            const AValue: TSPBasePermissions);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOrder(AIndex: Integer; const AValue: TInt32);
    procedure SetRoleTypeKind(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property BasePermissions : TSPBasePermissions index 0 read FBasePermissions write SetBasePermissions;
    Property Description : string index 8 read FDescription write SetDescription;
    Property Hidden : boolean index 16 read FHidden write SetHidden;
    Property Id : TInt32 index 24 read FId write SetId;
    Property Name : string index 32 read FName write SetName;
    Property Order : TInt32 index 40 read FOrder write SetOrder;
    Property RoleTypeKind : TInt32 index 48 read FRoleTypeKind write SetRoleTypeKind;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Web
    --------------------------------------------------------------------}
  
  TSPWeb = Class(TSPSecurableObject)
  private
    FAllowCreateDeclarativeWorkflowForCurrentUser : boolean;
    FAllowDesignerForCurrentUser : boolean;
    FAllowMasterPageEditingForCurrentUser : boolean;
    FAllowRevertFromTemplateForCurrentUser : boolean;
    FAllowRssFeeds : boolean;
    FAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser : boolean;
    FAllowSavePublishDeclarativeWorkflowForCurrentUser : boolean;
    FAlternateCssUrl : string;
    FAppInstanceId : TGUIDString;
    FConfiguration : TInt16;
    FContainsConfidentialInfo : boolean;
    FCreated : TDateTime;
    FCustomMasterUrl : string;
    FDescription : string;
    FDesignerDownloadUrlForCurrentUser : string;
    FDocumentLibraryCalloutOfficeWebAppPreviewersDisabled : boolean;
    FEffectiveBasePermissions : TSPBasePermissions;
    FEnableMinimalDownload : boolean;
    FId : TGUIDString;
    FIsMultilingual : boolean;
    FLanguage : TInt32;
    FLastItemModifiedDate : TDateTime;
    FMasterUrl : string;
    FMembersCanShare : boolean;
    FOverwriteTranslationsOnChange : boolean;
    FQuickLaunchEnabled : boolean;
    FRecycleBinEnabled : boolean;
    FSaveSiteAsTemplateEnabled : boolean;
    FServerRelativeUrl : string;
    FShowUrlStructureForCurrentUser : boolean;
    FSiteLogoUrl : string;
    FSupportedUILanguageIds : TInt32Array;
    FSyndicationEnabled : boolean;
    FThemeData : string;
    FThirdPartyMdmEnabled : boolean;
    FTitle : string;
    FTreeViewEnabled : boolean;
    FUIVersion : TInt32;
    FUIVersionConfigurationEnabled : boolean;
    FUrl : string;
    FWebTemplate : string;
    procedure SetAllowCreateDeclarativeWorkflowForCurrentUser
                                                         (AIndex: Integer; 
                                                         const AValue: boolean);
    procedure SetAllowDesignerForCurrentUser(AIndex: Integer; 
                                        const AValue: boolean);
    procedure SetAllowMasterPageEditingForCurrentUser(AIndex: Integer; 
                                                 const AValue: boolean);
    procedure SetAllowRevertFromTemplateForCurrentUser(AIndex: Integer; 
                                                  const AValue: boolean);
    procedure SetAllowRssFeeds(AIndex: Integer; const AValue: boolean);
    procedure SetAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser
                                                                 (AIndex: Integer; 
                                                                 const AValue: boolean);
    procedure SetAllowSavePublishDeclarativeWorkflowForCurrentUser
                                                              (AIndex: Integer; 
                                                              const AValue: boolean);
    procedure SetAlternateCssUrl(AIndex: Integer; const AValue: string);
    procedure SetAppInstanceId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetConfiguration(AIndex: Integer; const AValue: TInt16);
    procedure SetContainsConfidentialInfo(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetCustomMasterUrl(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDesignerDownloadUrlForCurrentUser(AIndex: Integer; 
                                              const AValue: string);
    procedure SetDocumentLibraryCalloutOfficeWebAppPreviewersDisabled
                                                                 (AIndex: Integer; 
                                                                 const AValue: boolean);
    procedure SetEffectiveBasePermissions(AIndex: Integer; 
                                     const AValue: TSPBasePermissions);
    procedure SetEnableMinimalDownload(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsMultilingual(AIndex: Integer; const AValue: boolean);
    procedure SetLanguage(AIndex: Integer; const AValue: TInt32);
    procedure SetLastItemModifiedDate(AIndex: Integer; 
                                 const AValue: TDateTime);
    procedure SetMasterUrl(AIndex: Integer; const AValue: string);
    procedure SetMembersCanShare(AIndex: Integer; const AValue: boolean);
    procedure SetOverwriteTranslationsOnChange(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetQuickLaunchEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetRecycleBinEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetSaveSiteAsTemplateEnabled(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetShowUrlStructureForCurrentUser(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetSiteLogoUrl(AIndex: Integer; const AValue: string);
    procedure SetSupportedUILanguageIds(AIndex: Integer; 
                                   const AValue: TInt32Array);
    procedure SetSyndicationEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetThemeData(AIndex: Integer; const AValue: string);
    procedure SetThirdPartyMdmEnabled(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTreeViewEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetUIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetUIVersionConfigurationEnabled(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetWebTemplate(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function AllProperties(AService: TODataService) : TSPPropertyValues;
    function AppTiles(AService: TODataService) : TSPAppTile;
    function AssociatedMemberGroup(AService: TODataService) : TSPGroup;
    function AssociatedOwnerGroup(AService: TODataService) : TSPGroup;
    function AssociatedVisitorGroup(AService: TODataService) : TSPGroup;
    function AvailableContentTypes(AService: TODataService) : TSPContentType;
    function AvailableFields(AService: TODataService) : TSPField;
    function ContentTypes(AService: TODataService) : TSPContentType;
    function CurrentUser(AService: TODataService) : TSPUser;
    function DataLeakagePreventionStatusInfo(AService: TODataService)
                                         : TSPSPDataLeakagePreventionStatusInfo;
    function DescriptionResource(AService: TODataService) : TSPUserResource;
    function EventReceivers(AService: TODataService)
                        : TSPEventReceiverDefinition;
    function Features(AService: TODataService) : TSPFeature;
    function Fields(AService: TODataService) : TSPField;
    function Folders(AService: TODataService) : TSPFolder;
    function Lists(AService: TODataService) : TSPList;
    function ListTemplates(AService: TODataService) : TSPListTemplate;
    function Navigation(AService: TODataService) : TSPNavigation;
    function ParentWeb(AService: TODataService) : TSPWebInformation;
    function PushNotificationSubscribers(AService: TODataService)
                                     : TSPPushNotificationSubscriber;
    function RecycleBin(AService: TODataService) : TSPRecycleBinItem;
    function RegionalSettings(AService: TODataService) : TSPRegionalSettings;
    function RoleDefinitions(AService: TODataService) : TSPRoleDefinition;
    function RootFolder(AService: TODataService) : TSPFolder;
    function SiteGroups(AService: TODataService) : TSPGroup;
    function SiteUserInfoList(AService: TODataService) : TSPList;
    function SiteUsers(AService: TODataService) : TSPUser;
    function ThemeInfo(AService: TODataService) : TSPThemeInfo;
    function TitleResource(AService: TODataService) : TSPUserResource;
    function UserCustomActions(AService: TODataService)
                           : TSPUserCustomAction;
    function Webs(AService: TODataService) : TSPWeb;
    function WebInfos(AService: TODataService) : TSPWebInformation;
    function WorkflowAssociations(AService: TODataService)
                              : TSP_WorkflowWorkflowAssociation;
    function WorkflowTemplates(AService: TODataService)
                           : TSP_WorkflowWorkflowTemplate;
  published
    Property AllowCreateDeclarativeWorkflowForCurrentUser : boolean index 8 read FAllowCreateDeclarativeWorkflowForCurrentUser write SetAllowCreateDeclarativeWorkflowForCurrentUser;
    Property AllowDesignerForCurrentUser : boolean index 16 read FAllowDesignerForCurrentUser write SetAllowDesignerForCurrentUser;
    Property AllowMasterPageEditingForCurrentUser : boolean index 24 read FAllowMasterPageEditingForCurrentUser write SetAllowMasterPageEditingForCurrentUser;
    Property AllowRevertFromTemplateForCurrentUser : boolean index 32 read FAllowRevertFromTemplateForCurrentUser write SetAllowRevertFromTemplateForCurrentUser;
    Property AllowRssFeeds : boolean index 40 read FAllowRssFeeds write SetAllowRssFeeds;
    Property AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser : boolean index 48 read FAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser write SetAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser;
    Property AllowSavePublishDeclarativeWorkflowForCurrentUser : boolean index 56 read FAllowSavePublishDeclarativeWorkflowForCurrentUser write SetAllowSavePublishDeclarativeWorkflowForCurrentUser;
    Property AlternateCssUrl : string index 64 read FAlternateCssUrl write SetAlternateCssUrl;
    Property AppInstanceId : TGUIDString index 72 read FAppInstanceId write SetAppInstanceId;
    Property Configuration : TInt16 index 80 read FConfiguration write SetConfiguration;
    Property ContainsConfidentialInfo : boolean index 88 read FContainsConfidentialInfo write SetContainsConfidentialInfo;
    Property Created : TDateTime index 96 read FCreated write SetCreated;
    Property CustomMasterUrl : string index 104 read FCustomMasterUrl write SetCustomMasterUrl;
    Property Description : string index 112 read FDescription write SetDescription;
    Property DesignerDownloadUrlForCurrentUser : string index 120 read FDesignerDownloadUrlForCurrentUser write SetDesignerDownloadUrlForCurrentUser;
    Property DocumentLibraryCalloutOfficeWebAppPreviewersDisabled : boolean index 128 read FDocumentLibraryCalloutOfficeWebAppPreviewersDisabled write SetDocumentLibraryCalloutOfficeWebAppPreviewersDisabled;
    Property EffectiveBasePermissions : TSPBasePermissions index 136 read FEffectiveBasePermissions write SetEffectiveBasePermissions;
    Property EnableMinimalDownload : boolean index 144 read FEnableMinimalDownload write SetEnableMinimalDownload;
    Property Id : TGUIDString index 152 read FId write SetId;
    Property IsMultilingual : boolean index 160 read FIsMultilingual write SetIsMultilingual;
    Property Language : TInt32 index 168 read FLanguage write SetLanguage;
    Property LastItemModifiedDate : TDateTime index 176 read FLastItemModifiedDate write SetLastItemModifiedDate;
    Property MasterUrl : string index 184 read FMasterUrl write SetMasterUrl;
    Property MembersCanShare : boolean index 192 read FMembersCanShare write SetMembersCanShare;
    Property OverwriteTranslationsOnChange : boolean index 200 read FOverwriteTranslationsOnChange write SetOverwriteTranslationsOnChange;
    Property QuickLaunchEnabled : boolean index 208 read FQuickLaunchEnabled write SetQuickLaunchEnabled;
    Property RecycleBinEnabled : boolean index 216 read FRecycleBinEnabled write SetRecycleBinEnabled;
    Property SaveSiteAsTemplateEnabled : boolean index 224 read FSaveSiteAsTemplateEnabled write SetSaveSiteAsTemplateEnabled;
    Property ServerRelativeUrl : string index 232 read FServerRelativeUrl write SetServerRelativeUrl;
    Property ShowUrlStructureForCurrentUser : boolean index 240 read FShowUrlStructureForCurrentUser write SetShowUrlStructureForCurrentUser;
    Property SiteLogoUrl : string index 248 read FSiteLogoUrl write SetSiteLogoUrl;
    Property SupportedUILanguageIds : TInt32Array index 256 read FSupportedUILanguageIds write SetSupportedUILanguageIds;
    Property SyndicationEnabled : boolean index 264 read FSyndicationEnabled write SetSyndicationEnabled;
    Property ThemeData : string index 272 read FThemeData write SetThemeData;
    Property ThirdPartyMdmEnabled : boolean index 280 read FThirdPartyMdmEnabled write SetThirdPartyMdmEnabled;
    Property Title : string index 288 read FTitle write SetTitle;
    Property TreeViewEnabled : boolean index 296 read FTreeViewEnabled write SetTreeViewEnabled;
    Property UIVersion : TInt32 index 304 read FUIVersion write SetUIVersion;
    Property UIVersionConfigurationEnabled : boolean index 312 read FUIVersionConfigurationEnabled write SetUIVersionConfigurationEnabled;
    Property Url : string index 320 read FUrl write SetUrl;
    Property WebTemplate : string index 328 read FWebTemplate write SetWebTemplate;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PropertyValues
    --------------------------------------------------------------------}
  
  TSPPropertyValues = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppTile
    --------------------------------------------------------------------}
  
  TSPAppTile = Class(TODataEntity)
  private
    FAppType : TInt32;
    FChildCount : TInt32;
    FLastModified : string;
    FTarget : string;
    FThumbnail : string;
    FTitle : string;
    procedure SetAppType(AIndex: Integer; const AValue: TInt32);
    procedure SetChildCount(AIndex: Integer; const AValue: TInt32);
    procedure SetLastModified(AIndex: Integer; const AValue: string);
    procedure SetTarget(AIndex: Integer; const AValue: string);
    procedure SetThumbnail(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AppType : TInt32 index 0 read FAppType write SetAppType;
    Property ChildCount : TInt32 index 8 read FChildCount write SetChildCount;
    Property LastModified : string index 16 read FLastModified write SetLastModified;
    Property Target : string index 24 read FTarget write SetTarget;
    Property Thumbnail : string index 32 read FThumbnail write SetThumbnail;
    Property Title : string index 40 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ContentType
    --------------------------------------------------------------------}
  
  TSPContentType = Class(TODataEntity)
  private
    FDescription : string;
    FDisplayFormTemplateName : string;
    FDisplayFormUrl : string;
    FDocumentTemplate : string;
    FDocumentTemplateUrl : string;
    FEditFormTemplateName : string;
    FEditFormUrl : string;
    FGroup : string;
    FHidden : boolean;
    FId : TSPContentTypeId;
    FJSLink : string;
    FMobileDisplayFormUrl : string;
    FMobileEditFormUrl : string;
    FMobileNewFormUrl : string;
    FName : string;
    FNewFormTemplateName : string;
    FNewFormUrl : string;
    FReadOnly : boolean;
    FSchemaXml : string;
    FSchemaXmlWithResourceTokens : string;
    FScope : string;
    FSealed : boolean;
    FStringId : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDisplayFormTemplateName(AIndex: Integer; 
                                    const AValue: string);
    procedure SetDisplayFormUrl(AIndex: Integer; const AValue: string);
    procedure SetDocumentTemplate(AIndex: Integer; const AValue: string);
    procedure SetDocumentTemplateUrl(AIndex: Integer; const AValue: string);
    procedure SetEditFormTemplateName(AIndex: Integer; const AValue: string);
    procedure SetEditFormUrl(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TSPContentTypeId);
    procedure SetJSLink(AIndex: Integer; const AValue: string);
    procedure SetMobileDisplayFormUrl(AIndex: Integer; const AValue: string);
    procedure SetMobileEditFormUrl(AIndex: Integer; const AValue: string);
    procedure SetMobileNewFormUrl(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNewFormTemplateName(AIndex: Integer; const AValue: string);
    procedure SetNewFormUrl(AIndex: Integer; const AValue: string);
    procedure SetReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetSchemaXml(AIndex: Integer; const AValue: string);
    procedure SetSchemaXmlWithResourceTokens(AIndex: Integer; 
                                        const AValue: string);
    procedure SetScope(AIndex: Integer; const AValue: string);
    procedure SetSealed(AIndex: Integer; const AValue: boolean);
    procedure SetStringId(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function DescriptionResource(AService: TODataService) : TSPUserResource;
    function FieldLinks(AService: TODataService) : TSPFieldLink;
    function Fields(AService: TODataService) : TSPField;
    function NameResource(AService: TODataService) : TSPUserResource;
    function Parent(AService: TODataService) : TSPContentType;
    function WorkflowAssociations(AService: TODataService)
                              : TSP_WorkflowWorkflowAssociation;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property DisplayFormTemplateName : string index 8 read FDisplayFormTemplateName write SetDisplayFormTemplateName;
    Property DisplayFormUrl : string index 16 read FDisplayFormUrl write SetDisplayFormUrl;
    Property DocumentTemplate : string index 24 read FDocumentTemplate write SetDocumentTemplate;
    Property DocumentTemplateUrl : string index 32 read FDocumentTemplateUrl write SetDocumentTemplateUrl;
    Property EditFormTemplateName : string index 40 read FEditFormTemplateName write SetEditFormTemplateName;
    Property EditFormUrl : string index 48 read FEditFormUrl write SetEditFormUrl;
    Property Group : string index 56 read FGroup write SetGroup;
    Property Hidden : boolean index 64 read FHidden write SetHidden;
    Property Id : TSPContentTypeId index 72 read FId write SetId;
    Property JSLink : string index 80 read FJSLink write SetJSLink;
    Property MobileDisplayFormUrl : string index 88 read FMobileDisplayFormUrl write SetMobileDisplayFormUrl;
    Property MobileEditFormUrl : string index 96 read FMobileEditFormUrl write SetMobileEditFormUrl;
    Property MobileNewFormUrl : string index 104 read FMobileNewFormUrl write SetMobileNewFormUrl;
    Property Name : string index 112 read FName write SetName;
    Property NewFormTemplateName : string index 120 read FNewFormTemplateName write SetNewFormTemplateName;
    Property NewFormUrl : string index 128 read FNewFormUrl write SetNewFormUrl;
    Property ReadOnly : boolean index 136 read FReadOnly write SetReadOnly;
    Property SchemaXml : string index 144 read FSchemaXml write SetSchemaXml;
    Property SchemaXmlWithResourceTokens : string index 152 read FSchemaXmlWithResourceTokens write SetSchemaXmlWithResourceTokens;
    Property Scope : string index 160 read FScope write SetScope;
    Property Sealed : boolean index 168 read FSealed write SetSealed;
    Property StringId : string index 176 read FStringId write SetStringId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserResource
    --------------------------------------------------------------------}
  
  TSPUserResource = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldLink
    --------------------------------------------------------------------}
  
  TSPFieldLink = Class(TODataEntity)
  private
    FFieldInternalName : string;
    FHidden : boolean;
    FId : TGUIDString;
    FName : string;
    FRequired : boolean;
    procedure SetFieldInternalName(AIndex: Integer; const AValue: string);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRequired(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FieldInternalName : string index 0 read FFieldInternalName write SetFieldInternalName;
    Property Hidden : boolean index 8 read FHidden write SetHidden;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property Name : string index 24 read FName write SetName;
    Property Required : boolean index 32 read FRequired write SetRequired;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Field
    --------------------------------------------------------------------}
  
  TSPField = Class(TODataEntity)
  private
    FAutoIndexed : boolean;
    FCanBeDeleted : boolean;
    FDefaultValue : string;
    FDescription : string;
    FDirection : string;
    FEnforceUniqueValues : boolean;
    FEntityPropertyName : string;
    FFilterable : boolean;
    FFromBaseType : boolean;
    FGroup : string;
    FHidden : boolean;
    FId : TGUIDString;
    FIndexed : boolean;
    FInternalName : string;
    FJSLink : string;
    FReadOnlyField : boolean;
    FRequired : boolean;
    FSchemaXml : string;
    FSchemaXmlWithResourceTokens : string;
    FScope : string;
    FSealed : boolean;
    FSortable : boolean;
    FStaticName : string;
    FTitle : string;
    FFieldTypeKind : TInt32;
    FTypeAsString : string;
    FTypeDisplayName : string;
    FTypeShortDescription : string;
    FValidationFormula : string;
    FValidationMessage : string;
    procedure SetAutoIndexed(AIndex: Integer; const AValue: boolean);
    procedure SetCanBeDeleted(AIndex: Integer; const AValue: boolean);
    procedure SetDefaultValue(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDirection(AIndex: Integer; const AValue: string);
    procedure SetEnforceUniqueValues(AIndex: Integer; const AValue: boolean);
    procedure SetEntityPropertyName(AIndex: Integer; const AValue: string);
    procedure SetFilterable(AIndex: Integer; const AValue: boolean);
    procedure SetFromBaseType(AIndex: Integer; const AValue: boolean);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIndexed(AIndex: Integer; const AValue: boolean);
    procedure SetInternalName(AIndex: Integer; const AValue: string);
    procedure SetJSLink(AIndex: Integer; const AValue: string);
    procedure SetReadOnlyField(AIndex: Integer; const AValue: boolean);
    procedure SetRequired(AIndex: Integer; const AValue: boolean);
    procedure SetSchemaXml(AIndex: Integer; const AValue: string);
    procedure SetSchemaXmlWithResourceTokens(AIndex: Integer; 
                                        const AValue: string);
    procedure SetScope(AIndex: Integer; const AValue: string);
    procedure SetSealed(AIndex: Integer; const AValue: boolean);
    procedure SetSortable(AIndex: Integer; const AValue: boolean);
    procedure SetStaticName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetFieldTypeKind(AIndex: Integer; const AValue: TInt32);
    procedure SetTypeAsString(AIndex: Integer; const AValue: string);
    procedure SetTypeDisplayName(AIndex: Integer; const AValue: string);
    procedure SetTypeShortDescription(AIndex: Integer; const AValue: string);
    procedure SetValidationFormula(AIndex: Integer; const AValue: string);
    procedure SetValidationMessage(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function DescriptionResource(AService: TODataService) : TSPUserResource;
    function TitleResource(AService: TODataService) : TSPUserResource;
  published
    Property AutoIndexed : boolean index 0 read FAutoIndexed write SetAutoIndexed;
    Property CanBeDeleted : boolean index 8 read FCanBeDeleted write SetCanBeDeleted;
    Property DefaultValue : string index 16 read FDefaultValue write SetDefaultValue;
    Property Description : string index 24 read FDescription write SetDescription;
    Property Direction : string index 32 read FDirection write SetDirection;
    Property EnforceUniqueValues : boolean index 40 read FEnforceUniqueValues write SetEnforceUniqueValues;
    Property EntityPropertyName : string index 48 read FEntityPropertyName write SetEntityPropertyName;
    Property Filterable : boolean index 56 read FFilterable write SetFilterable;
    Property FromBaseType : boolean index 64 read FFromBaseType write SetFromBaseType;
    Property Group : string index 72 read FGroup write SetGroup;
    Property Hidden : boolean index 80 read FHidden write SetHidden;
    Property Id : TGUIDString index 88 read FId write SetId;
    Property Indexed : boolean index 96 read FIndexed write SetIndexed;
    Property InternalName : string index 104 read FInternalName write SetInternalName;
    Property JSLink : string index 112 read FJSLink write SetJSLink;
    Property ReadOnlyField : boolean index 120 read FReadOnlyField write SetReadOnlyField;
    Property Required : boolean index 128 read FRequired write SetRequired;
    Property SchemaXml : string index 136 read FSchemaXml write SetSchemaXml;
    Property SchemaXmlWithResourceTokens : string index 144 read FSchemaXmlWithResourceTokens write SetSchemaXmlWithResourceTokens;
    Property Scope : string index 152 read FScope write SetScope;
    Property Sealed : boolean index 160 read FSealed write SetSealed;
    Property Sortable : boolean index 168 read FSortable write SetSortable;
    Property StaticName : string index 176 read FStaticName write SetStaticName;
    Property Title : string index 184 read FTitle write SetTitle;
    Property FieldTypeKind : TInt32 index 192 read FFieldTypeKind write SetFieldTypeKind;
    Property TypeAsString : string index 200 read FTypeAsString write SetTypeAsString;
    Property TypeDisplayName : string index 208 read FTypeDisplayName write SetTypeDisplayName;
    Property TypeShortDescription : string index 216 read FTypeShortDescription write SetTypeShortDescription;
    Property ValidationFormula : string index 224 read FValidationFormula write SetValidationFormula;
    Property ValidationMessage : string index 232 read FValidationMessage write SetValidationMessage;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPDataLeakagePreventionStatusInfo
    --------------------------------------------------------------------}
  
  TSPSPDataLeakagePreventionStatusInfo = Class(TODataEntity)
  private
    FContainsConfidentialInfo : boolean;
    FContainsConfidentialInfoLearnMoreUrl : string;
    FExternalSharingTipsEnabled : boolean;
    FExternalSharingTipsLearnMoreUrl : string;
    procedure SetContainsConfidentialInfo(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetContainsConfidentialInfoLearnMoreUrl(AIndex: Integer; 
                                                 const AValue: string);
    procedure SetExternalSharingTipsEnabled(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetExternalSharingTipsLearnMoreUrl(AIndex: Integer; 
                                            const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ContainsConfidentialInfo : boolean index 0 read FContainsConfidentialInfo write SetContainsConfidentialInfo;
    Property ContainsConfidentialInfoLearnMoreUrl : string index 8 read FContainsConfidentialInfoLearnMoreUrl write SetContainsConfidentialInfoLearnMoreUrl;
    Property ExternalSharingTipsEnabled : boolean index 16 read FExternalSharingTipsEnabled write SetExternalSharingTipsEnabled;
    Property ExternalSharingTipsLearnMoreUrl : string index 24 read FExternalSharingTipsLearnMoreUrl write SetExternalSharingTipsLearnMoreUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Folder
    --------------------------------------------------------------------}
  
  TSPFolder = Class(TODataEntity)
  private
    FContentTypeOrder : TSPContentTypeIdArray;
    FExists : boolean;
    FItemCount : TInt32;
    FName : string;
    FProgID : string;
    FServerRelativeUrl : string;
    FTimeCreated : TDateTime;
    FTimeLastModified : TDateTime;
    FUniqueContentTypeOrder : TSPContentTypeIdArray;
    FUniqueId : TGUIDString;
    FWelcomePage : string;
    procedure SetContentTypeOrder(AIndex: Integer; 
                             const AValue: TSPContentTypeIdArray);
    procedure SetExists(AIndex: Integer; const AValue: boolean);
    procedure SetItemCount(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetProgID(AIndex: Integer; const AValue: string);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetTimeCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetTimeLastModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetUniqueContentTypeOrder(AIndex: Integer; 
                                   const AValue: TSPContentTypeIdArray);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWelcomePage(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Files(AService: TODataService) : TSP_File;
    function ListItemAllFields(AService: TODataService) : TSPListItem;
    function ParentFolder(AService: TODataService) : TSPFolder;
    function Properties(AService: TODataService) : TSPPropertyValues;
    function Folders(AService: TODataService) : TSPFolder;
  published
    Property ContentTypeOrder : TSPContentTypeIdArray index 0 read FContentTypeOrder write SetContentTypeOrder;
    Property Exists : boolean index 8 read FExists write SetExists;
    Property ItemCount : TInt32 index 16 read FItemCount write SetItemCount;
    Property Name : string index 24 read FName write SetName;
    Property ProgID : string index 32 read FProgID write SetProgID;
    Property ServerRelativeUrl : string index 40 read FServerRelativeUrl write SetServerRelativeUrl;
    Property TimeCreated : TDateTime index 48 read FTimeCreated write SetTimeCreated;
    Property TimeLastModified : TDateTime index 56 read FTimeLastModified write SetTimeLastModified;
    Property UniqueContentTypeOrder : TSPContentTypeIdArray index 64 read FUniqueContentTypeOrder write SetUniqueContentTypeOrder;
    Property UniqueId : TGUIDString index 72 read FUniqueId write SetUniqueId;
    Property WelcomePage : string index 80 read FWelcomePage write SetWelcomePage;
  end;
  
  
  { --------------------------------------------------------------------
    SP: File
    --------------------------------------------------------------------}
  
  TSP_File = Class(TODataEntity)
  private
    FCheckInComment : string;
    FCheckOutType : TInt32;
    FContentTag : string;
    FCustomizedPageStatus : TInt32;
    FETag : string;
    FExists : boolean;
    F_Length : int64;
    FLevel : Byte;
    FLinkingUrl : string;
    FMajorVersion : TInt32;
    FMinorVersion : TInt32;
    FName : string;
    FServerRelativeUrl : string;
    FTimeCreated : TDateTime;
    FTimeLastModified : TDateTime;
    FTitle : string;
    FUIVersion : TInt32;
    FUIVersionLabel : string;
    FUniqueId : TGUIDString;
    procedure SetCheckInComment(AIndex: Integer; const AValue: string);
    procedure SetCheckOutType(AIndex: Integer; const AValue: TInt32);
    procedure SetContentTag(AIndex: Integer; const AValue: string);
    procedure SetCustomizedPageStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetETag(AIndex: Integer; const AValue: string);
    procedure SetExists(AIndex: Integer; const AValue: boolean);
    procedure Set_Length(AIndex: Integer; const AValue: int64);
    procedure SetLevel(AIndex: Integer; const AValue: Byte);
    procedure SetLinkingUrl(AIndex: Integer; const AValue: string);
    procedure SetMajorVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetMinorVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetTimeCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetTimeLastModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetUIVersionLabel(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
    function Author(AService: TODataService) : TSPUser;
    function CheckedOutByUser(AService: TODataService) : TSPUser;
    function ListItemAllFields(AService: TODataService) : TSPListItem;
    function LockedByUser(AService: TODataService) : TSPUser;
    function ModifiedBy(AService: TODataService) : TSPUser;
    function Versions(AService: TODataService) : TSPFileVersion;
  published
    Property CheckInComment : string index 0 read FCheckInComment write SetCheckInComment;
    Property CheckOutType : TInt32 index 8 read FCheckOutType write SetCheckOutType;
    Property ContentTag : string index 16 read FContentTag write SetContentTag;
    Property CustomizedPageStatus : TInt32 index 24 read FCustomizedPageStatus write SetCustomizedPageStatus;
    Property ETag : string index 32 read FETag write SetETag;
    Property Exists : boolean index 40 read FExists write SetExists;
    Property _Length : int64 index 48 read F_Length write Set_Length;
    Property Level : Byte index 56 read FLevel write SetLevel;
    Property LinkingUrl : string index 64 read FLinkingUrl write SetLinkingUrl;
    Property MajorVersion : TInt32 index 72 read FMajorVersion write SetMajorVersion;
    Property MinorVersion : TInt32 index 80 read FMinorVersion write SetMinorVersion;
    Property Name : string index 88 read FName write SetName;
    Property ServerRelativeUrl : string index 96 read FServerRelativeUrl write SetServerRelativeUrl;
    Property TimeCreated : TDateTime index 104 read FTimeCreated write SetTimeCreated;
    Property TimeLastModified : TDateTime index 112 read FTimeLastModified write SetTimeLastModified;
    Property Title : string index 120 read FTitle write SetTitle;
    Property UIVersion : TInt32 index 128 read FUIVersion write SetUIVersion;
    Property UIVersionLabel : string index 136 read FUIVersionLabel write SetUIVersionLabel;
    Property UniqueId : TGUIDString index 144 read FUniqueId write SetUniqueId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListItem
    --------------------------------------------------------------------}
  
  TSPListItem = Class(TSPSecurableObject)
  private
    FDisplayName : string;
    FEffectiveBasePermissions : TSPBasePermissions;
    FEffectiveBasePermissionsForUI : TSPBasePermissions;
    FFileSystemObjectType : TInt32;
    FId : TInt32;
    FClient_Title : string;
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEffectiveBasePermissions(AIndex: Integer; 
                                     const AValue: TSPBasePermissions);
    procedure SetEffectiveBasePermissionsForUI(AIndex: Integer; 
                                          const AValue: TSPBasePermissions);
    procedure SetFileSystemObjectType(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetClient_Title(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function AttachmentFiles(AService: TODataService) : TSPAttachment;
    function ContentType(AService: TODataService) : TSPContentType;
    function GetDlpPolicyTip(AService: TODataService) : TSPDlpPolicyTip;
    function FieldValuesAsHtml(AService: TODataService)
                           : TSPFieldStringValues;
    function FieldValuesAsText(AService: TODataService)
                           : TSPFieldStringValues;
    function FieldValuesForEdit(AService: TODataService)
                            : TSPFieldStringValues;
    function _File(AService: TODataService) : TSP_File;
    function Folder(AService: TODataService) : TSPFolder;
    function ParentList(AService: TODataService) : TSPList;
  published
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
    Property EffectiveBasePermissions : TSPBasePermissions index 16 read FEffectiveBasePermissions write SetEffectiveBasePermissions;
    Property EffectiveBasePermissionsForUI : TSPBasePermissions index 24 read FEffectiveBasePermissionsForUI write SetEffectiveBasePermissionsForUI;
    Property FileSystemObjectType : TInt32 index 32 read FFileSystemObjectType write SetFileSystemObjectType;
    Property Id : TInt32 index 40 read FId write SetId;
    Property Client_Title : string index 48 read FClient_Title write SetClient_Title;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Attachment
    --------------------------------------------------------------------}
  
  TSPAttachment = Class(TODataEntity)
  private
    FFileName : string;
    FServerRelativeUrl : string;
    procedure SetFileName(AIndex: Integer; const AValue: string);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FileName : string index 0 read FFileName write SetFileName;
    Property ServerRelativeUrl : string index 8 read FServerRelativeUrl write SetServerRelativeUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DlpPolicyTip
    --------------------------------------------------------------------}
  
  TSPDlpPolicyTip = Class(TODataEntity)
  private
    FAppliedActionsText : string;
    FComplianceUrl : string;
    FGeneralText : string;
    FLastProcessedTime : TDateTime;
    FMatchedConditionDescriptions : TStringArray;
    FOverrideOptions : TInt32;
    procedure SetAppliedActionsText(AIndex: Integer; const AValue: string);
    procedure SetComplianceUrl(AIndex: Integer; const AValue: string);
    procedure SetGeneralText(AIndex: Integer; const AValue: string);
    procedure SetLastProcessedTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetMatchedConditionDescriptions(AIndex: Integer; 
                                         const AValue: TStringArray);
    procedure SetOverrideOptions(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AppliedActionsText : string index 0 read FAppliedActionsText write SetAppliedActionsText;
    Property ComplianceUrl : string index 8 read FComplianceUrl write SetComplianceUrl;
    Property GeneralText : string index 16 read FGeneralText write SetGeneralText;
    Property LastProcessedTime : TDateTime index 24 read FLastProcessedTime write SetLastProcessedTime;
    Property MatchedConditionDescriptions : TStringArray index 32 read FMatchedConditionDescriptions write SetMatchedConditionDescriptions;
    Property OverrideOptions : TInt32 index 40 read FOverrideOptions write SetOverrideOptions;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldStringValues
    --------------------------------------------------------------------}
  
  TSPFieldStringValues = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: List
    --------------------------------------------------------------------}
  
  TSPList = Class(TSPSecurableObject)
  private
    FAllowContentTypes : boolean;
    FBaseTemplate : TInt32;
    FBaseType : TInt32;
    FBrowserFileHandling : TInt32;
    FContentTypesEnabled : boolean;
    FCrawlNonDefaultViews : boolean;
    FCreated : TDateTime;
    FDataSource : TSPListDataSource;
    FDefaultContentApprovalWorkflowId : TGUIDString;
    FDefaultDisplayFormUrl : string;
    FDefaultEditFormUrl : string;
    FDefaultNewFormUrl : string;
    FDefaultViewUrl : string;
    FDescription : string;
    FDirection : string;
    FDocumentTemplateUrl : string;
    FDraftVersionVisibility : TInt32;
    FEffectiveBasePermissions : TSPBasePermissions;
    FEffectiveBasePermissionsForUI : TSPBasePermissions;
    FEnableAttachments : boolean;
    FEnableFolderCreation : boolean;
    FEnableMinorVersions : boolean;
    FEnableModeration : boolean;
    FEnableVersioning : boolean;
    FEntityTypeName : string;
    FFileSavePostProcessingEnabled : boolean;
    FForceCheckout : boolean;
    FHasExternalDataSource : boolean;
    FHidden : boolean;
    FId : TGUIDString;
    FImageUrl : string;
    FIrmEnabled : boolean;
    FIrmExpire : boolean;
    FIrmReject : boolean;
    FIsApplicationList : boolean;
    FIsCatalog : boolean;
    FIsPrivate : boolean;
    FIsSiteAssetsLibrary : boolean;
    FItemCount : TInt32;
    FLastItemDeletedDate : TDateTime;
    FLastItemModifiedDate : TDateTime;
    FListItemEntityTypeFullName : string;
    FMajorVersionLimit : TInt32;
    FMajorWithMinorVersionsLimit : TInt32;
    FMultipleDataList : boolean;
    FNoCrawl : boolean;
    FOnQuickLaunch : boolean;
    FParentWebUrl : string;
    FParserDisabled : boolean;
    FSchemaXml : string;
    FServerTemplateCanCreateFolders : boolean;
    FTemplateFeatureId : TGUIDString;
    FTitle : string;
    FValidationFormula : string;
    FValidationMessage : string;
    procedure SetAllowContentTypes(AIndex: Integer; const AValue: boolean);
    procedure SetBaseTemplate(AIndex: Integer; const AValue: TInt32);
    procedure SetBaseType(AIndex: Integer; const AValue: TInt32);
    procedure SetBrowserFileHandling(AIndex: Integer; const AValue: TInt32);
    procedure SetContentTypesEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetCrawlNonDefaultViews(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetDataSource(AIndex: Integer; 
                       const AValue: TSPListDataSource);
    procedure SetDefaultContentApprovalWorkflowId(AIndex: Integer; 
                                             const AValue: TGUIDString);
    procedure SetDefaultDisplayFormUrl(AIndex: Integer; 
                                  const AValue: string);
    procedure SetDefaultEditFormUrl(AIndex: Integer; const AValue: string);
    procedure SetDefaultNewFormUrl(AIndex: Integer; const AValue: string);
    procedure SetDefaultViewUrl(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDirection(AIndex: Integer; const AValue: string);
    procedure SetDocumentTemplateUrl(AIndex: Integer; const AValue: string);
    procedure SetDraftVersionVisibility(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetEffectiveBasePermissions(AIndex: Integer; 
                                     const AValue: TSPBasePermissions);
    procedure SetEffectiveBasePermissionsForUI(AIndex: Integer; 
                                          const AValue: TSPBasePermissions);
    procedure SetEnableAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetEnableFolderCreation(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetEnableMinorVersions(AIndex: Integer; const AValue: boolean);
    procedure SetEnableModeration(AIndex: Integer; const AValue: boolean);
    procedure SetEnableVersioning(AIndex: Integer; const AValue: boolean);
    procedure SetEntityTypeName(AIndex: Integer; const AValue: string);
    procedure SetFileSavePostProcessingEnabled(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetForceCheckout(AIndex: Integer; const AValue: boolean);
    procedure SetHasExternalDataSource(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetIrmEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetIrmExpire(AIndex: Integer; const AValue: boolean);
    procedure SetIrmReject(AIndex: Integer; const AValue: boolean);
    procedure SetIsApplicationList(AIndex: Integer; const AValue: boolean);
    procedure SetIsCatalog(AIndex: Integer; const AValue: boolean);
    procedure SetIsPrivate(AIndex: Integer; const AValue: boolean);
    procedure SetIsSiteAssetsLibrary(AIndex: Integer; const AValue: boolean);
    procedure SetItemCount(AIndex: Integer; const AValue: TInt32);
    procedure SetLastItemDeletedDate(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetLastItemModifiedDate(AIndex: Integer; 
                                 const AValue: TDateTime);
    procedure SetListItemEntityTypeFullName(AIndex: Integer; 
                                       const AValue: string);
    procedure SetMajorVersionLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetMajorWithMinorVersionsLimit(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetMultipleDataList(AIndex: Integer; const AValue: boolean);
    procedure SetNoCrawl(AIndex: Integer; const AValue: boolean);
    procedure SetOnQuickLaunch(AIndex: Integer; const AValue: boolean);
    procedure SetParentWebUrl(AIndex: Integer; const AValue: string);
    procedure SetParserDisabled(AIndex: Integer; const AValue: boolean);
    procedure SetSchemaXml(AIndex: Integer; const AValue: string);
    procedure SetServerTemplateCanCreateFolders(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetTemplateFeatureId(AIndex: Integer; 
                              const AValue: TGUIDString);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetValidationFormula(AIndex: Integer; const AValue: string);
    procedure SetValidationMessage(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function ContentTypes(AService: TODataService) : TSPContentType;
    function CreatablesInfo(AService: TODataService) : TSPCreatablesInfo;
    function DefaultView(AService: TODataService) : TSPView;
    function DescriptionResource(AService: TODataService) : TSPUserResource;
    function EventReceivers(AService: TODataService)
                        : TSPEventReceiverDefinition;
    function Fields(AService: TODataService) : TSPField;
    function Forms(AService: TODataService) : TSPForm;
    function InformationRightsManagementSettings(AService: TODataService)
                                             : TSPInformationRightsManagementSettings;
    function Items(AService: TODataService) : TSPListItem;
    function ParentWeb(AService: TODataService) : TSPWeb;
    function RootFolder(AService: TODataService) : TSPFolder;
    function TitleResource(AService: TODataService) : TSPUserResource;
    function UserCustomActions(AService: TODataService)
                           : TSPUserCustomAction;
    function Views(AService: TODataService) : TSPView;
    function WorkflowAssociations(AService: TODataService)
                              : TSP_WorkflowWorkflowAssociation;
  published
    Property AllowContentTypes : boolean index 8 read FAllowContentTypes write SetAllowContentTypes;
    Property BaseTemplate : TInt32 index 16 read FBaseTemplate write SetBaseTemplate;
    Property BaseType : TInt32 index 24 read FBaseType write SetBaseType;
    Property BrowserFileHandling : TInt32 index 32 read FBrowserFileHandling write SetBrowserFileHandling;
    Property ContentTypesEnabled : boolean index 40 read FContentTypesEnabled write SetContentTypesEnabled;
    Property CrawlNonDefaultViews : boolean index 48 read FCrawlNonDefaultViews write SetCrawlNonDefaultViews;
    Property Created : TDateTime index 56 read FCreated write SetCreated;
    Property DataSource : TSPListDataSource index 64 read FDataSource write SetDataSource;
    Property DefaultContentApprovalWorkflowId : TGUIDString index 72 read FDefaultContentApprovalWorkflowId write SetDefaultContentApprovalWorkflowId;
    Property DefaultDisplayFormUrl : string index 80 read FDefaultDisplayFormUrl write SetDefaultDisplayFormUrl;
    Property DefaultEditFormUrl : string index 88 read FDefaultEditFormUrl write SetDefaultEditFormUrl;
    Property DefaultNewFormUrl : string index 96 read FDefaultNewFormUrl write SetDefaultNewFormUrl;
    Property DefaultViewUrl : string index 104 read FDefaultViewUrl write SetDefaultViewUrl;
    Property Description : string index 112 read FDescription write SetDescription;
    Property Direction : string index 120 read FDirection write SetDirection;
    Property DocumentTemplateUrl : string index 128 read FDocumentTemplateUrl write SetDocumentTemplateUrl;
    Property DraftVersionVisibility : TInt32 index 136 read FDraftVersionVisibility write SetDraftVersionVisibility;
    Property EffectiveBasePermissions : TSPBasePermissions index 144 read FEffectiveBasePermissions write SetEffectiveBasePermissions;
    Property EffectiveBasePermissionsForUI : TSPBasePermissions index 152 read FEffectiveBasePermissionsForUI write SetEffectiveBasePermissionsForUI;
    Property EnableAttachments : boolean index 160 read FEnableAttachments write SetEnableAttachments;
    Property EnableFolderCreation : boolean index 168 read FEnableFolderCreation write SetEnableFolderCreation;
    Property EnableMinorVersions : boolean index 176 read FEnableMinorVersions write SetEnableMinorVersions;
    Property EnableModeration : boolean index 184 read FEnableModeration write SetEnableModeration;
    Property EnableVersioning : boolean index 192 read FEnableVersioning write SetEnableVersioning;
    Property EntityTypeName : string index 200 read FEntityTypeName write SetEntityTypeName;
    Property FileSavePostProcessingEnabled : boolean index 208 read FFileSavePostProcessingEnabled write SetFileSavePostProcessingEnabled;
    Property ForceCheckout : boolean index 216 read FForceCheckout write SetForceCheckout;
    Property HasExternalDataSource : boolean index 224 read FHasExternalDataSource write SetHasExternalDataSource;
    Property Hidden : boolean index 232 read FHidden write SetHidden;
    Property Id : TGUIDString index 240 read FId write SetId;
    Property ImageUrl : string index 248 read FImageUrl write SetImageUrl;
    Property IrmEnabled : boolean index 256 read FIrmEnabled write SetIrmEnabled;
    Property IrmExpire : boolean index 264 read FIrmExpire write SetIrmExpire;
    Property IrmReject : boolean index 272 read FIrmReject write SetIrmReject;
    Property IsApplicationList : boolean index 280 read FIsApplicationList write SetIsApplicationList;
    Property IsCatalog : boolean index 288 read FIsCatalog write SetIsCatalog;
    Property IsPrivate : boolean index 296 read FIsPrivate write SetIsPrivate;
    Property IsSiteAssetsLibrary : boolean index 304 read FIsSiteAssetsLibrary write SetIsSiteAssetsLibrary;
    Property ItemCount : TInt32 index 312 read FItemCount write SetItemCount;
    Property LastItemDeletedDate : TDateTime index 320 read FLastItemDeletedDate write SetLastItemDeletedDate;
    Property LastItemModifiedDate : TDateTime index 328 read FLastItemModifiedDate write SetLastItemModifiedDate;
    Property ListItemEntityTypeFullName : string index 336 read FListItemEntityTypeFullName write SetListItemEntityTypeFullName;
    Property MajorVersionLimit : TInt32 index 344 read FMajorVersionLimit write SetMajorVersionLimit;
    Property MajorWithMinorVersionsLimit : TInt32 index 352 read FMajorWithMinorVersionsLimit write SetMajorWithMinorVersionsLimit;
    Property MultipleDataList : boolean index 360 read FMultipleDataList write SetMultipleDataList;
    Property NoCrawl : boolean index 368 read FNoCrawl write SetNoCrawl;
    Property OnQuickLaunch : boolean index 376 read FOnQuickLaunch write SetOnQuickLaunch;
    Property ParentWebUrl : string index 384 read FParentWebUrl write SetParentWebUrl;
    Property ParserDisabled : boolean index 392 read FParserDisabled write SetParserDisabled;
    Property SchemaXml : string index 400 read FSchemaXml write SetSchemaXml;
    Property ServerTemplateCanCreateFolders : boolean index 408 read FServerTemplateCanCreateFolders write SetServerTemplateCanCreateFolders;
    Property TemplateFeatureId : TGUIDString index 416 read FTemplateFeatureId write SetTemplateFeatureId;
    Property Title : string index 424 read FTitle write SetTitle;
    Property ValidationFormula : string index 432 read FValidationFormula write SetValidationFormula;
    Property ValidationMessage : string index 440 read FValidationMessage write SetValidationMessage;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CreatablesInfo
    --------------------------------------------------------------------}
  
  TSPCreatablesInfo = Class(TODataEntity)
  private
    FCanCreateFolders : boolean;
    FCanCreateItems : boolean;
    FCanUploadFiles : boolean;
    FCreatablesCollection : TSPCreatableItemInfoCollection;
    procedure SetCanCreateFolders(AIndex: Integer; const AValue: boolean);
    procedure SetCanCreateItems(AIndex: Integer; const AValue: boolean);
    procedure SetCanUploadFiles(AIndex: Integer; const AValue: boolean);
    procedure SetCreatablesCollection(AIndex: Integer; 
                                 const AValue: TSPCreatableItemInfoCollection);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CanCreateFolders : boolean index 0 read FCanCreateFolders write SetCanCreateFolders;
    Property CanCreateItems : boolean index 8 read FCanCreateItems write SetCanCreateItems;
    Property CanUploadFiles : boolean index 16 read FCanUploadFiles write SetCanUploadFiles;
    Property CreatablesCollection : TSPCreatableItemInfoCollection index 24 read FCreatablesCollection write SetCreatablesCollection;
  end;
  
  
  { --------------------------------------------------------------------
    SP: View
    --------------------------------------------------------------------}
  
  TSPView = Class(TODataEntity)
  private
    FAggregations : string;
    FAggregationsStatus : string;
    FBaseViewId : string;
    FContentTypeId : TSPContentTypeId;
    FDefaultView : boolean;
    FDefaultViewForContentType : boolean;
    FEditorModified : boolean;
    FFormats : string;
    FHidden : boolean;
    FHtmlSchemaXml : string;
    FId : TGUIDString;
    FImageUrl : string;
    FIncludeRootFolder : boolean;
    FViewJoins : string;
    FJSLink : string;
    FListViewXml : string;
    FMethod : string;
    FMobileDefaultView : boolean;
    FMobileView : boolean;
    FModerationType : string;
    FOrderedView : boolean;
    FPaged : boolean;
    FPersonalView : boolean;
    FViewProjectedFields : string;
    FViewQuery : string;
    FReadOnlyView : boolean;
    FRequiresClientIntegration : boolean;
    FRowLimit : TInt32;
    FScope : TInt32;
    FServerRelativeUrl : string;
    FStyleId : string;
    FThreaded : boolean;
    FTitle : string;
    FToolbar : string;
    FToolbarTemplateName : string;
    FViewType : string;
    FViewData : string;
    procedure SetAggregations(AIndex: Integer; const AValue: string);
    procedure SetAggregationsStatus(AIndex: Integer; const AValue: string);
    procedure SetBaseViewId(AIndex: Integer; const AValue: string);
    procedure SetContentTypeId(AIndex: Integer; 
                          const AValue: TSPContentTypeId);
    procedure SetDefaultView(AIndex: Integer; const AValue: boolean);
    procedure SetDefaultViewForContentType(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetEditorModified(AIndex: Integer; const AValue: boolean);
    procedure SetFormats(AIndex: Integer; const AValue: string);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetHtmlSchemaXml(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetIncludeRootFolder(AIndex: Integer; const AValue: boolean);
    procedure SetViewJoins(AIndex: Integer; const AValue: string);
    procedure SetJSLink(AIndex: Integer; const AValue: string);
    procedure SetListViewXml(AIndex: Integer; const AValue: string);
    procedure SetMethod(AIndex: Integer; const AValue: string);
    procedure SetMobileDefaultView(AIndex: Integer; const AValue: boolean);
    procedure SetMobileView(AIndex: Integer; const AValue: boolean);
    procedure SetModerationType(AIndex: Integer; const AValue: string);
    procedure SetOrderedView(AIndex: Integer; const AValue: boolean);
    procedure SetPaged(AIndex: Integer; const AValue: boolean);
    procedure SetPersonalView(AIndex: Integer; const AValue: boolean);
    procedure SetViewProjectedFields(AIndex: Integer; const AValue: string);
    procedure SetViewQuery(AIndex: Integer; const AValue: string);
    procedure SetReadOnlyView(AIndex: Integer; const AValue: boolean);
    procedure SetRequiresClientIntegration(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetRowLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetScope(AIndex: Integer; const AValue: TInt32);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetStyleId(AIndex: Integer; const AValue: string);
    procedure SetThreaded(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetToolbar(AIndex: Integer; const AValue: string);
    procedure SetToolbarTemplateName(AIndex: Integer; const AValue: string);
    procedure SetViewType(AIndex: Integer; const AValue: string);
    procedure SetViewData(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ViewFields(AService: TODataService) : TSPViewFieldCollection;
  published
    Property Aggregations : string index 0 read FAggregations write SetAggregations;
    Property AggregationsStatus : string index 8 read FAggregationsStatus write SetAggregationsStatus;
    Property BaseViewId : string index 16 read FBaseViewId write SetBaseViewId;
    Property ContentTypeId : TSPContentTypeId index 24 read FContentTypeId write SetContentTypeId;
    Property DefaultView : boolean index 32 read FDefaultView write SetDefaultView;
    Property DefaultViewForContentType : boolean index 40 read FDefaultViewForContentType write SetDefaultViewForContentType;
    Property EditorModified : boolean index 48 read FEditorModified write SetEditorModified;
    Property Formats : string index 56 read FFormats write SetFormats;
    Property Hidden : boolean index 64 read FHidden write SetHidden;
    Property HtmlSchemaXml : string index 72 read FHtmlSchemaXml write SetHtmlSchemaXml;
    Property Id : TGUIDString index 80 read FId write SetId;
    Property ImageUrl : string index 88 read FImageUrl write SetImageUrl;
    Property IncludeRootFolder : boolean index 96 read FIncludeRootFolder write SetIncludeRootFolder;
    Property ViewJoins : string index 104 read FViewJoins write SetViewJoins;
    Property JSLink : string index 112 read FJSLink write SetJSLink;
    Property ListViewXml : string index 120 read FListViewXml write SetListViewXml;
    Property Method : string index 128 read FMethod write SetMethod;
    Property MobileDefaultView : boolean index 136 read FMobileDefaultView write SetMobileDefaultView;
    Property MobileView : boolean index 144 read FMobileView write SetMobileView;
    Property ModerationType : string index 152 read FModerationType write SetModerationType;
    Property OrderedView : boolean index 160 read FOrderedView write SetOrderedView;
    Property Paged : boolean index 168 read FPaged write SetPaged;
    Property PersonalView : boolean index 176 read FPersonalView write SetPersonalView;
    Property ViewProjectedFields : string index 184 read FViewProjectedFields write SetViewProjectedFields;
    Property ViewQuery : string index 192 read FViewQuery write SetViewQuery;
    Property ReadOnlyView : boolean index 200 read FReadOnlyView write SetReadOnlyView;
    Property RequiresClientIntegration : boolean index 208 read FRequiresClientIntegration write SetRequiresClientIntegration;
    Property RowLimit : TInt32 index 216 read FRowLimit write SetRowLimit;
    Property Scope : TInt32 index 224 read FScope write SetScope;
    Property ServerRelativeUrl : string index 232 read FServerRelativeUrl write SetServerRelativeUrl;
    Property StyleId : string index 240 read FStyleId write SetStyleId;
    Property Threaded : boolean index 248 read FThreaded write SetThreaded;
    Property Title : string index 256 read FTitle write SetTitle;
    Property Toolbar : string index 264 read FToolbar write SetToolbar;
    Property ToolbarTemplateName : string index 272 read FToolbarTemplateName write SetToolbarTemplateName;
    Property ViewType : string index 280 read FViewType write SetViewType;
    Property ViewData : string index 288 read FViewData write SetViewData;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ViewFieldCollection
    --------------------------------------------------------------------}
  
  TSPViewFieldCollection = Class(TODataEntity)
  private
    FSchemaXml : string;
    FItems : TStringArray;
    procedure SetSchemaXml(AIndex: Integer; const AValue: string);
    procedure SetItems(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property SchemaXml : string index 0 read FSchemaXml write SetSchemaXml;
    Property Items : TStringArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Form
    --------------------------------------------------------------------}
  
  TSPForm = Class(TODataEntity)
  private
    FId : TGUIDString;
    FServerRelativeUrl : string;
    FFormType : TInt32;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetFormType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property ServerRelativeUrl : string index 8 read FServerRelativeUrl write SetServerRelativeUrl;
    Property FormType : TInt32 index 16 read FFormType write SetFormType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: InformationRightsManagementSettings
    --------------------------------------------------------------------}
  
  TSPInformationRightsManagementSettings = Class(TODataEntity)
  private
    FAllowPrint : boolean;
    FAllowScript : boolean;
    FAllowWriteCopy : boolean;
    FDisableDocumentBrowserView : boolean;
    FDocumentAccessExpireDays : TInt32;
    FDocumentLibraryProtectionExpireDate : TDateTime;
    FEnableDocumentAccessExpire : boolean;
    FEnableDocumentBrowserPublishingView : boolean;
    FEnableGroupProtection : boolean;
    FEnableLicenseCacheExpire : boolean;
    FGroupName : string;
    FLicenseCacheExpireDays : TInt32;
    FPolicyDescription : string;
    FPolicyTitle : string;
    procedure SetAllowPrint(AIndex: Integer; const AValue: boolean);
    procedure SetAllowScript(AIndex: Integer; const AValue: boolean);
    procedure SetAllowWriteCopy(AIndex: Integer; const AValue: boolean);
    procedure SetDisableDocumentBrowserView(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetDocumentAccessExpireDays(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetDocumentLibraryProtectionExpireDate(AIndex: Integer; 
                                                const AValue: TDateTime);
    procedure SetEnableDocumentAccessExpire(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetEnableDocumentBrowserPublishingView(AIndex: Integer; 
                                                const AValue: boolean);
    procedure SetEnableGroupProtection(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetEnableLicenseCacheExpire(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetGroupName(AIndex: Integer; const AValue: string);
    procedure SetLicenseCacheExpireDays(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetPolicyDescription(AIndex: Integer; const AValue: string);
    procedure SetPolicyTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllowPrint : boolean index 0 read FAllowPrint write SetAllowPrint;
    Property AllowScript : boolean index 8 read FAllowScript write SetAllowScript;
    Property AllowWriteCopy : boolean index 16 read FAllowWriteCopy write SetAllowWriteCopy;
    Property DisableDocumentBrowserView : boolean index 24 read FDisableDocumentBrowserView write SetDisableDocumentBrowserView;
    Property DocumentAccessExpireDays : TInt32 index 32 read FDocumentAccessExpireDays write SetDocumentAccessExpireDays;
    Property DocumentLibraryProtectionExpireDate : TDateTime index 40 read FDocumentLibraryProtectionExpireDate write SetDocumentLibraryProtectionExpireDate;
    Property EnableDocumentAccessExpire : boolean index 48 read FEnableDocumentAccessExpire write SetEnableDocumentAccessExpire;
    Property EnableDocumentBrowserPublishingView : boolean index 56 read FEnableDocumentBrowserPublishingView write SetEnableDocumentBrowserPublishingView;
    Property EnableGroupProtection : boolean index 64 read FEnableGroupProtection write SetEnableGroupProtection;
    Property EnableLicenseCacheExpire : boolean index 72 read FEnableLicenseCacheExpire write SetEnableLicenseCacheExpire;
    Property GroupName : string index 80 read FGroupName write SetGroupName;
    Property LicenseCacheExpireDays : TInt32 index 88 read FLicenseCacheExpireDays write SetLicenseCacheExpireDays;
    Property PolicyDescription : string index 96 read FPolicyDescription write SetPolicyDescription;
    Property PolicyTitle : string index 104 read FPolicyTitle write SetPolicyTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserCustomAction
    --------------------------------------------------------------------}
  
  TSPUserCustomAction = Class(TODataEntity)
  private
    FCommandUIExtension : string;
    FDescription : string;
    FGroup : string;
    FId : TGUIDString;
    FImageUrl : string;
    FLocation : string;
    FName : string;
    FRegistrationId : string;
    FRegistrationType : TInt32;
    FRights : TSPBasePermissions;
    FScope : TInt32;
    FScriptBlock : string;
    FScriptSrc : string;
    FSequence : TInt32;
    FTitle : string;
    FUrl : string;
    FVersionOfUserCustomAction : string;
    procedure SetCommandUIExtension(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetLocation(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRegistrationId(AIndex: Integer; const AValue: string);
    procedure SetRegistrationType(AIndex: Integer; const AValue: TInt32);
    procedure SetRights(AIndex: Integer; const AValue: TSPBasePermissions);
    procedure SetScope(AIndex: Integer; const AValue: TInt32);
    procedure SetScriptBlock(AIndex: Integer; const AValue: string);
    procedure SetScriptSrc(AIndex: Integer; const AValue: string);
    procedure SetSequence(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetVersionOfUserCustomAction(AIndex: Integer; 
                                      const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CommandUIExtension : string index 0 read FCommandUIExtension write SetCommandUIExtension;
    Property Description : string index 8 read FDescription write SetDescription;
    Property Group : string index 16 read FGroup write SetGroup;
    Property Id : TGUIDString index 24 read FId write SetId;
    Property ImageUrl : string index 32 read FImageUrl write SetImageUrl;
    Property Location : string index 40 read FLocation write SetLocation;
    Property Name : string index 48 read FName write SetName;
    Property RegistrationId : string index 56 read FRegistrationId write SetRegistrationId;
    Property RegistrationType : TInt32 index 64 read FRegistrationType write SetRegistrationType;
    Property Rights : TSPBasePermissions index 72 read FRights write SetRights;
    Property Scope : TInt32 index 80 read FScope write SetScope;
    Property ScriptBlock : string index 88 read FScriptBlock write SetScriptBlock;
    Property ScriptSrc : string index 96 read FScriptSrc write SetScriptSrc;
    Property Sequence : TInt32 index 104 read FSequence write SetSequence;
    Property Title : string index 112 read FTitle write SetTitle;
    Property Url : string index 120 read FUrl write SetUrl;
    Property VersionOfUserCustomAction : string index 128 read FVersionOfUserCustomAction write SetVersionOfUserCustomAction;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FileVersion
    --------------------------------------------------------------------}
  
  TSPFileVersion = Class(TODataEntity)
  private
    FCheckInComment : string;
    FCreated : TDateTime;
    FID : TInt32;
    FIsCurrentVersion : boolean;
    F_Length : int64;
    FSize : TInt32;
    FUrl : string;
    FVersionLabel : string;
    procedure SetCheckInComment(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetID(AIndex: Integer; const AValue: TInt32);
    procedure SetIsCurrentVersion(AIndex: Integer; const AValue: boolean);
    procedure Set_Length(AIndex: Integer; const AValue: int64);
    procedure SetSize(AIndex: Integer; const AValue: TInt32);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetVersionLabel(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
    function CreatedBy(AService: TODataService) : TSPUser;
  published
    Property CheckInComment : string index 0 read FCheckInComment write SetCheckInComment;
    Property Created : TDateTime index 8 read FCreated write SetCreated;
    Property ID : TInt32 index 16 read FID write SetID;
    Property IsCurrentVersion : boolean index 24 read FIsCurrentVersion write SetIsCurrentVersion;
    Property _Length : int64 index 32 read F_Length write Set_Length;
    Property Size : TInt32 index 40 read FSize write SetSize;
    Property Url : string index 48 read FUrl write SetUrl;
    Property VersionLabel : string index 56 read FVersionLabel write SetVersionLabel;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListTemplate
    --------------------------------------------------------------------}
  
  TSPListTemplate = Class(TODataEntity)
  private
    FAllowsFolderCreation : boolean;
    FBaseType : TInt32;
    FDescription : string;
    FFeatureId : TGUIDString;
    FHidden : boolean;
    FImageUrl : string;
    FInternalName : string;
    FIsCustomTemplate : boolean;
    FName : string;
    FOnQuickLaunch : boolean;
    FListTemplateTypeKind : TInt32;
    FUnique : boolean;
    procedure SetAllowsFolderCreation(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetBaseType(AIndex: Integer; const AValue: TInt32);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetFeatureId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetInternalName(AIndex: Integer; const AValue: string);
    procedure SetIsCustomTemplate(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOnQuickLaunch(AIndex: Integer; const AValue: boolean);
    procedure SetListTemplateTypeKind(AIndex: Integer; const AValue: TInt32);
    procedure SetUnique(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllowsFolderCreation : boolean index 0 read FAllowsFolderCreation write SetAllowsFolderCreation;
    Property BaseType : TInt32 index 8 read FBaseType write SetBaseType;
    Property Description : string index 16 read FDescription write SetDescription;
    Property FeatureId : TGUIDString index 24 read FFeatureId write SetFeatureId;
    Property Hidden : boolean index 32 read FHidden write SetHidden;
    Property ImageUrl : string index 40 read FImageUrl write SetImageUrl;
    Property InternalName : string index 48 read FInternalName write SetInternalName;
    Property IsCustomTemplate : boolean index 56 read FIsCustomTemplate write SetIsCustomTemplate;
    Property Name : string index 64 read FName write SetName;
    Property OnQuickLaunch : boolean index 72 read FOnQuickLaunch write SetOnQuickLaunch;
    Property ListTemplateTypeKind : TInt32 index 80 read FListTemplateTypeKind write SetListTemplateTypeKind;
    Property Unique : boolean index 88 read FUnique write SetUnique;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Navigation
    --------------------------------------------------------------------}
  
  TSPNavigation = Class(TODataEntity)
  private
    FUseShared : boolean;
    procedure SetUseShared(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function QuickLaunch(AService: TODataService) : TSPNavigationNode;
    function TopNavigationBar(AService: TODataService) : TSPNavigationNode;
  published
    Property UseShared : boolean index 0 read FUseShared write SetUseShared;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NavigationNode
    --------------------------------------------------------------------}
  
  TSPNavigationNode = Class(TODataEntity)
  private
    FId : TInt32;
    FIsDocLib : boolean;
    FIsExternal : boolean;
    FIsVisible : boolean;
    FTitle : string;
    FUrl : string;
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetIsDocLib(AIndex: Integer; const AValue: boolean);
    procedure SetIsExternal(AIndex: Integer; const AValue: boolean);
    procedure SetIsVisible(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Children(AService: TODataService) : TSPNavigationNode;
  published
    Property Id : TInt32 index 0 read FId write SetId;
    Property IsDocLib : boolean index 8 read FIsDocLib write SetIsDocLib;
    Property IsExternal : boolean index 16 read FIsExternal write SetIsExternal;
    Property IsVisible : boolean index 24 read FIsVisible write SetIsVisible;
    Property Title : string index 32 read FTitle write SetTitle;
    Property Url : string index 40 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebInformation
    --------------------------------------------------------------------}
  
  TSPWebInformation = Class(TODataEntity)
  private
    FConfiguration : TInt16;
    FCreated : TDateTime;
    FDescription : string;
    FId : TGUIDString;
    FLanguage : TInt32;
    FLastItemModifiedDate : TDateTime;
    FServerRelativeUrl : string;
    FTitle : string;
    FWebTemplate : string;
    FWebTemplateId : TInt32;
    procedure SetConfiguration(AIndex: Integer; const AValue: TInt16);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLanguage(AIndex: Integer; const AValue: TInt32);
    procedure SetLastItemModifiedDate(AIndex: Integer; 
                                 const AValue: TDateTime);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetWebTemplate(AIndex: Integer; const AValue: string);
    procedure SetWebTemplateId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Configuration : TInt16 index 0 read FConfiguration write SetConfiguration;
    Property Created : TDateTime index 8 read FCreated write SetCreated;
    Property Description : string index 16 read FDescription write SetDescription;
    Property Id : TGUIDString index 24 read FId write SetId;
    Property Language : TInt32 index 32 read FLanguage write SetLanguage;
    Property LastItemModifiedDate : TDateTime index 40 read FLastItemModifiedDate write SetLastItemModifiedDate;
    Property ServerRelativeUrl : string index 48 read FServerRelativeUrl write SetServerRelativeUrl;
    Property Title : string index 56 read FTitle write SetTitle;
    Property WebTemplate : string index 64 read FWebTemplate write SetWebTemplate;
    Property WebTemplateId : TInt32 index 72 read FWebTemplateId write SetWebTemplateId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PushNotificationSubscriber
    --------------------------------------------------------------------}
  
  TSPPushNotificationSubscriber = Class(TODataEntity)
  private
    FCustomArgs : string;
    FDeviceAppInstanceId : TGUIDString;
    FLastModifiedTimeStamp : TDateTime;
    FRegistrationTimeStamp : TDateTime;
    FServiceToken : string;
    FSubscriberType : string;
    procedure SetCustomArgs(AIndex: Integer; const AValue: string);
    procedure SetDeviceAppInstanceId(AIndex: Integer; 
                                const AValue: TGUIDString);
    procedure SetLastModifiedTimeStamp(AIndex: Integer; 
                                  const AValue: TDateTime);
    procedure SetRegistrationTimeStamp(AIndex: Integer; 
                                  const AValue: TDateTime);
    procedure SetServiceToken(AIndex: Integer; const AValue: string);
    procedure SetSubscriberType(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function User(AService: TODataService) : TSPUser;
  published
    Property CustomArgs : string index 0 read FCustomArgs write SetCustomArgs;
    Property DeviceAppInstanceId : TGUIDString index 8 read FDeviceAppInstanceId write SetDeviceAppInstanceId;
    Property LastModifiedTimeStamp : TDateTime index 16 read FLastModifiedTimeStamp write SetLastModifiedTimeStamp;
    Property RegistrationTimeStamp : TDateTime index 24 read FRegistrationTimeStamp write SetRegistrationTimeStamp;
    Property ServiceToken : string index 32 read FServiceToken write SetServiceToken;
    Property SubscriberType : string index 40 read FSubscriberType write SetSubscriberType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RegionalSettings
    --------------------------------------------------------------------}
  
  TSPRegionalSettings = Class(TODataEntity)
  private
    FAdjustHijriDays : TInt16;
    FAlternateCalendarType : TInt16;
    FAM : string;
    FCalendarType : TInt16;
    FCollation : TInt16;
    FCollationLCID : TInt32;
    FDateFormat : TInt32;
    FDateSeparator : string;
    FDecimalSeparator : string;
    FDigitGrouping : string;
    FFirstDayOfWeek : TInt32;
    FFirstWeekOfYear : TInt16;
    FIsEastAsia : boolean;
    FIsRightToLeft : boolean;
    FIsUIRightToLeft : boolean;
    FListSeparator : string;
    FLocaleId : TInt32;
    FNegativeSign : string;
    FNegNumberMode : TInt32;
    FPM : string;
    FPositiveSign : string;
    FShowWeeks : boolean;
    FThousandSeparator : string;
    FTime24 : boolean;
    FTimeMarkerPosition : TInt32;
    FTimeSeparator : string;
    FWorkDayEndHour : TInt16;
    FWorkDays : TInt16;
    FWorkDayStartHour : TInt16;
    procedure SetAdjustHijriDays(AIndex: Integer; const AValue: TInt16);
    procedure SetAlternateCalendarType(AIndex: Integer; 
                                  const AValue: TInt16);
    procedure SetAM(AIndex: Integer; const AValue: string);
    procedure SetCalendarType(AIndex: Integer; const AValue: TInt16);
    procedure SetCollation(AIndex: Integer; const AValue: TInt16);
    procedure SetCollationLCID(AIndex: Integer; const AValue: TInt32);
    procedure SetDateFormat(AIndex: Integer; const AValue: TInt32);
    procedure SetDateSeparator(AIndex: Integer; const AValue: string);
    procedure SetDecimalSeparator(AIndex: Integer; const AValue: string);
    procedure SetDigitGrouping(AIndex: Integer; const AValue: string);
    procedure SetFirstDayOfWeek(AIndex: Integer; const AValue: TInt32);
    procedure SetFirstWeekOfYear(AIndex: Integer; const AValue: TInt16);
    procedure SetIsEastAsia(AIndex: Integer; const AValue: boolean);
    procedure SetIsRightToLeft(AIndex: Integer; const AValue: boolean);
    procedure SetIsUIRightToLeft(AIndex: Integer; const AValue: boolean);
    procedure SetListSeparator(AIndex: Integer; const AValue: string);
    procedure SetLocaleId(AIndex: Integer; const AValue: TInt32);
    procedure SetNegativeSign(AIndex: Integer; const AValue: string);
    procedure SetNegNumberMode(AIndex: Integer; const AValue: TInt32);
    procedure SetPM(AIndex: Integer; const AValue: string);
    procedure SetPositiveSign(AIndex: Integer; const AValue: string);
    procedure SetShowWeeks(AIndex: Integer; const AValue: boolean);
    procedure SetThousandSeparator(AIndex: Integer; const AValue: string);
    procedure SetTime24(AIndex: Integer; const AValue: boolean);
    procedure SetTimeMarkerPosition(AIndex: Integer; const AValue: TInt32);
    procedure SetTimeSeparator(AIndex: Integer; const AValue: string);
    procedure SetWorkDayEndHour(AIndex: Integer; const AValue: TInt16);
    procedure SetWorkDays(AIndex: Integer; const AValue: TInt16);
    procedure SetWorkDayStartHour(AIndex: Integer; const AValue: TInt16);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function GlobalTimeZones(AService: TODataService) : TSPTimeZone;
    function TimeZone(AService: TODataService) : TSPTimeZone;
    function TimeZones(AService: TODataService) : TSPTimeZone;
  published
    Property AdjustHijriDays : TInt16 index 0 read FAdjustHijriDays write SetAdjustHijriDays;
    Property AlternateCalendarType : TInt16 index 8 read FAlternateCalendarType write SetAlternateCalendarType;
    Property AM : string index 16 read FAM write SetAM;
    Property CalendarType : TInt16 index 24 read FCalendarType write SetCalendarType;
    Property Collation : TInt16 index 32 read FCollation write SetCollation;
    Property CollationLCID : TInt32 index 40 read FCollationLCID write SetCollationLCID;
    Property DateFormat : TInt32 index 48 read FDateFormat write SetDateFormat;
    Property DateSeparator : string index 56 read FDateSeparator write SetDateSeparator;
    Property DecimalSeparator : string index 64 read FDecimalSeparator write SetDecimalSeparator;
    Property DigitGrouping : string index 72 read FDigitGrouping write SetDigitGrouping;
    Property FirstDayOfWeek : TInt32 index 80 read FFirstDayOfWeek write SetFirstDayOfWeek;
    Property FirstWeekOfYear : TInt16 index 88 read FFirstWeekOfYear write SetFirstWeekOfYear;
    Property IsEastAsia : boolean index 96 read FIsEastAsia write SetIsEastAsia;
    Property IsRightToLeft : boolean index 104 read FIsRightToLeft write SetIsRightToLeft;
    Property IsUIRightToLeft : boolean index 112 read FIsUIRightToLeft write SetIsUIRightToLeft;
    Property ListSeparator : string index 120 read FListSeparator write SetListSeparator;
    Property LocaleId : TInt32 index 128 read FLocaleId write SetLocaleId;
    Property NegativeSign : string index 136 read FNegativeSign write SetNegativeSign;
    Property NegNumberMode : TInt32 index 144 read FNegNumberMode write SetNegNumberMode;
    Property PM : string index 152 read FPM write SetPM;
    Property PositiveSign : string index 160 read FPositiveSign write SetPositiveSign;
    Property ShowWeeks : boolean index 168 read FShowWeeks write SetShowWeeks;
    Property ThousandSeparator : string index 176 read FThousandSeparator write SetThousandSeparator;
    Property Time24 : boolean index 184 read FTime24 write SetTime24;
    Property TimeMarkerPosition : TInt32 index 192 read FTimeMarkerPosition write SetTimeMarkerPosition;
    Property TimeSeparator : string index 200 read FTimeSeparator write SetTimeSeparator;
    Property WorkDayEndHour : TInt16 index 208 read FWorkDayEndHour write SetWorkDayEndHour;
    Property WorkDays : TInt16 index 216 read FWorkDays write SetWorkDays;
    Property WorkDayStartHour : TInt16 index 224 read FWorkDayStartHour write SetWorkDayStartHour;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeZone
    --------------------------------------------------------------------}
  
  TSPTimeZone = Class(TODataEntity)
  private
    FDescription : string;
    FId : TInt32;
    FInformation : TSPTimeZoneInformation;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetInformation(AIndex: Integer; 
                        const AValue: TSPTimeZoneInformation);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TInt32 index 8 read FId write SetId;
    Property Information : TSPTimeZoneInformation index 16 read FInformation write SetInformation;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ThemeInfo
    --------------------------------------------------------------------}
  
  TSPThemeInfo = Class(TODataEntity)
  private
    FAccessibleDescription : string;
    FThemeBackgroundImageUri : string;
    procedure SetAccessibleDescription(AIndex: Integer; 
                                  const AValue: string);
    procedure SetThemeBackgroundImageUri(AIndex: Integer; 
                                    const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AccessibleDescription : string index 0 read FAccessibleDescription write SetAccessibleDescription;
    Property ThemeBackgroundImageUri : string index 8 read FThemeBackgroundImageUri write SetThemeBackgroundImageUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPAppLicenseManager
    --------------------------------------------------------------------}
  
  TSPSPAppLicenseManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SolutionExporter
    --------------------------------------------------------------------}
  
  TSPSolutionExporter = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserSolution
    --------------------------------------------------------------------}
  
  TSPUserSolution = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppCatalog
    --------------------------------------------------------------------}
  
  TSPAppCatalog = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppInstanceErrorDetails
    --------------------------------------------------------------------}
  
  TSPAppInstanceErrorDetails = Class(TODataEntity)
  private
    FCorrelationId : TGUIDString;
    FErrorDetail : string;
    FErrorType : TInt32;
    FErrorTypeName : string;
    FExceptionMessage : string;
    FSource : TInt32;
    FSourceName : string;
    procedure SetCorrelationId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetErrorDetail(AIndex: Integer; const AValue: string);
    procedure SetErrorType(AIndex: Integer; const AValue: TInt32);
    procedure SetErrorTypeName(AIndex: Integer; const AValue: string);
    procedure SetExceptionMessage(AIndex: Integer; const AValue: string);
    procedure SetSource(AIndex: Integer; const AValue: TInt32);
    procedure SetSourceName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CorrelationId : TGUIDString index 0 read FCorrelationId write SetCorrelationId;
    Property ErrorDetail : string index 8 read FErrorDetail write SetErrorDetail;
    Property ErrorType : TInt32 index 16 read FErrorType write SetErrorType;
    Property ErrorTypeName : string index 24 read FErrorTypeName write SetErrorTypeName;
    Property ExceptionMessage : string index 32 read FExceptionMessage write SetExceptionMessage;
    Property Source : TInt32 index 40 read FSource write SetSource;
    Property SourceName : string index 48 read FSourceName write SetSourceName;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppInstance
    --------------------------------------------------------------------}
  
  TSPAppInstance = Class(TODataEntity)
  private
    FAppPrincipalId : string;
    FAppWebFullUrl : string;
    FId : TGUIDString;
    FImageFallbackUrl : string;
    FImageUrl : string;
    FInError : boolean;
    FStartPage : string;
    FPackageFingerprint : TBinary;
    FProductId : TGUIDString;
    FRemoteAppUrl : string;
    FSettingsPageUrl : string;
    FSiteId : TGUIDString;
    FStatus : TInt32;
    FTitle : string;
    FWebId : TGUIDString;
    procedure SetAppPrincipalId(AIndex: Integer; const AValue: string);
    procedure SetAppWebFullUrl(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetImageFallbackUrl(AIndex: Integer; const AValue: string);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetInError(AIndex: Integer; const AValue: boolean);
    procedure SetStartPage(AIndex: Integer; const AValue: string);
    procedure SetPackageFingerprint(AIndex: Integer; const AValue: TBinary);
    procedure SetProductId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetRemoteAppUrl(AIndex: Integer; const AValue: string);
    procedure SetSettingsPageUrl(AIndex: Integer; const AValue: string);
    procedure SetSiteId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AppPrincipalId : string index 0 read FAppPrincipalId write SetAppPrincipalId;
    Property AppWebFullUrl : string index 8 read FAppWebFullUrl write SetAppWebFullUrl;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property ImageFallbackUrl : string index 24 read FImageFallbackUrl write SetImageFallbackUrl;
    Property ImageUrl : string index 32 read FImageUrl write SetImageUrl;
    Property InError : boolean index 40 read FInError write SetInError;
    Property StartPage : string index 48 read FStartPage write SetStartPage;
    Property PackageFingerprint : TBinary index 56 read FPackageFingerprint write SetPackageFingerprint;
    Property ProductId : TGUIDString index 64 read FProductId write SetProductId;
    Property RemoteAppUrl : string index 72 read FRemoteAppUrl write SetRemoteAppUrl;
    Property SettingsPageUrl : string index 80 read FSettingsPageUrl write SetSettingsPageUrl;
    Property SiteId : TGUIDString index 88 read FSiteId write SetSiteId;
    Property Status : TInt32 index 96 read FStatus write SetStatus;
    Property Title : string index 104 read FTitle write SetTitle;
    Property WebId : TGUIDString index 112 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: App
    --------------------------------------------------------------------}
  
  TSPApp = Class(TODataEntity)
  private
    FAssetId : string;
    FContentMarket : string;
    FVersionString : string;
    procedure SetAssetId(AIndex: Integer; const AValue: string);
    procedure SetContentMarket(AIndex: Integer; const AValue: string);
    procedure SetVersionString(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AssetId : string index 0 read FAssetId write SetAssetId;
    Property ContentMarket : string index 8 read FContentMarket write SetContentMarket;
    Property VersionString : string index 16 read FVersionString write SetVersionString;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AlternateUrl
    --------------------------------------------------------------------}
  
  TSPAlternateUrl = Class(TODataEntity)
  private
    FUri : string;
    FUrlZone : TInt32;
    procedure SetUri(AIndex: Integer; const AValue: string);
    procedure SetUrlZone(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Uri : string index 0 read FUri write SetUri;
    Property UrlZone : TInt32 index 8 read FUrlZone write SetUrlZone;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ObjectSharingSettings
    --------------------------------------------------------------------}
  
  TSPObjectSharingSettings = Class(TODataEntity)
  private
    FAccessRequestMode : boolean;
    FCanCurrentUserManageReadonlyLink : boolean;
    FCanCurrentUserManageReadWriteLink : boolean;
    FCanCurrentUserRetrieveReadonlyLink : boolean;
    FCanCurrentUserRetrieveReadWriteLink : boolean;
    FCanCurrentUserShareExternally : boolean;
    FCanCurrentUserShareInternally : boolean;
    FCanSendEmail : boolean;
    FCanSendLink : boolean;
    FCanShareFolder : boolean;
    FGroupsList : TSPKeyValueArray;
    FHasEditRole : boolean;
    FHasReadRole : boolean;
    FInheritingWebLink : string;
    FIsGuestUser : boolean;
    FIsPictureLibrary : boolean;
    FIsUserSiteAdmin : boolean;
    FItemId : string;
    FItemName : string;
    FItemUrl : string;
    FListId : TGUIDString;
    FPermissionsOnlyMode : boolean;
    FRoles : TSPKeyValueArray;
    FShareByEmailEnabled : boolean;
    FShowExternalSharingWarning : boolean;
    FSimplifiedRoles : TSPKeyValueArray;
    FSupportsAclPropagation : boolean;
    FWebUrl : string;
    procedure SetAccessRequestMode(AIndex: Integer; const AValue: boolean);
    procedure SetCanCurrentUserManageReadonlyLink(AIndex: Integer; 
                                             const AValue: boolean);
    procedure SetCanCurrentUserManageReadWriteLink(AIndex: Integer; 
                                              const AValue: boolean);
    procedure SetCanCurrentUserRetrieveReadonlyLink(AIndex: Integer; 
                                               const AValue: boolean);
    procedure SetCanCurrentUserRetrieveReadWriteLink(AIndex: Integer; 
                                                const AValue: boolean);
    procedure SetCanCurrentUserShareExternally(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetCanCurrentUserShareInternally(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetCanSendEmail(AIndex: Integer; const AValue: boolean);
    procedure SetCanSendLink(AIndex: Integer; const AValue: boolean);
    procedure SetCanShareFolder(AIndex: Integer; const AValue: boolean);
    procedure SetGroupsList(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetHasEditRole(AIndex: Integer; const AValue: boolean);
    procedure SetHasReadRole(AIndex: Integer; const AValue: boolean);
    procedure SetInheritingWebLink(AIndex: Integer; const AValue: string);
    procedure SetIsGuestUser(AIndex: Integer; const AValue: boolean);
    procedure SetIsPictureLibrary(AIndex: Integer; const AValue: boolean);
    procedure SetIsUserSiteAdmin(AIndex: Integer; const AValue: boolean);
    procedure SetItemId(AIndex: Integer; const AValue: string);
    procedure SetItemName(AIndex: Integer; const AValue: string);
    procedure SetItemUrl(AIndex: Integer; const AValue: string);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPermissionsOnlyMode(AIndex: Integer; const AValue: boolean);
    procedure SetRoles(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetShareByEmailEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetShowExternalSharingWarning(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetSimplifiedRoles(AIndex: Integer; 
                            const AValue: TSPKeyValueArray);
    procedure SetSupportsAclPropagation(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetWebUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ObjectSharingInformation(AService: TODataService)
                                  : TSPObjectSharingInformation;
    function SharePointSettings(AService: TODataService)
                            : TSPSharePointSharingSettings;
  published
    Property AccessRequestMode : boolean index 0 read FAccessRequestMode write SetAccessRequestMode;
    Property CanCurrentUserManageReadonlyLink : boolean index 8 read FCanCurrentUserManageReadonlyLink write SetCanCurrentUserManageReadonlyLink;
    Property CanCurrentUserManageReadWriteLink : boolean index 16 read FCanCurrentUserManageReadWriteLink write SetCanCurrentUserManageReadWriteLink;
    Property CanCurrentUserRetrieveReadonlyLink : boolean index 24 read FCanCurrentUserRetrieveReadonlyLink write SetCanCurrentUserRetrieveReadonlyLink;
    Property CanCurrentUserRetrieveReadWriteLink : boolean index 32 read FCanCurrentUserRetrieveReadWriteLink write SetCanCurrentUserRetrieveReadWriteLink;
    Property CanCurrentUserShareExternally : boolean index 40 read FCanCurrentUserShareExternally write SetCanCurrentUserShareExternally;
    Property CanCurrentUserShareInternally : boolean index 48 read FCanCurrentUserShareInternally write SetCanCurrentUserShareInternally;
    Property CanSendEmail : boolean index 56 read FCanSendEmail write SetCanSendEmail;
    Property CanSendLink : boolean index 64 read FCanSendLink write SetCanSendLink;
    Property CanShareFolder : boolean index 72 read FCanShareFolder write SetCanShareFolder;
    Property GroupsList : TSPKeyValueArray index 80 read FGroupsList write SetGroupsList;
    Property HasEditRole : boolean index 88 read FHasEditRole write SetHasEditRole;
    Property HasReadRole : boolean index 96 read FHasReadRole write SetHasReadRole;
    Property InheritingWebLink : string index 104 read FInheritingWebLink write SetInheritingWebLink;
    Property IsGuestUser : boolean index 112 read FIsGuestUser write SetIsGuestUser;
    Property IsPictureLibrary : boolean index 120 read FIsPictureLibrary write SetIsPictureLibrary;
    Property IsUserSiteAdmin : boolean index 128 read FIsUserSiteAdmin write SetIsUserSiteAdmin;
    Property ItemId : string index 136 read FItemId write SetItemId;
    Property ItemName : string index 144 read FItemName write SetItemName;
    Property ItemUrl : string index 152 read FItemUrl write SetItemUrl;
    Property ListId : TGUIDString index 160 read FListId write SetListId;
    Property PermissionsOnlyMode : boolean index 168 read FPermissionsOnlyMode write SetPermissionsOnlyMode;
    Property Roles : TSPKeyValueArray index 176 read FRoles write SetRoles;
    Property ShareByEmailEnabled : boolean index 184 read FShareByEmailEnabled write SetShareByEmailEnabled;
    Property ShowExternalSharingWarning : boolean index 192 read FShowExternalSharingWarning write SetShowExternalSharingWarning;
    Property SimplifiedRoles : TSPKeyValueArray index 200 read FSimplifiedRoles write SetSimplifiedRoles;
    Property SupportsAclPropagation : boolean index 208 read FSupportsAclPropagation write SetSupportsAclPropagation;
    Property WebUrl : string index 216 read FWebUrl write SetWebUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ObjectSharingInformation
    --------------------------------------------------------------------}
  
  TSPObjectSharingInformation = Class(TODataEntity)
  private
    FAnonymousEditLink : string;
    FAnonymousViewLink : string;
    FCanBeShared : boolean;
    FCanBeUnshared : boolean;
    FCanManagePermissions : boolean;
    FHasPendingAccessRequests : boolean;
    FHasPermissionLevels : boolean;
    FIsSharedWithCurrentUser : boolean;
    FIsSharedWithGuest : boolean;
    FIsSharedWithMany : boolean;
    FIsSharedWithSecurityGroup : boolean;
    FPendingAccessRequestsLink : string;
    procedure SetAnonymousEditLink(AIndex: Integer; const AValue: string);
    procedure SetAnonymousViewLink(AIndex: Integer; const AValue: string);
    procedure SetCanBeShared(AIndex: Integer; const AValue: boolean);
    procedure SetCanBeUnshared(AIndex: Integer; const AValue: boolean);
    procedure SetCanManagePermissions(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetHasPendingAccessRequests(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetHasPermissionLevels(AIndex: Integer; const AValue: boolean);
    procedure SetIsSharedWithCurrentUser(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetIsSharedWithGuest(AIndex: Integer; const AValue: boolean);
    procedure SetIsSharedWithMany(AIndex: Integer; const AValue: boolean);
    procedure SetIsSharedWithSecurityGroup(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetPendingAccessRequestsLink(AIndex: Integer; 
                                      const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function SharedWithUsersCollection(AService: TODataService)
                                   : TSPObjectSharingInformationUser;
  published
    Property AnonymousEditLink : string index 0 read FAnonymousEditLink write SetAnonymousEditLink;
    Property AnonymousViewLink : string index 8 read FAnonymousViewLink write SetAnonymousViewLink;
    Property CanBeShared : boolean index 16 read FCanBeShared write SetCanBeShared;
    Property CanBeUnshared : boolean index 24 read FCanBeUnshared write SetCanBeUnshared;
    Property CanManagePermissions : boolean index 32 read FCanManagePermissions write SetCanManagePermissions;
    Property HasPendingAccessRequests : boolean index 40 read FHasPendingAccessRequests write SetHasPendingAccessRequests;
    Property HasPermissionLevels : boolean index 48 read FHasPermissionLevels write SetHasPermissionLevels;
    Property IsSharedWithCurrentUser : boolean index 56 read FIsSharedWithCurrentUser write SetIsSharedWithCurrentUser;
    Property IsSharedWithGuest : boolean index 64 read FIsSharedWithGuest write SetIsSharedWithGuest;
    Property IsSharedWithMany : boolean index 72 read FIsSharedWithMany write SetIsSharedWithMany;
    Property IsSharedWithSecurityGroup : boolean index 80 read FIsSharedWithSecurityGroup write SetIsSharedWithSecurityGroup;
    Property PendingAccessRequestsLink : string index 88 read FPendingAccessRequestsLink write SetPendingAccessRequestsLink;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ObjectSharingInformationUser
    --------------------------------------------------------------------}
  
  TSPObjectSharingInformationUser = Class(TODataEntity)
  private
    FCustomRoleNames : string;
    FDepartment : string;
    FEmail : string;
    FHasEditPermission : boolean;
    FHasViewPermission : boolean;
    FId : TInt32;
    FIsDomainGroup : boolean;
    FIsSiteAdmin : boolean;
    FJobTitle : string;
    FLoginName : string;
    FName : string;
    FPicture : string;
    FSipAddress : string;
    procedure SetCustomRoleNames(AIndex: Integer; const AValue: string);
    procedure SetDepartment(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetHasEditPermission(AIndex: Integer; const AValue: boolean);
    procedure SetHasViewPermission(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetIsDomainGroup(AIndex: Integer; const AValue: boolean);
    procedure SetIsSiteAdmin(AIndex: Integer; const AValue: boolean);
    procedure SetJobTitle(AIndex: Integer; const AValue: string);
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPicture(AIndex: Integer; const AValue: string);
    procedure SetSipAddress(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Principal(AService: TODataService) : TSPPrincipal;
    function User(AService: TODataService) : TSPUser;
  published
    Property CustomRoleNames : string index 0 read FCustomRoleNames write SetCustomRoleNames;
    Property Department : string index 8 read FDepartment write SetDepartment;
    Property Email : string index 16 read FEmail write SetEmail;
    Property HasEditPermission : boolean index 24 read FHasEditPermission write SetHasEditPermission;
    Property HasViewPermission : boolean index 32 read FHasViewPermission write SetHasViewPermission;
    Property Id : TInt32 index 40 read FId write SetId;
    Property IsDomainGroup : boolean index 48 read FIsDomainGroup write SetIsDomainGroup;
    Property IsSiteAdmin : boolean index 56 read FIsSiteAdmin write SetIsSiteAdmin;
    Property JobTitle : string index 64 read FJobTitle write SetJobTitle;
    Property LoginName : string index 72 read FLoginName write SetLoginName;
    Property Name : string index 80 read FName write SetName;
    Property Picture : string index 88 read FPicture write SetPicture;
    Property SipAddress : string index 96 read FSipAddress write SetSipAddress;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SharePointSharingSettings
    --------------------------------------------------------------------}
  
  TSPSharePointSharingSettings = Class(TODataEntity)
  private
    FAddToGroupModeName : string;
    FGroupNameLines : TStringArray;
    FGroupRoleDefinitionNamesLines : TStringArray;
    FIsMobileView : boolean;
    FPanelGivePermissionsVisible : boolean;
    FPanelShowHideMoreOptionsVisible : boolean;
    FPanelSimplifiedRoleSelectorVisible : boolean;
    FRequiredScriptFileLinks : TStringArray;
    FRoleDefinitionNameLines : TStringArray;
    FSelectedGroup : string;
    FSharedWithEnabled : boolean;
    FSharingCssLink : string;
    FTabbedDialogEnabled : boolean;
    FTabToShow : TInt32;
    FtxtEmailSubjectText : string;
    FUserDisplayUrl : string;
    procedure SetAddToGroupModeName(AIndex: Integer; const AValue: string);
    procedure SetGroupNameLines(AIndex: Integer; const AValue: TStringArray);
    procedure SetGroupRoleDefinitionNamesLines(AIndex: Integer; 
                                          const AValue: TStringArray);
    procedure SetIsMobileView(AIndex: Integer; const AValue: boolean);
    procedure SetPanelGivePermissionsVisible(AIndex: Integer; 
                                        const AValue: boolean);
    procedure SetPanelShowHideMoreOptionsVisible(AIndex: Integer; 
                                            const AValue: boolean);
    procedure SetPanelSimplifiedRoleSelectorVisible(AIndex: Integer; 
                                               const AValue: boolean);
    procedure SetRequiredScriptFileLinks(AIndex: Integer; 
                                    const AValue: TStringArray);
    procedure SetRoleDefinitionNameLines(AIndex: Integer; 
                                    const AValue: TStringArray);
    procedure SetSelectedGroup(AIndex: Integer; const AValue: string);
    procedure SetSharedWithEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetSharingCssLink(AIndex: Integer; const AValue: string);
    procedure SetTabbedDialogEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetTabToShow(AIndex: Integer; const AValue: TInt32);
    procedure SettxtEmailSubjectText(AIndex: Integer; const AValue: string);
    procedure SetUserDisplayUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function PickerProperties(AService: TODataService) : TSPPickerSettings;
  published
    Property AddToGroupModeName : string index 0 read FAddToGroupModeName write SetAddToGroupModeName;
    Property GroupNameLines : TStringArray index 8 read FGroupNameLines write SetGroupNameLines;
    Property GroupRoleDefinitionNamesLines : TStringArray index 16 read FGroupRoleDefinitionNamesLines write SetGroupRoleDefinitionNamesLines;
    Property IsMobileView : boolean index 24 read FIsMobileView write SetIsMobileView;
    Property PanelGivePermissionsVisible : boolean index 32 read FPanelGivePermissionsVisible write SetPanelGivePermissionsVisible;
    Property PanelShowHideMoreOptionsVisible : boolean index 40 read FPanelShowHideMoreOptionsVisible write SetPanelShowHideMoreOptionsVisible;
    Property PanelSimplifiedRoleSelectorVisible : boolean index 48 read FPanelSimplifiedRoleSelectorVisible write SetPanelSimplifiedRoleSelectorVisible;
    Property RequiredScriptFileLinks : TStringArray index 56 read FRequiredScriptFileLinks write SetRequiredScriptFileLinks;
    Property RoleDefinitionNameLines : TStringArray index 64 read FRoleDefinitionNameLines write SetRoleDefinitionNameLines;
    Property SelectedGroup : string index 72 read FSelectedGroup write SetSelectedGroup;
    Property SharedWithEnabled : boolean index 80 read FSharedWithEnabled write SetSharedWithEnabled;
    Property SharingCssLink : string index 88 read FSharingCssLink write SetSharingCssLink;
    Property TabbedDialogEnabled : boolean index 96 read FTabbedDialogEnabled write SetTabbedDialogEnabled;
    Property TabToShow : TInt32 index 104 read FTabToShow write SetTabToShow;
    Property txtEmailSubjectText : string index 112 read FtxtEmailSubjectText write SettxtEmailSubjectText;
    Property UserDisplayUrl : string index 120 read FUserDisplayUrl write SetUserDisplayUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PickerSettings
    --------------------------------------------------------------------}
  
  TSPPickerSettings = Class(TODataEntity)
  private
    FAllowEmailAddresses : boolean;
    FPrincipalAccountType : string;
    FPrincipalSource : TInt32;
    FVisibleSuggestions : TInt32;
    procedure SetAllowEmailAddresses(AIndex: Integer; const AValue: boolean);
    procedure SetPrincipalAccountType(AIndex: Integer; const AValue: string);
    procedure SetPrincipalSource(AIndex: Integer; const AValue: TInt32);
    procedure SetVisibleSuggestions(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllowEmailAddresses : boolean index 0 read FAllowEmailAddresses write SetAllowEmailAddresses;
    Property PrincipalAccountType : string index 8 read FPrincipalAccountType write SetPrincipalAccountType;
    Property PrincipalSource : TInt32 index 16 read FPrincipalSource write SetPrincipalSource;
    Property VisibleSuggestions : TInt32 index 24 read FVisibleSuggestions write SetVisibleSuggestions;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RelatedItemManager
    --------------------------------------------------------------------}
  
  TSPRelatedItemManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ServerSettings
    --------------------------------------------------------------------}
  
  TSPServerSettings = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SharingResult
    --------------------------------------------------------------------}
  
  TSPSharingResult = Class(TODataEntity)
  private
    FErrorMessage : string;
    FIconUrl : string;
    FInvitedUsers : TSPSPInvitationCreationResultArray;
    FName : string;
    FPermissionsPageRelativeUrl : string;
    FStatusCode : TInt32;
    FUniquelyPermissionedUsers : TSP_SharingUserSharingResultArray;
    FUrl : string;
    FUsersAddedToGroup : TSP_SharingUserSharingResultArray;
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
    procedure SetIconUrl(AIndex: Integer; const AValue: string);
    procedure SetInvitedUsers(AIndex: Integer; 
                         const AValue: TSPSPInvitationCreationResultArray);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPermissionsPageRelativeUrl(AIndex: Integer; 
                                       const AValue: string);
    procedure SetStatusCode(AIndex: Integer; const AValue: TInt32);
    procedure SetUniquelyPermissionedUsers(AIndex: Integer; 
                                      const AValue: TSP_SharingUserSharingResultArray);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetUsersAddedToGroup(AIndex: Integer; 
                              const AValue: TSP_SharingUserSharingResultArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function GroupsSharedWith(AService: TODataService) : TSPGroup;
    function GroupUsersAddedTo(AService: TODataService) : TSPGroup;
    function UsersWithAccessRequests(AService: TODataService) : TSPUser;
  published
    Property ErrorMessage : string index 0 read FErrorMessage write SetErrorMessage;
    Property IconUrl : string index 8 read FIconUrl write SetIconUrl;
    Property InvitedUsers : TSPSPInvitationCreationResultArray index 16 read FInvitedUsers write SetInvitedUsers;
    Property Name : string index 24 read FName write SetName;
    Property PermissionsPageRelativeUrl : string index 32 read FPermissionsPageRelativeUrl write SetPermissionsPageRelativeUrl;
    Property StatusCode : TInt32 index 40 read FStatusCode write SetStatusCode;
    Property UniquelyPermissionedUsers : TSP_SharingUserSharingResultArray index 48 read FUniquelyPermissionedUsers write SetUniquelyPermissionedUsers;
    Property Url : string index 56 read FUrl write SetUrl;
    Property UsersAddedToGroup : TSP_SharingUserSharingResultArray index 64 read FUsersAddedToGroup write SetUsersAddedToGroup;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AccessRequests
    --------------------------------------------------------------------}
  
  TSPAccessRequests = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppContextSite
    --------------------------------------------------------------------}
  
  TSPAppContextSite = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Site(AService: TODataService) : TSPSite;
    function Web(AService: TODataService) : TSPWeb;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Change
    --------------------------------------------------------------------}
  
  TSPChange = Class(TODataEntity)
  private
    FChangeToken : TSPChangeToken;
    FChangeType : TInt32;
    FSiteId : TGUIDString;
    FTime : TDateTime;
    procedure SetChangeToken(AIndex: Integer; const AValue: TSPChangeToken);
    procedure SetChangeType(AIndex: Integer; const AValue: TInt32);
    procedure SetSiteId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTime(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ChangeToken : TSPChangeToken index 0 read FChangeToken write SetChangeToken;
    Property ChangeType : TInt32 index 8 read FChangeType write SetChangeType;
    Property SiteId : TGUIDString index 16 read FSiteId write SetSiteId;
    Property Time : TDateTime index 24 read FTime write SetTime;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeAlert
    --------------------------------------------------------------------}
  
  TSPChangeAlert = Class(TSPChange)
  private
    FAlertId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetAlertId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AlertId : TGUIDString index 32 read FAlertId write SetAlertId;
    Property WebId : TGUIDString index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeContentType
    --------------------------------------------------------------------}
  
  TSPChangeContentType = Class(TSPChange)
  private
    FContentTypeId : TSPContentTypeId;
    FWebId : TGUIDString;
    procedure SetContentTypeId(AIndex: Integer; 
                          const AValue: TSPContentTypeId);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ContentTypeId : TSPContentTypeId index 32 read FContentTypeId write SetContentTypeId;
    Property WebId : TGUIDString index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeField
    --------------------------------------------------------------------}
  
  TSPChangeField = Class(TSPChange)
  private
    FFieldId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetFieldId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FieldId : TGUIDString index 32 read FFieldId write SetFieldId;
    Property WebId : TGUIDString index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeFile
    --------------------------------------------------------------------}
  
  TSPChangeFile = Class(TSPChange)
  private
    FUniqueId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property UniqueId : TGUIDString index 32 read FUniqueId write SetUniqueId;
    Property WebId : TGUIDString index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeFolder
    --------------------------------------------------------------------}
  
  TSPChangeFolder = Class(TSPChange)
  private
    FUniqueId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property UniqueId : TGUIDString index 32 read FUniqueId write SetUniqueId;
    Property WebId : TGUIDString index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeGroup
    --------------------------------------------------------------------}
  
  TSPChangeGroup = Class(TSPChange)
  private
    FGroupId : TInt32;
    procedure SetGroupId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property GroupId : TInt32 index 32 read FGroupId write SetGroupId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeItem
    --------------------------------------------------------------------}
  
  TSPChangeItem = Class(TSPChange)
  private
    FItemId : TInt32;
    FListId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetItemId(AIndex: Integer; const AValue: TInt32);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ItemId : TInt32 index 32 read FItemId write SetItemId;
    Property ListId : TGUIDString index 40 read FListId write SetListId;
    Property WebId : TGUIDString index 48 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeList
    --------------------------------------------------------------------}
  
  TSPChangeList = Class(TSPChange)
  private
    FListId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ListId : TGUIDString index 32 read FListId write SetListId;
    Property WebId : TGUIDString index 40 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeSite
    --------------------------------------------------------------------}
  
  TSPChangeSite = Class(TSPChange)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeUser
    --------------------------------------------------------------------}
  
  TSPChangeUser = Class(TSPChange)
  private
    FActivate : boolean;
    FUserId : TInt32;
    procedure SetActivate(AIndex: Integer; const AValue: boolean);
    procedure SetUserId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Activate : boolean index 32 read FActivate write SetActivate;
    Property UserId : TInt32 index 40 read FUserId write SetUserId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeView
    --------------------------------------------------------------------}
  
  TSPChangeView = Class(TSPChange)
  private
    FViewId : TGUIDString;
    FListId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetViewId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ViewId : TGUIDString index 32 read FViewId write SetViewId;
    Property ListId : TGUIDString index 40 read FListId write SetListId;
    Property WebId : TGUIDString index 48 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ChangeWeb
    --------------------------------------------------------------------}
  
  TSPChangeWeb = Class(TSPChange)
  private
    FWebId : TGUIDString;
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property WebId : TGUIDString index 32 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CompatibilityRange
    --------------------------------------------------------------------}
  
  TSPCompatibilityRange = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RequestContext
    --------------------------------------------------------------------}
  
  TSPRequestContext = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService) : TSPRequestContext;
    function List(AService: TODataService) : TSPList;
    function Site(AService: TODataService) : TSPSite;
    function Web(AService: TODataService) : TSPWeb;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldCalculated
    --------------------------------------------------------------------}
  
  TSPFieldCalculated = Class(TSPField)
  private
    FDateFormat : TInt32;
    FFormula : string;
    FOutputType : TInt32;
    procedure SetDateFormat(AIndex: Integer; const AValue: TInt32);
    procedure SetFormula(AIndex: Integer; const AValue: string);
    procedure SetOutputType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DateFormat : TInt32 index 240 read FDateFormat write SetDateFormat;
    Property Formula : string index 248 read FFormula write SetFormula;
    Property OutputType : TInt32 index 256 read FOutputType write SetOutputType;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldMultiChoice
    --------------------------------------------------------------------}
  
  TSPFieldMultiChoice = Class(TSPField)
  private
    FFillInChoice : boolean;
    FMappings : string;
    FChoices : TStringArray;
    procedure SetFillInChoice(AIndex: Integer; const AValue: boolean);
    procedure SetMappings(AIndex: Integer; const AValue: string);
    procedure SetChoices(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FillInChoice : boolean index 240 read FFillInChoice write SetFillInChoice;
    Property Mappings : string index 248 read FMappings write SetMappings;
    Property Choices : TStringArray index 256 read FChoices write SetChoices;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldChoice
    --------------------------------------------------------------------}
  
  TSPFieldChoice = Class(TSPFieldMultiChoice)
  private
    FEditFormat : TInt32;
    procedure SetEditFormat(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property EditFormat : TInt32 index 264 read FEditFormat write SetEditFormat;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldComputed
    --------------------------------------------------------------------}
  
  TSPFieldComputed = Class(TSPField)
  private
    FEnableLookup : boolean;
    procedure SetEnableLookup(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property EnableLookup : boolean index 240 read FEnableLookup write SetEnableLookup;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldNumber
    --------------------------------------------------------------------}
  
  TSPFieldNumber = Class(TSPField)
  private
    FMaximumValue : Double;
    FMinimumValue : Double;
    procedure SetMaximumValue(AIndex: Integer; const AValue: Double);
    procedure SetMinimumValue(AIndex: Integer; const AValue: Double);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property MaximumValue : Double index 240 read FMaximumValue write SetMaximumValue;
    Property MinimumValue : Double index 248 read FMinimumValue write SetMinimumValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldCurrency
    --------------------------------------------------------------------}
  
  TSPFieldCurrency = Class(TSPFieldNumber)
  private
    FCurrencyLocaleId : TInt32;
    procedure SetCurrencyLocaleId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CurrencyLocaleId : TInt32 index 256 read FCurrencyLocaleId write SetCurrencyLocaleId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldDateTime
    --------------------------------------------------------------------}
  
  TSPFieldDateTime = Class(TSPField)
  private
    FDateTimeCalendarType : TInt32;
    FDisplayFormat : TInt32;
    FFriendlyDisplayFormat : TInt32;
    procedure SetDateTimeCalendarType(AIndex: Integer; const AValue: TInt32);
    procedure SetDisplayFormat(AIndex: Integer; const AValue: TInt32);
    procedure SetFriendlyDisplayFormat(AIndex: Integer; 
                                  const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DateTimeCalendarType : TInt32 index 240 read FDateTimeCalendarType write SetDateTimeCalendarType;
    Property DisplayFormat : TInt32 index 248 read FDisplayFormat write SetDisplayFormat;
    Property FriendlyDisplayFormat : TInt32 index 256 read FFriendlyDisplayFormat write SetFriendlyDisplayFormat;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldGeolocation
    --------------------------------------------------------------------}
  
  TSPFieldGeolocation = Class(TSPField)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldGuid
    --------------------------------------------------------------------}
  
  TSPFieldGuid = Class(TSPField)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldLookup
    --------------------------------------------------------------------}
  
  TSPFieldLookup = Class(TSPField)
  private
    FAllowMultipleValues : boolean;
    FIsRelationship : boolean;
    FLookupField : string;
    FLookupList : string;
    FLookupWebId : TGUIDString;
    FPrimaryFieldId : string;
    FRelationshipDeleteBehavior : TInt32;
    procedure SetAllowMultipleValues(AIndex: Integer; const AValue: boolean);
    procedure SetIsRelationship(AIndex: Integer; const AValue: boolean);
    procedure SetLookupField(AIndex: Integer; const AValue: string);
    procedure SetLookupList(AIndex: Integer; const AValue: string);
    procedure SetLookupWebId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPrimaryFieldId(AIndex: Integer; const AValue: string);
    procedure SetRelationshipDeleteBehavior(AIndex: Integer; 
                                       const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AllowMultipleValues : boolean index 240 read FAllowMultipleValues write SetAllowMultipleValues;
    Property IsRelationship : boolean index 248 read FIsRelationship write SetIsRelationship;
    Property LookupField : string index 256 read FLookupField write SetLookupField;
    Property LookupList : string index 264 read FLookupList write SetLookupList;
    Property LookupWebId : TGUIDString index 272 read FLookupWebId write SetLookupWebId;
    Property PrimaryFieldId : string index 280 read FPrimaryFieldId write SetPrimaryFieldId;
    Property RelationshipDeleteBehavior : TInt32 index 288 read FRelationshipDeleteBehavior write SetRelationshipDeleteBehavior;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldMultiLineText
    --------------------------------------------------------------------}
  
  TSPFieldMultiLineText = Class(TSPField)
  private
    FAllowHyperlink : boolean;
    FAppendOnly : boolean;
    FNumberOfLines : TInt32;
    FRestrictedMode : boolean;
    FRichText : boolean;
    FWikiLinking : boolean;
    procedure SetAllowHyperlink(AIndex: Integer; const AValue: boolean);
    procedure SetAppendOnly(AIndex: Integer; const AValue: boolean);
    procedure SetNumberOfLines(AIndex: Integer; const AValue: TInt32);
    procedure SetRestrictedMode(AIndex: Integer; const AValue: boolean);
    procedure SetRichText(AIndex: Integer; const AValue: boolean);
    procedure SetWikiLinking(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AllowHyperlink : boolean index 240 read FAllowHyperlink write SetAllowHyperlink;
    Property AppendOnly : boolean index 248 read FAppendOnly write SetAppendOnly;
    Property NumberOfLines : TInt32 index 256 read FNumberOfLines write SetNumberOfLines;
    Property RestrictedMode : boolean index 264 read FRestrictedMode write SetRestrictedMode;
    Property RichText : boolean index 272 read FRichText write SetRichText;
    Property WikiLinking : boolean index 280 read FWikiLinking write SetWikiLinking;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldRatingScale
    --------------------------------------------------------------------}
  
  TSPFieldRatingScale = Class(TSPFieldMultiChoice)
  private
    FGridEndNumber : TInt32;
    FGridNAOptionText : string;
    FGridStartNumber : TInt32;
    FGridTextRangeAverage : string;
    FGridTextRangeHigh : string;
    FGridTextRangeLow : string;
    FRangeCount : TInt32;
    procedure SetGridEndNumber(AIndex: Integer; const AValue: TInt32);
    procedure SetGridNAOptionText(AIndex: Integer; const AValue: string);
    procedure SetGridStartNumber(AIndex: Integer; const AValue: TInt32);
    procedure SetGridTextRangeAverage(AIndex: Integer; const AValue: string);
    procedure SetGridTextRangeHigh(AIndex: Integer; const AValue: string);
    procedure SetGridTextRangeLow(AIndex: Integer; const AValue: string);
    procedure SetRangeCount(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property GridEndNumber : TInt32 index 264 read FGridEndNumber write SetGridEndNumber;
    Property GridNAOptionText : string index 272 read FGridNAOptionText write SetGridNAOptionText;
    Property GridStartNumber : TInt32 index 280 read FGridStartNumber write SetGridStartNumber;
    Property GridTextRangeAverage : string index 288 read FGridTextRangeAverage write SetGridTextRangeAverage;
    Property GridTextRangeHigh : string index 296 read FGridTextRangeHigh write SetGridTextRangeHigh;
    Property GridTextRangeLow : string index 304 read FGridTextRangeLow write SetGridTextRangeLow;
    Property RangeCount : TInt32 index 312 read FRangeCount write SetRangeCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldText
    --------------------------------------------------------------------}
  
  TSPFieldText = Class(TSPField)
  private
    FMaxLength : TInt32;
    procedure SetMaxLength(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property MaxLength : TInt32 index 240 read FMaxLength write SetMaxLength;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldUrl
    --------------------------------------------------------------------}
  
  TSPFieldUrl = Class(TSPField)
  private
    FDisplayFormat : TInt32;
    procedure SetDisplayFormat(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DisplayFormat : TInt32 index 240 read FDisplayFormat write SetDisplayFormat;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldUser
    --------------------------------------------------------------------}
  
  TSPFieldUser = Class(TSPFieldLookup)
  private
    FAllowDisplay : boolean;
    FPresence : boolean;
    FSelectionGroup : TInt32;
    FSelectionMode : TInt32;
    procedure SetAllowDisplay(AIndex: Integer; const AValue: boolean);
    procedure SetPresence(AIndex: Integer; const AValue: boolean);
    procedure SetSelectionGroup(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectionMode(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AllowDisplay : boolean index 296 read FAllowDisplay write SetAllowDisplay;
    Property Presence : boolean index 304 read FPresence write SetPresence;
    Property SelectionGroup : TInt32 index 312 read FSelectionGroup write SetSelectionGroup;
    Property SelectionMode : TInt32 index 320 read FSelectionMode write SetSelectionMode;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MountedFolderInfo
    --------------------------------------------------------------------}
  
  TSPMountedFolderInfo = Class(TODataEntity)
  private
    FFolderUrl : string;
    FHasEditPermission : boolean;
    FItemId : TInt32;
    FListTemplateType : TInt32;
    FListViewUrl : string;
    FWebUrl : string;
    procedure SetFolderUrl(AIndex: Integer; const AValue: string);
    procedure SetHasEditPermission(AIndex: Integer; const AValue: boolean);
    procedure SetItemId(AIndex: Integer; const AValue: TInt32);
    procedure SetListTemplateType(AIndex: Integer; const AValue: TInt32);
    procedure SetListViewUrl(AIndex: Integer; const AValue: string);
    procedure SetWebUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FolderUrl : string index 0 read FFolderUrl write SetFolderUrl;
    Property HasEditPermission : boolean index 8 read FHasEditPermission write SetHasEditPermission;
    Property ItemId : TInt32 index 16 read FItemId write SetItemId;
    Property ListTemplateType : TInt32 index 24 read FListTemplateType write SetListTemplateType;
    Property ListViewUrl : string index 32 read FListViewUrl write SetListViewUrl;
    Property WebUrl : string index 40 read FWebUrl write SetWebUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MountPoint
    --------------------------------------------------------------------}
  
  TSPMountPoint = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MountPointInfo
    --------------------------------------------------------------------}
  
  TSPMountPointInfo = Class(TODataEntity)
  private
    FName : string;
    FRedirectUrl : string;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRedirectUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
    Property RedirectUrl : string index 8 read FRedirectUrl write SetRedirectUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MoveCopyUtil
    --------------------------------------------------------------------}
  
  TSPMoveCopyUtil = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RelatedField
    --------------------------------------------------------------------}
  
  TSPRelatedField = Class(TODataEntity)
  private
    FFieldId : TGUIDString;
    FListId : TGUIDString;
    FRelationshipDeleteBehavior : TInt32;
    FWebId : TGUIDString;
    procedure SetFieldId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetRelationshipDeleteBehavior(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function LookupList(AService: TODataService) : TSPList;
  published
    Property FieldId : TGUIDString index 0 read FFieldId write SetFieldId;
    Property ListId : TGUIDString index 8 read FListId write SetListId;
    Property RelationshipDeleteBehavior : TInt32 index 16 read FRelationshipDeleteBehavior write SetRelationshipDeleteBehavior;
    Property WebId : TGUIDString index 24 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RemoteWeb
    --------------------------------------------------------------------}
  
  TSPRemoteWeb = Class(TODataEntity)
  private
    FCanSendEmail : boolean;
    FShareByEmailEnabled : boolean;
    FShareByLinkEnabled : boolean;
    procedure SetCanSendEmail(AIndex: Integer; const AValue: boolean);
    procedure SetShareByEmailEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetShareByLinkEnabled(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CanSendEmail : boolean index 0 read FCanSendEmail write SetCanSendEmail;
    Property ShareByEmailEnabled : boolean index 8 read FShareByEmailEnabled write SetShareByEmailEnabled;
    Property ShareByLinkEnabled : boolean index 16 read FShareByLinkEnabled write SetShareByLinkEnabled;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RequestUserContext
    --------------------------------------------------------------------}
  
  TSPRequestUserContext = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService) : TSPRequestUserContext;
    function User(AService: TODataService) : TSPUser;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SiteUrl
    --------------------------------------------------------------------}
  
  TSPSiteUrl = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantAppInstance
    --------------------------------------------------------------------}
  
  TSPTenantAppInstance = Class(TODataEntity)
  private
    FId : TGUIDString;
    FSiteId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetSiteId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property SiteId : TGUIDString index 8 read FSiteId write SetSiteId;
    Property WebId : TGUIDString index 16 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebProxy
    --------------------------------------------------------------------}
  
  TSPWebProxy = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebTemplate
    --------------------------------------------------------------------}
  
  TSPWebTemplate = Class(TODataEntity)
  private
    FDescription : string;
    FDisplayCategory : string;
    FId : TInt32;
    FImageUrl : string;
    FIsHidden : boolean;
    FIsRootWebOnly : boolean;
    FIsSubWebOnly : boolean;
    FLcid : TInt32;
    FName : string;
    FTitle : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDisplayCategory(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetIsHidden(AIndex: Integer; const AValue: boolean);
    procedure SetIsRootWebOnly(AIndex: Integer; const AValue: boolean);
    procedure SetIsSubWebOnly(AIndex: Integer; const AValue: boolean);
    procedure SetLcid(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property DisplayCategory : string index 8 read FDisplayCategory write SetDisplayCategory;
    Property Id : TInt32 index 16 read FId write SetId;
    Property ImageUrl : string index 24 read FImageUrl write SetImageUrl;
    Property IsHidden : boolean index 32 read FIsHidden write SetIsHidden;
    Property IsRootWebOnly : boolean index 40 read FIsRootWebOnly write SetIsRootWebOnly;
    Property IsSubWebOnly : boolean index 48 read FIsSubWebOnly write SetIsSubWebOnly;
    Property Lcid : TInt32 index 56 read FLcid write SetLcid;
    Property Name : string index 64 read FName write SetName;
    Property Title : string index 72 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantAppUtility
    --------------------------------------------------------------------}
  
  TSPTenantAppUtility = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantSettings
    --------------------------------------------------------------------}
  
  TSPTenantSettings = Class(TODataEntity)
  private
    FCorporateCatalogUrl : string;
    procedure SetCorporateCatalogUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService) : TSPTenantSettings;
  published
    Property CorporateCatalogUrl : string index 0 read FCorporateCatalogUrl write SetCorporateCatalogUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalIdentityProvider
    --------------------------------------------------------------------}
  
  TSPAppPrincipalIdentityProvider = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function External(AService: TODataService)
                  : TSPAppPrincipalIdentityProvider;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalManager
    --------------------------------------------------------------------}
  
  TSPAppPrincipalManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalCredential
    --------------------------------------------------------------------}
  
  TSPAppPrincipalCredential = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalName
    --------------------------------------------------------------------}
  
  TSPAppPrincipalName = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: ExternalEntityItemValue
    --------------------------------------------------------------------}
  
  TMS_AppDataExternalEntityItemValue = Class(TODataEntity)
  private
    FId : string;
    procedure SetId(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : string index 0 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: DocumentEntityItemValue
    --------------------------------------------------------------------}
  
  TMS_AppDataDocumentEntityItemValue = Class(TODataEntity)
  private
    FCreated : TDateTime;
    FModified : TDateTime;
    FPreviewFrameUrl : string;
    FTitle : string;
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetPreviewFrameUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Created : TDateTime index 0 read FCreated write SetCreated;
    Property Modified : TDateTime index 8 read FModified write SetModified;
    Property PreviewFrameUrl : string index 16 read FPreviewFrameUrl write SetPreviewFrameUrl;
    Property Title : string index 24 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: EntityItemValue
    --------------------------------------------------------------------}
  
  TMS_AppDataEntityItemValue = Class(TODataEntity)
  private
    FFieldValues : TSPKeyValueArray;
    FId : TInt32;
    procedure SetFieldValues(AIndex: Integer; 
                        const AValue: TSPKeyValueArray);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property FieldValues : TSPKeyValueArray index 0 read FFieldValues write SetFieldValues;
    Property Id : TInt32 index 8 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: EntityTypeCreationInformation
    --------------------------------------------------------------------}
  
  TMS_AppDataEntityTypeCreationInformation = Class(TODataEntity)
  private
    FName : string;
    FTitle : string;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
    Property Title : string index 8 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: ExternalEntityTypeCreationInformation
    --------------------------------------------------------------------}
  
  TMS_AppDataExternalEntityTypeCreationInformation = Class(TODataEntity)
  private
    FKind : TInt32;
    FName : string;
    FProperties : string;
    FServiceUrl : string;
    FTitle : string;
    procedure SetKind(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: string);
    procedure SetServiceUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Kind : TInt32 index 0 read FKind write SetKind;
    Property Name : string index 8 read FName write SetName;
    Property Properties : string index 16 read FProperties write SetProperties;
    Property ServiceUrl : string index 24 read FServiceUrl write SetServiceUrl;
    Property Title : string index 32 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: FieldCreationInformation
    --------------------------------------------------------------------}
  
  TMS_AppDataFieldCreationInformation = Class(TODataEntity)
  private
    FExternalServiceUrl : string;
    FFieldType : TInt32;
    FLookupTargetEntityTypeId : TGUIDString;
    FName : string;
    FTitle : string;
    procedure SetExternalServiceUrl(AIndex: Integer; const AValue: string);
    procedure SetFieldType(AIndex: Integer; const AValue: TInt32);
    procedure SetLookupTargetEntityTypeId(AIndex: Integer; 
                                     const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ExternalServiceUrl : string index 0 read FExternalServiceUrl write SetExternalServiceUrl;
    Property FieldType : TInt32 index 8 read FFieldType write SetFieldType;
    Property LookupTargetEntityTypeId : TGUIDString index 16 read FLookupTargetEntityTypeId write SetLookupTargetEntityTypeId;
    Property Name : string index 24 read FName write SetName;
    Property Title : string index 32 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: ItemQuery
    --------------------------------------------------------------------}
  
  TMS_AppDataItemQuery = Class(TODataEntity)
  private
    FExpand : string;
    FSelect : string;
    procedure SetExpand(AIndex: Integer; const AValue: string);
    procedure SetSelect(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Expand : string index 0 read FExpand write SetExpand;
    Property Select : string index 8 read FSelect write SetSelect;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: ItemCollectionQuery
    --------------------------------------------------------------------}
  
  TMS_AppDataItemCollectionQuery = Class(TODataEntity)
  private
    FFilter : string;
    FIncludeAllItemsCount : boolean;
    FOrderBy : string;
    FSkip : TInt32;
    FTop : TInt32;
    procedure SetFilter(AIndex: Integer; const AValue: string);
    procedure SetIncludeAllItemsCount(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetOrderBy(AIndex: Integer; const AValue: string);
    procedure SetSkip(AIndex: Integer; const AValue: TInt32);
    procedure SetTop(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Filter : string index 0 read FFilter write SetFilter;
    Property IncludeAllItemsCount : boolean index 8 read FIncludeAllItemsCount write SetIncludeAllItemsCount;
    Property OrderBy : string index 16 read FOrderBy write SetOrderBy;
    Property Skip : TInt32 index 24 read FSkip write SetSkip;
    Property Top : TInt32 index 32 read FTop write SetTop;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: UrlFieldValue
    --------------------------------------------------------------------}
  
  TMS_AppDataUrlFieldValue = Class(TODataEntity)
  private
    FText : string;
    FUrl : string;
    procedure SetText(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Text : string index 0 read FText write SetText;
    Property Url : string index 8 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: UserEntityItemValue
    --------------------------------------------------------------------}
  
  TMS_AppDataUserEntityItemValue = Class(TODataEntity)
  private
    FDepartment : string;
    FDisplayName : string;
    FEmail : string;
    FJobTitle : string;
    FLoginName : string;
    FMobilePhone : string;
    FPhone : string;
    FPrincipleType : TInt32;
    FSipAddress : string;
    procedure SetDepartment(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetJobTitle(AIndex: Integer; const AValue: string);
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetMobilePhone(AIndex: Integer; const AValue: string);
    procedure SetPhone(AIndex: Integer; const AValue: string);
    procedure SetPrincipleType(AIndex: Integer; const AValue: TInt32);
    procedure SetSipAddress(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Department : string index 0 read FDepartment write SetDepartment;
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
    Property Email : string index 16 read FEmail write SetEmail;
    Property JobTitle : string index 24 read FJobTitle write SetJobTitle;
    Property LoginName : string index 32 read FLoginName write SetLoginName;
    Property MobilePhone : string index 40 read FMobilePhone write SetMobilePhone;
    Property Phone : string index 48 read FPhone write SetPhone;
    Property PrincipleType : TInt32 index 56 read FPrincipleType write SetPrincipleType;
    Property SipAddress : string index 64 read FSipAddress write SetSipAddress;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: App
    --------------------------------------------------------------------}
  
  TMS_AppDataApp = Class(TODataEntity)
  private
    FId : TGUIDString;
    FName : string;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function EntityTypes(AService: TODataService) : TMS_AppDataEntityType;
    function ExternalEntityTypes(AService: TODataService)
                             : TMS_AppDataExternalEntityType;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property Name : string index 8 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: EntityTypeBase
    --------------------------------------------------------------------}
  
  TMS_AppDataEntityTypeBase = Class(TODataEntity)
  private
    FId : TGUIDString;
    FName : string;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Fields(AService: TODataService) : TMS_AppDataField;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property Name : string index 8 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: Field
    --------------------------------------------------------------------}
  
  TMS_AppDataField = Class(TODataEntity)
  private
    FExternalServiceUrl : string;
    FFieldType : TInt32;
    FId : TGUIDString;
    FLookupTargetAppId : TGUIDString;
    FLookupTargetEntityTypeId : TGUIDString;
    FName : string;
    FProperties : TSPKeyValueArray;
    FSystemField : boolean;
    FTitle : string;
    procedure SetExternalServiceUrl(AIndex: Integer; const AValue: string);
    procedure SetFieldType(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLookupTargetAppId(AIndex: Integer; 
                              const AValue: TGUIDString);
    procedure SetLookupTargetEntityTypeId(AIndex: Integer; 
                                     const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetSystemField(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ExternalServiceUrl : string index 0 read FExternalServiceUrl write SetExternalServiceUrl;
    Property FieldType : TInt32 index 8 read FFieldType write SetFieldType;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property LookupTargetAppId : TGUIDString index 24 read FLookupTargetAppId write SetLookupTargetAppId;
    Property LookupTargetEntityTypeId : TGUIDString index 32 read FLookupTargetEntityTypeId write SetLookupTargetEntityTypeId;
    Property Name : string index 40 read FName write SetName;
    Property Properties : TSPKeyValueArray index 48 read FProperties write SetProperties;
    Property SystemField : boolean index 56 read FSystemField write SetSystemField;
    Property Title : string index 64 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: EntityType
    --------------------------------------------------------------------}
  
  TMS_AppDataEntityType = Class(TMS_AppDataEntityTypeBase)
  private
    FTitle : string;
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Items(AService: TODataService) : TMS_AppDataEntityItem;
  published
    Property Title : string index 16 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: EntityItem
    --------------------------------------------------------------------}
  
  TMS_AppDataEntityItem = Class(TODataEntity)
  private
    FETag : string;
    FFieldValues : TSPKeyValueArray;
    FId : TInt32;
    procedure SetETag(AIndex: Integer; const AValue: string);
    procedure SetFieldValues(AIndex: Integer; 
                        const AValue: TSPKeyValueArray);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ETag : string index 0 read FETag write SetETag;
    Property FieldValues : TSPKeyValueArray index 8 read FFieldValues write SetFieldValues;
    Property Id : TInt32 index 16 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: ExternalEntityType
    --------------------------------------------------------------------}
  
  TMS_AppDataExternalEntityType = Class(TMS_AppDataEntityTypeBase)
  private
    FKind : TInt32;
    FServiceUrl : string;
    procedure SetKind(AIndex: Integer; const AValue: TInt32);
    procedure SetServiceUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Kind : TInt32 index 16 read FKind write SetKind;
    Property ServiceUrl : string index 24 read FServiceUrl write SetServiceUrl;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: StoreContextBase
    --------------------------------------------------------------------}
  
  TMS_AppDataStoreContextBase = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: ODataStoreContext
    --------------------------------------------------------------------}
  
  TMS_AppDataODataStoreContext = Class(TMS_AppDataStoreContextBase)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: RequestContext
    --------------------------------------------------------------------}
  
  TMS_AppDataRequestContext = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function App(AService: TODataService) : TMS_AppDataApp;
    function Current(AService: TODataService) : TMS_AppDataRequestContext;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    MS.AppData: SqlStoreContext
    --------------------------------------------------------------------}
  
  TMS_AppDataSqlStoreContext = Class(TMS_AppDataStoreContextBase)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: LinkRequestSchema
    --------------------------------------------------------------------}
  
  TSP_DirectoryLinkRequestSchema = Class(TODataEntity)
  private
    FCount : TInt32;
    FIncludeTotalCount : boolean;
    FName : string;
    FOffset : TInt32;
    procedure SetCount(AIndex: Integer; const AValue: TInt32);
    procedure SetIncludeTotalCount(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOffset(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Count : TInt32 index 0 read FCount write SetCount;
    Property IncludeTotalCount : boolean index 8 read FIncludeTotalCount write SetIncludeTotalCount;
    Property Name : string index 16 read FName write SetName;
    Property Offset : TInt32 index 24 read FOffset write SetOffset;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: DirectorySession
    --------------------------------------------------------------------}
  
  TSP_DirectoryDirectorySession = Class(TODataEntity)
  private
    FSessionOptions : TInt32;
    procedure SetSessionOptions(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property SessionOptions : TInt32 index 0 read FSessionOptions write SetSessionOptions;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: GroupAndUserStatus
    --------------------------------------------------------------------}
  
  TSP_DirectoryGroupAndUserStatus = Class(TODataEntity)
  private
    FStatus : TInt32;
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Group(AService: TODataService) : TSP_DirectoryGroup;
  published
    Property Status : TInt32 index 0 read FStatus write SetStatus;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: Group
    --------------------------------------------------------------------}
  
  TSP_DirectoryGroup = Class(TODataEntity)
  private
    FAlias : string;
    FCalendarUrl : string;
    FDescription : string;
    FDirectoryObjectType : TInt32;
    FDisplayName : string;
    FDocumentsUrl : string;
    FEditGroupUrl : string;
    FId : TGUIDString;
    FInboxUrl : string;
    FIsPublic : boolean;
    FPeopleUrl : string;
    FPictureUrl : string;
    FPrincipalName : string;
    FSiteUrl : string;
    procedure SetAlias(AIndex: Integer; const AValue: string);
    procedure SetCalendarUrl(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDirectoryObjectType(AIndex: Integer; const AValue: TInt32);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetDocumentsUrl(AIndex: Integer; const AValue: string);
    procedure SetEditGroupUrl(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInboxUrl(AIndex: Integer; const AValue: string);
    procedure SetIsPublic(AIndex: Integer; const AValue: boolean);
    procedure SetPeopleUrl(AIndex: Integer; const AValue: string);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetPrincipalName(AIndex: Integer; const AValue: string);
    procedure SetSiteUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Members(AService: TODataService) : TSP_DirectoryLinkCollection;
    function Owners(AService: TODataService) : TSP_DirectoryLinkCollection;
  published
    Property Alias : string index 0 read FAlias write SetAlias;
    Property CalendarUrl : string index 8 read FCalendarUrl write SetCalendarUrl;
    Property Description : string index 16 read FDescription write SetDescription;
    Property DirectoryObjectType : TInt32 index 24 read FDirectoryObjectType write SetDirectoryObjectType;
    Property DisplayName : string index 32 read FDisplayName write SetDisplayName;
    Property DocumentsUrl : string index 40 read FDocumentsUrl write SetDocumentsUrl;
    Property EditGroupUrl : string index 48 read FEditGroupUrl write SetEditGroupUrl;
    Property Id : TGUIDString index 56 read FId write SetId;
    Property InboxUrl : string index 64 read FInboxUrl write SetInboxUrl;
    Property IsPublic : boolean index 72 read FIsPublic write SetIsPublic;
    Property PeopleUrl : string index 80 read FPeopleUrl write SetPeopleUrl;
    Property PictureUrl : string index 88 read FPictureUrl write SetPictureUrl;
    Property PrincipalName : string index 96 read FPrincipalName write SetPrincipalName;
    Property SiteUrl : string index 104 read FSiteUrl write SetSiteUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: LinkCollection
    --------------------------------------------------------------------}
  
  TSP_DirectoryLinkCollection = Class(TODataEntity)
  private
    FCount : TInt32;
    FOffset : TInt32;
    FTotalCount : TInt32;
    procedure SetCount(AIndex: Integer; const AValue: TInt32);
    procedure SetOffset(AIndex: Integer; const AValue: TInt32);
    procedure SetTotalCount(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Count : TInt32 index 0 read FCount write SetCount;
    Property Offset : TInt32 index 8 read FOffset write SetOffset;
    Property TotalCount : TInt32 index 16 read FTotalCount write SetTotalCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: MembershipResult
    --------------------------------------------------------------------}
  
  TSP_DirectoryMembershipResult = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FGroupsList : TGuidStringArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetGroupsList(AIndex: Integer; const AValue: TGuidStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property GroupsList : TGuidStringArray index 8 read FGroupsList write SetGroupsList;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: MembersInfo
    --------------------------------------------------------------------}
  
  TSP_DirectoryMembersInfo = Class(TODataEntity)
  private
    FMemberNames : TStringArray;
    FTotalCount : TInt32;
    procedure SetMemberNames(AIndex: Integer; const AValue: TStringArray);
    procedure SetTotalCount(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property MemberNames : TStringArray index 0 read FMemberNames write SetMemberNames;
    Property TotalCount : TInt32 index 8 read FTotalCount write SetTotalCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: MyGroupsResult
    --------------------------------------------------------------------}
  
  TSP_DirectoryMyGroupsResult = Class(TODataEntity)
  private
    FHasNext : boolean;
    FHasPrev : boolean;
    procedure SetHasNext(AIndex: Integer; const AValue: boolean);
    procedure SetHasPrev(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property HasNext : boolean index 0 read FHasNext write SetHasNext;
    Property HasPrev : boolean index 8 read FHasPrev write SetHasPrev;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: PropertyDictionary
    --------------------------------------------------------------------}
  
  TSP_DirectoryPropertyDictionary = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: Property
    --------------------------------------------------------------------}
  
  TSP_Directory_Property = Class(TODataEntity)
  private
    FIsInitialized : boolean;
    FIsModified : boolean;
    FName : string;
    FValue : string;
    procedure SetIsInitialized(AIndex: Integer; const AValue: boolean);
    procedure SetIsModified(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property IsInitialized : boolean index 0 read FIsInitialized write SetIsInitialized;
    Property IsModified : boolean index 8 read FIsModified write SetIsModified;
    Property Name : string index 16 read FName write SetName;
    Property Value : string index 24 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: SPHelper
    --------------------------------------------------------------------}
  
  TSP_DirectorySPHelper = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: UserRequestSchema
    --------------------------------------------------------------------}
  
  TSP_DirectoryUserRequestSchema = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FLinks : TSP_DirectoryLinkRequestSchemaArray;
    FProperties : TStringArray;
    FResources : TStringArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetLinks(AIndex: Integer; 
                  const AValue: TSP_DirectoryLinkRequestSchemaArray);
    procedure SetProperties(AIndex: Integer; const AValue: TStringArray);
    procedure SetResources(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Links : TSP_DirectoryLinkRequestSchemaArray index 8 read FLinks write SetLinks;
    Property Properties : TStringArray index 16 read FProperties write SetProperties;
    Property Resources : TStringArray index 24 read FResources write SetResources;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory: User
    --------------------------------------------------------------------}
  
  TSP_DirectoryUser = Class(TODataEntity)
  private
    FAboutMe : string;
    FAlias : string;
    FBirthday : TDateTime;
    FDisplayName : string;
    FHireDate : TDateTime;
    FId : TGUIDString;
    FInterests : TStringArray;
    FMail : string;
    FMySite : string;
    FPastProjects : TStringArray;
    FPreferredName : string;
    FPrincipalName : string;
    FResponsibilities : TStringArray;
    FSchools : TStringArray;
    FSkills : TStringArray;
    FTags : TStringArray;
    procedure SetAboutMe(AIndex: Integer; const AValue: string);
    procedure SetAlias(AIndex: Integer; const AValue: string);
    procedure SetBirthday(AIndex: Integer; const AValue: TDateTime);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetHireDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInterests(AIndex: Integer; const AValue: TStringArray);
    procedure SetMail(AIndex: Integer; const AValue: string);
    procedure SetMySite(AIndex: Integer; const AValue: string);
    procedure SetPastProjects(AIndex: Integer; const AValue: TStringArray);
    procedure SetPreferredName(AIndex: Integer; const AValue: string);
    procedure SetPrincipalName(AIndex: Integer; const AValue: string);
    procedure SetResponsibilities(AIndex: Integer; 
                             const AValue: TStringArray);
    procedure SetSchools(AIndex: Integer; const AValue: TStringArray);
    procedure SetSkills(AIndex: Integer; const AValue: TStringArray);
    procedure SetTags(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Properties(AService: TODataService)
                    : TSP_DirectoryPropertyDictionary;
  published
    Property AboutMe : string index 0 read FAboutMe write SetAboutMe;
    Property Alias : string index 8 read FAlias write SetAlias;
    Property Birthday : TDateTime index 16 read FBirthday write SetBirthday;
    Property DisplayName : string index 24 read FDisplayName write SetDisplayName;
    Property HireDate : TDateTime index 32 read FHireDate write SetHireDate;
    Property Id : TGUIDString index 40 read FId write SetId;
    Property Interests : TStringArray index 48 read FInterests write SetInterests;
    Property Mail : string index 56 read FMail write SetMail;
    Property MySite : string index 64 read FMySite write SetMySite;
    Property PastProjects : TStringArray index 72 read FPastProjects write SetPastProjects;
    Property PreferredName : string index 80 read FPreferredName write SetPreferredName;
    Property PrincipalName : string index 88 read FPrincipalName write SetPrincipalName;
    Property Responsibilities : TStringArray index 96 read FResponsibilities write SetResponsibilities;
    Property Schools : TStringArray index 104 read FSchools write SetSchools;
    Property Skills : TStringArray index 112 read FSkills write SetSkills;
    Property Tags : TStringArray index 120 read FTags write SetTags;
  end;
  
  
  { --------------------------------------------------------------------
    MS.FileServices: UserInformation
    --------------------------------------------------------------------}
  
  TMS_FileServicesUserInformation = Class(TODataEntity)
  private
    FId : string;
    FName : string;
    FPuid : string;
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPuid(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : string index 0 read FId write SetId;
    Property Name : string index 8 read FName write SetName;
    Property Puid : string index 16 read FPuid write SetPuid;
  end;
  
  
  { --------------------------------------------------------------------
    MS.FileServices: FileSystemItem
    --------------------------------------------------------------------}
  
  TMS_FileServicesFileSystemItem = Class(TODataEntity)
  private
    FCreatedBy : TMS_FileServicesUserInformation;
    FETag : string;
    FId : string;
    FLastModifiedBy : TMS_FileServicesUserInformation;
    FName : string;
    FSize : TInt32;
    FTimeCreated : TDateTime;
    FTimeLastModified : TDateTime;
    FUrl : string;
    procedure SetCreatedBy(AIndex: Integer; 
                      const AValue: TMS_FileServicesUserInformation);
    procedure SetETag(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetLastModifiedBy(AIndex: Integer; 
                           const AValue: TMS_FileServicesUserInformation);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetSize(AIndex: Integer; const AValue: TInt32);
    procedure SetTimeCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetTimeLastModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CreatedBy : TMS_FileServicesUserInformation index 0 read FCreatedBy write SetCreatedBy;
    Property ETag : string index 8 read FETag write SetETag;
    Property Id : string index 16 read FId write SetId;
    Property LastModifiedBy : TMS_FileServicesUserInformation index 24 read FLastModifiedBy write SetLastModifiedBy;
    Property Name : string index 32 read FName write SetName;
    Property Size : TInt32 index 40 read FSize write SetSize;
    Property TimeCreated : TDateTime index 48 read FTimeCreated write SetTimeCreated;
    Property TimeLastModified : TDateTime index 56 read FTimeLastModified write SetTimeLastModified;
    Property Url : string index 64 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    MS.FileServices: File
    --------------------------------------------------------------------}
  
  TMS_FileServices_File = Class(TMS_FileServicesFileSystemItem)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    MS.FileServices: FileService
    --------------------------------------------------------------------}
  
  TMS_FileServicesFileService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    MS.FileServices: Folder
    --------------------------------------------------------------------}
  
  TMS_FileServicesFolder = Class(TMS_FileServicesFileSystemItem)
  private
    FChildrenCount : TInt32;
    procedure SetChildrenCount(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Children(AService: TODataService)
                  : TMS_FileServicesFileSystemItem;
  published
    Property ChildrenCount : TInt32 index 72 read FChildrenCount write SetChildrenCount;
  end;
  
  
  { --------------------------------------------------------------------
    MS.FileServices: MeFileService
    --------------------------------------------------------------------}
  
  TMS_FileServicesMeFileService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: DirectoryObjectData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderDirectoryObjectData = Class(TODataEntity)
  private
    FChangeMarker : string;
    FDirectoryObjectSubType : TInt32;
    FDirectoryObjectType : TInt32;
    FId : TGUIDString;
    FIsNew : boolean;
    FLastModifiedTime : TDateTime;
    FTenantContextId : TGUIDString;
    FVersion : int64;
    procedure SetChangeMarker(AIndex: Integer; const AValue: string);
    procedure SetDirectoryObjectSubType(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetDirectoryObjectType(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsNew(AIndex: Integer; const AValue: boolean);
    procedure SetLastModifiedTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetTenantContextId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetVersion(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ChangeMarker : string index 0 read FChangeMarker write SetChangeMarker;
    Property DirectoryObjectSubType : TInt32 index 8 read FDirectoryObjectSubType write SetDirectoryObjectSubType;
    Property DirectoryObjectType : TInt32 index 16 read FDirectoryObjectType write SetDirectoryObjectType;
    Property Id : TGUIDString index 24 read FId write SetId;
    Property IsNew : boolean index 32 read FIsNew write SetIsNew;
    Property LastModifiedTime : TDateTime index 40 read FLastModifiedTime write SetLastModifiedTime;
    Property TenantContextId : TGUIDString index 48 read FTenantContextId write SetTenantContextId;
    Property Version : int64 index 56 read FVersion write SetVersion;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: SchemaData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderSchemaData = Class(TODataEntity)
  private
    FDelayLoad : boolean;
    FIsInitialized : boolean;
    FName : string;
    FPrivacy : TInt32;
    procedure SetDelayLoad(AIndex: Integer; const AValue: boolean);
    procedure SetIsInitialized(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPrivacy(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DelayLoad : boolean index 0 read FDelayLoad write SetDelayLoad;
    Property IsInitialized : boolean index 8 read FIsInitialized write SetIsInitialized;
    Property Name : string index 16 read FName write SetName;
    Property Privacy : TInt32 index 24 read FPrivacy write SetPrivacy;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: PropertyData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderPropertyData = Class(TODataEntity)
  private
    FValue : TBinary;
    procedure SetValue(AIndex: Integer; const AValue: TBinary);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Value : TBinary index 0 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: RelationData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderRelationData = Class(TODataEntity)
  private
    FValue : TBinary;
    procedure SetValue(AIndex: Integer; const AValue: TBinary);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Value : TBinary index 0 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: RelationSetData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderRelationSetData = Class(TODataEntity)
  private
    FTotalCount : TInt32;
    procedure SetTotalCount(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property TotalCount : TInt32 index 0 read FTotalCount write SetTotalCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: ResourceData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderResourceData = Class(TODataEntity)
  private
    FErrorCode : TInt32;
    FErrorMessage : string;
    FState : TInt32;
    FValue : TBinary;
    procedure SetErrorCode(AIndex: Integer; const AValue: TInt32);
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
    procedure SetState(AIndex: Integer; const AValue: TInt32);
    procedure SetValue(AIndex: Integer; const AValue: TBinary);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ErrorCode : TInt32 index 0 read FErrorCode write SetErrorCode;
    Property ErrorMessage : string index 8 read FErrorMessage write SetErrorMessage;
    Property State : TInt32 index 16 read FState write SetState;
    Property Value : TBinary index 24 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: StateData
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderStateData = Class(TODataEntity)
  private
    FAdapterName : string;
    FValue : TBinary;
    procedure SetAdapterName(AIndex: Integer; const AValue: string);
    procedure SetValue(AIndex: Integer; const AValue: TBinary);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AdapterName : string index 0 read FAdapterName write SetAdapterName;
    Property Value : TBinary index 8 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Directory.Provider: SharePointDirectoryProvider
    --------------------------------------------------------------------}
  
  TSP_Directory_ProviderSharePointDirectoryProvider = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicroBlogEntityCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicroBlogEntityCollection = Class(TODataEntity)
  private
    FItems : TSP_MicrofeedMicroBlogEntityArray;
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_MicrofeedMicroBlogEntityArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSP_MicrofeedMicroBlogEntityArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicroBlogEntity
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicroBlogEntity = Class(TODataEntity)
  private
    FAccountName : string;
    FCanFollow : boolean;
    FDescription : string;
    FDisplayName : string;
    FEmail : string;
    FEntityType : TInt32;
    FEntityURI : string;
    FFollowedContentURI : string;
    FIdentifier : string;
    FIsFollowedByMe : boolean;
    FLatestPost : string;
    FLibraryName : string;
    FLibraryUri : string;
    FPersonalURI : string;
    FPictureURI : string;
    FStatus : TInt32;
    FTitle : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetCanFollow(AIndex: Integer; const AValue: boolean);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetEntityType(AIndex: Integer; const AValue: TInt32);
    procedure SetEntityURI(AIndex: Integer; const AValue: string);
    procedure SetFollowedContentURI(AIndex: Integer; const AValue: string);
    procedure SetIdentifier(AIndex: Integer; const AValue: string);
    procedure SetIsFollowedByMe(AIndex: Integer; const AValue: boolean);
    procedure SetLatestPost(AIndex: Integer; const AValue: string);
    procedure SetLibraryName(AIndex: Integer; const AValue: string);
    procedure SetLibraryUri(AIndex: Integer; const AValue: string);
    procedure SetPersonalURI(AIndex: Integer; const AValue: string);
    procedure SetPictureURI(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property CanFollow : boolean index 8 read FCanFollow write SetCanFollow;
    Property Description : string index 16 read FDescription write SetDescription;
    Property DisplayName : string index 24 read FDisplayName write SetDisplayName;
    Property Email : string index 32 read FEmail write SetEmail;
    Property EntityType : TInt32 index 40 read FEntityType write SetEntityType;
    Property EntityURI : string index 48 read FEntityURI write SetEntityURI;
    Property FollowedContentURI : string index 56 read FFollowedContentURI write SetFollowedContentURI;
    Property Identifier : string index 64 read FIdentifier write SetIdentifier;
    Property IsFollowedByMe : boolean index 72 read FIsFollowedByMe write SetIsFollowedByMe;
    Property LatestPost : string index 80 read FLatestPost write SetLatestPost;
    Property LibraryName : string index 88 read FLibraryName write SetLibraryName;
    Property LibraryUri : string index 96 read FLibraryUri write SetLibraryUri;
    Property PersonalURI : string index 104 read FPersonalURI write SetPersonalURI;
    Property PictureURI : string index 112 read FPictureURI write SetPictureURI;
    Property Status : TInt32 index 120 read FStatus write SetStatus;
    Property Title : string index 128 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostDefinition
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostDefinition = Class(TODataEntity)
  private
    FCanDelete : boolean;
    FCanFollowUp : boolean;
    FCanHaveAttachments : boolean;
    FCanLike : boolean;
    FCanLock : boolean;
    FCanReply : boolean;
    FCreationTime : TDateTime;
    FDefinitionId : int64;
    FDefinitionName : string;
    FDefinitionVersion : TInt32;
    FEnablePeopleList : boolean;
    FIsDefault : boolean;
    FIsEnabled : boolean;
    FIsNotification : boolean;
    FIsPrivate : boolean;
    FIsUserPost : boolean;
    FLastUpdateTime : TDateTime;
    FPartitionId : TGUIDString;
    FPersistToCache : boolean;
    FPersistToPrivateFolder : boolean;
    FPersistToPublishedFeed : boolean;
    FReferenceLikePostName : string;
    FReferenceMentionPostName : string;
    FReferenceReplyPostName : string;
    FRenderPostAuthorImage : boolean;
    FResourceFileName : string;
    FSecurityTrimContentUrl : boolean;
    FSmallImageSizePreferred : boolean;
    procedure SetCanDelete(AIndex: Integer; const AValue: boolean);
    procedure SetCanFollowUp(AIndex: Integer; const AValue: boolean);
    procedure SetCanHaveAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetCanLike(AIndex: Integer; const AValue: boolean);
    procedure SetCanLock(AIndex: Integer; const AValue: boolean);
    procedure SetCanReply(AIndex: Integer; const AValue: boolean);
    procedure SetCreationTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefinitionId(AIndex: Integer; const AValue: int64);
    procedure SetDefinitionName(AIndex: Integer; const AValue: string);
    procedure SetDefinitionVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetEnablePeopleList(AIndex: Integer; const AValue: boolean);
    procedure SetIsDefault(AIndex: Integer; const AValue: boolean);
    procedure SetIsEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetIsNotification(AIndex: Integer; const AValue: boolean);
    procedure SetIsPrivate(AIndex: Integer; const AValue: boolean);
    procedure SetIsUserPost(AIndex: Integer; const AValue: boolean);
    procedure SetLastUpdateTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetPartitionId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPersistToCache(AIndex: Integer; const AValue: boolean);
    procedure SetPersistToPrivateFolder(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetPersistToPublishedFeed(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetReferenceLikePostName(AIndex: Integer; 
                                  const AValue: string);
    procedure SetReferenceMentionPostName(AIndex: Integer; 
                                     const AValue: string);
    procedure SetReferenceReplyPostName(AIndex: Integer; 
                                   const AValue: string);
    procedure SetRenderPostAuthorImage(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetResourceFileName(AIndex: Integer; const AValue: string);
    procedure SetSecurityTrimContentUrl(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetSmallImageSizePreferred(AIndex: Integer; 
                                    const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CanDelete : boolean index 0 read FCanDelete write SetCanDelete;
    Property CanFollowUp : boolean index 8 read FCanFollowUp write SetCanFollowUp;
    Property CanHaveAttachments : boolean index 16 read FCanHaveAttachments write SetCanHaveAttachments;
    Property CanLike : boolean index 24 read FCanLike write SetCanLike;
    Property CanLock : boolean index 32 read FCanLock write SetCanLock;
    Property CanReply : boolean index 40 read FCanReply write SetCanReply;
    Property CreationTime : TDateTime index 48 read FCreationTime write SetCreationTime;
    Property DefinitionId : int64 index 56 read FDefinitionId write SetDefinitionId;
    Property DefinitionName : string index 64 read FDefinitionName write SetDefinitionName;
    Property DefinitionVersion : TInt32 index 72 read FDefinitionVersion write SetDefinitionVersion;
    Property EnablePeopleList : boolean index 80 read FEnablePeopleList write SetEnablePeopleList;
    Property IsDefault : boolean index 88 read FIsDefault write SetIsDefault;
    Property IsEnabled : boolean index 96 read FIsEnabled write SetIsEnabled;
    Property IsNotification : boolean index 104 read FIsNotification write SetIsNotification;
    Property IsPrivate : boolean index 112 read FIsPrivate write SetIsPrivate;
    Property IsUserPost : boolean index 120 read FIsUserPost write SetIsUserPost;
    Property LastUpdateTime : TDateTime index 128 read FLastUpdateTime write SetLastUpdateTime;
    Property PartitionId : TGUIDString index 136 read FPartitionId write SetPartitionId;
    Property PersistToCache : boolean index 144 read FPersistToCache write SetPersistToCache;
    Property PersistToPrivateFolder : boolean index 152 read FPersistToPrivateFolder write SetPersistToPrivateFolder;
    Property PersistToPublishedFeed : boolean index 160 read FPersistToPublishedFeed write SetPersistToPublishedFeed;
    Property ReferenceLikePostName : string index 168 read FReferenceLikePostName write SetReferenceLikePostName;
    Property ReferenceMentionPostName : string index 176 read FReferenceMentionPostName write SetReferenceMentionPostName;
    Property ReferenceReplyPostName : string index 184 read FReferenceReplyPostName write SetReferenceReplyPostName;
    Property RenderPostAuthorImage : boolean index 192 read FRenderPostAuthorImage write SetRenderPostAuthorImage;
    Property ResourceFileName : string index 200 read FResourceFileName write SetResourceFileName;
    Property SecurityTrimContentUrl : boolean index 208 read FSecurityTrimContentUrl write SetSecurityTrimContentUrl;
    Property SmallImageSizePreferred : boolean index 216 read FSmallImageSizePreferred write SetSmallImageSizePreferred;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedDataLinkCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedDataLinkCollection = Class(TODataEntity)
  private
    FItems : TSP_MicrofeedMicrofeedDataLinkArray;
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_MicrofeedMicrofeedDataLinkArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSP_MicrofeedMicrofeedDataLinkArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedDataLink
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedDataLink = Class(TODataEntity)
  private
    FDataLinkType : TInt32;
    FDateTimeValue : TDateTime;
    FName : string;
    FPlaceHolderName : string;
    FStringValue : string;
    FUniqueId : TGUIDString;
    FUriValue : string;
    procedure SetDataLinkType(AIndex: Integer; const AValue: TInt32);
    procedure SetDateTimeValue(AIndex: Integer; const AValue: TDateTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPlaceHolderName(AIndex: Integer; const AValue: string);
    procedure SetStringValue(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetUriValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DataLinkType : TInt32 index 0 read FDataLinkType write SetDataLinkType;
    Property DateTimeValue : TDateTime index 8 read FDateTimeValue write SetDateTimeValue;
    Property Name : string index 16 read FName write SetName;
    Property PlaceHolderName : string index 24 read FPlaceHolderName write SetPlaceHolderName;
    Property StringValue : string index 32 read FStringValue write SetStringValue;
    Property UniqueId : TGUIDString index 40 read FUniqueId write SetUniqueId;
    Property UriValue : string index 48 read FUriValue write SetUriValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedDataQuery
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedDataQuery = Class(TODataEntity)
  private
    FItemLimit : int64;
    FQuery : string;
    FViewFields : TStringArray;
    FViewFieldsOnly : boolean;
    procedure SetItemLimit(AIndex: Integer; const AValue: int64);
    procedure SetQuery(AIndex: Integer; const AValue: string);
    procedure SetViewFields(AIndex: Integer; const AValue: TStringArray);
    procedure SetViewFieldsOnly(AIndex: Integer; const AValue: boolean);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ItemLimit : int64 index 0 read FItemLimit write SetItemLimit;
    Property Query : string index 8 read FQuery write SetQuery;
    Property ViewFields : TStringArray index 16 read FViewFields write SetViewFields;
    Property ViewFieldsOnly : boolean index 24 read FViewFieldsOnly write SetViewFieldsOnly;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedLinkAction
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedLinkAction = Class(TODataEntity)
  private
    FActionUri : string;
    FHeight : int64;
    FKind : TInt32;
    FWidth : int64;
    procedure SetActionUri(AIndex: Integer; const AValue: string);
    procedure SetHeight(AIndex: Integer; const AValue: int64);
    procedure SetKind(AIndex: Integer; const AValue: TInt32);
    procedure SetWidth(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ActionUri : string index 0 read FActionUri write SetActionUri;
    Property Height : int64 index 8 read FHeight write SetHeight;
    Property Kind : TInt32 index 16 read FKind write SetKind;
    Property Width : int64 index 24 read FWidth write SetWidth;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedLink
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedLink = Class(TODataEntity)
  private
    FClickAction : TSP_MicrofeedMicrofeedLinkAction;
    FContentUri : string;
    FDescription : string;
    FHeight : int64;
    FHref : string;
    F_Length : int64;
    FLinkType : TInt32;
    FName : string;
    FPreviewHeight : int64;
    FPreviewPictureUrl : string;
    FPreviewWidth : int64;
    FStatus : TInt32;
    FWidth : int64;
    procedure SetClickAction(AIndex: Integer; 
                        const AValue: TSP_MicrofeedMicrofeedLinkAction);
    procedure SetContentUri(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetHeight(AIndex: Integer; const AValue: int64);
    procedure SetHref(AIndex: Integer; const AValue: string);
    procedure Set_Length(AIndex: Integer; const AValue: int64);
    procedure SetLinkType(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPreviewHeight(AIndex: Integer; const AValue: int64);
    procedure SetPreviewPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetPreviewWidth(AIndex: Integer; const AValue: int64);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetWidth(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property ClickAction : TSP_MicrofeedMicrofeedLinkAction index 0 read FClickAction write SetClickAction;
    Property ContentUri : string index 8 read FContentUri write SetContentUri;
    Property Description : string index 16 read FDescription write SetDescription;
    Property Height : int64 index 24 read FHeight write SetHeight;
    Property Href : string index 32 read FHref write SetHref;
    Property _Length : int64 index 40 read F_Length write Set_Length;
    Property LinkType : TInt32 index 48 read FLinkType write SetLinkType;
    Property Name : string index 56 read FName write SetName;
    Property PreviewHeight : int64 index 64 read FPreviewHeight write SetPreviewHeight;
    Property PreviewPictureUrl : string index 72 read FPreviewPictureUrl write SetPreviewPictureUrl;
    Property PreviewWidth : int64 index 80 read FPreviewWidth write SetPreviewWidth;
    Property Status : TInt32 index 88 read FStatus write SetStatus;
    Property Width : int64 index 96 read FWidth write SetWidth;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostCollection = Class(TODataEntity)
  private
    FItems : TSP_MicrofeedMicrofeedPostArray;
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_MicrofeedMicrofeedPostArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSP_MicrofeedMicrofeedPostArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPost
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPost = Class(TODataEntity)
  private
    FAuthorIndex : TInt32;
    FBreadCrumb : string;
    FCanDelete : boolean;
    FCanFollowUp : boolean;
    FCanHaveAttachments : boolean;
    FCanLike : boolean;
    FCanLock : boolean;
    FCanReply : boolean;
    FContent : string;
    FCreated : TDateTime;
    FFooter : string;
    FID : string;
    FILikeIt : boolean;
    FLikersList : TInt32Array;
    FLocked : boolean;
    FMediaLink : TSP_MicrofeedMicrofeedLink;
    FMicroBlogType : TInt32;
    FModified : TDateTime;
    FPeopleCount : TInt32;
    FPostImageUri : string;
    FPostSource : string;
    FPostSourceUri : string;
    FReferenceID : string;
    FRenderPostAuthorImage : boolean;
    FReplyCount : TInt32;
    FSmallImageSizePreferred : boolean;
    FTitle : string;
    procedure SetAuthorIndex(AIndex: Integer; const AValue: TInt32);
    procedure SetBreadCrumb(AIndex: Integer; const AValue: string);
    procedure SetCanDelete(AIndex: Integer; const AValue: boolean);
    procedure SetCanFollowUp(AIndex: Integer; const AValue: boolean);
    procedure SetCanHaveAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetCanLike(AIndex: Integer; const AValue: boolean);
    procedure SetCanLock(AIndex: Integer; const AValue: boolean);
    procedure SetCanReply(AIndex: Integer; const AValue: boolean);
    procedure SetContent(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetFooter(AIndex: Integer; const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: string);
    procedure SetILikeIt(AIndex: Integer; const AValue: boolean);
    procedure SetLikersList(AIndex: Integer; const AValue: TInt32Array);
    procedure SetLocked(AIndex: Integer; const AValue: boolean);
    procedure SetMediaLink(AIndex: Integer; 
                      const AValue: TSP_MicrofeedMicrofeedLink);
    procedure SetMicroBlogType(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetPeopleCount(AIndex: Integer; const AValue: TInt32);
    procedure SetPostImageUri(AIndex: Integer; const AValue: string);
    procedure SetPostSource(AIndex: Integer; const AValue: string);
    procedure SetPostSourceUri(AIndex: Integer; const AValue: string);
    procedure SetReferenceID(AIndex: Integer; const AValue: string);
    procedure SetRenderPostAuthorImage(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetReplyCount(AIndex: Integer; const AValue: TInt32);
    procedure SetSmallImageSizePreferred(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AuthorIndex : TInt32 index 0 read FAuthorIndex write SetAuthorIndex;
    Property BreadCrumb : string index 8 read FBreadCrumb write SetBreadCrumb;
    Property CanDelete : boolean index 16 read FCanDelete write SetCanDelete;
    Property CanFollowUp : boolean index 24 read FCanFollowUp write SetCanFollowUp;
    Property CanHaveAttachments : boolean index 32 read FCanHaveAttachments write SetCanHaveAttachments;
    Property CanLike : boolean index 40 read FCanLike write SetCanLike;
    Property CanLock : boolean index 48 read FCanLock write SetCanLock;
    Property CanReply : boolean index 56 read FCanReply write SetCanReply;
    Property Content : string index 64 read FContent write SetContent;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property Footer : string index 80 read FFooter write SetFooter;
    Property ID : string index 88 read FID write SetID;
    Property ILikeIt : boolean index 96 read FILikeIt write SetILikeIt;
    Property LikersList : TInt32Array index 104 read FLikersList write SetLikersList;
    Property Locked : boolean index 112 read FLocked write SetLocked;
    Property MediaLink : TSP_MicrofeedMicrofeedLink index 120 read FMediaLink write SetMediaLink;
    Property MicroBlogType : TInt32 index 128 read FMicroBlogType write SetMicroBlogType;
    Property Modified : TDateTime index 136 read FModified write SetModified;
    Property PeopleCount : TInt32 index 144 read FPeopleCount write SetPeopleCount;
    Property PostImageUri : string index 152 read FPostImageUri write SetPostImageUri;
    Property PostSource : string index 160 read FPostSource write SetPostSource;
    Property PostSourceUri : string index 168 read FPostSourceUri write SetPostSourceUri;
    Property ReferenceID : string index 176 read FReferenceID write SetReferenceID;
    Property RenderPostAuthorImage : boolean index 184 read FRenderPostAuthorImage write SetRenderPostAuthorImage;
    Property ReplyCount : TInt32 index 192 read FReplyCount write SetReplyCount;
    Property SmallImageSizePreferred : boolean index 200 read FSmallImageSizePreferred write SetSmallImageSizePreferred;
    Property Title : string index 208 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostDefinitionNames
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostDefinitionNames = Class(TODataEntity)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostDefinitionNameCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostDefinitionNameCollection = Class(TODataEntity)
  private
    FItems : TStringArray;
    procedure SetItems(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TStringArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostOptions
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostOptions = Class(TODataEntity)
  private
    FContent : string;
    FContentFormattingOption : TInt32;
    FDataLinks : TSP_MicrofeedMicrofeedDataLinkCollection;
    FDefinitionName : string;
    FMediaLink : TSP_MicrofeedMicrofeedLink;
    FPeopleList : TStringArray;
    FPostSource : string;
    FPostSourceUri : string;
    FRefThread_ReferenceID : string;
    FRefThread_RefReply : string;
    FRefThread_RefRoot : string;
    FTargetActor : string;
    FUpdateStatusText : boolean;
    procedure SetContent(AIndex: Integer; const AValue: string);
    procedure SetContentFormattingOption(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetDataLinks(AIndex: Integer; 
                      const AValue: TSP_MicrofeedMicrofeedDataLinkCollection);
    procedure SetDefinitionName(AIndex: Integer; const AValue: string);
    procedure SetMediaLink(AIndex: Integer; 
                      const AValue: TSP_MicrofeedMicrofeedLink);
    procedure SetPeopleList(AIndex: Integer; const AValue: TStringArray);
    procedure SetPostSource(AIndex: Integer; const AValue: string);
    procedure SetPostSourceUri(AIndex: Integer; const AValue: string);
    procedure SetRefThread_ReferenceID(AIndex: Integer; 
                                  const AValue: string);
    procedure SetRefThread_RefReply(AIndex: Integer; const AValue: string);
    procedure SetRefThread_RefRoot(AIndex: Integer; const AValue: string);
    procedure SetTargetActor(AIndex: Integer; const AValue: string);
    procedure SetUpdateStatusText(AIndex: Integer; const AValue: boolean);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Content : string index 0 read FContent write SetContent;
    Property ContentFormattingOption : TInt32 index 8 read FContentFormattingOption write SetContentFormattingOption;
    Property DataLinks : TSP_MicrofeedMicrofeedDataLinkCollection index 16 read FDataLinks write SetDataLinks;
    Property DefinitionName : string index 24 read FDefinitionName write SetDefinitionName;
    Property MediaLink : TSP_MicrofeedMicrofeedLink index 32 read FMediaLink write SetMediaLink;
    Property PeopleList : TStringArray index 40 read FPeopleList write SetPeopleList;
    Property PostSource : string index 48 read FPostSource write SetPostSource;
    Property PostSourceUri : string index 56 read FPostSourceUri write SetPostSourceUri;
    Property RefThread_ReferenceID : string index 64 read FRefThread_ReferenceID write SetRefThread_ReferenceID;
    Property RefThread_RefReply : string index 72 read FRefThread_RefReply write SetRefThread_RefReply;
    Property RefThread_RefRoot : string index 80 read FRefThread_RefRoot write SetRefThread_RefRoot;
    Property TargetActor : string index 88 read FTargetActor write SetTargetActor;
    Property UpdateStatusText : boolean index 96 read FUpdateStatusText write SetUpdateStatusText;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedRetrievalOptions
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedRetrievalOptions = Class(TODataEntity)
  private
    FContentFormattingOption : TInt32;
    FContentOnly : boolean;
    FDropAllSecurityTrimmablePosts : boolean;
    FGatherUnreadMentionCountForUser : boolean;
    FIncludedTypes : TInt32;
    FNewerThan : TDateTime;
    FOlderThan : TDateTime;
    FPostDefinitionFilter : TStringArray;
    FResultSortOrder : TInt32;
    FThreadCount : TInt32;
    procedure SetContentFormattingOption(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetContentOnly(AIndex: Integer; const AValue: boolean);
    procedure SetDropAllSecurityTrimmablePosts(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetGatherUnreadMentionCountForUser(AIndex: Integer; 
                                            const AValue: boolean);
    procedure SetIncludedTypes(AIndex: Integer; const AValue: TInt32);
    procedure SetNewerThan(AIndex: Integer; const AValue: TDateTime);
    procedure SetOlderThan(AIndex: Integer; const AValue: TDateTime);
    procedure SetPostDefinitionFilter(AIndex: Integer; 
                                 const AValue: TStringArray);
    procedure SetResultSortOrder(AIndex: Integer; const AValue: TInt32);
    procedure SetThreadCount(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ContentFormattingOption : TInt32 index 0 read FContentFormattingOption write SetContentFormattingOption;
    Property ContentOnly : boolean index 8 read FContentOnly write SetContentOnly;
    Property DropAllSecurityTrimmablePosts : boolean index 16 read FDropAllSecurityTrimmablePosts write SetDropAllSecurityTrimmablePosts;
    Property GatherUnreadMentionCountForUser : boolean index 24 read FGatherUnreadMentionCountForUser write SetGatherUnreadMentionCountForUser;
    Property IncludedTypes : TInt32 index 32 read FIncludedTypes write SetIncludedTypes;
    Property NewerThan : TDateTime index 40 read FNewerThan write SetNewerThan;
    Property OlderThan : TDateTime index 48 read FOlderThan write SetOlderThan;
    Property PostDefinitionFilter : TStringArray index 56 read FPostDefinitionFilter write SetPostDefinitionFilter;
    Property ResultSortOrder : TInt32 index 64 read FResultSortOrder write SetResultSortOrder;
    Property ThreadCount : TInt32 index 72 read FThreadCount write SetThreadCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedThreadCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedThreadCollection = Class(TODataEntity)
  private
    FCurrentUserUnreadMentionCount : TInt32;
    FNewestProcessed : TDateTime;
    FOldestProcessed : TDateTime;
    FItems : TSP_MicrofeedMicrofeedThreadArray;
    procedure SetCurrentUserUnreadMentionCount(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetNewestProcessed(AIndex: Integer; const AValue: TDateTime);
    procedure SetOldestProcessed(AIndex: Integer; const AValue: TDateTime);
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_MicrofeedMicrofeedThreadArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CurrentUserUnreadMentionCount : TInt32 index 0 read FCurrentUserUnreadMentionCount write SetCurrentUserUnreadMentionCount;
    Property NewestProcessed : TDateTime index 8 read FNewestProcessed write SetNewestProcessed;
    Property OldestProcessed : TDateTime index 16 read FOldestProcessed write SetOldestProcessed;
    Property Items : TSP_MicrofeedMicrofeedThreadArray index 24 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedThread
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedThread = Class(TODataEntity)
  private
    FCanFollowUp : boolean;
    FCanHaveAttachments : boolean;
    FCanLike : boolean;
    FCanReply : boolean;
    FDataLinks : TSP_MicrofeedMicrofeedDataLinkArray;
    FDefinitionId : int64;
    FDefinitionName : string;
    FIdentifier : string;
    FLocked : boolean;
    FMicrofeedEntities : TSP_MicrofeedMicroBlogEntityArray;
    FOwnerIndex : TInt32;
    FRefReply : TSP_MicrofeedMicrofeedPost;
    FRefRoot : TSP_MicrofeedMicrofeedPost;
    FRenderPostAuthorImage : boolean;
    FReplies : TSP_MicrofeedMicrofeedPostCollection;
    FReplyCount : TInt32;
    FRootPost : TSP_MicrofeedMicrofeedPost;
    FSmallImageSizePreferred : boolean;
    FStatus : TInt32;
    procedure SetCanFollowUp(AIndex: Integer; const AValue: boolean);
    procedure SetCanHaveAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetCanLike(AIndex: Integer; const AValue: boolean);
    procedure SetCanReply(AIndex: Integer; const AValue: boolean);
    procedure SetDataLinks(AIndex: Integer; 
                      const AValue: TSP_MicrofeedMicrofeedDataLinkArray);
    procedure SetDefinitionId(AIndex: Integer; const AValue: int64);
    procedure SetDefinitionName(AIndex: Integer; const AValue: string);
    procedure SetIdentifier(AIndex: Integer; const AValue: string);
    procedure SetLocked(AIndex: Integer; const AValue: boolean);
    procedure SetMicrofeedEntities(AIndex: Integer; 
                              const AValue: TSP_MicrofeedMicroBlogEntityArray);
    procedure SetOwnerIndex(AIndex: Integer; const AValue: TInt32);
    procedure SetRefReply(AIndex: Integer; 
                     const AValue: TSP_MicrofeedMicrofeedPost);
    procedure SetRefRoot(AIndex: Integer; 
                    const AValue: TSP_MicrofeedMicrofeedPost);
    procedure SetRenderPostAuthorImage(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetReplies(AIndex: Integer; 
                    const AValue: TSP_MicrofeedMicrofeedPostCollection);
    procedure SetReplyCount(AIndex: Integer; const AValue: TInt32);
    procedure SetRootPost(AIndex: Integer; 
                     const AValue: TSP_MicrofeedMicrofeedPost);
    procedure SetSmallImageSizePreferred(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CanFollowUp : boolean index 0 read FCanFollowUp write SetCanFollowUp;
    Property CanHaveAttachments : boolean index 8 read FCanHaveAttachments write SetCanHaveAttachments;
    Property CanLike : boolean index 16 read FCanLike write SetCanLike;
    Property CanReply : boolean index 24 read FCanReply write SetCanReply;
    Property DataLinks : TSP_MicrofeedMicrofeedDataLinkArray index 32 read FDataLinks write SetDataLinks;
    Property DefinitionId : int64 index 40 read FDefinitionId write SetDefinitionId;
    Property DefinitionName : string index 48 read FDefinitionName write SetDefinitionName;
    Property Identifier : string index 56 read FIdentifier write SetIdentifier;
    Property Locked : boolean index 64 read FLocked write SetLocked;
    Property MicrofeedEntities : TSP_MicrofeedMicroBlogEntityArray index 72 read FMicrofeedEntities write SetMicrofeedEntities;
    Property OwnerIndex : TInt32 index 80 read FOwnerIndex write SetOwnerIndex;
    Property RefReply : TSP_MicrofeedMicrofeedPost index 88 read FRefReply write SetRefReply;
    Property RefRoot : TSP_MicrofeedMicrofeedPost index 96 read FRefRoot write SetRefRoot;
    Property RenderPostAuthorImage : boolean index 104 read FRenderPostAuthorImage write SetRenderPostAuthorImage;
    Property Replies : TSP_MicrofeedMicrofeedPostCollection index 112 read FReplies write SetReplies;
    Property ReplyCount : TInt32 index 120 read FReplyCount write SetReplyCount;
    Property RootPost : TSP_MicrofeedMicrofeedPost index 128 read FRootPost write SetRootPost;
    Property SmallImageSizePreferred : boolean index 136 read FSmallImageSizePreferred write SetSmallImageSizePreferred;
    Property Status : TInt32 index 144 read FStatus write SetStatus;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedUserPostCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedUserPostCollection = Class(TODataEntity)
  private
    FItems : TSP_MicrofeedMicrofeedUserPostsArray;
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_MicrofeedMicrofeedUserPostsArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSP_MicrofeedMicrofeedUserPostsArray index 0 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedUserPosts
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedUserPosts = Class(TODataEntity)
  private
    FAccountName : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostDefinitionManager
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostDefinitionManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedAttachmentStore
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedAttachmentStore = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedData
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedData = Class(TODataEntity)
  private
    FCreated : TDateTime;
    FData : TSPKeyValueArray;
    FDefinitionId : TInt32;
    FItemType : TInt32;
    FModified : TDateTime;
    FTargetIdentifier : string;
    FVersion : string;
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetData(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetDefinitionId(AIndex: Integer; const AValue: TInt32);
    procedure SetItemType(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetTargetIdentifier(AIndex: Integer; const AValue: string);
    procedure SetVersion(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Created : TDateTime index 0 read FCreated write SetCreated;
    Property Data : TSPKeyValueArray index 8 read FData write SetData;
    Property DefinitionId : TInt32 index 16 read FDefinitionId write SetDefinitionId;
    Property ItemType : TInt32 index 24 read FItemType write SetItemType;
    Property Modified : TDateTime index 32 read FModified write SetModified;
    Property TargetIdentifier : string index 40 read FTargetIdentifier write SetTargetIdentifier;
    Property Version : string index 48 read FVersion write SetVersion;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedManager
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedManager = Class(TODataEntity)
  private
    FCurrentUser : TSP_MicrofeedMicroBlogEntity;
    FIsFeedActivityPublic : boolean;
    FStaticThreadLink : string;
    procedure SetCurrentUser(AIndex: Integer; 
                        const AValue: TSP_MicrofeedMicroBlogEntity);
    procedure SetIsFeedActivityPublic(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetStaticThreadLink(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CurrentUser : TSP_MicrofeedMicroBlogEntity index 0 read FCurrentUser write SetCurrentUser;
    Property IsFeedActivityPublic : boolean index 8 read FIsFeedActivityPublic write SetIsFeedActivityPublic;
    Property StaticThreadLink : string index 16 read FStaticThreadLink write SetStaticThreadLink;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedPostOptionCollection
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedPostOptionCollection = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FItems : TSP_MicrofeedMicrofeedPostOptionsArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_MicrofeedMicrofeedPostOptionsArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Items : TSP_MicrofeedMicrofeedPostOptionsArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Microfeed: MicrofeedStore
    --------------------------------------------------------------------}
  
  TSP_MicrofeedMicrofeedStore = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialActorInfo
    --------------------------------------------------------------------}
  
  TSP_SocialSocialActorInfo = Class(TODataEntity)
  private
    FAccountName : string;
    FActorType : TInt32;
    FContentUri : string;
    FId : string;
    FTagGuid : TGUIDString;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetActorType(AIndex: Integer; const AValue: TInt32);
    procedure SetContentUri(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetTagGuid(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property ActorType : TInt32 index 8 read FActorType write SetActorType;
    Property ContentUri : string index 16 read FContentUri write SetContentUri;
    Property Id : string index 24 read FId write SetId;
    Property TagGuid : TGUIDString index 32 read FTagGuid write SetTagGuid;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialActor
    --------------------------------------------------------------------}
  
  TSP_SocialSocialActor = Class(TODataEntity)
  private
    FAccountName : string;
    FActorType : TInt32;
    FCanFollow : boolean;
    FContentUri : string;
    FEmailAddress : string;
    FFollowedContentUri : string;
    FId : string;
    FImageUri : string;
    FIsFollowed : boolean;
    FLibraryUri : string;
    FName : string;
    FPersonalSiteUri : string;
    FStatus : TInt32;
    FStatusText : string;
    FTagGuid : TGUIDString;
    FTitle : string;
    FUri : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetActorType(AIndex: Integer; const AValue: TInt32);
    procedure SetCanFollow(AIndex: Integer; const AValue: boolean);
    procedure SetContentUri(AIndex: Integer; const AValue: string);
    procedure SetEmailAddress(AIndex: Integer; const AValue: string);
    procedure SetFollowedContentUri(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetImageUri(AIndex: Integer; const AValue: string);
    procedure SetIsFollowed(AIndex: Integer; const AValue: boolean);
    procedure SetLibraryUri(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPersonalSiteUri(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetStatusText(AIndex: Integer; const AValue: string);
    procedure SetTagGuid(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUri(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property ActorType : TInt32 index 8 read FActorType write SetActorType;
    Property CanFollow : boolean index 16 read FCanFollow write SetCanFollow;
    Property ContentUri : string index 24 read FContentUri write SetContentUri;
    Property EmailAddress : string index 32 read FEmailAddress write SetEmailAddress;
    Property FollowedContentUri : string index 40 read FFollowedContentUri write SetFollowedContentUri;
    Property Id : string index 48 read FId write SetId;
    Property ImageUri : string index 56 read FImageUri write SetImageUri;
    Property IsFollowed : boolean index 64 read FIsFollowed write SetIsFollowed;
    Property LibraryUri : string index 72 read FLibraryUri write SetLibraryUri;
    Property Name : string index 80 read FName write SetName;
    Property PersonalSiteUri : string index 88 read FPersonalSiteUri write SetPersonalSiteUri;
    Property Status : TInt32 index 96 read FStatus write SetStatus;
    Property StatusText : string index 104 read FStatusText write SetStatusText;
    Property TagGuid : TGUIDString index 112 read FTagGuid write SetTagGuid;
    Property Title : string index 120 read FTitle write SetTitle;
    Property Uri : string index 128 read FUri write SetUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialAttachmentAction
    --------------------------------------------------------------------}
  
  TSP_SocialSocialAttachmentAction = Class(TODataEntity)
  private
    FActionKind : TInt32;
    FActionUri : string;
    FHeight : int64;
    FWidth : int64;
    procedure SetActionKind(AIndex: Integer; const AValue: TInt32);
    procedure SetActionUri(AIndex: Integer; const AValue: string);
    procedure SetHeight(AIndex: Integer; const AValue: int64);
    procedure SetWidth(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ActionKind : TInt32 index 0 read FActionKind write SetActionKind;
    Property ActionUri : string index 8 read FActionUri write SetActionUri;
    Property Height : int64 index 16 read FHeight write SetHeight;
    Property Width : int64 index 24 read FWidth write SetWidth;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialAttachment
    --------------------------------------------------------------------}
  
  TSP_SocialSocialAttachment = Class(TODataEntity)
  private
    FAttachmentKind : TInt32;
    FClickAction : TSP_SocialSocialAttachmentAction;
    FContentUri : string;
    FDescription : string;
    FHeight : int64;
    F_Length : int64;
    FName : string;
    FPreviewHeight : int64;
    FPreviewUri : string;
    FPreviewWidth : int64;
    FUri : string;
    FWidth : int64;
    procedure SetAttachmentKind(AIndex: Integer; const AValue: TInt32);
    procedure SetClickAction(AIndex: Integer; 
                        const AValue: TSP_SocialSocialAttachmentAction);
    procedure SetContentUri(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetHeight(AIndex: Integer; const AValue: int64);
    procedure Set_Length(AIndex: Integer; const AValue: int64);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPreviewHeight(AIndex: Integer; const AValue: int64);
    procedure SetPreviewUri(AIndex: Integer; const AValue: string);
    procedure SetPreviewWidth(AIndex: Integer; const AValue: int64);
    procedure SetUri(AIndex: Integer; const AValue: string);
    procedure SetWidth(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property AttachmentKind : TInt32 index 0 read FAttachmentKind write SetAttachmentKind;
    Property ClickAction : TSP_SocialSocialAttachmentAction index 8 read FClickAction write SetClickAction;
    Property ContentUri : string index 16 read FContentUri write SetContentUri;
    Property Description : string index 24 read FDescription write SetDescription;
    Property Height : int64 index 32 read FHeight write SetHeight;
    Property _Length : int64 index 40 read F_Length write Set_Length;
    Property Name : string index 48 read FName write SetName;
    Property PreviewHeight : int64 index 56 read FPreviewHeight write SetPreviewHeight;
    Property PreviewUri : string index 64 read FPreviewUri write SetPreviewUri;
    Property PreviewWidth : int64 index 72 read FPreviewWidth write SetPreviewWidth;
    Property Uri : string index 80 read FUri write SetUri;
    Property Width : int64 index 88 read FWidth write SetWidth;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialDataItem
    --------------------------------------------------------------------}
  
  TSP_SocialSocialDataItem = Class(TODataEntity)
  private
    FAccountName : string;
    FItemType : TInt32;
    FTagGuid : TGUIDString;
    FText : string;
    FUri : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetItemType(AIndex: Integer; const AValue: TInt32);
    procedure SetTagGuid(AIndex: Integer; const AValue: TGUIDString);
    procedure SetText(AIndex: Integer; const AValue: string);
    procedure SetUri(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property ItemType : TInt32 index 8 read FItemType write SetItemType;
    Property TagGuid : TGUIDString index 16 read FTagGuid write SetTagGuid;
    Property Text : string index 24 read FText write SetText;
    Property Uri : string index 32 read FUri write SetUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialDataOverlay
    --------------------------------------------------------------------}
  
  TSP_SocialSocialDataOverlay = Class(TODataEntity)
  private
    FActorIndexes : TInt32Array;
    FIndex : TInt32;
    F_Length : TInt32;
    FLinkUri : string;
    FOverlayType : TInt32;
    procedure SetActorIndexes(AIndex: Integer; const AValue: TInt32Array);
    procedure SetIndex(AIndex: Integer; const AValue: TInt32);
    procedure Set_Length(AIndex: Integer; const AValue: TInt32);
    procedure SetLinkUri(AIndex: Integer; const AValue: string);
    procedure SetOverlayType(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property ActorIndexes : TInt32Array index 0 read FActorIndexes write SetActorIndexes;
    Property Index : TInt32 index 8 read FIndex write SetIndex;
    Property _Length : TInt32 index 16 read F_Length write Set_Length;
    Property LinkUri : string index 24 read FLinkUri write SetLinkUri;
    Property OverlayType : TInt32 index 32 read FOverlayType write SetOverlayType;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialExceptionDetails
    --------------------------------------------------------------------}
  
  TSP_SocialSocialExceptionDetails = Class(TODataEntity)
  private
    FInternalErrorCode : TInt32;
    FInternalMessage : string;
    FInternalStackTrace : string;
    FInternalTypeName : string;
    FStatus : TInt32;
    procedure SetInternalErrorCode(AIndex: Integer; const AValue: TInt32);
    procedure SetInternalMessage(AIndex: Integer; const AValue: string);
    procedure SetInternalStackTrace(AIndex: Integer; const AValue: string);
    procedure SetInternalTypeName(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property InternalErrorCode : TInt32 index 0 read FInternalErrorCode write SetInternalErrorCode;
    Property InternalMessage : string index 8 read FInternalMessage write SetInternalMessage;
    Property InternalStackTrace : string index 16 read FInternalStackTrace write SetInternalStackTrace;
    Property InternalTypeName : string index 24 read FInternalTypeName write SetInternalTypeName;
    Property Status : TInt32 index 32 read FStatus write SetStatus;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialFeedOptions
    --------------------------------------------------------------------}
  
  TSP_SocialSocialFeedOptions = Class(TODataEntity)
  private
    FMaxThreadCount : TInt32;
    FNewerThan : TDateTime;
    FOlderThan : TDateTime;
    FSortOrder : TInt32;
    procedure SetMaxThreadCount(AIndex: Integer; const AValue: TInt32);
    procedure SetNewerThan(AIndex: Integer; const AValue: TDateTime);
    procedure SetOlderThan(AIndex: Integer; const AValue: TDateTime);
    procedure SetSortOrder(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property MaxThreadCount : TInt32 index 0 read FMaxThreadCount write SetMaxThreadCount;
    Property NewerThan : TDateTime index 8 read FNewerThan write SetNewerThan;
    Property OlderThan : TDateTime index 16 read FOlderThan write SetOlderThan;
    Property SortOrder : TInt32 index 24 read FSortOrder write SetSortOrder;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialFeed
    --------------------------------------------------------------------}
  
  TSP_SocialSocialFeed = Class(TODataEntity)
  private
    FAttributes : TInt32;
    FNewestProcessed : TDateTime;
    FOldestProcessed : TDateTime;
    FThreads : TSP_SocialSocialThreadArray;
    FUnreadMentionCount : TInt32;
    procedure SetAttributes(AIndex: Integer; const AValue: TInt32);
    procedure SetNewestProcessed(AIndex: Integer; const AValue: TDateTime);
    procedure SetOldestProcessed(AIndex: Integer; const AValue: TDateTime);
    procedure SetThreads(AIndex: Integer; 
                    const AValue: TSP_SocialSocialThreadArray);
    procedure SetUnreadMentionCount(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Attributes : TInt32 index 0 read FAttributes write SetAttributes;
    Property NewestProcessed : TDateTime index 8 read FNewestProcessed write SetNewestProcessed;
    Property OldestProcessed : TDateTime index 16 read FOldestProcessed write SetOldestProcessed;
    Property Threads : TSP_SocialSocialThreadArray index 24 read FThreads write SetThreads;
    Property UnreadMentionCount : TInt32 index 32 read FUnreadMentionCount write SetUnreadMentionCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialThread
    --------------------------------------------------------------------}
  
  TSP_SocialSocialThread = Class(TODataEntity)
  private
    FActors : TSP_SocialSocialActorArray;
    FAttributes : TInt32;
    FId : string;
    FOwnerIndex : TInt32;
    FPermalink : string;
    FPostReference : TSP_SocialSocialPostReference;
    FReplies : TSP_SocialSocialPostArray;
    FRootPost : TSP_SocialSocialPost;
    FStatus : TInt32;
    FThreadType : TInt32;
    FTotalReplyCount : TInt32;
    procedure SetActors(AIndex: Integer; 
                   const AValue: TSP_SocialSocialActorArray);
    procedure SetAttributes(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetOwnerIndex(AIndex: Integer; const AValue: TInt32);
    procedure SetPermalink(AIndex: Integer; const AValue: string);
    procedure SetPostReference(AIndex: Integer; 
                          const AValue: TSP_SocialSocialPostReference);
    procedure SetReplies(AIndex: Integer; 
                    const AValue: TSP_SocialSocialPostArray);
    procedure SetRootPost(AIndex: Integer; 
                     const AValue: TSP_SocialSocialPost);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetThreadType(AIndex: Integer; const AValue: TInt32);
    procedure SetTotalReplyCount(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Actors : TSP_SocialSocialActorArray index 0 read FActors write SetActors;
    Property Attributes : TInt32 index 8 read FAttributes write SetAttributes;
    Property Id : string index 16 read FId write SetId;
    Property OwnerIndex : TInt32 index 24 read FOwnerIndex write SetOwnerIndex;
    Property Permalink : string index 32 read FPermalink write SetPermalink;
    Property PostReference : TSP_SocialSocialPostReference index 40 read FPostReference write SetPostReference;
    Property Replies : TSP_SocialSocialPostArray index 48 read FReplies write SetReplies;
    Property RootPost : TSP_SocialSocialPost index 56 read FRootPost write SetRootPost;
    Property Status : TInt32 index 64 read FStatus write SetStatus;
    Property ThreadType : TInt32 index 72 read FThreadType write SetThreadType;
    Property TotalReplyCount : TInt32 index 80 read FTotalReplyCount write SetTotalReplyCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialPostReference
    --------------------------------------------------------------------}
  
  TSP_SocialSocialPostReference = Class(TODataEntity)
  private
    FDigest : TSP_SocialSocialThread;
    FPost : TSP_SocialSocialPost;
    FThreadId : string;
    FThreadOwnerIndex : TInt32;
    procedure SetDigest(AIndex: Integer; 
                   const AValue: TSP_SocialSocialThread);
    procedure SetPost(AIndex: Integer; const AValue: TSP_SocialSocialPost);
    procedure SetThreadId(AIndex: Integer; const AValue: string);
    procedure SetThreadOwnerIndex(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Digest : TSP_SocialSocialThread index 0 read FDigest write SetDigest;
    Property Post : TSP_SocialSocialPost index 8 read FPost write SetPost;
    Property ThreadId : string index 16 read FThreadId write SetThreadId;
    Property ThreadOwnerIndex : TInt32 index 24 read FThreadOwnerIndex write SetThreadOwnerIndex;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialPost
    --------------------------------------------------------------------}
  
  TSP_SocialSocialPost = Class(TODataEntity)
  private
    FAttachment : TSP_SocialSocialAttachment;
    FAttributes : TInt32;
    FAuthorIndex : TInt32;
    FCreatedTime : TDateTime;
    FId : string;
    FLikerInfo : TSP_SocialSocialPostActorInfo;
    FModifiedTime : TDateTime;
    FOverlays : TSP_SocialSocialDataOverlayArray;
    FPostType : TInt32;
    FPreferredImageUri : string;
    FSource : TSP_SocialSocialLink;
    FText : string;
    procedure SetAttachment(AIndex: Integer; 
                       const AValue: TSP_SocialSocialAttachment);
    procedure SetAttributes(AIndex: Integer; const AValue: TInt32);
    procedure SetAuthorIndex(AIndex: Integer; const AValue: TInt32);
    procedure SetCreatedTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetLikerInfo(AIndex: Integer; 
                      const AValue: TSP_SocialSocialPostActorInfo);
    procedure SetModifiedTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetOverlays(AIndex: Integer; 
                     const AValue: TSP_SocialSocialDataOverlayArray);
    procedure SetPostType(AIndex: Integer; const AValue: TInt32);
    procedure SetPreferredImageUri(AIndex: Integer; const AValue: string);
    procedure SetSource(AIndex: Integer; const AValue: TSP_SocialSocialLink);
    procedure SetText(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Attachment : TSP_SocialSocialAttachment index 0 read FAttachment write SetAttachment;
    Property Attributes : TInt32 index 8 read FAttributes write SetAttributes;
    Property AuthorIndex : TInt32 index 16 read FAuthorIndex write SetAuthorIndex;
    Property CreatedTime : TDateTime index 24 read FCreatedTime write SetCreatedTime;
    Property Id : string index 32 read FId write SetId;
    Property LikerInfo : TSP_SocialSocialPostActorInfo index 40 read FLikerInfo write SetLikerInfo;
    Property ModifiedTime : TDateTime index 48 read FModifiedTime write SetModifiedTime;
    Property Overlays : TSP_SocialSocialDataOverlayArray index 56 read FOverlays write SetOverlays;
    Property PostType : TInt32 index 64 read FPostType write SetPostType;
    Property PreferredImageUri : string index 72 read FPreferredImageUri write SetPreferredImageUri;
    Property Source : TSP_SocialSocialLink index 80 read FSource write SetSource;
    Property Text : string index 88 read FText write SetText;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialPostActorInfo
    --------------------------------------------------------------------}
  
  TSP_SocialSocialPostActorInfo = Class(TODataEntity)
  private
    FIncludesCurrentUser : boolean;
    FIndexes : TInt32Array;
    FTotalCount : TInt32;
    procedure SetIncludesCurrentUser(AIndex: Integer; const AValue: boolean);
    procedure SetIndexes(AIndex: Integer; const AValue: TInt32Array);
    procedure SetTotalCount(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property IncludesCurrentUser : boolean index 0 read FIncludesCurrentUser write SetIncludesCurrentUser;
    Property Indexes : TInt32Array index 8 read FIndexes write SetIndexes;
    Property TotalCount : TInt32 index 16 read FTotalCount write SetTotalCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialLink
    --------------------------------------------------------------------}
  
  TSP_SocialSocialLink = Class(TODataEntity)
  private
    FText : string;
    FUri : string;
    procedure SetText(AIndex: Integer; const AValue: string);
    procedure SetUri(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Text : string index 0 read FText write SetText;
    Property Uri : string index 8 read FUri write SetUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialPostCreationData
    --------------------------------------------------------------------}
  
  TSP_SocialSocialPostCreationData = Class(TODataEntity)
  private
    FAttachment : TSP_SocialSocialAttachment;
    FContentItems : TSP_SocialSocialDataItemArray;
    FContentText : string;
    FDefinitionData : TSP_SocialSocialPostDefinitionData;
    FSecurityUris : TStringArray;
    FSource : TSP_SocialSocialLink;
    FUpdateStatusText : boolean;
    procedure SetAttachment(AIndex: Integer; 
                       const AValue: TSP_SocialSocialAttachment);
    procedure SetContentItems(AIndex: Integer; 
                         const AValue: TSP_SocialSocialDataItemArray);
    procedure SetContentText(AIndex: Integer; const AValue: string);
    procedure SetDefinitionData(AIndex: Integer; 
                           const AValue: TSP_SocialSocialPostDefinitionData);
    procedure SetSecurityUris(AIndex: Integer; const AValue: TStringArray);
    procedure SetSource(AIndex: Integer; const AValue: TSP_SocialSocialLink);
    procedure SetUpdateStatusText(AIndex: Integer; const AValue: boolean);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Attachment : TSP_SocialSocialAttachment index 0 read FAttachment write SetAttachment;
    Property ContentItems : TSP_SocialSocialDataItemArray index 8 read FContentItems write SetContentItems;
    Property ContentText : string index 16 read FContentText write SetContentText;
    Property DefinitionData : TSP_SocialSocialPostDefinitionData index 24 read FDefinitionData write SetDefinitionData;
    Property SecurityUris : TStringArray index 32 read FSecurityUris write SetSecurityUris;
    Property Source : TSP_SocialSocialLink index 40 read FSource write SetSource;
    Property UpdateStatusText : boolean index 48 read FUpdateStatusText write SetUpdateStatusText;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialPostDefinitionData
    --------------------------------------------------------------------}
  
  TSP_SocialSocialPostDefinitionData = Class(TODataEntity)
  private
    FItems : TSP_SocialSocialPostDefinitionDataItemArray;
    FName : string;
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_SocialSocialPostDefinitionDataItemArray);
    procedure SetName(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Items : TSP_SocialSocialPostDefinitionDataItemArray index 0 read FItems write SetItems;
    Property Name : string index 8 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialPostDefinitionDataItem
    --------------------------------------------------------------------}
  
  TSP_SocialSocialPostDefinitionDataItem = Class(TODataEntity)
  private
    FAccountName : string;
    FItemType : TInt32;
    FPlaceholderName : string;
    FTagGuid : TGUIDString;
    FText : string;
    FUri : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetItemType(AIndex: Integer; const AValue: TInt32);
    procedure SetPlaceholderName(AIndex: Integer; const AValue: string);
    procedure SetTagGuid(AIndex: Integer; const AValue: TGUIDString);
    procedure SetText(AIndex: Integer; const AValue: string);
    procedure SetUri(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property ItemType : TInt32 index 8 read FItemType write SetItemType;
    Property PlaceholderName : string index 16 read FPlaceholderName write SetPlaceholderName;
    Property TagGuid : TGUIDString index 24 read FTagGuid write SetTagGuid;
    Property Text : string index 32 read FText write SetText;
    Property Uri : string index 40 read FUri write SetUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialRestPostCreationData
    --------------------------------------------------------------------}
  
  TSP_SocialSocialRestPostCreationData = Class(TODataEntity)
  private
    FID : string;
    FcreationData : TSP_SocialSocialPostCreationData;
    procedure SetID(AIndex: Integer; const AValue: string);
    procedure SetcreationData(AIndex: Integer; 
                         const AValue: TSP_SocialSocialPostCreationData);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ID : string index 0 read FID write SetID;
    Property creationData : TSP_SocialSocialPostCreationData index 8 read FcreationData write SetcreationData;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialAnnouncementManager
    --------------------------------------------------------------------}
  
  TSP_SocialSocialAnnouncementManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialFeedManager
    --------------------------------------------------------------------}
  
  TSP_SocialSocialFeedManager = Class(TODataEntity)
  private
    FOwner : TSP_SocialSocialActor;
    FPersonalSitePortalUri : string;
    procedure SetOwner(AIndex: Integer; const AValue: TSP_SocialSocialActor);
    procedure SetPersonalSitePortalUri(AIndex: Integer; 
                                  const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Owner : TSP_SocialSocialActor index 0 read FOwner write SetOwner;
    Property PersonalSitePortalUri : string index 8 read FPersonalSitePortalUri write SetPersonalSitePortalUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialFollowingManager
    --------------------------------------------------------------------}
  
  TSP_SocialSocialFollowingManager = Class(TODataEntity)
  private
    FFollowedDocumentsUri : string;
    FFollowedSitesUri : string;
    procedure SetFollowedDocumentsUri(AIndex: Integer; const AValue: string);
    procedure SetFollowedSitesUri(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FollowedDocumentsUri : string index 0 read FFollowedDocumentsUri write SetFollowedDocumentsUri;
    Property FollowedSitesUri : string index 8 read FFollowedSitesUri write SetFollowedSitesUri;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialRestActor
    --------------------------------------------------------------------}
  
  TSP_SocialSocialRestActor = Class(TODataEntity)
  private
    FFollowableItem : string;
    FFollowableItemActor : TSP_SocialSocialActor;
    FMe : TSP_SocialSocialActor;
    procedure SetFollowableItem(AIndex: Integer; const AValue: string);
    procedure SetFollowableItemActor(AIndex: Integer; 
                                const AValue: TSP_SocialSocialActor);
    procedure SetMe(AIndex: Integer; const AValue: TSP_SocialSocialActor);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FollowableItem : string index 0 read FFollowableItem write SetFollowableItem;
    Property FollowableItemActor : TSP_SocialSocialActor index 8 read FFollowableItemActor write SetFollowableItemActor;
    Property Me : TSP_SocialSocialActor index 16 read FMe write SetMe;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialRestFeedManager
    --------------------------------------------------------------------}
  
  TSP_SocialSocialRestFeedManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialRestFeed
    --------------------------------------------------------------------}
  
  TSP_SocialSocialRestFeed = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FSocialFeed : TSP_SocialSocialFeed;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetSocialFeed(AIndex: Integer; 
                       const AValue: TSP_SocialSocialFeed);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property SocialFeed : TSP_SocialSocialFeed index 8 read FSocialFeed write SetSocialFeed;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialRestFollowingManager
    --------------------------------------------------------------------}
  
  TSP_SocialSocialRestFollowingManager = Class(TODataEntity)
  private
    FFollowedDocumentsUri : string;
    FFollowedSitesUri : string;
    FMyFollowedDocumentsUri : string;
    FMyFollowedSitesUri : string;
    FSocialActor : TSP_SocialSocialActor;
    procedure SetFollowedDocumentsUri(AIndex: Integer; const AValue: string);
    procedure SetFollowedSitesUri(AIndex: Integer; const AValue: string);
    procedure SetMyFollowedDocumentsUri(AIndex: Integer; 
                                   const AValue: string);
    procedure SetMyFollowedSitesUri(AIndex: Integer; const AValue: string);
    procedure SetSocialActor(AIndex: Integer; 
                        const AValue: TSP_SocialSocialActor);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FollowedDocumentsUri : string index 0 read FFollowedDocumentsUri write SetFollowedDocumentsUri;
    Property FollowedSitesUri : string index 8 read FFollowedSitesUri write SetFollowedSitesUri;
    Property MyFollowedDocumentsUri : string index 16 read FMyFollowedDocumentsUri write SetMyFollowedDocumentsUri;
    Property MyFollowedSitesUri : string index 24 read FMyFollowedSitesUri write SetMyFollowedSitesUri;
    Property SocialActor : TSP_SocialSocialActor index 32 read FSocialActor write SetSocialActor;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Social: SocialRestThread
    --------------------------------------------------------------------}
  
  TSP_SocialSocialRestThread = Class(TODataEntity)
  private
    FID : string;
    FSocialThread : TSP_SocialSocialThread;
    procedure SetID(AIndex: Integer; const AValue: string);
    procedure SetSocialThread(AIndex: Integer; 
                         const AValue: TSP_SocialSocialThread);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ID : string index 0 read FID write SetID;
    Property SocialThread : TSP_SocialSocialThread index 8 read FSocialThread write SetSocialThread;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: FollowedItem
    --------------------------------------------------------------------}
  
  TSP_UserProfilesFollowedItem = Class(TODataEntity)
  private
    FData : TSPKeyValueArray;
    FFileType : string;
    FFileTypeProgid : string;
    FFlags : string;
    FGroupId : TGUIDString;
    FHasFeed : boolean;
    FHidden : boolean;
    FIconUrl : string;
    FItemId : TInt32;
    FItemType : TInt32;
    FListId : TGUIDString;
    FParentUrl : string;
    FPinned : TInt32;
    FServerUrlProgid : string;
    FSiteId : TGUIDString;
    FSubtype : TInt32;
    FTitle : string;
    FUniqueId : TGUIDString;
    FUrl : string;
    FWebId : TGUIDString;
    procedure SetData(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetFileType(AIndex: Integer; const AValue: string);
    procedure SetFileTypeProgid(AIndex: Integer; const AValue: string);
    procedure SetFlags(AIndex: Integer; const AValue: string);
    procedure SetGroupId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHasFeed(AIndex: Integer; const AValue: boolean);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetIconUrl(AIndex: Integer; const AValue: string);
    procedure SetItemId(AIndex: Integer; const AValue: TInt32);
    procedure SetItemType(AIndex: Integer; const AValue: TInt32);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetParentUrl(AIndex: Integer; const AValue: string);
    procedure SetPinned(AIndex: Integer; const AValue: TInt32);
    procedure SetServerUrlProgid(AIndex: Integer; const AValue: string);
    procedure SetSiteId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetSubtype(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Data : TSPKeyValueArray index 0 read FData write SetData;
    Property FileType : string index 8 read FFileType write SetFileType;
    Property FileTypeProgid : string index 16 read FFileTypeProgid write SetFileTypeProgid;
    Property Flags : string index 24 read FFlags write SetFlags;
    Property GroupId : TGUIDString index 32 read FGroupId write SetGroupId;
    Property HasFeed : boolean index 40 read FHasFeed write SetHasFeed;
    Property Hidden : boolean index 48 read FHidden write SetHidden;
    Property IconUrl : string index 56 read FIconUrl write SetIconUrl;
    Property ItemId : TInt32 index 64 read FItemId write SetItemId;
    Property ItemType : TInt32 index 72 read FItemType write SetItemType;
    Property ListId : TGUIDString index 80 read FListId write SetListId;
    Property ParentUrl : string index 88 read FParentUrl write SetParentUrl;
    Property Pinned : TInt32 index 96 read FPinned write SetPinned;
    Property ServerUrlProgid : string index 104 read FServerUrlProgid write SetServerUrlProgid;
    Property SiteId : TGUIDString index 112 read FSiteId write SetSiteId;
    Property Subtype : TInt32 index 120 read FSubtype write SetSubtype;
    Property Title : string index 128 read FTitle write SetTitle;
    Property UniqueId : TGUIDString index 136 read FUniqueId write SetUniqueId;
    Property Url : string index 144 read FUrl write SetUrl;
    Property WebId : TGUIDString index 152 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: FollowResult
    --------------------------------------------------------------------}
  
  TSP_UserProfilesFollowResult = Class(TODataEntity)
  private
    FItem : TSP_UserProfilesFollowedItem;
    FResultType : TInt32;
    procedure SetItem(AIndex: Integer; 
                 const AValue: TSP_UserProfilesFollowedItem);
    procedure SetResultType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Item : TSP_UserProfilesFollowedItem index 0 read FItem write SetItem;
    Property ResultType : TInt32 index 8 read FResultType write SetResultType;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: HashTag
    --------------------------------------------------------------------}
  
  TSP_UserProfilesHashTag = Class(TODataEntity)
  private
    FName : string;
    FUseCount : int64;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetUseCount(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
    Property UseCount : int64 index 8 read FUseCount write SetUseCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: FollowedContent
    --------------------------------------------------------------------}
  
  TSP_UserProfilesFollowedContent = Class(TODataEntity)
  private
    FFollowedDocumentsUrl : string;
    FFollowedSitesUrl : string;
    procedure SetFollowedDocumentsUrl(AIndex: Integer; const AValue: string);
    procedure SetFollowedSitesUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FollowedDocumentsUrl : string index 0 read FFollowedDocumentsUrl write SetFollowedDocumentsUrl;
    Property FollowedSitesUrl : string index 8 read FFollowedSitesUrl write SetFollowedSitesUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: FollowedItemData
    --------------------------------------------------------------------}
  
  TSP_UserProfilesFollowedItemData = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FProperties : TSPKeyValueArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Properties : TSPKeyValueArray index 8 read FProperties write SetProperties;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: HashTagCollection
    --------------------------------------------------------------------}
  
  TSP_UserProfilesHashTagCollection = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FItems : TSP_UserProfilesHashTagArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetItems(AIndex: Integer; 
                  const AValue: TSP_UserProfilesHashTagArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Items : TSP_UserProfilesHashTagArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: PeopleManager
    --------------------------------------------------------------------}
  
  TSP_UserProfilesPeopleManager = Class(TODataEntity)
  private
    FEditProfileLink : string;
    FIsMyPeopleListPublic : boolean;
    procedure SetEditProfileLink(AIndex: Integer; const AValue: string);
    procedure SetIsMyPeopleListPublic(AIndex: Integer; 
                                 const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property EditProfileLink : string index 0 read FEditProfileLink write SetEditProfileLink;
    Property IsMyPeopleListPublic : boolean index 8 read FIsMyPeopleListPublic write SetIsMyPeopleListPublic;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: PersonProperties
    --------------------------------------------------------------------}
  
  TSP_UserProfilesPersonProperties = Class(TODataEntity)
  private
    FAccountName : string;
    FDirectReports : TStringArray;
    FDisplayName : string;
    FEmail : string;
    FExtendedManagers : TStringArray;
    FExtendedReports : TStringArray;
    FIsFollowed : boolean;
    FLatestPost : string;
    FPeers : TStringArray;
    FPersonalUrl : string;
    FPictureUrl : string;
    FTitle : string;
    FUserProfileProperties : TSPKeyValueArray;
    FUserUrl : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetDirectReports(AIndex: Integer; const AValue: TStringArray);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetExtendedManagers(AIndex: Integer; 
                             const AValue: TStringArray);
    procedure SetExtendedReports(AIndex: Integer; 
                            const AValue: TStringArray);
    procedure SetIsFollowed(AIndex: Integer; const AValue: boolean);
    procedure SetLatestPost(AIndex: Integer; const AValue: string);
    procedure SetPeers(AIndex: Integer; const AValue: TStringArray);
    procedure SetPersonalUrl(AIndex: Integer; const AValue: string);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUserProfileProperties(AIndex: Integer; 
                                  const AValue: TSPKeyValueArray);
    procedure SetUserUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property DirectReports : TStringArray index 8 read FDirectReports write SetDirectReports;
    Property DisplayName : string index 16 read FDisplayName write SetDisplayName;
    Property Email : string index 24 read FEmail write SetEmail;
    Property ExtendedManagers : TStringArray index 32 read FExtendedManagers write SetExtendedManagers;
    Property ExtendedReports : TStringArray index 40 read FExtendedReports write SetExtendedReports;
    Property IsFollowed : boolean index 48 read FIsFollowed write SetIsFollowed;
    Property LatestPost : string index 56 read FLatestPost write SetLatestPost;
    Property Peers : TStringArray index 64 read FPeers write SetPeers;
    Property PersonalUrl : string index 72 read FPersonalUrl write SetPersonalUrl;
    Property PictureUrl : string index 80 read FPictureUrl write SetPictureUrl;
    Property Title : string index 88 read FTitle write SetTitle;
    Property UserProfileProperties : TSPKeyValueArray index 96 read FUserProfileProperties write SetUserProfileProperties;
    Property UserUrl : string index 104 read FUserUrl write SetUserUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: ProfileImageStore
    --------------------------------------------------------------------}
  
  TSP_UserProfilesProfileImageStore = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: ProfileLoader
    --------------------------------------------------------------------}
  
  TSP_UserProfilesProfileLoader = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: UserProfilePropertiesForUser
    --------------------------------------------------------------------}
  
  TSP_UserProfilesUserProfilePropertiesForUser = Class(TODataEntity)
  private
    FAccountName : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UserProfiles: UserProfile
    --------------------------------------------------------------------}
  
  TSP_UserProfilesUserProfile = Class(TODataEntity)
  private
    FAccountName : string;
    FDisplayName : string;
    FIsPeopleListPublic : boolean;
    FIsPrivacySettingOn : boolean;
    FIsSelf : boolean;
    FJobTitle : string;
    FMySiteFirstRunExperience : TInt32;
    FMySiteHostUrl : string;
    FO15FirstRunExperience : TInt32;
    FPersonalSiteCapabilities : TInt32;
    FPersonalSiteFirstCreationError : string;
    FPersonalSiteFirstCreationTime : TDateTime;
    FPersonalSiteInstantiationState : TInt32;
    FPersonalSiteLastCreationTime : TDateTime;
    FPersonalSiteNumberOfRetries : TInt32;
    FPictureImportEnabled : boolean;
    FPictureUrl : string;
    FPublicUrl : string;
    FSipAddress : string;
    FUrlToCreatePersonalSite : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetIsPeopleListPublic(AIndex: Integer; const AValue: boolean);
    procedure SetIsPrivacySettingOn(AIndex: Integer; const AValue: boolean);
    procedure SetIsSelf(AIndex: Integer; const AValue: boolean);
    procedure SetJobTitle(AIndex: Integer; const AValue: string);
    procedure SetMySiteFirstRunExperience(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetMySiteHostUrl(AIndex: Integer; const AValue: string);
    procedure SetO15FirstRunExperience(AIndex: Integer; 
                                  const AValue: TInt32);
    procedure SetPersonalSiteCapabilities(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetPersonalSiteFirstCreationError(AIndex: Integer; 
                                           const AValue: string);
    procedure SetPersonalSiteFirstCreationTime(AIndex: Integer; 
                                          const AValue: TDateTime);
    procedure SetPersonalSiteInstantiationState(AIndex: Integer; 
                                           const AValue: TInt32);
    procedure SetPersonalSiteLastCreationTime(AIndex: Integer; 
                                         const AValue: TDateTime);
    procedure SetPersonalSiteNumberOfRetries(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetPictureImportEnabled(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetPublicUrl(AIndex: Integer; const AValue: string);
    procedure SetSipAddress(AIndex: Integer; const AValue: string);
    procedure SetUrlToCreatePersonalSite(AIndex: Integer; 
                                    const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function FollowedContent(AService: TODataService)
                         : TSP_UserProfilesFollowedContent;
    function PersonalSite(AService: TODataService) : TSPSite;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
    Property IsPeopleListPublic : boolean index 16 read FIsPeopleListPublic write SetIsPeopleListPublic;
    Property IsPrivacySettingOn : boolean index 24 read FIsPrivacySettingOn write SetIsPrivacySettingOn;
    Property IsSelf : boolean index 32 read FIsSelf write SetIsSelf;
    Property JobTitle : string index 40 read FJobTitle write SetJobTitle;
    Property MySiteFirstRunExperience : TInt32 index 48 read FMySiteFirstRunExperience write SetMySiteFirstRunExperience;
    Property MySiteHostUrl : string index 56 read FMySiteHostUrl write SetMySiteHostUrl;
    Property O15FirstRunExperience : TInt32 index 64 read FO15FirstRunExperience write SetO15FirstRunExperience;
    Property PersonalSiteCapabilities : TInt32 index 72 read FPersonalSiteCapabilities write SetPersonalSiteCapabilities;
    Property PersonalSiteFirstCreationError : string index 80 read FPersonalSiteFirstCreationError write SetPersonalSiteFirstCreationError;
    Property PersonalSiteFirstCreationTime : TDateTime index 88 read FPersonalSiteFirstCreationTime write SetPersonalSiteFirstCreationTime;
    Property PersonalSiteInstantiationState : TInt32 index 96 read FPersonalSiteInstantiationState write SetPersonalSiteInstantiationState;
    Property PersonalSiteLastCreationTime : TDateTime index 104 read FPersonalSiteLastCreationTime write SetPersonalSiteLastCreationTime;
    Property PersonalSiteNumberOfRetries : TInt32 index 112 read FPersonalSiteNumberOfRetries write SetPersonalSiteNumberOfRetries;
    Property PictureImportEnabled : boolean index 120 read FPictureImportEnabled write SetPictureImportEnabled;
    Property PictureUrl : string index 128 read FPictureUrl write SetPictureUrl;
    Property PublicUrl : string index 136 read FPublicUrl write SetPublicUrl;
    Property SipAddress : string index 144 read FSipAddress write SetSipAddress;
    Property UrlToCreatePersonalSite : string index 152 read FUrlToCreatePersonalSite write SetUrlToCreatePersonalSite;
  end;
  
  
  { --------------------------------------------------------------------
    PS: AssignmentCreationInformation
    --------------------------------------------------------------------}
  
  TPSAssignmentCreationInformation = Class(TODataEntity)
  private
    FFinish : TDateTime;
    FId : TGUIDString;
    FNotes : string;
    FResourceId : TGUIDString;
    FStart : TDateTime;
    FTaskId : TGUIDString;
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetResourceId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetTaskId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Finish : TDateTime index 0 read FFinish write SetFinish;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Notes : string index 16 read FNotes write SetNotes;
    Property ResourceId : TGUIDString index 24 read FResourceId write SetResourceId;
    Property Start : TDateTime index 32 read FStart write SetStart;
    Property TaskId : TGUIDString index 40 read FTaskId write SetTaskId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: CalendarCreationInformation
    --------------------------------------------------------------------}
  
  TPSCalendarCreationInformation = Class(TODataEntity)
  private
    FId : TGUIDString;
    FName : string;
    FOriginalId : TGUIDString;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOriginalId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property Name : string index 8 read FName write SetName;
    Property OriginalId : TGUIDString index 16 read FOriginalId write SetOriginalId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: CalendarExceptionCreationInformation
    --------------------------------------------------------------------}
  
  TPSCalendarExceptionCreationInformation = Class(TODataEntity)
  private
    FFinish : TDateTime;
    FName : string;
    FRecurrenceDays : TInt32;
    FRecurrenceFrequency : TInt32;
    FRecurrenceMonth : TInt32;
    FRecurrenceMonthDay : TInt32;
    FRecurrenceType : TInt32;
    FRecurrenceWeek : TInt32;
    FShift1Finish : TInt32;
    FShift1Start : TInt32;
    FShift2Finish : TInt32;
    FShift2Start : TInt32;
    FShift3Finish : TInt32;
    FShift3Start : TInt32;
    FShift4Finish : TInt32;
    FShift4Start : TInt32;
    FShift5Finish : TInt32;
    FShift5Start : TInt32;
    FStart : TDateTime;
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRecurrenceDays(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceFrequency(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceMonth(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceMonthDay(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceType(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceWeek(AIndex: Integer; const AValue: TInt32);
    procedure SetShift1Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift1Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift2Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift2Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift3Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift3Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift4Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift4Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift5Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift5Start(AIndex: Integer; const AValue: TInt32);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Finish : TDateTime index 0 read FFinish write SetFinish;
    Property Name : string index 8 read FName write SetName;
    Property RecurrenceDays : TInt32 index 16 read FRecurrenceDays write SetRecurrenceDays;
    Property RecurrenceFrequency : TInt32 index 24 read FRecurrenceFrequency write SetRecurrenceFrequency;
    Property RecurrenceMonth : TInt32 index 32 read FRecurrenceMonth write SetRecurrenceMonth;
    Property RecurrenceMonthDay : TInt32 index 40 read FRecurrenceMonthDay write SetRecurrenceMonthDay;
    Property RecurrenceType : TInt32 index 48 read FRecurrenceType write SetRecurrenceType;
    Property RecurrenceWeek : TInt32 index 56 read FRecurrenceWeek write SetRecurrenceWeek;
    Property Shift1Finish : TInt32 index 64 read FShift1Finish write SetShift1Finish;
    Property Shift1Start : TInt32 index 72 read FShift1Start write SetShift1Start;
    Property Shift2Finish : TInt32 index 80 read FShift2Finish write SetShift2Finish;
    Property Shift2Start : TInt32 index 88 read FShift2Start write SetShift2Start;
    Property Shift3Finish : TInt32 index 96 read FShift3Finish write SetShift3Finish;
    Property Shift3Start : TInt32 index 104 read FShift3Start write SetShift3Start;
    Property Shift4Finish : TInt32 index 112 read FShift4Finish write SetShift4Finish;
    Property Shift4Start : TInt32 index 120 read FShift4Start write SetShift4Start;
    Property Shift5Finish : TInt32 index 128 read FShift5Finish write SetShift5Finish;
    Property Shift5Start : TInt32 index 136 read FShift5Start write SetShift5Start;
    Property Start : TDateTime index 144 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: CustomFieldCreationInformation
    --------------------------------------------------------------------}
  
  TPSCustomFieldCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FEntityTypeId : TGUIDString;
    FFieldType : TInt32;
    FFormula : string;
    FId : TGUIDString;
    FIsEditableInVisibility : boolean;
    FIsMultilineText : boolean;
    FIsRequired : boolean;
    FIsWorkflowControlled : boolean;
    FLookupAllowMultiSelect : boolean;
    FLookupDefaultValue : TGUIDString;
    FLookupTableId : TGUIDString;
    FName : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEntityTypeId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetFieldType(AIndex: Integer; const AValue: TInt32);
    procedure SetFormula(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsEditableInVisibility(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetIsMultilineText(AIndex: Integer; const AValue: boolean);
    procedure SetIsRequired(AIndex: Integer; const AValue: boolean);
    procedure SetIsWorkflowControlled(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetLookupAllowMultiSelect(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetLookupDefaultValue(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetLookupTableId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property EntityTypeId : TGUIDString index 8 read FEntityTypeId write SetEntityTypeId;
    Property FieldType : TInt32 index 16 read FFieldType write SetFieldType;
    Property Formula : string index 24 read FFormula write SetFormula;
    Property Id : TGUIDString index 32 read FId write SetId;
    Property IsEditableInVisibility : boolean index 40 read FIsEditableInVisibility write SetIsEditableInVisibility;
    Property IsMultilineText : boolean index 48 read FIsMultilineText write SetIsMultilineText;
    Property IsRequired : boolean index 56 read FIsRequired write SetIsRequired;
    Property IsWorkflowControlled : boolean index 64 read FIsWorkflowControlled write SetIsWorkflowControlled;
    Property LookupAllowMultiSelect : boolean index 72 read FLookupAllowMultiSelect write SetLookupAllowMultiSelect;
    Property LookupDefaultValue : TGUIDString index 80 read FLookupDefaultValue write SetLookupDefaultValue;
    Property LookupTableId : TGUIDString index 88 read FLookupTableId write SetLookupTableId;
    Property Name : string index 96 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EnterpriseProjectTypeCreationInformation
    --------------------------------------------------------------------}
  
  TPSEnterpriseProjectTypeCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FImageUrl : string;
    FIsDefault : boolean;
    FIsManaged : boolean;
    FName : string;
    FOrder : TInt32;
    FProjectDetailPages : TPSProjectDetailPageCreationInformationArray;
    FProjectPlanTemplateId : TGUIDString;
    FWorkflowAssociationId : TGUIDString;
    FWorkflowAssociationName : string;
    FWorkspaceTemplateName : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetIsDefault(AIndex: Integer; const AValue: boolean);
    procedure SetIsManaged(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOrder(AIndex: Integer; const AValue: TInt32);
    procedure SetProjectDetailPages(AIndex: Integer; 
                               const AValue: TPSProjectDetailPageCreationInformationArray);
    procedure SetProjectPlanTemplateId(AIndex: Integer; 
                                  const AValue: TGUIDString);
    procedure SetWorkflowAssociationId(AIndex: Integer; 
                                  const AValue: TGUIDString);
    procedure SetWorkflowAssociationName(AIndex: Integer; 
                                    const AValue: string);
    procedure SetWorkspaceTemplateName(AIndex: Integer; 
                                  const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property ImageUrl : string index 16 read FImageUrl write SetImageUrl;
    Property IsDefault : boolean index 24 read FIsDefault write SetIsDefault;
    Property IsManaged : boolean index 32 read FIsManaged write SetIsManaged;
    Property Name : string index 40 read FName write SetName;
    Property Order : TInt32 index 48 read FOrder write SetOrder;
    Property ProjectDetailPages : TPSProjectDetailPageCreationInformationArray index 56 read FProjectDetailPages write SetProjectDetailPages;
    Property ProjectPlanTemplateId : TGUIDString index 64 read FProjectPlanTemplateId write SetProjectPlanTemplateId;
    Property WorkflowAssociationId : TGUIDString index 72 read FWorkflowAssociationId write SetWorkflowAssociationId;
    Property WorkflowAssociationName : string index 80 read FWorkflowAssociationName write SetWorkflowAssociationName;
    Property WorkspaceTemplateName : string index 88 read FWorkspaceTemplateName write SetWorkspaceTemplateName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectDetailPageCreationInformation
    --------------------------------------------------------------------}
  
  TPSProjectDetailPageCreationInformation = Class(TODataEntity)
  private
    FId : TGUIDString;
    FIsCreate : boolean;
    FPosition : TInt32;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsCreate(AIndex: Integer; const AValue: boolean);
    procedure SetPosition(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property IsCreate : boolean index 8 read FIsCreate write SetIsCreate;
    Property Position : TInt32 index 16 read FPosition write SetPosition;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EnterpriseResourceCreationInformation
    --------------------------------------------------------------------}
  
  TPSEnterpriseResourceCreationInformation = Class(TODataEntity)
  private
    FId : TGUIDString;
    FIsBudget : boolean;
    FIsGeneric : boolean;
    FIsInactive : boolean;
    FName : string;
    FResourceType : TInt32;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsBudget(AIndex: Integer; const AValue: boolean);
    procedure SetIsGeneric(AIndex: Integer; const AValue: boolean);
    procedure SetIsInactive(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetResourceType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property IsBudget : boolean index 8 read FIsBudget write SetIsBudget;
    Property IsGeneric : boolean index 16 read FIsGeneric write SetIsGeneric;
    Property IsInactive : boolean index 24 read FIsInactive write SetIsInactive;
    Property Name : string index 32 read FName write SetName;
    Property ResourceType : TInt32 index 40 read FResourceType write SetResourceType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EventHandlerCreationInformation
    --------------------------------------------------------------------}
  
  TPSEventHandlerCreationInformation = Class(TODataEntity)
  private
    FAssemblyName : string;
    FCancelOnError : boolean;
    FClassName : string;
    FDescription : string;
    FEndpointUrl : string;
    FEventId : TInt32;
    FId : TGUIDString;
    FName : string;
    FOrder : TInt32;
    procedure SetAssemblyName(AIndex: Integer; const AValue: string);
    procedure SetCancelOnError(AIndex: Integer; const AValue: boolean);
    procedure SetClassName(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEndpointUrl(AIndex: Integer; const AValue: string);
    procedure SetEventId(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOrder(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AssemblyName : string index 0 read FAssemblyName write SetAssemblyName;
    Property CancelOnError : boolean index 8 read FCancelOnError write SetCancelOnError;
    Property ClassName : string index 16 read FClassName write SetClassName;
    Property Description : string index 24 read FDescription write SetDescription;
    Property EndpointUrl : string index 32 read FEndpointUrl write SetEndpointUrl;
    Property EventId : TInt32 index 40 read FEventId write SetEventId;
    Property Id : TGUIDString index 48 read FId write SetId;
    Property Name : string index 56 read FName write SetName;
    Property Order : TInt32 index 64 read FOrder write SetOrder;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupEntryCreationInformation
    --------------------------------------------------------------------}
  
  TPSLookupEntryCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FParentId : TGUIDString;
    FSortIndex : double;
    FValue : TPSLookupEntryValue;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetParentId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetSortIndex(AIndex: Integer; const AValue: double);
    procedure SetValue(AIndex: Integer; const AValue: TPSLookupEntryValue);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property ParentId : TGUIDString index 16 read FParentId write SetParentId;
    Property SortIndex : double index 24 read FSortIndex write SetSortIndex;
    Property Value : TPSLookupEntryValue index 32 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupEntryValue
    --------------------------------------------------------------------}
  
  TPSLookupEntryValue = Class(TODataEntity)
  private
    FDateValue : TDateTime;
    FDurationValue : string;
    FNumberValue : double;
    FTextValue : string;
    procedure SetDateValue(AIndex: Integer; const AValue: TDateTime);
    procedure SetDurationValue(AIndex: Integer; const AValue: string);
    procedure SetNumberValue(AIndex: Integer; const AValue: double);
    procedure SetTextValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DateValue : TDateTime index 0 read FDateValue write SetDateValue;
    Property DurationValue : string index 8 read FDurationValue write SetDurationValue;
    Property NumberValue : double index 16 read FNumberValue write SetNumberValue;
    Property TextValue : string index 24 read FTextValue write SetTextValue;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupMask
    --------------------------------------------------------------------}
  
  TPSLookupMask = Class(TODataEntity)
  private
    F_Length : TInt32;
    FMaskType : TInt32;
    FSeparator : string;
    procedure Set_Length(AIndex: Integer; const AValue: TInt32);
    procedure SetMaskType(AIndex: Integer; const AValue: TInt32);
    procedure SetSeparator(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property _Length : TInt32 index 0 read F_Length write Set_Length;
    Property MaskType : TInt32 index 8 read FMaskType write SetMaskType;
    Property Separator : string index 16 read FSeparator write SetSeparator;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupTableCreationInformation
    --------------------------------------------------------------------}
  
  TPSLookupTableCreationInformation = Class(TODataEntity)
  private
    FEntries : TPSLookupEntryCreationInformationArray;
    FId : TGUIDString;
    FMasks : TPSLookupMaskArray;
    FName : string;
    FSortOrder : TInt32;
    procedure SetEntries(AIndex: Integer; 
                    const AValue: TPSLookupEntryCreationInformationArray);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetMasks(AIndex: Integer; const AValue: TPSLookupMaskArray);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetSortOrder(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Entries : TPSLookupEntryCreationInformationArray index 0 read FEntries write SetEntries;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Masks : TPSLookupMaskArray index 16 read FMasks write SetMasks;
    Property Name : string index 24 read FName write SetName;
    Property SortOrder : TInt32 index 32 read FSortOrder write SetSortOrder;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PhaseCreationInformation
    --------------------------------------------------------------------}
  
  TPSPhaseCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FName : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Name : string index 16 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PlanAssignmentCreationInformation
    --------------------------------------------------------------------}
  
  TPSPlanAssignmentCreationInformation = Class(TODataEntity)
  private
    FBookingType : TInt32;
    FId : TGUIDString;
    FIntervals : TPSPlanAssignmentIntervalCreationInformationArray;
    FResourceId : TGUIDString;
    procedure SetBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIntervals(AIndex: Integer; 
                      const AValue: TPSPlanAssignmentIntervalCreationInformationArray);
    procedure SetResourceId(AIndex: Integer; const AValue: TGUIDString);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property BookingType : TInt32 index 0 read FBookingType write SetBookingType;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Intervals : TPSPlanAssignmentIntervalCreationInformationArray index 16 read FIntervals write SetIntervals;
    Property ResourceId : TGUIDString index 24 read FResourceId write SetResourceId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PlanAssignmentIntervalCreationInformation
    --------------------------------------------------------------------}
  
  TPSPlanAssignmentIntervalCreationInformation = Class(TODataEntity)
  private
    FDuration : string;
    FInterval : TDateTime;
    procedure SetDuration(AIndex: Integer; const AValue: string);
    procedure SetInterval(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Duration : string index 0 read FDuration write SetDuration;
    Property Interval : TDateTime index 8 read FInterval write SetInterval;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectCreationInformation
    --------------------------------------------------------------------}
  
  TPSProjectCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FEnterpriseProjectTypeId : TGUIDString;
    FId : TGUIDString;
    FListId : TGUIDString;
    FName : string;
    FStart : TDateTime;
    FWebId : TGUIDString;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEnterpriseProjectTypeId(AIndex: Integer; 
                                    const AValue: TGUIDString);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property EnterpriseProjectTypeId : TGUIDString index 8 read FEnterpriseProjectTypeId write SetEnterpriseProjectTypeId;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property ListId : TGUIDString index 24 read FListId write SetListId;
    Property Name : string index 32 read FName write SetName;
    Property Start : TDateTime index 40 read FStart write SetStart;
    Property WebId : TGUIDString index 48 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectResourceCreationInformation
    --------------------------------------------------------------------}
  
  TPSProjectResourceCreationInformation = Class(TODataEntity)
  private
    FAccount : string;
    FEmail : string;
    FId : TGUIDString;
    FName : string;
    FNotes : string;
    procedure SetAccount(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNotes(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Account : string index 0 read FAccount write SetAccount;
    Property Email : string index 8 read FEmail write SetEmail;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property Name : string index 24 read FName write SetName;
    Property Notes : string index 32 read FNotes write SetNotes;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StageCreationInformation
    --------------------------------------------------------------------}
  
  TPSStageCreationInformation = Class(TODataEntity)
  private
    FBehavior : TInt32;
    FCheckInRequired : boolean;
    FCustomFields : TPSStageCustomFieldCreationInformationArray;
    FDescription : string;
    FId : TGUIDString;
    FName : string;
    FPhaseId : TGUIDString;
    FProjectDetailPages : TPSStageDetailPageCreationInformationArray;
    FSubmitDescription : string;
    FWorkflowStatusPageId : TGUIDString;
    procedure SetBehavior(AIndex: Integer; const AValue: TInt32);
    procedure SetCheckInRequired(AIndex: Integer; const AValue: boolean);
    procedure SetCustomFields(AIndex: Integer; 
                         const AValue: TPSStageCustomFieldCreationInformationArray);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPhaseId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetProjectDetailPages(AIndex: Integer; 
                               const AValue: TPSStageDetailPageCreationInformationArray);
    procedure SetSubmitDescription(AIndex: Integer; const AValue: string);
    procedure SetWorkflowStatusPageId(AIndex: Integer; 
                                 const AValue: TGUIDString);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Behavior : TInt32 index 0 read FBehavior write SetBehavior;
    Property CheckInRequired : boolean index 8 read FCheckInRequired write SetCheckInRequired;
    Property CustomFields : TPSStageCustomFieldCreationInformationArray index 16 read FCustomFields write SetCustomFields;
    Property Description : string index 24 read FDescription write SetDescription;
    Property Id : TGUIDString index 32 read FId write SetId;
    Property Name : string index 40 read FName write SetName;
    Property PhaseId : TGUIDString index 48 read FPhaseId write SetPhaseId;
    Property ProjectDetailPages : TPSStageDetailPageCreationInformationArray index 56 read FProjectDetailPages write SetProjectDetailPages;
    Property SubmitDescription : string index 64 read FSubmitDescription write SetSubmitDescription;
    Property WorkflowStatusPageId : TGUIDString index 72 read FWorkflowStatusPageId write SetWorkflowStatusPageId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StageCustomFieldCreationInformation
    --------------------------------------------------------------------}
  
  TPSStageCustomFieldCreationInformation = Class(TODataEntity)
  private
    FId : TGUIDString;
    FReadOnly : boolean;
    FRequired : boolean;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetRequired(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property ReadOnly : boolean index 8 read FReadOnly write SetReadOnly;
    Property Required : boolean index 16 read FRequired write SetRequired;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StageDetailPageCreationInformation
    --------------------------------------------------------------------}
  
  TPSStageDetailPageCreationInformation = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FPosition : TInt32;
    FRequiresAttention : boolean;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPosition(AIndex: Integer; const AValue: TInt32);
    procedure SetRequiresAttention(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Position : TInt32 index 16 read FPosition write SetPosition;
    Property RequiresAttention : boolean index 24 read FRequiresAttention write SetRequiresAttention;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StatusAssignmentCreationInformation
    --------------------------------------------------------------------}
  
  TPSStatusAssignmentCreationInformation = Class(TODataEntity)
  private
    FComment : string;
    FId : TGUIDString;
    FProjectId : TGUIDString;
    FTask : TPSStatusTaskCreationInformation;
    procedure SetComment(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetProjectId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTask(AIndex: Integer; 
                 const AValue: TPSStatusTaskCreationInformation);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Comment : string index 0 read FComment write SetComment;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property ProjectId : TGUIDString index 16 read FProjectId write SetProjectId;
    Property Task : TPSStatusTaskCreationInformation index 24 read FTask write SetTask;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StatusTaskCreationInformation
    --------------------------------------------------------------------}
  
  TPSStatusTaskCreationInformation = Class(TODataEntity)
  private
    FFinish : TDateTime;
    FId : TGUIDString;
    FName : string;
    FParentId : TGUIDString;
    FStart : TDateTime;
    FWork : string;
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetParentId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetWork(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Finish : TDateTime index 0 read FFinish write SetFinish;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Name : string index 16 read FName write SetName;
    Property ParentId : TGUIDString index 24 read FParentId write SetParentId;
    Property Start : TDateTime index 32 read FStart write SetStart;
    Property Work : string index 40 read FWork write SetWork;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TaskCreationInformation
    --------------------------------------------------------------------}
  
  TPSTaskCreationInformation = Class(TODataEntity)
  private
    FAddAfterId : TGUIDString;
    FDuration : string;
    FFinish : TDateTime;
    FId : TGUIDString;
    FIsManual : boolean;
    FName : string;
    FNotes : string;
    FParentId : TGUIDString;
    FStart : TDateTime;
    procedure SetAddAfterId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetDuration(AIndex: Integer; const AValue: string);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsManual(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetParentId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AddAfterId : TGUIDString index 0 read FAddAfterId write SetAddAfterId;
    Property Duration : string index 8 read FDuration write SetDuration;
    Property Finish : TDateTime index 16 read FFinish write SetFinish;
    Property Id : TGUIDString index 24 read FId write SetId;
    Property IsManual : boolean index 32 read FIsManual write SetIsManual;
    Property Name : string index 40 read FName write SetName;
    Property Notes : string index 48 read FNotes write SetNotes;
    Property ParentId : TGUIDString index 56 read FParentId write SetParentId;
    Property Start : TDateTime index 64 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TaskLinkCreationInformation
    --------------------------------------------------------------------}
  
  TPSTaskLinkCreationInformation = Class(TODataEntity)
  private
    FDependencyType : TInt32;
    FEndId : TGUIDString;
    FId : TGUIDString;
    FStartId : TGUIDString;
    procedure SetDependencyType(AIndex: Integer; const AValue: TInt32);
    procedure SetEndId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStartId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DependencyType : TInt32 index 0 read FDependencyType write SetDependencyType;
    Property EndId : TGUIDString index 8 read FEndId write SetEndId;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property StartId : TGUIDString index 24 read FStartId write SetStartId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimeSheetLineCreationInformation
    --------------------------------------------------------------------}
  
  TPSTimeSheetLineCreationInformation = Class(TODataEntity)
  private
    FAssignmentId : TGUIDString;
    FComment : string;
    FId : TGUIDString;
    FLineClass : TInt32;
    FProjectId : TGUIDString;
    FTaskName : string;
    procedure SetAssignmentId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetComment(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLineClass(AIndex: Integer; const AValue: TInt32);
    procedure SetProjectId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTaskName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AssignmentId : TGUIDString index 0 read FAssignmentId write SetAssignmentId;
    Property Comment : string index 8 read FComment write SetComment;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property LineClass : TInt32 index 24 read FLineClass write SetLineClass;
    Property ProjectId : TGUIDString index 32 read FProjectId write SetProjectId;
    Property TaskName : string index 40 read FTaskName write SetTaskName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimeSheetWorkCreationInformation
    --------------------------------------------------------------------}
  
  TPSTimeSheetWorkCreationInformation = Class(TODataEntity)
  private
    FActualWork : string;
    FComment : string;
    F_End : TDateTime;
    FNonBillableOvertimeWork : string;
    FNonBillableWork : string;
    FOvertimeWork : string;
    FPlannedWork : string;
    FStart : TDateTime;
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetComment(AIndex: Integer; const AValue: string);
    procedure Set_End(AIndex: Integer; const AValue: TDateTime);
    procedure SetNonBillableOvertimeWork(AIndex: Integer; 
                                    const AValue: string);
    procedure SetNonBillableWork(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetPlannedWork(AIndex: Integer; const AValue: string);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property ActualWork : string index 0 read FActualWork write SetActualWork;
    Property Comment : string index 8 read FComment write SetComment;
    Property _End : TDateTime index 16 read F_End write Set_End;
    Property NonBillableOvertimeWork : string index 24 read FNonBillableOvertimeWork write SetNonBillableOvertimeWork;
    Property NonBillableWork : string index 32 read FNonBillableWork write SetNonBillableWork;
    Property OvertimeWork : string index 40 read FOvertimeWork write SetOvertimeWork;
    Property PlannedWork : string index 48 read FPlannedWork write SetPlannedWork;
    Property Start : TDateTime index 56 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EntityType
    --------------------------------------------------------------------}
  
  TPSEntityType = Class(TODataEntity)
  private
    FName : string;
    FID : TGUIDString;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
    Property ID : TGUIDString index 8 read FID write SetID;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupTables
    --------------------------------------------------------------------}
  
  TPSLookupTables = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Assignment
    --------------------------------------------------------------------}
  
  TPSAssignment = Class(TODataEntity)
  private
    FActualCostWorkPerformed : Double;
    FActualOvertimeCost : Double;
    FBaselineCost : Double;
    FBaselineCostPerUse : Double;
    FBaselineFinish : TDateTime;
    FBaselineStart : TDateTime;
    FBaselineWork : string;
    FBaselineWorkMilliseconds : TInt32;
    FBaselineWorkTimeSpan : TTime;
    FBudgetedCostWorkPerformed : Double;
    FBudgetedCostWorkScheduled : Double;
    FCostVariance : Double;
    FCostVarianceAtCompletion : Double;
    FCreated : TDateTime;
    FCurrentCostVariance : Double;
    FFinishVariance : string;
    FFinishVarianceMilliseconds : TInt32;
    FFinishVarianceTimeSpan : TTime;
    FId : TGUIDString;
    FIsConfirmed : boolean;
    FIsOverAllocated : boolean;
    FIsPublished : boolean;
    FIsResponsePending : boolean;
    FIsUpdateNeeded : boolean;
    FLevelingDelay : string;
    FLevelingDelayMilliseconds : TInt32;
    FLevelingDelayTimeSpan : TTime;
    FModified : TDateTime;
    FOvertimeCost : Double;
    FRemainingCost : Double;
    FRemainingOvertimeCost : Double;
    FResume : TDateTime;
    FScheduleCostVariance : Double;
    FStart : TDateTime;
    FStartVariance : string;
    FStartVarianceMilliseconds : TInt32;
    FStartVarianceTimeSpan : TTime;
    FStop : TDateTime;
    FWorkVariance : string;
    FWorkVarianceMilliseconds : TInt32;
    FWorkVarianceTimeSpan : TTime;
    procedure SetActualCostWorkPerformed(AIndex: Integer; 
                                    const AValue: Double);
    procedure SetActualOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetBaselineCost(AIndex: Integer; const AValue: Double);
    procedure SetBaselineCostPerUse(AIndex: Integer; const AValue: Double);
    procedure SetBaselineFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetBaselineStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetBaselineWork(AIndex: Integer; const AValue: string);
    procedure SetBaselineWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetBaselineWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetBudgetedCostWorkPerformed(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetBudgetedCostWorkScheduled(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetCostVarianceAtCompletion(AIndex: Integer; 
                                     const AValue: Double);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetCurrentCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetFinishVariance(AIndex: Integer; const AValue: string);
    procedure SetFinishVarianceMilliseconds(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetFinishVarianceTimeSpan(AIndex: Integer; 
                                   const AValue: TTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsConfirmed(AIndex: Integer; const AValue: boolean);
    procedure SetIsOverAllocated(AIndex: Integer; const AValue: boolean);
    procedure SetIsPublished(AIndex: Integer; const AValue: boolean);
    procedure SetIsResponsePending(AIndex: Integer; const AValue: boolean);
    procedure SetIsUpdateNeeded(AIndex: Integer; const AValue: boolean);
    procedure SetLevelingDelay(AIndex: Integer; const AValue: string);
    procedure SetLevelingDelayMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetLevelingDelayTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetRemainingCost(AIndex: Integer; const AValue: Double);
    procedure SetRemainingOvertimeCost(AIndex: Integer; 
                                  const AValue: Double);
    procedure SetResume(AIndex: Integer; const AValue: TDateTime);
    procedure SetScheduleCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetStartVariance(AIndex: Integer; const AValue: string);
    procedure SetStartVarianceMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetStartVarianceTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetStop(AIndex: Integer; const AValue: TDateTime);
    procedure SetWorkVariance(AIndex: Integer; const AValue: string);
    procedure SetWorkVarianceMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetWorkVarianceTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomFields(AService: TODataService) : TPSCustomField;
  published
    Property ActualCostWorkPerformed : Double index 0 read FActualCostWorkPerformed write SetActualCostWorkPerformed;
    Property ActualOvertimeCost : Double index 8 read FActualOvertimeCost write SetActualOvertimeCost;
    Property BaselineCost : Double index 16 read FBaselineCost write SetBaselineCost;
    Property BaselineCostPerUse : Double index 24 read FBaselineCostPerUse write SetBaselineCostPerUse;
    Property BaselineFinish : TDateTime index 32 read FBaselineFinish write SetBaselineFinish;
    Property BaselineStart : TDateTime index 40 read FBaselineStart write SetBaselineStart;
    Property BaselineWork : string index 48 read FBaselineWork write SetBaselineWork;
    Property BaselineWorkMilliseconds : TInt32 index 56 read FBaselineWorkMilliseconds write SetBaselineWorkMilliseconds;
    Property BaselineWorkTimeSpan : TTime index 64 read FBaselineWorkTimeSpan write SetBaselineWorkTimeSpan;
    Property BudgetedCostWorkPerformed : Double index 72 read FBudgetedCostWorkPerformed write SetBudgetedCostWorkPerformed;
    Property BudgetedCostWorkScheduled : Double index 80 read FBudgetedCostWorkScheduled write SetBudgetedCostWorkScheduled;
    Property CostVariance : Double index 88 read FCostVariance write SetCostVariance;
    Property CostVarianceAtCompletion : Double index 96 read FCostVarianceAtCompletion write SetCostVarianceAtCompletion;
    Property Created : TDateTime index 104 read FCreated write SetCreated;
    Property CurrentCostVariance : Double index 112 read FCurrentCostVariance write SetCurrentCostVariance;
    Property FinishVariance : string index 120 read FFinishVariance write SetFinishVariance;
    Property FinishVarianceMilliseconds : TInt32 index 128 read FFinishVarianceMilliseconds write SetFinishVarianceMilliseconds;
    Property FinishVarianceTimeSpan : TTime index 136 read FFinishVarianceTimeSpan write SetFinishVarianceTimeSpan;
    Property Id : TGUIDString index 144 read FId write SetId;
    Property IsConfirmed : boolean index 152 read FIsConfirmed write SetIsConfirmed;
    Property IsOverAllocated : boolean index 160 read FIsOverAllocated write SetIsOverAllocated;
    Property IsPublished : boolean index 168 read FIsPublished write SetIsPublished;
    Property IsResponsePending : boolean index 176 read FIsResponsePending write SetIsResponsePending;
    Property IsUpdateNeeded : boolean index 184 read FIsUpdateNeeded write SetIsUpdateNeeded;
    Property LevelingDelay : string index 192 read FLevelingDelay write SetLevelingDelay;
    Property LevelingDelayMilliseconds : TInt32 index 200 read FLevelingDelayMilliseconds write SetLevelingDelayMilliseconds;
    Property LevelingDelayTimeSpan : TTime index 208 read FLevelingDelayTimeSpan write SetLevelingDelayTimeSpan;
    Property Modified : TDateTime index 216 read FModified write SetModified;
    Property OvertimeCost : Double index 224 read FOvertimeCost write SetOvertimeCost;
    Property RemainingCost : Double index 232 read FRemainingCost write SetRemainingCost;
    Property RemainingOvertimeCost : Double index 240 read FRemainingOvertimeCost write SetRemainingOvertimeCost;
    Property Resume : TDateTime index 248 read FResume write SetResume;
    Property ScheduleCostVariance : Double index 256 read FScheduleCostVariance write SetScheduleCostVariance;
    Property Start : TDateTime index 264 read FStart write SetStart;
    Property StartVariance : string index 272 read FStartVariance write SetStartVariance;
    Property StartVarianceMilliseconds : TInt32 index 280 read FStartVarianceMilliseconds write SetStartVarianceMilliseconds;
    Property StartVarianceTimeSpan : TTime index 288 read FStartVarianceTimeSpan write SetStartVarianceTimeSpan;
    Property Stop : TDateTime index 296 read FStop write SetStop;
    Property WorkVariance : string index 304 read FWorkVariance write SetWorkVariance;
    Property WorkVarianceMilliseconds : TInt32 index 312 read FWorkVarianceMilliseconds write SetWorkVarianceMilliseconds;
    Property WorkVarianceTimeSpan : TTime index 320 read FWorkVarianceTimeSpan write SetWorkVarianceTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: CustomField
    --------------------------------------------------------------------}
  
  TPSCustomField = Class(TODataEntity)
  private
    FAppAlternateId : TGUIDString;
    FDescription : string;
    FEntityTypeId : TGUIDString;
    FFieldType : TInt32;
    FFormula : string;
    FId : TGUIDString;
    FInternalName : string;
    FIsEditableInVisibility : boolean;
    FIsMultilineText : boolean;
    FIsRequired : boolean;
    FIsWorkflowControlled : boolean;
    FLookupAllowMultiSelect : boolean;
    FLookupDefaultValue : TGUIDString;
    FLookupTableId : TGUIDString;
    FName : string;
    FRollsDownToAssignments : boolean;
    FRollupType : TInt32;
    procedure SetAppAlternateId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEntityTypeId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetFieldType(AIndex: Integer; const AValue: TInt32);
    procedure SetFormula(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInternalName(AIndex: Integer; const AValue: string);
    procedure SetIsEditableInVisibility(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetIsMultilineText(AIndex: Integer; const AValue: boolean);
    procedure SetIsRequired(AIndex: Integer; const AValue: boolean);
    procedure SetIsWorkflowControlled(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetLookupAllowMultiSelect(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetLookupDefaultValue(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetLookupTableId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRollsDownToAssignments(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetRollupType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function EntityType(AService: TODataService) : TPSEntityType;
    function LookupEntries(AService: TODataService) : TPSLookupEntry;
    function LookupTable(AService: TODataService) : TPSLookupTable;
  published
    Property AppAlternateId : TGUIDString index 0 read FAppAlternateId write SetAppAlternateId;
    Property Description : string index 8 read FDescription write SetDescription;
    Property EntityTypeId : TGUIDString index 16 read FEntityTypeId write SetEntityTypeId;
    Property FieldType : TInt32 index 24 read FFieldType write SetFieldType;
    Property Formula : string index 32 read FFormula write SetFormula;
    Property Id : TGUIDString index 40 read FId write SetId;
    Property InternalName : string index 48 read FInternalName write SetInternalName;
    Property IsEditableInVisibility : boolean index 56 read FIsEditableInVisibility write SetIsEditableInVisibility;
    Property IsMultilineText : boolean index 64 read FIsMultilineText write SetIsMultilineText;
    Property IsRequired : boolean index 72 read FIsRequired write SetIsRequired;
    Property IsWorkflowControlled : boolean index 80 read FIsWorkflowControlled write SetIsWorkflowControlled;
    Property LookupAllowMultiSelect : boolean index 88 read FLookupAllowMultiSelect write SetLookupAllowMultiSelect;
    Property LookupDefaultValue : TGUIDString index 96 read FLookupDefaultValue write SetLookupDefaultValue;
    Property LookupTableId : TGUIDString index 104 read FLookupTableId write SetLookupTableId;
    Property Name : string index 112 read FName write SetName;
    Property RollsDownToAssignments : boolean index 120 read FRollsDownToAssignments write SetRollsDownToAssignments;
    Property RollupType : TInt32 index 128 read FRollupType write SetRollupType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupEntry
    --------------------------------------------------------------------}
  
  TPSLookupEntry = Class(TODataEntity)
  private
    FAppAlternateId : TGUIDString;
    FDescription : string;
    FFullValue : string;
    FId : TGUIDString;
    FInternalName : string;
    FSortIndex : double;
    procedure SetAppAlternateId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetFullValue(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInternalName(AIndex: Integer; const AValue: string);
    procedure SetSortIndex(AIndex: Integer; const AValue: double);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AppAlternateId : TGUIDString index 0 read FAppAlternateId write SetAppAlternateId;
    Property Description : string index 8 read FDescription write SetDescription;
    Property FullValue : string index 16 read FFullValue write SetFullValue;
    Property Id : TGUIDString index 24 read FId write SetId;
    Property InternalName : string index 32 read FInternalName write SetInternalName;
    Property SortIndex : double index 40 read FSortIndex write SetSortIndex;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupTable
    --------------------------------------------------------------------}
  
  TPSLookupTable = Class(TODataEntity)
  private
    FAppAlternateId : TGUIDString;
    FFieldType : TInt32;
    FId : TGUIDString;
    FMasks : TPSLookupMaskArray;
    FName : string;
    FSortOrder : TInt32;
    procedure SetAppAlternateId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetFieldType(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetMasks(AIndex: Integer; const AValue: TPSLookupMaskArray);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetSortOrder(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Entries(AService: TODataService) : TPSLookupEntry;
  published
    Property AppAlternateId : TGUIDString index 0 read FAppAlternateId write SetAppAlternateId;
    Property FieldType : TInt32 index 8 read FFieldType write SetFieldType;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property Masks : TPSLookupMaskArray index 24 read FMasks write SetMasks;
    Property Name : string index 32 read FName write SetName;
    Property SortOrder : TInt32 index 40 read FSortOrder write SetSortOrder;
  end;
  
  
  { --------------------------------------------------------------------
    PS: CalendarException
    --------------------------------------------------------------------}
  
  TPSCalendarException = Class(TODataEntity)
  private
    FFinish : TDateTime;
    FId : TInt32;
    FName : string;
    FRecurrenceDays : TInt32;
    FRecurrenceFrequency : TInt32;
    FRecurrenceMonth : TInt32;
    FRecurrenceMonthDay : TInt32;
    FRecurrenceType : TInt32;
    FRecurrenceWeek : TInt32;
    FShift1Finish : TInt32;
    FShift1Start : TInt32;
    FShift2Finish : TInt32;
    FShift2Start : TInt32;
    FShift3Finish : TInt32;
    FShift3Start : TInt32;
    FShift4Finish : TInt32;
    FShift4Start : TInt32;
    FShift5Finish : TInt32;
    FShift5Start : TInt32;
    FStart : TDateTime;
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRecurrenceDays(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceFrequency(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceMonth(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceMonthDay(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceType(AIndex: Integer; const AValue: TInt32);
    procedure SetRecurrenceWeek(AIndex: Integer; const AValue: TInt32);
    procedure SetShift1Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift1Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift2Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift2Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift3Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift3Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift4Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift4Start(AIndex: Integer; const AValue: TInt32);
    procedure SetShift5Finish(AIndex: Integer; const AValue: TInt32);
    procedure SetShift5Start(AIndex: Integer; const AValue: TInt32);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Calendar(AService: TODataService) : TPSCalendar;
  published
    Property Finish : TDateTime index 0 read FFinish write SetFinish;
    Property Id : TInt32 index 8 read FId write SetId;
    Property Name : string index 16 read FName write SetName;
    Property RecurrenceDays : TInt32 index 24 read FRecurrenceDays write SetRecurrenceDays;
    Property RecurrenceFrequency : TInt32 index 32 read FRecurrenceFrequency write SetRecurrenceFrequency;
    Property RecurrenceMonth : TInt32 index 40 read FRecurrenceMonth write SetRecurrenceMonth;
    Property RecurrenceMonthDay : TInt32 index 48 read FRecurrenceMonthDay write SetRecurrenceMonthDay;
    Property RecurrenceType : TInt32 index 56 read FRecurrenceType write SetRecurrenceType;
    Property RecurrenceWeek : TInt32 index 64 read FRecurrenceWeek write SetRecurrenceWeek;
    Property Shift1Finish : TInt32 index 72 read FShift1Finish write SetShift1Finish;
    Property Shift1Start : TInt32 index 80 read FShift1Start write SetShift1Start;
    Property Shift2Finish : TInt32 index 88 read FShift2Finish write SetShift2Finish;
    Property Shift2Start : TInt32 index 96 read FShift2Start write SetShift2Start;
    Property Shift3Finish : TInt32 index 104 read FShift3Finish write SetShift3Finish;
    Property Shift3Start : TInt32 index 112 read FShift3Start write SetShift3Start;
    Property Shift4Finish : TInt32 index 120 read FShift4Finish write SetShift4Finish;
    Property Shift4Start : TInt32 index 128 read FShift4Start write SetShift4Start;
    Property Shift5Finish : TInt32 index 136 read FShift5Finish write SetShift5Finish;
    Property Shift5Start : TInt32 index 144 read FShift5Start write SetShift5Start;
    Property Start : TDateTime index 152 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Calendar
    --------------------------------------------------------------------}
  
  TPSCalendar = Class(TODataEntity)
  private
    FCreated : TDateTime;
    FId : TGUIDString;
    FIsStandardCalendar : boolean;
    FModified : TDateTime;
    FName : string;
    FOriginalId : TGUIDString;
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsStandardCalendar(AIndex: Integer; const AValue: boolean);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOriginalId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function BaseCalendarExceptions(AService: TODataService)
                                : TPSCalendarException;
  published
    Property Created : TDateTime index 0 read FCreated write SetCreated;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property IsStandardCalendar : boolean index 16 read FIsStandardCalendar write SetIsStandardCalendar;
    Property Modified : TDateTime index 24 read FModified write SetModified;
    Property Name : string index 32 read FName write SetName;
    Property OriginalId : TGUIDString index 40 read FOriginalId write SetOriginalId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: BaseCalendarException
    --------------------------------------------------------------------}
  
  TPSBaseCalendarException = Class(TPSCalendarException)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    PS: DraftAssignment
    --------------------------------------------------------------------}
  
  TPSDraftAssignment = Class(TPSAssignment)
  private
    FActualCost : Double;
    FActualFinish : TDateTime;
    FActualOvertimeWork : string;
    FActualOvertimeWorkMilliseconds : TInt32;
    FActualOvertimeWorkTimeSpan : TTime;
    FActualStart : TDateTime;
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FBudgetedCost : Double;
    FBudgetedWork : string;
    FBudgetedWorkMilliseconds : TInt32;
    FBudgetedWorkTimeSpan : TTime;
    FCost : Double;
    FDefaultBookingType : TInt32;
    FDelay : string;
    FDelayMilliseconds : TInt32;
    FDelayTimeSpan : TTime;
    FFinish : TDateTime;
    FIsLockedByManager : boolean;
    FIsWorkResource : boolean;
    FNotes : string;
    FOvertimeWork : string;
    FOvertimeWorkMilliseconds : TInt32;
    FOvertimeWorkTimeSpan : TTime;
    FPercentWorkComplete : TInt32;
    FRegularWork : string;
    FRegularWorkMilliseconds : TInt32;
    FRegularWorkTimeSpan : TTime;
    FRemainingOvertimeWork : string;
    FRemainingOvertimeWorkMilliseconds : TInt32;
    FRemainingOvertimeWorkTimeSpan : TTime;
    FRemainingWork : string;
    FRemainingWorkMilliseconds : TInt32;
    FRemainingWorkTimeSpan : TTime;
    FResourceCapacity : Double;
    FResourceId : TGUIDString;
    FTaskId : TGUIDString;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    procedure SetActualCost(AIndex: Integer; const AValue: Double);
    procedure SetActualFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetActualOvertimeWorkMilliseconds(AIndex: Integer; 
                                           const AValue: TInt32);
    procedure SetActualOvertimeWorkTimeSpan(AIndex: Integer; 
                                       const AValue: TTime);
    procedure SetActualStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetBudgetedCost(AIndex: Integer; const AValue: Double);
    procedure SetBudgetedWork(AIndex: Integer; const AValue: string);
    procedure SetBudgetedWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetBudgetedWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetCost(AIndex: Integer; const AValue: Double);
    procedure SetDefaultBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetDelay(AIndex: Integer; const AValue: string);
    procedure SetDelayMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetDelayTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetIsLockedByManager(AIndex: Integer; const AValue: boolean);
    procedure SetIsWorkResource(AIndex: Integer; const AValue: boolean);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetRegularWork(AIndex: Integer; const AValue: string);
    procedure SetRegularWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetRemainingOvertimeWork(AIndex: Integer; 
                                  const AValue: string);
    procedure SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; 
                                              const AValue: TInt32);
    procedure SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; 
                                          const AValue: TTime);
    procedure SetRemainingWork(AIndex: Integer; const AValue: string);
    procedure SetRemainingWorkMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetResourceCapacity(AIndex: Integer; const AValue: Double);
    procedure SetResourceId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTaskId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function Owner(AService: TODataService) : TSPUser;
    function Parent(AService: TODataService) : TPSDraftAssignment;
    function Resource(AService: TODataService) : TPSDraftProjectResource;
    function Task(AService: TODataService) : TPSDraftTask;
  published
    Property ActualCost : Double index 328 read FActualCost write SetActualCost;
    Property ActualFinish : TDateTime index 336 read FActualFinish write SetActualFinish;
    Property ActualOvertimeWork : string index 344 read FActualOvertimeWork write SetActualOvertimeWork;
    Property ActualOvertimeWorkMilliseconds : TInt32 index 352 read FActualOvertimeWorkMilliseconds write SetActualOvertimeWorkMilliseconds;
    Property ActualOvertimeWorkTimeSpan : TTime index 360 read FActualOvertimeWorkTimeSpan write SetActualOvertimeWorkTimeSpan;
    Property ActualStart : TDateTime index 368 read FActualStart write SetActualStart;
    Property ActualWork : string index 376 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 384 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 392 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property BudgetedCost : Double index 400 read FBudgetedCost write SetBudgetedCost;
    Property BudgetedWork : string index 408 read FBudgetedWork write SetBudgetedWork;
    Property BudgetedWorkMilliseconds : TInt32 index 416 read FBudgetedWorkMilliseconds write SetBudgetedWorkMilliseconds;
    Property BudgetedWorkTimeSpan : TTime index 424 read FBudgetedWorkTimeSpan write SetBudgetedWorkTimeSpan;
    Property Cost : Double index 432 read FCost write SetCost;
    Property DefaultBookingType : TInt32 index 440 read FDefaultBookingType write SetDefaultBookingType;
    Property Delay : string index 448 read FDelay write SetDelay;
    Property DelayMilliseconds : TInt32 index 456 read FDelayMilliseconds write SetDelayMilliseconds;
    Property DelayTimeSpan : TTime index 464 read FDelayTimeSpan write SetDelayTimeSpan;
    Property Finish : TDateTime index 472 read FFinish write SetFinish;
    Property IsLockedByManager : boolean index 480 read FIsLockedByManager write SetIsLockedByManager;
    Property IsWorkResource : boolean index 488 read FIsWorkResource write SetIsWorkResource;
    Property Notes : string index 496 read FNotes write SetNotes;
    Property OvertimeWork : string index 504 read FOvertimeWork write SetOvertimeWork;
    Property OvertimeWorkMilliseconds : TInt32 index 512 read FOvertimeWorkMilliseconds write SetOvertimeWorkMilliseconds;
    Property OvertimeWorkTimeSpan : TTime index 520 read FOvertimeWorkTimeSpan write SetOvertimeWorkTimeSpan;
    Property PercentWorkComplete : TInt32 index 528 read FPercentWorkComplete write SetPercentWorkComplete;
    Property RegularWork : string index 536 read FRegularWork write SetRegularWork;
    Property RegularWorkMilliseconds : TInt32 index 544 read FRegularWorkMilliseconds write SetRegularWorkMilliseconds;
    Property RegularWorkTimeSpan : TTime index 552 read FRegularWorkTimeSpan write SetRegularWorkTimeSpan;
    Property RemainingOvertimeWork : string index 560 read FRemainingOvertimeWork write SetRemainingOvertimeWork;
    Property RemainingOvertimeWorkMilliseconds : TInt32 index 568 read FRemainingOvertimeWorkMilliseconds write SetRemainingOvertimeWorkMilliseconds;
    Property RemainingOvertimeWorkTimeSpan : TTime index 576 read FRemainingOvertimeWorkTimeSpan write SetRemainingOvertimeWorkTimeSpan;
    Property RemainingWork : string index 584 read FRemainingWork write SetRemainingWork;
    Property RemainingWorkMilliseconds : TInt32 index 592 read FRemainingWorkMilliseconds write SetRemainingWorkMilliseconds;
    Property RemainingWorkTimeSpan : TTime index 600 read FRemainingWorkTimeSpan write SetRemainingWorkTimeSpan;
    Property ResourceCapacity : Double index 608 read FResourceCapacity write SetResourceCapacity;
    Property ResourceId : TGUIDString index 616 read FResourceId write SetResourceId;
    Property TaskId : TGUIDString index 624 read FTaskId write SetTaskId;
    Property Work : string index 632 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 640 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 648 read FWorkTimeSpan write SetWorkTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectResource
    --------------------------------------------------------------------}
  
  TPSProjectResource = Class(TODataEntity)
  private
    FActualCost : Double;
    FActualCostWorkPerformed : string;
    FActualCostWorkPerformedMilliseconds : TInt32;
    FActualCostWorkPerformedTimeSpan : TTime;
    FActualOvertimeCost : Double;
    FActualOvertimeWork : string;
    FActualOvertimeWorkMilliseconds : TInt32;
    FActualOvertimeWorkTimeSpan : TTime;
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FAvailableFrom : TDateTime;
    FAvailableTo : TDateTime;
    FBaselineCost : Double;
    FBaselineWork : string;
    FBaselineWorkMilliseconds : TInt32;
    FBaselineWorkTimeSpan : TTime;
    FBudetCostWorkPerformed : Double;
    FBudgetedCost : Double;
    FBudgetedCostWorkScheduled : Double;
    FBudgetedWork : string;
    FBudgetedWorkMilliseconds : TInt32;
    FBudgetedWorkTimeSpan : TTime;
    FCost : Double;
    FCostVariance : Double;
    FCostVarianceAtCompletion : Double;
    FCreated : TDateTime;
    FCurrentCostVariance : Double;
    FFinish : TDateTime;
    FId : TGUIDString;
    FIsBudgeted : boolean;
    FIsGenericResource : boolean;
    FIsOverAllocated : boolean;
    FModified : TDateTime;
    FNotes : string;
    FOvertimeCost : Double;
    FOvertimeWork : string;
    FOvertimeWorkMilliseconds : TInt32;
    FOvertimeWorkTimeSpan : TTime;
    FPeakWork : string;
    FPeakWorkMilliseconds : TInt32;
    FPeakWorkTimeSpan : TTime;
    FPercentWorkComplete : TInt32;
    FRegularWork : string;
    FRegularWorkMilliseconds : TInt32;
    FRegularWorkTimeSpan : TTime;
    FRemainingCost : Double;
    FRemainingOvertimeCost : Double;
    FRemainingOvertimeWork : string;
    FRemainingOvertimeWorkMilliseconds : TInt32;
    FRemainingOvertimeWorkTimeSpan : TTime;
    FRemainingWork : string;
    FRemainingWorkMilliseconds : TInt32;
    FRemainingWorkTimeSpan : TTime;
    FScheduleCostVariance : Double;
    FStart : TDateTime;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    FWorkVariance : string;
    FWorkVarianceMilliseconds : TInt32;
    FWorkVarianceTimeSpan : TTime;
    procedure SetActualCost(AIndex: Integer; const AValue: Double);
    procedure SetActualCostWorkPerformed(AIndex: Integer; 
                                    const AValue: string);
    procedure SetActualCostWorkPerformedMilliseconds(AIndex: Integer; 
                                                const AValue: TInt32);
    procedure SetActualCostWorkPerformedTimeSpan(AIndex: Integer; 
                                            const AValue: TTime);
    procedure SetActualOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetActualOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetActualOvertimeWorkMilliseconds(AIndex: Integer; 
                                           const AValue: TInt32);
    procedure SetActualOvertimeWorkTimeSpan(AIndex: Integer; 
                                       const AValue: TTime);
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetAvailableFrom(AIndex: Integer; const AValue: TDateTime);
    procedure SetAvailableTo(AIndex: Integer; const AValue: TDateTime);
    procedure SetBaselineCost(AIndex: Integer; const AValue: Double);
    procedure SetBaselineWork(AIndex: Integer; const AValue: string);
    procedure SetBaselineWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetBaselineWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetBudetCostWorkPerformed(AIndex: Integer; 
                                   const AValue: Double);
    procedure SetBudgetedCost(AIndex: Integer; const AValue: Double);
    procedure SetBudgetedCostWorkScheduled(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetBudgetedWork(AIndex: Integer; const AValue: string);
    procedure SetBudgetedWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetBudgetedWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetCost(AIndex: Integer; const AValue: Double);
    procedure SetCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetCostVarianceAtCompletion(AIndex: Integer; 
                                     const AValue: Double);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetCurrentCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsBudgeted(AIndex: Integer; const AValue: boolean);
    procedure SetIsGenericResource(AIndex: Integer; const AValue: boolean);
    procedure SetIsOverAllocated(AIndex: Integer; const AValue: boolean);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPeakWork(AIndex: Integer; const AValue: string);
    procedure SetPeakWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetPeakWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetRegularWork(AIndex: Integer; const AValue: string);
    procedure SetRegularWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetRemainingCost(AIndex: Integer; const AValue: Double);
    procedure SetRemainingOvertimeCost(AIndex: Integer; 
                                  const AValue: Double);
    procedure SetRemainingOvertimeWork(AIndex: Integer; 
                                  const AValue: string);
    procedure SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; 
                                              const AValue: TInt32);
    procedure SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; 
                                          const AValue: TTime);
    procedure SetRemainingWork(AIndex: Integer; const AValue: string);
    procedure SetRemainingWorkMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetScheduleCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetWorkVariance(AIndex: Integer; const AValue: string);
    procedure SetWorkVarianceMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetWorkVarianceTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function EnterpriseResource(AService: TODataService)
                            : TPSEnterpriseResource;
  published
    Property ActualCost : Double index 0 read FActualCost write SetActualCost;
    Property ActualCostWorkPerformed : string index 8 read FActualCostWorkPerformed write SetActualCostWorkPerformed;
    Property ActualCostWorkPerformedMilliseconds : TInt32 index 16 read FActualCostWorkPerformedMilliseconds write SetActualCostWorkPerformedMilliseconds;
    Property ActualCostWorkPerformedTimeSpan : TTime index 24 read FActualCostWorkPerformedTimeSpan write SetActualCostWorkPerformedTimeSpan;
    Property ActualOvertimeCost : Double index 32 read FActualOvertimeCost write SetActualOvertimeCost;
    Property ActualOvertimeWork : string index 40 read FActualOvertimeWork write SetActualOvertimeWork;
    Property ActualOvertimeWorkMilliseconds : TInt32 index 48 read FActualOvertimeWorkMilliseconds write SetActualOvertimeWorkMilliseconds;
    Property ActualOvertimeWorkTimeSpan : TTime index 56 read FActualOvertimeWorkTimeSpan write SetActualOvertimeWorkTimeSpan;
    Property ActualWork : string index 64 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 72 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 80 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property AvailableFrom : TDateTime index 88 read FAvailableFrom write SetAvailableFrom;
    Property AvailableTo : TDateTime index 96 read FAvailableTo write SetAvailableTo;
    Property BaselineCost : Double index 104 read FBaselineCost write SetBaselineCost;
    Property BaselineWork : string index 112 read FBaselineWork write SetBaselineWork;
    Property BaselineWorkMilliseconds : TInt32 index 120 read FBaselineWorkMilliseconds write SetBaselineWorkMilliseconds;
    Property BaselineWorkTimeSpan : TTime index 128 read FBaselineWorkTimeSpan write SetBaselineWorkTimeSpan;
    Property BudetCostWorkPerformed : Double index 136 read FBudetCostWorkPerformed write SetBudetCostWorkPerformed;
    Property BudgetedCost : Double index 144 read FBudgetedCost write SetBudgetedCost;
    Property BudgetedCostWorkScheduled : Double index 152 read FBudgetedCostWorkScheduled write SetBudgetedCostWorkScheduled;
    Property BudgetedWork : string index 160 read FBudgetedWork write SetBudgetedWork;
    Property BudgetedWorkMilliseconds : TInt32 index 168 read FBudgetedWorkMilliseconds write SetBudgetedWorkMilliseconds;
    Property BudgetedWorkTimeSpan : TTime index 176 read FBudgetedWorkTimeSpan write SetBudgetedWorkTimeSpan;
    Property Cost : Double index 184 read FCost write SetCost;
    Property CostVariance : Double index 192 read FCostVariance write SetCostVariance;
    Property CostVarianceAtCompletion : Double index 200 read FCostVarianceAtCompletion write SetCostVarianceAtCompletion;
    Property Created : TDateTime index 208 read FCreated write SetCreated;
    Property CurrentCostVariance : Double index 216 read FCurrentCostVariance write SetCurrentCostVariance;
    Property Finish : TDateTime index 224 read FFinish write SetFinish;
    Property Id : TGUIDString index 232 read FId write SetId;
    Property IsBudgeted : boolean index 240 read FIsBudgeted write SetIsBudgeted;
    Property IsGenericResource : boolean index 248 read FIsGenericResource write SetIsGenericResource;
    Property IsOverAllocated : boolean index 256 read FIsOverAllocated write SetIsOverAllocated;
    Property Modified : TDateTime index 264 read FModified write SetModified;
    Property Notes : string index 272 read FNotes write SetNotes;
    Property OvertimeCost : Double index 280 read FOvertimeCost write SetOvertimeCost;
    Property OvertimeWork : string index 288 read FOvertimeWork write SetOvertimeWork;
    Property OvertimeWorkMilliseconds : TInt32 index 296 read FOvertimeWorkMilliseconds write SetOvertimeWorkMilliseconds;
    Property OvertimeWorkTimeSpan : TTime index 304 read FOvertimeWorkTimeSpan write SetOvertimeWorkTimeSpan;
    Property PeakWork : string index 312 read FPeakWork write SetPeakWork;
    Property PeakWorkMilliseconds : TInt32 index 320 read FPeakWorkMilliseconds write SetPeakWorkMilliseconds;
    Property PeakWorkTimeSpan : TTime index 328 read FPeakWorkTimeSpan write SetPeakWorkTimeSpan;
    Property PercentWorkComplete : TInt32 index 336 read FPercentWorkComplete write SetPercentWorkComplete;
    Property RegularWork : string index 344 read FRegularWork write SetRegularWork;
    Property RegularWorkMilliseconds : TInt32 index 352 read FRegularWorkMilliseconds write SetRegularWorkMilliseconds;
    Property RegularWorkTimeSpan : TTime index 360 read FRegularWorkTimeSpan write SetRegularWorkTimeSpan;
    Property RemainingCost : Double index 368 read FRemainingCost write SetRemainingCost;
    Property RemainingOvertimeCost : Double index 376 read FRemainingOvertimeCost write SetRemainingOvertimeCost;
    Property RemainingOvertimeWork : string index 384 read FRemainingOvertimeWork write SetRemainingOvertimeWork;
    Property RemainingOvertimeWorkMilliseconds : TInt32 index 392 read FRemainingOvertimeWorkMilliseconds write SetRemainingOvertimeWorkMilliseconds;
    Property RemainingOvertimeWorkTimeSpan : TTime index 400 read FRemainingOvertimeWorkTimeSpan write SetRemainingOvertimeWorkTimeSpan;
    Property RemainingWork : string index 408 read FRemainingWork write SetRemainingWork;
    Property RemainingWorkMilliseconds : TInt32 index 416 read FRemainingWorkMilliseconds write SetRemainingWorkMilliseconds;
    Property RemainingWorkTimeSpan : TTime index 424 read FRemainingWorkTimeSpan write SetRemainingWorkTimeSpan;
    Property ScheduleCostVariance : Double index 432 read FScheduleCostVariance write SetScheduleCostVariance;
    Property Start : TDateTime index 440 read FStart write SetStart;
    Property Work : string index 448 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 456 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 464 read FWorkTimeSpan write SetWorkTimeSpan;
    Property WorkVariance : string index 472 read FWorkVariance write SetWorkVariance;
    Property WorkVarianceMilliseconds : TInt32 index 480 read FWorkVarianceMilliseconds write SetWorkVarianceMilliseconds;
    Property WorkVarianceTimeSpan : TTime index 488 read FWorkVarianceTimeSpan write SetWorkVarianceTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EnterpriseResource
    --------------------------------------------------------------------}
  
  TPSEnterpriseResource = Class(TODataEntity)
  private
    FCanLevel : boolean;
    FCode : string;
    FCostAccrual : TInt32;
    FCostCenter : string;
    FCreated : TDateTime;
    FDefaultBookingType : TInt32;
    FEmail : string;
    FExternalId : string;
    FGroup : string;
    FHireDate : TDateTime;
    FId : TGUIDString;
    FInitials : string;
    FIsActive : boolean;
    FIsBudget : boolean;
    FIsCheckedOut : boolean;
    FIsGeneric : boolean;
    FIsTeam : boolean;
    FMaterialLabel : string;
    FModified : TDateTime;
    FName : string;
    FPhonetics : string;
    FResourceType : TInt32;
    FTerminationDate : TDateTime;
    procedure SetCanLevel(AIndex: Integer; const AValue: boolean);
    procedure SetCode(AIndex: Integer; const AValue: string);
    procedure SetCostAccrual(AIndex: Integer; const AValue: TInt32);
    procedure SetCostCenter(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefaultBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetExternalId(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetHireDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInitials(AIndex: Integer; const AValue: string);
    procedure SetIsActive(AIndex: Integer; const AValue: boolean);
    procedure SetIsBudget(AIndex: Integer; const AValue: boolean);
    procedure SetIsCheckedOut(AIndex: Integer; const AValue: boolean);
    procedure SetIsGeneric(AIndex: Integer; const AValue: boolean);
    procedure SetIsTeam(AIndex: Integer; const AValue: boolean);
    procedure SetMaterialLabel(AIndex: Integer; const AValue: string);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPhonetics(AIndex: Integer; const AValue: string);
    procedure SetResourceType(AIndex: Integer; const AValue: TInt32);
    procedure SetTerminationDate(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Assignments(AService: TODataService) : TPSStatusAssignment;
    function BaseCalendar(AService: TODataService) : TPSCalendar;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function DefaultAssignmentOwner(AService: TODataService) : TSPUser;
    function ResourceCalendarExceptions(AService: TODataService)
                                    : TPSCalendarException;
    function _Self(AService: TODataService) : TPSEnterpriseResource;
    function TimesheetManager(AService: TODataService) : TSPUser;
    function User(AService: TODataService) : TSPUser;
  published
    Property CanLevel : boolean index 0 read FCanLevel write SetCanLevel;
    Property Code : string index 8 read FCode write SetCode;
    Property CostAccrual : TInt32 index 16 read FCostAccrual write SetCostAccrual;
    Property CostCenter : string index 24 read FCostCenter write SetCostCenter;
    Property Created : TDateTime index 32 read FCreated write SetCreated;
    Property DefaultBookingType : TInt32 index 40 read FDefaultBookingType write SetDefaultBookingType;
    Property Email : string index 48 read FEmail write SetEmail;
    Property ExternalId : string index 56 read FExternalId write SetExternalId;
    Property Group : string index 64 read FGroup write SetGroup;
    Property HireDate : TDateTime index 72 read FHireDate write SetHireDate;
    Property Id : TGUIDString index 80 read FId write SetId;
    Property Initials : string index 88 read FInitials write SetInitials;
    Property IsActive : boolean index 96 read FIsActive write SetIsActive;
    Property IsBudget : boolean index 104 read FIsBudget write SetIsBudget;
    Property IsCheckedOut : boolean index 112 read FIsCheckedOut write SetIsCheckedOut;
    Property IsGeneric : boolean index 120 read FIsGeneric write SetIsGeneric;
    Property IsTeam : boolean index 128 read FIsTeam write SetIsTeam;
    Property MaterialLabel : string index 136 read FMaterialLabel write SetMaterialLabel;
    Property Modified : TDateTime index 144 read FModified write SetModified;
    Property Name : string index 152 read FName write SetName;
    Property Phonetics : string index 160 read FPhonetics write SetPhonetics;
    Property ResourceType : TInt32 index 168 read FResourceType write SetResourceType;
    Property TerminationDate : TDateTime index 176 read FTerminationDate write SetTerminationDate;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StatusAssignment
    --------------------------------------------------------------------}
  
  TPSStatusAssignment = Class(TODataEntity)
  private
    FActualFinish : TDateTime;
    FActualOvertime : string;
    FActualOvertimeMilliseconds : TInt32;
    FActualOvertimeTimeSpan : TTime;
    FActualStart : TDateTime;
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FComments : string;
    FFinish : TDateTime;
    FId : TGUIDString;
    FIsConfirmed : boolean;
    FName : string;
    FOvertime : string;
    FOvertimeMilliseconds : TInt32;
    FOvertimeTimeSpan : TTime;
    FPercentComplete : TInt16;
    FRegularWork : string;
    FRegularWorkMilliseconds : TInt32;
    FRegularWorkTimeSpan : TTime;
    FRemainingOvertime : string;
    FRemainingOvertimeMilliseconds : TInt32;
    FRemainingOvertimeTimeSpan : TTime;
    FRemainingWork : string;
    FRemainingWorkMilliseconds : TInt32;
    FRemainingWorkTimeSpan : TTime;
    FStart : TDateTime;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    procedure SetActualFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualOvertime(AIndex: Integer; const AValue: string);
    procedure SetActualOvertimeMilliseconds(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetActualOvertimeTimeSpan(AIndex: Integer; 
                                   const AValue: TTime);
    procedure SetActualStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetComments(AIndex: Integer; const AValue: string);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsConfirmed(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOvertime(AIndex: Integer; const AValue: string);
    procedure SetOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetOvertimeTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPercentComplete(AIndex: Integer; const AValue: TInt16);
    procedure SetRegularWork(AIndex: Integer; const AValue: string);
    procedure SetRegularWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetRemainingOvertime(AIndex: Integer; const AValue: string);
    procedure SetRemainingOvertimeMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetRemainingOvertimeTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetRemainingWork(AIndex: Integer; const AValue: string);
    procedure SetRemainingWorkMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function Project(AService: TODataService) : TPSPublishedProject;
    function Resource(AService: TODataService) : TPSEnterpriseResource;
    function Task(AService: TODataService) : TPSStatusTask;
  published
    Property ActualFinish : TDateTime index 0 read FActualFinish write SetActualFinish;
    Property ActualOvertime : string index 8 read FActualOvertime write SetActualOvertime;
    Property ActualOvertimeMilliseconds : TInt32 index 16 read FActualOvertimeMilliseconds write SetActualOvertimeMilliseconds;
    Property ActualOvertimeTimeSpan : TTime index 24 read FActualOvertimeTimeSpan write SetActualOvertimeTimeSpan;
    Property ActualStart : TDateTime index 32 read FActualStart write SetActualStart;
    Property ActualWork : string index 40 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 48 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 56 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property Comments : string index 64 read FComments write SetComments;
    Property Finish : TDateTime index 72 read FFinish write SetFinish;
    Property Id : TGUIDString index 80 read FId write SetId;
    Property IsConfirmed : boolean index 88 read FIsConfirmed write SetIsConfirmed;
    Property Name : string index 96 read FName write SetName;
    Property Overtime : string index 104 read FOvertime write SetOvertime;
    Property OvertimeMilliseconds : TInt32 index 112 read FOvertimeMilliseconds write SetOvertimeMilliseconds;
    Property OvertimeTimeSpan : TTime index 120 read FOvertimeTimeSpan write SetOvertimeTimeSpan;
    Property PercentComplete : TInt16 index 128 read FPercentComplete write SetPercentComplete;
    Property RegularWork : string index 136 read FRegularWork write SetRegularWork;
    Property RegularWorkMilliseconds : TInt32 index 144 read FRegularWorkMilliseconds write SetRegularWorkMilliseconds;
    Property RegularWorkTimeSpan : TTime index 152 read FRegularWorkTimeSpan write SetRegularWorkTimeSpan;
    Property RemainingOvertime : string index 160 read FRemainingOvertime write SetRemainingOvertime;
    Property RemainingOvertimeMilliseconds : TInt32 index 168 read FRemainingOvertimeMilliseconds write SetRemainingOvertimeMilliseconds;
    Property RemainingOvertimeTimeSpan : TTime index 176 read FRemainingOvertimeTimeSpan write SetRemainingOvertimeTimeSpan;
    Property RemainingWork : string index 184 read FRemainingWork write SetRemainingWork;
    Property RemainingWorkMilliseconds : TInt32 index 192 read FRemainingWorkMilliseconds write SetRemainingWorkMilliseconds;
    Property RemainingWorkTimeSpan : TTime index 200 read FRemainingWorkTimeSpan write SetRemainingWorkTimeSpan;
    Property Start : TDateTime index 208 read FStart write SetStart;
    Property Work : string index 216 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 224 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 232 read FWorkTimeSpan write SetWorkTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Project
    --------------------------------------------------------------------}
  
  TPSProject = Class(TODataEntity)
  private
    FApprovedEnd : TDateTime;
    FApprovedStart : TDateTime;
    FCheckedOutDate : TDateTime;
    FCheckOutDescription : string;
    FCheckOutId : TGUIDString;
    FCreatedDate : TDateTime;
    FDefaultOvertimeRateUnits : TInt32;
    FDefaultStandardRateUnits : TInt32;
    FHasMppPendingImport : boolean;
    FId : TGUIDString;
    FIsCheckedOut : boolean;
    FLastPublishedDate : TDateTime;
    FLastSavedDate : TDateTime;
    FListId : TGUIDString;
    FOptimizerDecision : TInt32;
    FPercentComplete : TInt32;
    FPlannerDecision : TInt32;
    FProjectSiteUrl : string;
    FProjectType : TInt32;
    FSummaryTaskId : TGUIDString;
    FTaskListId : TGUIDString;
    FWebId : TGUIDString;
    procedure SetApprovedEnd(AIndex: Integer; const AValue: TDateTime);
    procedure SetApprovedStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetCheckedOutDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetCheckOutDescription(AIndex: Integer; const AValue: string);
    procedure SetCheckOutId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetCreatedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefaultOvertimeRateUnits(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetDefaultStandardRateUnits(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetHasMppPendingImport(AIndex: Integer; const AValue: boolean);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsCheckedOut(AIndex: Integer; const AValue: boolean);
    procedure SetLastPublishedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetLastSavedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOptimizerDecision(AIndex: Integer; const AValue: TInt32);
    procedure SetPercentComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetPlannerDecision(AIndex: Integer; const AValue: TInt32);
    procedure SetProjectSiteUrl(AIndex: Integer; const AValue: string);
    procedure SetProjectType(AIndex: Integer; const AValue: TInt32);
    procedure SetSummaryTaskId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTaskListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CheckedOutBy(AService: TODataService) : TSPUser;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function EnterpriseProjectType(AService: TODataService)
                               : TPSEnterpriseProjectType;
    function Phase(AService: TODataService) : TPSPhase;
    function QueueJobs(AService: TODataService) : TPSQueueJob;
    function Stage(AService: TODataService) : TPSStage;
  published
    Property ApprovedEnd : TDateTime index 0 read FApprovedEnd write SetApprovedEnd;
    Property ApprovedStart : TDateTime index 8 read FApprovedStart write SetApprovedStart;
    Property CheckedOutDate : TDateTime index 16 read FCheckedOutDate write SetCheckedOutDate;
    Property CheckOutDescription : string index 24 read FCheckOutDescription write SetCheckOutDescription;
    Property CheckOutId : TGUIDString index 32 read FCheckOutId write SetCheckOutId;
    Property CreatedDate : TDateTime index 40 read FCreatedDate write SetCreatedDate;
    Property DefaultOvertimeRateUnits : TInt32 index 48 read FDefaultOvertimeRateUnits write SetDefaultOvertimeRateUnits;
    Property DefaultStandardRateUnits : TInt32 index 56 read FDefaultStandardRateUnits write SetDefaultStandardRateUnits;
    Property HasMppPendingImport : boolean index 64 read FHasMppPendingImport write SetHasMppPendingImport;
    Property Id : TGUIDString index 72 read FId write SetId;
    Property IsCheckedOut : boolean index 80 read FIsCheckedOut write SetIsCheckedOut;
    Property LastPublishedDate : TDateTime index 88 read FLastPublishedDate write SetLastPublishedDate;
    Property LastSavedDate : TDateTime index 96 read FLastSavedDate write SetLastSavedDate;
    Property ListId : TGUIDString index 104 read FListId write SetListId;
    Property OptimizerDecision : TInt32 index 112 read FOptimizerDecision write SetOptimizerDecision;
    Property PercentComplete : TInt32 index 120 read FPercentComplete write SetPercentComplete;
    Property PlannerDecision : TInt32 index 128 read FPlannerDecision write SetPlannerDecision;
    Property ProjectSiteUrl : string index 136 read FProjectSiteUrl write SetProjectSiteUrl;
    Property ProjectType : TInt32 index 144 read FProjectType write SetProjectType;
    Property SummaryTaskId : TGUIDString index 152 read FSummaryTaskId write SetSummaryTaskId;
    Property TaskListId : TGUIDString index 160 read FTaskListId write SetTaskListId;
    Property WebId : TGUIDString index 168 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EnterpriseProjectType
    --------------------------------------------------------------------}
  
  TPSEnterpriseProjectType = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FImageUrl : string;
    FIsDefault : boolean;
    FIsManaged : boolean;
    FName : string;
    FOrder : TInt32;
    FProjectPlanTemplateId : TGUIDString;
    FWorkflowAssociationId : TGUIDString;
    FWorkflowAssociationName : string;
    FWorkspaceTemplateName : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetImageUrl(AIndex: Integer; const AValue: string);
    procedure SetIsDefault(AIndex: Integer; const AValue: boolean);
    procedure SetIsManaged(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOrder(AIndex: Integer; const AValue: TInt32);
    procedure SetProjectPlanTemplateId(AIndex: Integer; 
                                  const AValue: TGUIDString);
    procedure SetWorkflowAssociationId(AIndex: Integer; 
                                  const AValue: TGUIDString);
    procedure SetWorkflowAssociationName(AIndex: Integer; 
                                    const AValue: string);
    procedure SetWorkspaceTemplateName(AIndex: Integer; 
                                  const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ProjectDetailPages(AService: TODataService)
                            : TPSProjectDetailPage;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property ImageUrl : string index 16 read FImageUrl write SetImageUrl;
    Property IsDefault : boolean index 24 read FIsDefault write SetIsDefault;
    Property IsManaged : boolean index 32 read FIsManaged write SetIsManaged;
    Property Name : string index 40 read FName write SetName;
    Property Order : TInt32 index 48 read FOrder write SetOrder;
    Property ProjectPlanTemplateId : TGUIDString index 56 read FProjectPlanTemplateId write SetProjectPlanTemplateId;
    Property WorkflowAssociationId : TGUIDString index 64 read FWorkflowAssociationId write SetWorkflowAssociationId;
    Property WorkflowAssociationName : string index 72 read FWorkflowAssociationName write SetWorkflowAssociationName;
    Property WorkspaceTemplateName : string index 80 read FWorkspaceTemplateName write SetWorkspaceTemplateName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectDetailPage
    --------------------------------------------------------------------}
  
  TPSProjectDetailPage = Class(TODataEntity)
  private
    FId : TGUIDString;
    FName : string;
    FPageType : TInt32;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPageType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Item(AService: TODataService) : TSPListItem;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property Name : string index 8 read FName write SetName;
    Property PageType : TInt32 index 16 read FPageType write SetPageType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Phase
    --------------------------------------------------------------------}
  
  TPSPhase = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FName : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Stages(AService: TODataService) : TPSStage;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Name : string index 16 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Stage
    --------------------------------------------------------------------}
  
  TPSStage = Class(TODataEntity)
  private
    FBehavior : TInt32;
    FCheckInRequired : boolean;
    FDescription : string;
    FId : TGUIDString;
    FName : string;
    FSubmitDescription : string;
    procedure SetBehavior(AIndex: Integer; const AValue: TInt32);
    procedure SetCheckInRequired(AIndex: Integer; const AValue: boolean);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetSubmitDescription(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomFields(AService: TODataService) : TPSStageCustomField;
    function Phase(AService: TODataService) : TPSPhase;
    function ProjectDetailPages(AService: TODataService)
                            : TPSStageDetailPage;
    function WorkflowStatusPage(AService: TODataService)
                            : TPSProjectDetailPage;
  published
    Property Behavior : TInt32 index 0 read FBehavior write SetBehavior;
    Property CheckInRequired : boolean index 8 read FCheckInRequired write SetCheckInRequired;
    Property Description : string index 16 read FDescription write SetDescription;
    Property Id : TGUIDString index 24 read FId write SetId;
    Property Name : string index 32 read FName write SetName;
    Property SubmitDescription : string index 40 read FSubmitDescription write SetSubmitDescription;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StageCustomField
    --------------------------------------------------------------------}
  
  TPSStageCustomField = Class(TODataEntity)
  private
    FId : TGUIDString;
    FName : string;
    FReadOnly : boolean;
    FRequired : boolean;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetRequired(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Stage(AService: TODataService) : TPSStage;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property Name : string index 8 read FName write SetName;
    Property ReadOnly : boolean index 16 read FReadOnly write SetReadOnly;
    Property Required : boolean index 24 read FRequired write SetRequired;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StageDetailPage
    --------------------------------------------------------------------}
  
  TPSStageDetailPage = Class(TODataEntity)
  private
    FDescription : string;
    FId : TGUIDString;
    FPosition : TInt32;
    FRequiresAttention : boolean;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPosition(AIndex: Integer; const AValue: TInt32);
    procedure SetRequiresAttention(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Page(AService: TODataService) : TPSProjectDetailPage;
    function Stage(AService: TODataService) : TPSStage;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Position : TInt32 index 16 read FPosition write SetPosition;
    Property RequiresAttention : boolean index 24 read FRequiresAttention write SetRequiresAttention;
  end;
  
  
  { --------------------------------------------------------------------
    PS: QueueJob
    --------------------------------------------------------------------}
  
  TPSQueueJob = Class(TODataEntity)
  private
    FId : TGUIDString;
    FJobState : TInt32;
    FMessageType : TInt32;
    FPercentComplete : TInt32;
    FWaitMilliseconds : TInt32;
    FWaitTime : TTime;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetJobState(AIndex: Integer; const AValue: TInt32);
    procedure SetMessageType(AIndex: Integer; const AValue: TInt32);
    procedure SetPercentComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetWaitMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWaitTime(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Project(AService: TODataService) : TPSProject;
    function Submitter(AService: TODataService) : TSPUser;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
    Property JobState : TInt32 index 8 read FJobState write SetJobState;
    Property MessageType : TInt32 index 16 read FMessageType write SetMessageType;
    Property PercentComplete : TInt32 index 24 read FPercentComplete write SetPercentComplete;
    Property WaitMilliseconds : TInt32 index 32 read FWaitMilliseconds write SetWaitMilliseconds;
    Property WaitTime : TTime index 40 read FWaitTime write SetWaitTime;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PublishedProject
    --------------------------------------------------------------------}
  
  TPSPublishedProject = Class(TPSProject)
  private
    FCalculateActualCosts : boolean;
    FCalculatesActualCosts : boolean;
    FCriticalSlackLimit : TInt32;
    FCurrencyCode : string;
    FCurrencyDigits : TInt32;
    FCurrencyPosition : TInt32;
    FCurrencySymbol : string;
    FCurrentDate : TDateTime;
    FDaysPerMonth : TInt16;
    FDefaultEffortDriven : boolean;
    FDefaultEstimatedDuration : boolean;
    FDefaultFinishTime : TDateTime;
    FDefaultFixedCostAccrual : TInt32;
    FDefaultOvertimeRate : Double;
    FDefaultStandardRate : Double;
    FDefaultStartTime : TDateTime;
    FDefaultTaskType : TInt32;
    FDefaultWorkFormat : TInt32;
    FDescription : string;
    FEnterpriseProjectTypeId : TGUIDString;
    FFinishDate : TDateTime;
    FFiscalYearStartMonth : TInt16;
    FHonorConstraints : boolean;
    FIsEnterpriseProject : boolean;
    FMinutesPerDay : TInt32;
    FMinutesPerWeek : TInt32;
    FMoveActualIfLater : boolean;
    FMoveActualToStatus : boolean;
    FMoveRemainingIfEarlier : boolean;
    FMoveRemainingToStatus : boolean;
    FMultipleCriticalPaths : boolean;
    FName : string;
    FNewTasksAreManual : boolean;
    FNumberFiscalYearFromStart : boolean;
    FProtectedActualsSynch : boolean;
    FScheduledFromStart : boolean;
    FShowEstimatedDurations : boolean;
    FSplitInProgress : boolean;
    FSpreadActualCostsToStatus : boolean;
    FSpreadPercentCompleteToStatus : boolean;
    FStartDate : TDateTime;
    FStatusDate : TDateTime;
    FTrackingMode : TInt32;
    FWeekStartDay : TInt16;
    FWinprojVersion : double;
    procedure SetCalculateActualCosts(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetCalculatesActualCosts(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetCriticalSlackLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetCurrencyCode(AIndex: Integer; const AValue: string);
    procedure SetCurrencyDigits(AIndex: Integer; const AValue: TInt32);
    procedure SetCurrencyPosition(AIndex: Integer; const AValue: TInt32);
    procedure SetCurrencySymbol(AIndex: Integer; const AValue: string);
    procedure SetCurrentDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetDaysPerMonth(AIndex: Integer; const AValue: TInt16);
    procedure SetDefaultEffortDriven(AIndex: Integer; const AValue: boolean);
    procedure SetDefaultEstimatedDuration(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetDefaultFinishTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefaultFixedCostAccrual(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetDefaultOvertimeRate(AIndex: Integer; const AValue: Double);
    procedure SetDefaultStandardRate(AIndex: Integer; const AValue: Double);
    procedure SetDefaultStartTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefaultTaskType(AIndex: Integer; const AValue: TInt32);
    procedure SetDefaultWorkFormat(AIndex: Integer; const AValue: TInt32);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEnterpriseProjectTypeId(AIndex: Integer; 
                                    const AValue: TGUIDString);
    procedure SetFinishDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetFiscalYearStartMonth(AIndex: Integer; const AValue: TInt16);
    procedure SetHonorConstraints(AIndex: Integer; const AValue: boolean);
    procedure SetIsEnterpriseProject(AIndex: Integer; const AValue: boolean);
    procedure SetMinutesPerDay(AIndex: Integer; const AValue: TInt32);
    procedure SetMinutesPerWeek(AIndex: Integer; const AValue: TInt32);
    procedure SetMoveActualIfLater(AIndex: Integer; const AValue: boolean);
    procedure SetMoveActualToStatus(AIndex: Integer; const AValue: boolean);
    procedure SetMoveRemainingIfEarlier(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetMoveRemainingToStatus(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetMultipleCriticalPaths(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNewTasksAreManual(AIndex: Integer; const AValue: boolean);
    procedure SetNumberFiscalYearFromStart(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetProtectedActualsSynch(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetScheduledFromStart(AIndex: Integer; const AValue: boolean);
    procedure SetShowEstimatedDurations(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetSplitInProgress(AIndex: Integer; const AValue: boolean);
    procedure SetSpreadActualCostsToStatus(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetSpreadPercentCompleteToStatus(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetStartDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetStatusDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetTrackingMode(AIndex: Integer; const AValue: TInt32);
    procedure SetWeekStartDay(AIndex: Integer; const AValue: TInt16);
    procedure SetWinprojVersion(AIndex: Integer; const AValue: double);
  public
    class function ObjectRestKind : String;  Override;
    function Assignments(AService: TODataService) : TPSPublishedAssignment;
    function Calendar(AService: TODataService) : TPSCalendar;
    function Draft(AService: TODataService) : TPSDraftProject;
    function IncludeCustomFields(AService: TODataService)
                             : TPSPublishedProject;
    function Owner(AService: TODataService) : TSPUser;
    function ProjectResources(AService: TODataService)
                          : TPSPublishedProjectResource;
    function TaskLinks(AService: TODataService) : TPSPublishedTaskLink;
    function Tasks(AService: TODataService) : TPSPublishedTask;
  published
    Property CalculateActualCosts : boolean index 176 read FCalculateActualCosts write SetCalculateActualCosts;
    Property CalculatesActualCosts : boolean index 184 read FCalculatesActualCosts write SetCalculatesActualCosts;
    Property CriticalSlackLimit : TInt32 index 192 read FCriticalSlackLimit write SetCriticalSlackLimit;
    Property CurrencyCode : string index 200 read FCurrencyCode write SetCurrencyCode;
    Property CurrencyDigits : TInt32 index 208 read FCurrencyDigits write SetCurrencyDigits;
    Property CurrencyPosition : TInt32 index 216 read FCurrencyPosition write SetCurrencyPosition;
    Property CurrencySymbol : string index 224 read FCurrencySymbol write SetCurrencySymbol;
    Property CurrentDate : TDateTime index 232 read FCurrentDate write SetCurrentDate;
    Property DaysPerMonth : TInt16 index 240 read FDaysPerMonth write SetDaysPerMonth;
    Property DefaultEffortDriven : boolean index 248 read FDefaultEffortDriven write SetDefaultEffortDriven;
    Property DefaultEstimatedDuration : boolean index 256 read FDefaultEstimatedDuration write SetDefaultEstimatedDuration;
    Property DefaultFinishTime : TDateTime index 264 read FDefaultFinishTime write SetDefaultFinishTime;
    Property DefaultFixedCostAccrual : TInt32 index 272 read FDefaultFixedCostAccrual write SetDefaultFixedCostAccrual;
    Property DefaultOvertimeRate : Double index 280 read FDefaultOvertimeRate write SetDefaultOvertimeRate;
    Property DefaultStandardRate : Double index 288 read FDefaultStandardRate write SetDefaultStandardRate;
    Property DefaultStartTime : TDateTime index 296 read FDefaultStartTime write SetDefaultStartTime;
    Property DefaultTaskType : TInt32 index 304 read FDefaultTaskType write SetDefaultTaskType;
    Property DefaultWorkFormat : TInt32 index 312 read FDefaultWorkFormat write SetDefaultWorkFormat;
    Property Description : string index 320 read FDescription write SetDescription;
    Property EnterpriseProjectTypeId : TGUIDString index 328 read FEnterpriseProjectTypeId write SetEnterpriseProjectTypeId;
    Property FinishDate : TDateTime index 336 read FFinishDate write SetFinishDate;
    Property FiscalYearStartMonth : TInt16 index 344 read FFiscalYearStartMonth write SetFiscalYearStartMonth;
    Property HonorConstraints : boolean index 352 read FHonorConstraints write SetHonorConstraints;
    Property IsEnterpriseProject : boolean index 360 read FIsEnterpriseProject write SetIsEnterpriseProject;
    Property MinutesPerDay : TInt32 index 368 read FMinutesPerDay write SetMinutesPerDay;
    Property MinutesPerWeek : TInt32 index 376 read FMinutesPerWeek write SetMinutesPerWeek;
    Property MoveActualIfLater : boolean index 384 read FMoveActualIfLater write SetMoveActualIfLater;
    Property MoveActualToStatus : boolean index 392 read FMoveActualToStatus write SetMoveActualToStatus;
    Property MoveRemainingIfEarlier : boolean index 400 read FMoveRemainingIfEarlier write SetMoveRemainingIfEarlier;
    Property MoveRemainingToStatus : boolean index 408 read FMoveRemainingToStatus write SetMoveRemainingToStatus;
    Property MultipleCriticalPaths : boolean index 416 read FMultipleCriticalPaths write SetMultipleCriticalPaths;
    Property Name : string index 424 read FName write SetName;
    Property NewTasksAreManual : boolean index 432 read FNewTasksAreManual write SetNewTasksAreManual;
    Property NumberFiscalYearFromStart : boolean index 440 read FNumberFiscalYearFromStart write SetNumberFiscalYearFromStart;
    Property ProtectedActualsSynch : boolean index 448 read FProtectedActualsSynch write SetProtectedActualsSynch;
    Property ScheduledFromStart : boolean index 456 read FScheduledFromStart write SetScheduledFromStart;
    Property ShowEstimatedDurations : boolean index 464 read FShowEstimatedDurations write SetShowEstimatedDurations;
    Property SplitInProgress : boolean index 472 read FSplitInProgress write SetSplitInProgress;
    Property SpreadActualCostsToStatus : boolean index 480 read FSpreadActualCostsToStatus write SetSpreadActualCostsToStatus;
    Property SpreadPercentCompleteToStatus : boolean index 488 read FSpreadPercentCompleteToStatus write SetSpreadPercentCompleteToStatus;
    Property StartDate : TDateTime index 496 read FStartDate write SetStartDate;
    Property StatusDate : TDateTime index 504 read FStatusDate write SetStatusDate;
    Property TrackingMode : TInt32 index 512 read FTrackingMode write SetTrackingMode;
    Property WeekStartDay : TInt16 index 520 read FWeekStartDay write SetWeekStartDay;
    Property WinprojVersion : double index 528 read FWinprojVersion write SetWinprojVersion;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PublishedAssignment
    --------------------------------------------------------------------}
  
  TPSPublishedAssignment = Class(TPSAssignment)
  private
    FActualCost : Double;
    FActualFinish : TDateTime;
    FActualOvertimeWork : string;
    FActualOvertimeWorkMilliseconds : TInt32;
    FActualOvertimeWorkTimeSpan : TTime;
    FActualStart : TDateTime;
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FBudgetedCost : Double;
    FBudgetedWork : string;
    FBudgetedWorkMilliseconds : TInt32;
    FBudgetedWorkTimeSpan : TTime;
    FCost : Double;
    FDefaultBookingType : TInt32;
    FDelay : string;
    FDelayMilliseconds : TInt32;
    FDelayTimeSpan : TTime;
    FFinish : TDateTime;
    FIsLockedByManager : boolean;
    FIsWorkResource : boolean;
    FNotes : string;
    FOvertimeWork : string;
    FOvertimeWorkMilliseconds : TInt32;
    FOvertimeWorkTimeSpan : TTime;
    FPercentWorkComplete : TInt32;
    FRegularWork : string;
    FRegularWorkMilliseconds : TInt32;
    FRegularWorkTimeSpan : TTime;
    FRemainingOvertimeWork : string;
    FRemainingOvertimeWorkMilliseconds : TInt32;
    FRemainingOvertimeWorkTimeSpan : TTime;
    FRemainingWork : string;
    FRemainingWorkMilliseconds : TInt32;
    FRemainingWorkTimeSpan : TTime;
    FResourceCapacity : Double;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    procedure SetActualCost(AIndex: Integer; const AValue: Double);
    procedure SetActualFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetActualOvertimeWorkMilliseconds(AIndex: Integer; 
                                           const AValue: TInt32);
    procedure SetActualOvertimeWorkTimeSpan(AIndex: Integer; 
                                       const AValue: TTime);
    procedure SetActualStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetBudgetedCost(AIndex: Integer; const AValue: Double);
    procedure SetBudgetedWork(AIndex: Integer; const AValue: string);
    procedure SetBudgetedWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetBudgetedWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetCost(AIndex: Integer; const AValue: Double);
    procedure SetDefaultBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetDelay(AIndex: Integer; const AValue: string);
    procedure SetDelayMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetDelayTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetIsLockedByManager(AIndex: Integer; const AValue: boolean);
    procedure SetIsWorkResource(AIndex: Integer; const AValue: boolean);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetRegularWork(AIndex: Integer; const AValue: string);
    procedure SetRegularWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetRemainingOvertimeWork(AIndex: Integer; 
                                  const AValue: string);
    procedure SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; 
                                              const AValue: TInt32);
    procedure SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; 
                                          const AValue: TTime);
    procedure SetRemainingWork(AIndex: Integer; const AValue: string);
    procedure SetRemainingWorkMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetResourceCapacity(AIndex: Integer; const AValue: Double);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function Owner(AService: TODataService) : TSPUser;
    function Parent(AService: TODataService) : TPSPublishedAssignment;
    function Resource(AService: TODataService) : TPSPublishedProjectResource;
    function Task(AService: TODataService) : TPSPublishedTask;
  published
    Property ActualCost : Double index 328 read FActualCost write SetActualCost;
    Property ActualFinish : TDateTime index 336 read FActualFinish write SetActualFinish;
    Property ActualOvertimeWork : string index 344 read FActualOvertimeWork write SetActualOvertimeWork;
    Property ActualOvertimeWorkMilliseconds : TInt32 index 352 read FActualOvertimeWorkMilliseconds write SetActualOvertimeWorkMilliseconds;
    Property ActualOvertimeWorkTimeSpan : TTime index 360 read FActualOvertimeWorkTimeSpan write SetActualOvertimeWorkTimeSpan;
    Property ActualStart : TDateTime index 368 read FActualStart write SetActualStart;
    Property ActualWork : string index 376 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 384 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 392 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property BudgetedCost : Double index 400 read FBudgetedCost write SetBudgetedCost;
    Property BudgetedWork : string index 408 read FBudgetedWork write SetBudgetedWork;
    Property BudgetedWorkMilliseconds : TInt32 index 416 read FBudgetedWorkMilliseconds write SetBudgetedWorkMilliseconds;
    Property BudgetedWorkTimeSpan : TTime index 424 read FBudgetedWorkTimeSpan write SetBudgetedWorkTimeSpan;
    Property Cost : Double index 432 read FCost write SetCost;
    Property DefaultBookingType : TInt32 index 440 read FDefaultBookingType write SetDefaultBookingType;
    Property Delay : string index 448 read FDelay write SetDelay;
    Property DelayMilliseconds : TInt32 index 456 read FDelayMilliseconds write SetDelayMilliseconds;
    Property DelayTimeSpan : TTime index 464 read FDelayTimeSpan write SetDelayTimeSpan;
    Property Finish : TDateTime index 472 read FFinish write SetFinish;
    Property IsLockedByManager : boolean index 480 read FIsLockedByManager write SetIsLockedByManager;
    Property IsWorkResource : boolean index 488 read FIsWorkResource write SetIsWorkResource;
    Property Notes : string index 496 read FNotes write SetNotes;
    Property OvertimeWork : string index 504 read FOvertimeWork write SetOvertimeWork;
    Property OvertimeWorkMilliseconds : TInt32 index 512 read FOvertimeWorkMilliseconds write SetOvertimeWorkMilliseconds;
    Property OvertimeWorkTimeSpan : TTime index 520 read FOvertimeWorkTimeSpan write SetOvertimeWorkTimeSpan;
    Property PercentWorkComplete : TInt32 index 528 read FPercentWorkComplete write SetPercentWorkComplete;
    Property RegularWork : string index 536 read FRegularWork write SetRegularWork;
    Property RegularWorkMilliseconds : TInt32 index 544 read FRegularWorkMilliseconds write SetRegularWorkMilliseconds;
    Property RegularWorkTimeSpan : TTime index 552 read FRegularWorkTimeSpan write SetRegularWorkTimeSpan;
    Property RemainingOvertimeWork : string index 560 read FRemainingOvertimeWork write SetRemainingOvertimeWork;
    Property RemainingOvertimeWorkMilliseconds : TInt32 index 568 read FRemainingOvertimeWorkMilliseconds write SetRemainingOvertimeWorkMilliseconds;
    Property RemainingOvertimeWorkTimeSpan : TTime index 576 read FRemainingOvertimeWorkTimeSpan write SetRemainingOvertimeWorkTimeSpan;
    Property RemainingWork : string index 584 read FRemainingWork write SetRemainingWork;
    Property RemainingWorkMilliseconds : TInt32 index 592 read FRemainingWorkMilliseconds write SetRemainingWorkMilliseconds;
    Property RemainingWorkTimeSpan : TTime index 600 read FRemainingWorkTimeSpan write SetRemainingWorkTimeSpan;
    Property ResourceCapacity : Double index 608 read FResourceCapacity write SetResourceCapacity;
    Property Work : string index 616 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 624 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 632 read FWorkTimeSpan write SetWorkTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PublishedProjectResource
    --------------------------------------------------------------------}
  
  TPSPublishedProjectResource = Class(TPSProjectResource)
  private
    FCanLevel : boolean;
    FCode : string;
    FCostAccrual : TInt32;
    FCostCenter : string;
    FCostPerUse : Double;
    FDefaultBookingType : TInt32;
    FEmail : string;
    FGroup : string;
    FInitials : string;
    FMaterialLabel : string;
    FMaximumCapacity : Double;
    FName : string;
    FOvertimeRate : Double;
    FOvertimeRateUnits : TInt32;
    FPhonetics : string;
    FStandardRate : Double;
    FStandardRateUnits : TInt32;
    procedure SetCanLevel(AIndex: Integer; const AValue: boolean);
    procedure SetCode(AIndex: Integer; const AValue: string);
    procedure SetCostAccrual(AIndex: Integer; const AValue: TInt32);
    procedure SetCostCenter(AIndex: Integer; const AValue: string);
    procedure SetCostPerUse(AIndex: Integer; const AValue: Double);
    procedure SetDefaultBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetInitials(AIndex: Integer; const AValue: string);
    procedure SetMaterialLabel(AIndex: Integer; const AValue: string);
    procedure SetMaximumCapacity(AIndex: Integer; const AValue: Double);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOvertimeRate(AIndex: Integer; const AValue: Double);
    procedure SetOvertimeRateUnits(AIndex: Integer; const AValue: TInt32);
    procedure SetPhonetics(AIndex: Integer; const AValue: string);
    procedure SetStandardRate(AIndex: Integer; const AValue: Double);
    procedure SetStandardRateUnits(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Assignments(AService: TODataService) : TPSPublishedAssignment;
    function DefaultAssignmentOwner(AService: TODataService) : TSPUser;
  published
    Property CanLevel : boolean index 496 read FCanLevel write SetCanLevel;
    Property Code : string index 504 read FCode write SetCode;
    Property CostAccrual : TInt32 index 512 read FCostAccrual write SetCostAccrual;
    Property CostCenter : string index 520 read FCostCenter write SetCostCenter;
    Property CostPerUse : Double index 528 read FCostPerUse write SetCostPerUse;
    Property DefaultBookingType : TInt32 index 536 read FDefaultBookingType write SetDefaultBookingType;
    Property Email : string index 544 read FEmail write SetEmail;
    Property Group : string index 552 read FGroup write SetGroup;
    Property Initials : string index 560 read FInitials write SetInitials;
    Property MaterialLabel : string index 568 read FMaterialLabel write SetMaterialLabel;
    Property MaximumCapacity : Double index 576 read FMaximumCapacity write SetMaximumCapacity;
    Property Name : string index 584 read FName write SetName;
    Property OvertimeRate : Double index 592 read FOvertimeRate write SetOvertimeRate;
    Property OvertimeRateUnits : TInt32 index 600 read FOvertimeRateUnits write SetOvertimeRateUnits;
    Property Phonetics : string index 608 read FPhonetics write SetPhonetics;
    Property StandardRate : Double index 616 read FStandardRate write SetStandardRate;
    Property StandardRateUnits : TInt32 index 624 read FStandardRateUnits write SetStandardRateUnits;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Task
    --------------------------------------------------------------------}
  
  TPSTask = Class(TODataEntity)
  private
    FActualDuration : string;
    FActualDurationMilliseconds : TInt32;
    FActualDurationTimeSpan : TTime;
    FBaselineCost : Double;
    FBaselineDuration : string;
    FBaselineDurationMilliseconds : TInt32;
    FBaselineDurationTimeSpan : TTime;
    FBaselineFinish : TDateTime;
    FBaselineStart : TDateTime;
    FBaselineWork : string;
    FBaselineWorkMilliseconds : TInt32;
    FBaselineWorkTimeSpan : TTime;
    FBudgetCost : Double;
    FCostPerformanceIndex : Double;
    FCostVariance : Double;
    FCostVarianceAtCompletion : Double;
    FCostVariancePercentage : TInt32;
    FCreated : TDateTime;
    FDurationVariance : string;
    FDurationVarianceMilliseconds : TInt32;
    FDurationVarianceTimeSpan : TTime;
    FEarliestFinish : TDateTime;
    FEarliestStart : TDateTime;
    FEstimateAtCompletion : Double;
    FFinishSlack : string;
    FFinishSlackMilliseconds : TInt32;
    FFinishSlackTimeSpan : TTime;
    FFinishVariance : string;
    FFinishVarianceMilliseconds : TInt32;
    FFinishVarianceTimeSpan : TTime;
    FFreeSlack : string;
    FFreeSlackMilliseconds : TInt32;
    FFreeSlackTimeSpan : TTime;
    FId : TGUIDString;
    FIsCritical : boolean;
    FIsExternalTask : boolean;
    FIsOverAllocated : boolean;
    FIsRecurring : boolean;
    FIsRecurringSummary : boolean;
    FIsRolledUp : boolean;
    FIsSubProject : boolean;
    FIsSubProjectReadOnly : boolean;
    FIsSubProjectScheduledFromFinish : boolean;
    FIsSummary : boolean;
    FLatestFinish : TDateTime;
    FLatestStart : TDateTime;
    FModified : TDateTime;
    FNotes : string;
    FOutlinePosition : string;
    FOvertimeCost : Double;
    FOvertimeWork : string;
    FOvertimeWorkMilliseconds : TInt32;
    FOvertimeWorkTimeSpan : TTime;
    FPercentWorkComplete : TInt32;
    FPreLevelingFinish : TDateTime;
    FPreLevelingStart : TDateTime;
    FRegularWork : string;
    FRegularWorkMilliseconds : TInt32;
    FRegularWorkTimeSpan : TTime;
    FRemainingCost : Double;
    FRemainingOvertimeCost : Double;
    FRemainingOvertimeWork : string;
    FRemainingOvertimeWorkMilliseconds : TInt32;
    FRemainingOvertimeWorkTimeSpan : TTime;
    FRemainingWork : string;
    FRemainingWorkMilliseconds : TInt32;
    FRemainingWorkTimeSpan : TTime;
    FResume : TDateTime;
    FScheduleCostVariance : Double;
    FScheduledDuration : string;
    FScheduledDurationMilliseconds : TInt32;
    FScheduledDurationTimeSpan : TTime;
    FScheduledFinish : TDateTime;
    FScheduledStart : TDateTime;
    FSchedulePerformanceIndex : Double;
    FScheduleVariancePercentage : TInt32;
    FStartSlack : string;
    FStartSlackMilliseconds : TInt32;
    FStartSlackTimeSpan : TTime;
    FStartVariance : string;
    FStartVarianceMilliseconds : TInt32;
    FStartVarianceTimeSpan : TTime;
    FStop : TDateTime;
    FToCompletePerformanceIndex : Double;
    FTotalSlack : string;
    FTotalSlackMilliseconds : TInt32;
    FTotalSlackTimeSpan : TTime;
    FWorkBreakdownStructure : string;
    FWorkVariance : string;
    FWorkVarianceMilliseconds : TInt32;
    FWorkVarianceTimeSpan : TTime;
    procedure SetActualDuration(AIndex: Integer; const AValue: string);
    procedure SetActualDurationMilliseconds(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetActualDurationTimeSpan(AIndex: Integer; 
                                   const AValue: TTime);
    procedure SetBaselineCost(AIndex: Integer; const AValue: Double);
    procedure SetBaselineDuration(AIndex: Integer; const AValue: string);
    procedure SetBaselineDurationMilliseconds(AIndex: Integer; 
                                         const AValue: TInt32);
    procedure SetBaselineDurationTimeSpan(AIndex: Integer; 
                                     const AValue: TTime);
    procedure SetBaselineFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetBaselineStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetBaselineWork(AIndex: Integer; const AValue: string);
    procedure SetBaselineWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetBaselineWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetBudgetCost(AIndex: Integer; const AValue: Double);
    procedure SetCostPerformanceIndex(AIndex: Integer; const AValue: Double);
    procedure SetCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetCostVarianceAtCompletion(AIndex: Integer; 
                                     const AValue: Double);
    procedure SetCostVariancePercentage(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetDurationVariance(AIndex: Integer; const AValue: string);
    procedure SetDurationVarianceMilliseconds(AIndex: Integer; 
                                         const AValue: TInt32);
    procedure SetDurationVarianceTimeSpan(AIndex: Integer; 
                                     const AValue: TTime);
    procedure SetEarliestFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetEarliestStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetEstimateAtCompletion(AIndex: Integer; const AValue: Double);
    procedure SetFinishSlack(AIndex: Integer; const AValue: string);
    procedure SetFinishSlackMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetFinishSlackTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetFinishVariance(AIndex: Integer; const AValue: string);
    procedure SetFinishVarianceMilliseconds(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetFinishVarianceTimeSpan(AIndex: Integer; 
                                   const AValue: TTime);
    procedure SetFreeSlack(AIndex: Integer; const AValue: string);
    procedure SetFreeSlackMilliseconds(AIndex: Integer; 
                                  const AValue: TInt32);
    procedure SetFreeSlackTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsCritical(AIndex: Integer; const AValue: boolean);
    procedure SetIsExternalTask(AIndex: Integer; const AValue: boolean);
    procedure SetIsOverAllocated(AIndex: Integer; const AValue: boolean);
    procedure SetIsRecurring(AIndex: Integer; const AValue: boolean);
    procedure SetIsRecurringSummary(AIndex: Integer; const AValue: boolean);
    procedure SetIsRolledUp(AIndex: Integer; const AValue: boolean);
    procedure SetIsSubProject(AIndex: Integer; const AValue: boolean);
    procedure SetIsSubProjectReadOnly(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetIsSubProjectScheduledFromFinish(AIndex: Integer; 
                                            const AValue: boolean);
    procedure SetIsSummary(AIndex: Integer; const AValue: boolean);
    procedure SetLatestFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetLatestStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetOutlinePosition(AIndex: Integer; const AValue: string);
    procedure SetOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetPreLevelingFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetPreLevelingStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetRegularWork(AIndex: Integer; const AValue: string);
    procedure SetRegularWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetRemainingCost(AIndex: Integer; const AValue: Double);
    procedure SetRemainingOvertimeCost(AIndex: Integer; 
                                  const AValue: Double);
    procedure SetRemainingOvertimeWork(AIndex: Integer; 
                                  const AValue: string);
    procedure SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; 
                                              const AValue: TInt32);
    procedure SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; 
                                          const AValue: TTime);
    procedure SetRemainingWork(AIndex: Integer; const AValue: string);
    procedure SetRemainingWorkMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetResume(AIndex: Integer; const AValue: TDateTime);
    procedure SetScheduleCostVariance(AIndex: Integer; const AValue: Double);
    procedure SetScheduledDuration(AIndex: Integer; const AValue: string);
    procedure SetScheduledDurationMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetScheduledDurationTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetScheduledFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetScheduledStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetSchedulePerformanceIndex(AIndex: Integer; 
                                     const AValue: Double);
    procedure SetScheduleVariancePercentage(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetStartSlack(AIndex: Integer; const AValue: string);
    procedure SetStartSlackMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetStartSlackTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetStartVariance(AIndex: Integer; const AValue: string);
    procedure SetStartVarianceMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetStartVarianceTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetStop(AIndex: Integer; const AValue: TDateTime);
    procedure SetToCompletePerformanceIndex(AIndex: Integer; 
                                       const AValue: Double);
    procedure SetTotalSlack(AIndex: Integer; const AValue: string);
    procedure SetTotalSlackMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetTotalSlackTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetWorkBreakdownStructure(AIndex: Integer; 
                                   const AValue: string);
    procedure SetWorkVariance(AIndex: Integer; const AValue: string);
    procedure SetWorkVarianceMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetWorkVarianceTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function SubProject(AService: TODataService) : TPSPublishedProject;
  published
    Property ActualDuration : string index 0 read FActualDuration write SetActualDuration;
    Property ActualDurationMilliseconds : TInt32 index 8 read FActualDurationMilliseconds write SetActualDurationMilliseconds;
    Property ActualDurationTimeSpan : TTime index 16 read FActualDurationTimeSpan write SetActualDurationTimeSpan;
    Property BaselineCost : Double index 24 read FBaselineCost write SetBaselineCost;
    Property BaselineDuration : string index 32 read FBaselineDuration write SetBaselineDuration;
    Property BaselineDurationMilliseconds : TInt32 index 40 read FBaselineDurationMilliseconds write SetBaselineDurationMilliseconds;
    Property BaselineDurationTimeSpan : TTime index 48 read FBaselineDurationTimeSpan write SetBaselineDurationTimeSpan;
    Property BaselineFinish : TDateTime index 56 read FBaselineFinish write SetBaselineFinish;
    Property BaselineStart : TDateTime index 64 read FBaselineStart write SetBaselineStart;
    Property BaselineWork : string index 72 read FBaselineWork write SetBaselineWork;
    Property BaselineWorkMilliseconds : TInt32 index 80 read FBaselineWorkMilliseconds write SetBaselineWorkMilliseconds;
    Property BaselineWorkTimeSpan : TTime index 88 read FBaselineWorkTimeSpan write SetBaselineWorkTimeSpan;
    Property BudgetCost : Double index 96 read FBudgetCost write SetBudgetCost;
    Property CostPerformanceIndex : Double index 104 read FCostPerformanceIndex write SetCostPerformanceIndex;
    Property CostVariance : Double index 112 read FCostVariance write SetCostVariance;
    Property CostVarianceAtCompletion : Double index 120 read FCostVarianceAtCompletion write SetCostVarianceAtCompletion;
    Property CostVariancePercentage : TInt32 index 128 read FCostVariancePercentage write SetCostVariancePercentage;
    Property Created : TDateTime index 136 read FCreated write SetCreated;
    Property DurationVariance : string index 144 read FDurationVariance write SetDurationVariance;
    Property DurationVarianceMilliseconds : TInt32 index 152 read FDurationVarianceMilliseconds write SetDurationVarianceMilliseconds;
    Property DurationVarianceTimeSpan : TTime index 160 read FDurationVarianceTimeSpan write SetDurationVarianceTimeSpan;
    Property EarliestFinish : TDateTime index 168 read FEarliestFinish write SetEarliestFinish;
    Property EarliestStart : TDateTime index 176 read FEarliestStart write SetEarliestStart;
    Property EstimateAtCompletion : Double index 184 read FEstimateAtCompletion write SetEstimateAtCompletion;
    Property FinishSlack : string index 192 read FFinishSlack write SetFinishSlack;
    Property FinishSlackMilliseconds : TInt32 index 200 read FFinishSlackMilliseconds write SetFinishSlackMilliseconds;
    Property FinishSlackTimeSpan : TTime index 208 read FFinishSlackTimeSpan write SetFinishSlackTimeSpan;
    Property FinishVariance : string index 216 read FFinishVariance write SetFinishVariance;
    Property FinishVarianceMilliseconds : TInt32 index 224 read FFinishVarianceMilliseconds write SetFinishVarianceMilliseconds;
    Property FinishVarianceTimeSpan : TTime index 232 read FFinishVarianceTimeSpan write SetFinishVarianceTimeSpan;
    Property FreeSlack : string index 240 read FFreeSlack write SetFreeSlack;
    Property FreeSlackMilliseconds : TInt32 index 248 read FFreeSlackMilliseconds write SetFreeSlackMilliseconds;
    Property FreeSlackTimeSpan : TTime index 256 read FFreeSlackTimeSpan write SetFreeSlackTimeSpan;
    Property Id : TGUIDString index 264 read FId write SetId;
    Property IsCritical : boolean index 272 read FIsCritical write SetIsCritical;
    Property IsExternalTask : boolean index 280 read FIsExternalTask write SetIsExternalTask;
    Property IsOverAllocated : boolean index 288 read FIsOverAllocated write SetIsOverAllocated;
    Property IsRecurring : boolean index 296 read FIsRecurring write SetIsRecurring;
    Property IsRecurringSummary : boolean index 304 read FIsRecurringSummary write SetIsRecurringSummary;
    Property IsRolledUp : boolean index 312 read FIsRolledUp write SetIsRolledUp;
    Property IsSubProject : boolean index 320 read FIsSubProject write SetIsSubProject;
    Property IsSubProjectReadOnly : boolean index 328 read FIsSubProjectReadOnly write SetIsSubProjectReadOnly;
    Property IsSubProjectScheduledFromFinish : boolean index 336 read FIsSubProjectScheduledFromFinish write SetIsSubProjectScheduledFromFinish;
    Property IsSummary : boolean index 344 read FIsSummary write SetIsSummary;
    Property LatestFinish : TDateTime index 352 read FLatestFinish write SetLatestFinish;
    Property LatestStart : TDateTime index 360 read FLatestStart write SetLatestStart;
    Property Modified : TDateTime index 368 read FModified write SetModified;
    Property Notes : string index 376 read FNotes write SetNotes;
    Property OutlinePosition : string index 384 read FOutlinePosition write SetOutlinePosition;
    Property OvertimeCost : Double index 392 read FOvertimeCost write SetOvertimeCost;
    Property OvertimeWork : string index 400 read FOvertimeWork write SetOvertimeWork;
    Property OvertimeWorkMilliseconds : TInt32 index 408 read FOvertimeWorkMilliseconds write SetOvertimeWorkMilliseconds;
    Property OvertimeWorkTimeSpan : TTime index 416 read FOvertimeWorkTimeSpan write SetOvertimeWorkTimeSpan;
    Property PercentWorkComplete : TInt32 index 424 read FPercentWorkComplete write SetPercentWorkComplete;
    Property PreLevelingFinish : TDateTime index 432 read FPreLevelingFinish write SetPreLevelingFinish;
    Property PreLevelingStart : TDateTime index 440 read FPreLevelingStart write SetPreLevelingStart;
    Property RegularWork : string index 448 read FRegularWork write SetRegularWork;
    Property RegularWorkMilliseconds : TInt32 index 456 read FRegularWorkMilliseconds write SetRegularWorkMilliseconds;
    Property RegularWorkTimeSpan : TTime index 464 read FRegularWorkTimeSpan write SetRegularWorkTimeSpan;
    Property RemainingCost : Double index 472 read FRemainingCost write SetRemainingCost;
    Property RemainingOvertimeCost : Double index 480 read FRemainingOvertimeCost write SetRemainingOvertimeCost;
    Property RemainingOvertimeWork : string index 488 read FRemainingOvertimeWork write SetRemainingOvertimeWork;
    Property RemainingOvertimeWorkMilliseconds : TInt32 index 496 read FRemainingOvertimeWorkMilliseconds write SetRemainingOvertimeWorkMilliseconds;
    Property RemainingOvertimeWorkTimeSpan : TTime index 504 read FRemainingOvertimeWorkTimeSpan write SetRemainingOvertimeWorkTimeSpan;
    Property RemainingWork : string index 512 read FRemainingWork write SetRemainingWork;
    Property RemainingWorkMilliseconds : TInt32 index 520 read FRemainingWorkMilliseconds write SetRemainingWorkMilliseconds;
    Property RemainingWorkTimeSpan : TTime index 528 read FRemainingWorkTimeSpan write SetRemainingWorkTimeSpan;
    Property Resume : TDateTime index 536 read FResume write SetResume;
    Property ScheduleCostVariance : Double index 544 read FScheduleCostVariance write SetScheduleCostVariance;
    Property ScheduledDuration : string index 552 read FScheduledDuration write SetScheduledDuration;
    Property ScheduledDurationMilliseconds : TInt32 index 560 read FScheduledDurationMilliseconds write SetScheduledDurationMilliseconds;
    Property ScheduledDurationTimeSpan : TTime index 568 read FScheduledDurationTimeSpan write SetScheduledDurationTimeSpan;
    Property ScheduledFinish : TDateTime index 576 read FScheduledFinish write SetScheduledFinish;
    Property ScheduledStart : TDateTime index 584 read FScheduledStart write SetScheduledStart;
    Property SchedulePerformanceIndex : Double index 592 read FSchedulePerformanceIndex write SetSchedulePerformanceIndex;
    Property ScheduleVariancePercentage : TInt32 index 600 read FScheduleVariancePercentage write SetScheduleVariancePercentage;
    Property StartSlack : string index 608 read FStartSlack write SetStartSlack;
    Property StartSlackMilliseconds : TInt32 index 616 read FStartSlackMilliseconds write SetStartSlackMilliseconds;
    Property StartSlackTimeSpan : TTime index 624 read FStartSlackTimeSpan write SetStartSlackTimeSpan;
    Property StartVariance : string index 632 read FStartVariance write SetStartVariance;
    Property StartVarianceMilliseconds : TInt32 index 640 read FStartVarianceMilliseconds write SetStartVarianceMilliseconds;
    Property StartVarianceTimeSpan : TTime index 648 read FStartVarianceTimeSpan write SetStartVarianceTimeSpan;
    Property Stop : TDateTime index 656 read FStop write SetStop;
    Property ToCompletePerformanceIndex : Double index 664 read FToCompletePerformanceIndex write SetToCompletePerformanceIndex;
    Property TotalSlack : string index 672 read FTotalSlack write SetTotalSlack;
    Property TotalSlackMilliseconds : TInt32 index 680 read FTotalSlackMilliseconds write SetTotalSlackMilliseconds;
    Property TotalSlackTimeSpan : TTime index 688 read FTotalSlackTimeSpan write SetTotalSlackTimeSpan;
    Property WorkBreakdownStructure : string index 696 read FWorkBreakdownStructure write SetWorkBreakdownStructure;
    Property WorkVariance : string index 704 read FWorkVariance write SetWorkVariance;
    Property WorkVarianceMilliseconds : TInt32 index 712 read FWorkVarianceMilliseconds write SetWorkVarianceMilliseconds;
    Property WorkVarianceTimeSpan : TTime index 720 read FWorkVarianceTimeSpan write SetWorkVarianceTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PublishedTask
    --------------------------------------------------------------------}
  
  TPSPublishedTask = Class(TPSTask)
  private
    FActualCost : Double;
    FActualCostWorkPerformed : Double;
    FActualFinish : TDateTime;
    FActualOvertimeCost : Double;
    FActualOvertimeWork : string;
    FActualOvertimeWorkMilliseconds : TInt32;
    FActualOvertimeWorkTimeSpan : TTime;
    FActualStart : TDateTime;
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FBudgetedCostWorkPerformed : Double;
    FBudgetedCostWorkScheduled : Double;
    FBudgetWork : string;
    FBudgetWorkMilliseconds : TInt32;
    FBudgetWorkTimeSpan : TTime;
    FCompletion : TDateTime;
    FConstraintStartEnd : TDateTime;
    FConstraintType : TInt32;
    FContact : string;
    FCost : Double;
    FDeadline : TDateTime;
    FDuration : string;
    FDurationMilliseconds : TInt32;
    FDurationTimeSpan : TTime;
    FFinish : TDateTime;
    FFixedCost : Double;
    FFixedCostAccrual : TInt32;
    FIsActive : boolean;
    FIsEffortDriven : boolean;
    FIsLockedByManager : boolean;
    FIsManual : boolean;
    FIsMarked : boolean;
    FIsMilestone : boolean;
    FLevelingAdjustsAssignments : boolean;
    FLevelingCanSplit : boolean;
    FLevelingDelay : string;
    FLevelingDelayMilliseconds : TInt32;
    FLevelingDelayTimeSpan : TTime;
    FName : string;
    FOutlineLevel : TInt32;
    FPercentComplete : TInt32;
    FPercentPhysicalWorkComplete : TInt32;
    FPriority : TInt32;
    FRemainingDuration : string;
    FRemainingDurationMilliseconds : TInt32;
    FRemainingDurationTimeSpan : TTime;
    FStart : TDateTime;
    FTaskType : TInt32;
    FUsePercentPhysicalWorkComplete : boolean;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    procedure SetActualCost(AIndex: Integer; const AValue: Double);
    procedure SetActualCostWorkPerformed(AIndex: Integer; 
                                    const AValue: Double);
    procedure SetActualFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetActualOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetActualOvertimeWorkMilliseconds(AIndex: Integer; 
                                           const AValue: TInt32);
    procedure SetActualOvertimeWorkTimeSpan(AIndex: Integer; 
                                       const AValue: TTime);
    procedure SetActualStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetBudgetedCostWorkPerformed(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetBudgetedCostWorkScheduled(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetBudgetWork(AIndex: Integer; const AValue: string);
    procedure SetBudgetWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetBudgetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetCompletion(AIndex: Integer; const AValue: TDateTime);
    procedure SetConstraintStartEnd(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetConstraintType(AIndex: Integer; const AValue: TInt32);
    procedure SetContact(AIndex: Integer; const AValue: string);
    procedure SetCost(AIndex: Integer; const AValue: Double);
    procedure SetDeadline(AIndex: Integer; const AValue: TDateTime);
    procedure SetDuration(AIndex: Integer; const AValue: string);
    procedure SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetDurationTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetFixedCost(AIndex: Integer; const AValue: Double);
    procedure SetFixedCostAccrual(AIndex: Integer; const AValue: TInt32);
    procedure SetIsActive(AIndex: Integer; const AValue: boolean);
    procedure SetIsEffortDriven(AIndex: Integer; const AValue: boolean);
    procedure SetIsLockedByManager(AIndex: Integer; const AValue: boolean);
    procedure SetIsManual(AIndex: Integer; const AValue: boolean);
    procedure SetIsMarked(AIndex: Integer; const AValue: boolean);
    procedure SetIsMilestone(AIndex: Integer; const AValue: boolean);
    procedure SetLevelingAdjustsAssignments(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetLevelingCanSplit(AIndex: Integer; const AValue: boolean);
    procedure SetLevelingDelay(AIndex: Integer; const AValue: string);
    procedure SetLevelingDelayMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetLevelingDelayTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOutlineLevel(AIndex: Integer; const AValue: TInt32);
    procedure SetPercentComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetPercentPhysicalWorkComplete(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetPriority(AIndex: Integer; const AValue: TInt32);
    procedure SetRemainingDuration(AIndex: Integer; const AValue: string);
    procedure SetRemainingDurationMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetRemainingDurationTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetTaskType(AIndex: Integer; const AValue: TInt32);
    procedure SetUsePercentPhysicalWorkComplete(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function Assignments(AService: TODataService) : TPSPublishedAssignment;
    function Calendar(AService: TODataService) : TPSCalendar;
    function Parent(AService: TODataService) : TPSPublishedTask;
    function Predecessors(AService: TODataService) : TPSPublishedTaskLink;
    function Successors(AService: TODataService) : TPSPublishedTaskLink;
  published
    Property ActualCost : Double index 728 read FActualCost write SetActualCost;
    Property ActualCostWorkPerformed : Double index 736 read FActualCostWorkPerformed write SetActualCostWorkPerformed;
    Property ActualFinish : TDateTime index 744 read FActualFinish write SetActualFinish;
    Property ActualOvertimeCost : Double index 752 read FActualOvertimeCost write SetActualOvertimeCost;
    Property ActualOvertimeWork : string index 760 read FActualOvertimeWork write SetActualOvertimeWork;
    Property ActualOvertimeWorkMilliseconds : TInt32 index 768 read FActualOvertimeWorkMilliseconds write SetActualOvertimeWorkMilliseconds;
    Property ActualOvertimeWorkTimeSpan : TTime index 776 read FActualOvertimeWorkTimeSpan write SetActualOvertimeWorkTimeSpan;
    Property ActualStart : TDateTime index 784 read FActualStart write SetActualStart;
    Property ActualWork : string index 792 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 800 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 808 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property BudgetedCostWorkPerformed : Double index 816 read FBudgetedCostWorkPerformed write SetBudgetedCostWorkPerformed;
    Property BudgetedCostWorkScheduled : Double index 824 read FBudgetedCostWorkScheduled write SetBudgetedCostWorkScheduled;
    Property BudgetWork : string index 832 read FBudgetWork write SetBudgetWork;
    Property BudgetWorkMilliseconds : TInt32 index 840 read FBudgetWorkMilliseconds write SetBudgetWorkMilliseconds;
    Property BudgetWorkTimeSpan : TTime index 848 read FBudgetWorkTimeSpan write SetBudgetWorkTimeSpan;
    Property Completion : TDateTime index 856 read FCompletion write SetCompletion;
    Property ConstraintStartEnd : TDateTime index 864 read FConstraintStartEnd write SetConstraintStartEnd;
    Property ConstraintType : TInt32 index 872 read FConstraintType write SetConstraintType;
    Property Contact : string index 880 read FContact write SetContact;
    Property Cost : Double index 888 read FCost write SetCost;
    Property Deadline : TDateTime index 896 read FDeadline write SetDeadline;
    Property Duration : string index 904 read FDuration write SetDuration;
    Property DurationMilliseconds : TInt32 index 912 read FDurationMilliseconds write SetDurationMilliseconds;
    Property DurationTimeSpan : TTime index 920 read FDurationTimeSpan write SetDurationTimeSpan;
    Property Finish : TDateTime index 928 read FFinish write SetFinish;
    Property FixedCost : Double index 936 read FFixedCost write SetFixedCost;
    Property FixedCostAccrual : TInt32 index 944 read FFixedCostAccrual write SetFixedCostAccrual;
    Property IsActive : boolean index 952 read FIsActive write SetIsActive;
    Property IsEffortDriven : boolean index 960 read FIsEffortDriven write SetIsEffortDriven;
    Property IsLockedByManager : boolean index 968 read FIsLockedByManager write SetIsLockedByManager;
    Property IsManual : boolean index 976 read FIsManual write SetIsManual;
    Property IsMarked : boolean index 984 read FIsMarked write SetIsMarked;
    Property IsMilestone : boolean index 992 read FIsMilestone write SetIsMilestone;
    Property LevelingAdjustsAssignments : boolean index 1000 read FLevelingAdjustsAssignments write SetLevelingAdjustsAssignments;
    Property LevelingCanSplit : boolean index 1008 read FLevelingCanSplit write SetLevelingCanSplit;
    Property LevelingDelay : string index 1016 read FLevelingDelay write SetLevelingDelay;
    Property LevelingDelayMilliseconds : TInt32 index 1024 read FLevelingDelayMilliseconds write SetLevelingDelayMilliseconds;
    Property LevelingDelayTimeSpan : TTime index 1032 read FLevelingDelayTimeSpan write SetLevelingDelayTimeSpan;
    Property Name : string index 1040 read FName write SetName;
    Property OutlineLevel : TInt32 index 1048 read FOutlineLevel write SetOutlineLevel;
    Property PercentComplete : TInt32 index 1056 read FPercentComplete write SetPercentComplete;
    Property PercentPhysicalWorkComplete : TInt32 index 1064 read FPercentPhysicalWorkComplete write SetPercentPhysicalWorkComplete;
    Property Priority : TInt32 index 1072 read FPriority write SetPriority;
    Property RemainingDuration : string index 1080 read FRemainingDuration write SetRemainingDuration;
    Property RemainingDurationMilliseconds : TInt32 index 1088 read FRemainingDurationMilliseconds write SetRemainingDurationMilliseconds;
    Property RemainingDurationTimeSpan : TTime index 1096 read FRemainingDurationTimeSpan write SetRemainingDurationTimeSpan;
    Property Start : TDateTime index 1104 read FStart write SetStart;
    Property TaskType : TInt32 index 1112 read FTaskType write SetTaskType;
    Property UsePercentPhysicalWorkComplete : boolean index 1120 read FUsePercentPhysicalWorkComplete write SetUsePercentPhysicalWorkComplete;
    Property Work : string index 1128 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 1136 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 1144 read FWorkTimeSpan write SetWorkTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TaskLink
    --------------------------------------------------------------------}
  
  TPSTaskLink = Class(TODataEntity)
  private
    FId : TGUIDString;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PublishedTaskLink
    --------------------------------------------------------------------}
  
  TPSPublishedTaskLink = Class(TPSTaskLink)
  private
    FDependencyType : TInt32;
    procedure SetDependencyType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function _End(AService: TODataService) : TPSPublishedTask;
    function Start(AService: TODataService) : TPSPublishedTask;
  published
    Property DependencyType : TInt32 index 8 read FDependencyType write SetDependencyType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: DraftProject
    --------------------------------------------------------------------}
  
  TPSDraftProject = Class(TPSProject)
  private
    FCalculateActualCosts : boolean;
    FCalculatesActualCosts : boolean;
    FCriticalSlackLimit : TInt32;
    FCurrencyCode : string;
    FCurrencyDigits : TInt32;
    FCurrencyPosition : TInt32;
    FCurrencySymbol : string;
    FCurrentDate : TDateTime;
    FDaysPerMonth : TInt16;
    FDefaultEffortDriven : boolean;
    FDefaultEstimatedDuration : boolean;
    FDefaultFinishTime : TDateTime;
    FDefaultFixedCostAccrual : TInt32;
    FDefaultOvertimeRate : Double;
    FDefaultStandardRate : Double;
    FDefaultStartTime : TDateTime;
    FDefaultTaskType : TInt32;
    FDefaultWorkFormat : TInt32;
    FDescription : string;
    FFinishDate : TDateTime;
    FFiscalYearStartMonth : TInt16;
    FHonorConstraints : boolean;
    FMinutesPerDay : TInt32;
    FMinutesPerWeek : TInt32;
    FMoveActualIfLater : boolean;
    FMoveActualToStatus : boolean;
    FMoveRemainingIfEarlier : boolean;
    FMoveRemainingToStatus : boolean;
    FMultipleCriticalPaths : boolean;
    FName : string;
    FNewTasksAreManual : boolean;
    FNumberFiscalYearFromStart : boolean;
    FProtectedActualsSynch : boolean;
    FScheduledFromStart : boolean;
    FShowEstimatedDurations : boolean;
    FSplitInProgress : boolean;
    FSpreadActualCostsToStatus : boolean;
    FSpreadPercentCompleteToStatus : boolean;
    FStartDate : TDateTime;
    FStatusDate : TDateTime;
    FTrackingMode : TInt32;
    FWeekStartDay : TInt16;
    FWinprojVersion : double;
    procedure SetCalculateActualCosts(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetCalculatesActualCosts(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetCriticalSlackLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetCurrencyCode(AIndex: Integer; const AValue: string);
    procedure SetCurrencyDigits(AIndex: Integer; const AValue: TInt32);
    procedure SetCurrencyPosition(AIndex: Integer; const AValue: TInt32);
    procedure SetCurrencySymbol(AIndex: Integer; const AValue: string);
    procedure SetCurrentDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetDaysPerMonth(AIndex: Integer; const AValue: TInt16);
    procedure SetDefaultEffortDriven(AIndex: Integer; const AValue: boolean);
    procedure SetDefaultEstimatedDuration(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetDefaultFinishTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefaultFixedCostAccrual(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetDefaultOvertimeRate(AIndex: Integer; const AValue: Double);
    procedure SetDefaultStandardRate(AIndex: Integer; const AValue: Double);
    procedure SetDefaultStartTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetDefaultTaskType(AIndex: Integer; const AValue: TInt32);
    procedure SetDefaultWorkFormat(AIndex: Integer; const AValue: TInt32);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetFinishDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetFiscalYearStartMonth(AIndex: Integer; const AValue: TInt16);
    procedure SetHonorConstraints(AIndex: Integer; const AValue: boolean);
    procedure SetMinutesPerDay(AIndex: Integer; const AValue: TInt32);
    procedure SetMinutesPerWeek(AIndex: Integer; const AValue: TInt32);
    procedure SetMoveActualIfLater(AIndex: Integer; const AValue: boolean);
    procedure SetMoveActualToStatus(AIndex: Integer; const AValue: boolean);
    procedure SetMoveRemainingIfEarlier(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetMoveRemainingToStatus(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetMultipleCriticalPaths(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNewTasksAreManual(AIndex: Integer; const AValue: boolean);
    procedure SetNumberFiscalYearFromStart(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetProtectedActualsSynch(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetScheduledFromStart(AIndex: Integer; const AValue: boolean);
    procedure SetShowEstimatedDurations(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetSplitInProgress(AIndex: Integer; const AValue: boolean);
    procedure SetSpreadActualCostsToStatus(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetSpreadPercentCompleteToStatus(AIndex: Integer; 
                                          const AValue: boolean);
    procedure SetStartDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetStatusDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetTrackingMode(AIndex: Integer; const AValue: TInt32);
    procedure SetWeekStartDay(AIndex: Integer; const AValue: TInt16);
    procedure SetWinprojVersion(AIndex: Integer; const AValue: double);
  public
    class function ObjectRestKind : String;  Override;
    function Assignments(AService: TODataService) : TPSDraftAssignment;
    function Calendar(AService: TODataService) : TPSCalendar;
    function IncludeCustomFields(AService: TODataService) : TPSDraftProject;
    function Owner(AService: TODataService) : TSPUser;
    function ProjectResources(AService: TODataService)
                          : TPSDraftProjectResource;
    function TaskLinks(AService: TODataService) : TPSDraftTaskLink;
    function Tasks(AService: TODataService) : TPSDraftTask;
  published
    Property CalculateActualCosts : boolean index 176 read FCalculateActualCosts write SetCalculateActualCosts;
    Property CalculatesActualCosts : boolean index 184 read FCalculatesActualCosts write SetCalculatesActualCosts;
    Property CriticalSlackLimit : TInt32 index 192 read FCriticalSlackLimit write SetCriticalSlackLimit;
    Property CurrencyCode : string index 200 read FCurrencyCode write SetCurrencyCode;
    Property CurrencyDigits : TInt32 index 208 read FCurrencyDigits write SetCurrencyDigits;
    Property CurrencyPosition : TInt32 index 216 read FCurrencyPosition write SetCurrencyPosition;
    Property CurrencySymbol : string index 224 read FCurrencySymbol write SetCurrencySymbol;
    Property CurrentDate : TDateTime index 232 read FCurrentDate write SetCurrentDate;
    Property DaysPerMonth : TInt16 index 240 read FDaysPerMonth write SetDaysPerMonth;
    Property DefaultEffortDriven : boolean index 248 read FDefaultEffortDriven write SetDefaultEffortDriven;
    Property DefaultEstimatedDuration : boolean index 256 read FDefaultEstimatedDuration write SetDefaultEstimatedDuration;
    Property DefaultFinishTime : TDateTime index 264 read FDefaultFinishTime write SetDefaultFinishTime;
    Property DefaultFixedCostAccrual : TInt32 index 272 read FDefaultFixedCostAccrual write SetDefaultFixedCostAccrual;
    Property DefaultOvertimeRate : Double index 280 read FDefaultOvertimeRate write SetDefaultOvertimeRate;
    Property DefaultStandardRate : Double index 288 read FDefaultStandardRate write SetDefaultStandardRate;
    Property DefaultStartTime : TDateTime index 296 read FDefaultStartTime write SetDefaultStartTime;
    Property DefaultTaskType : TInt32 index 304 read FDefaultTaskType write SetDefaultTaskType;
    Property DefaultWorkFormat : TInt32 index 312 read FDefaultWorkFormat write SetDefaultWorkFormat;
    Property Description : string index 320 read FDescription write SetDescription;
    Property FinishDate : TDateTime index 328 read FFinishDate write SetFinishDate;
    Property FiscalYearStartMonth : TInt16 index 336 read FFiscalYearStartMonth write SetFiscalYearStartMonth;
    Property HonorConstraints : boolean index 344 read FHonorConstraints write SetHonorConstraints;
    Property MinutesPerDay : TInt32 index 352 read FMinutesPerDay write SetMinutesPerDay;
    Property MinutesPerWeek : TInt32 index 360 read FMinutesPerWeek write SetMinutesPerWeek;
    Property MoveActualIfLater : boolean index 368 read FMoveActualIfLater write SetMoveActualIfLater;
    Property MoveActualToStatus : boolean index 376 read FMoveActualToStatus write SetMoveActualToStatus;
    Property MoveRemainingIfEarlier : boolean index 384 read FMoveRemainingIfEarlier write SetMoveRemainingIfEarlier;
    Property MoveRemainingToStatus : boolean index 392 read FMoveRemainingToStatus write SetMoveRemainingToStatus;
    Property MultipleCriticalPaths : boolean index 400 read FMultipleCriticalPaths write SetMultipleCriticalPaths;
    Property Name : string index 408 read FName write SetName;
    Property NewTasksAreManual : boolean index 416 read FNewTasksAreManual write SetNewTasksAreManual;
    Property NumberFiscalYearFromStart : boolean index 424 read FNumberFiscalYearFromStart write SetNumberFiscalYearFromStart;
    Property ProtectedActualsSynch : boolean index 432 read FProtectedActualsSynch write SetProtectedActualsSynch;
    Property ScheduledFromStart : boolean index 440 read FScheduledFromStart write SetScheduledFromStart;
    Property ShowEstimatedDurations : boolean index 448 read FShowEstimatedDurations write SetShowEstimatedDurations;
    Property SplitInProgress : boolean index 456 read FSplitInProgress write SetSplitInProgress;
    Property SpreadActualCostsToStatus : boolean index 464 read FSpreadActualCostsToStatus write SetSpreadActualCostsToStatus;
    Property SpreadPercentCompleteToStatus : boolean index 472 read FSpreadPercentCompleteToStatus write SetSpreadPercentCompleteToStatus;
    Property StartDate : TDateTime index 480 read FStartDate write SetStartDate;
    Property StatusDate : TDateTime index 488 read FStatusDate write SetStatusDate;
    Property TrackingMode : TInt32 index 496 read FTrackingMode write SetTrackingMode;
    Property WeekStartDay : TInt16 index 504 read FWeekStartDay write SetWeekStartDay;
    Property WinprojVersion : double index 512 read FWinprojVersion write SetWinprojVersion;
  end;
  
  
  { --------------------------------------------------------------------
    PS: DraftProjectResource
    --------------------------------------------------------------------}
  
  TPSDraftProjectResource = Class(TPSProjectResource)
  private
    FCanLevel : boolean;
    FCode : string;
    FCostAccrual : TInt32;
    FCostCenter : string;
    FCostPerUse : Double;
    FDefaultBookingType : TInt32;
    FEmail : string;
    FGroup : string;
    FInitials : string;
    FMaterialLabel : string;
    FMaximumCapacity : Double;
    FName : string;
    FOvertimeRate : Double;
    FOvertimeRateUnits : TInt32;
    FPhonetics : string;
    FStandardRate : Double;
    FStandardRateUnits : TInt32;
    procedure SetCanLevel(AIndex: Integer; const AValue: boolean);
    procedure SetCode(AIndex: Integer; const AValue: string);
    procedure SetCostAccrual(AIndex: Integer; const AValue: TInt32);
    procedure SetCostCenter(AIndex: Integer; const AValue: string);
    procedure SetCostPerUse(AIndex: Integer; const AValue: Double);
    procedure SetDefaultBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetInitials(AIndex: Integer; const AValue: string);
    procedure SetMaterialLabel(AIndex: Integer; const AValue: string);
    procedure SetMaximumCapacity(AIndex: Integer; const AValue: Double);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOvertimeRate(AIndex: Integer; const AValue: Double);
    procedure SetOvertimeRateUnits(AIndex: Integer; const AValue: TInt32);
    procedure SetPhonetics(AIndex: Integer; const AValue: string);
    procedure SetStandardRate(AIndex: Integer; const AValue: Double);
    procedure SetStandardRateUnits(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Assignments(AService: TODataService) : TPSDraftAssignment;
    function DefaultAssignmentOwner(AService: TODataService) : TSPUser;
  published
    Property CanLevel : boolean index 496 read FCanLevel write SetCanLevel;
    Property Code : string index 504 read FCode write SetCode;
    Property CostAccrual : TInt32 index 512 read FCostAccrual write SetCostAccrual;
    Property CostCenter : string index 520 read FCostCenter write SetCostCenter;
    Property CostPerUse : Double index 528 read FCostPerUse write SetCostPerUse;
    Property DefaultBookingType : TInt32 index 536 read FDefaultBookingType write SetDefaultBookingType;
    Property Email : string index 544 read FEmail write SetEmail;
    Property Group : string index 552 read FGroup write SetGroup;
    Property Initials : string index 560 read FInitials write SetInitials;
    Property MaterialLabel : string index 568 read FMaterialLabel write SetMaterialLabel;
    Property MaximumCapacity : Double index 576 read FMaximumCapacity write SetMaximumCapacity;
    Property Name : string index 584 read FName write SetName;
    Property OvertimeRate : Double index 592 read FOvertimeRate write SetOvertimeRate;
    Property OvertimeRateUnits : TInt32 index 600 read FOvertimeRateUnits write SetOvertimeRateUnits;
    Property Phonetics : string index 608 read FPhonetics write SetPhonetics;
    Property StandardRate : Double index 616 read FStandardRate write SetStandardRate;
    Property StandardRateUnits : TInt32 index 624 read FStandardRateUnits write SetStandardRateUnits;
  end;
  
  
  { --------------------------------------------------------------------
    PS: DraftTaskLink
    --------------------------------------------------------------------}
  
  TPSDraftTaskLink = Class(TPSTaskLink)
  private
    FDependencyType : TInt32;
    FEndId : TGUIDString;
    FStartId : TGUIDString;
    procedure SetDependencyType(AIndex: Integer; const AValue: TInt32);
    procedure SetEndId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStartId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function _End(AService: TODataService) : TPSDraftTask;
    function Start(AService: TODataService) : TPSDraftTask;
  published
    Property DependencyType : TInt32 index 8 read FDependencyType write SetDependencyType;
    Property EndId : TGUIDString index 16 read FEndId write SetEndId;
    Property StartId : TGUIDString index 24 read FStartId write SetStartId;
  end;
  
  
  { --------------------------------------------------------------------
    PS: DraftTask
    --------------------------------------------------------------------}
  
  TPSDraftTask = Class(TPSTask)
  private
    FActualCost : Double;
    FActualCostWorkPerformed : Double;
    FActualFinish : TDateTime;
    FActualOvertimeCost : Double;
    FActualOvertimeWork : string;
    FActualOvertimeWorkMilliseconds : TInt32;
    FActualOvertimeWorkTimeSpan : TTime;
    FActualStart : TDateTime;
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FAddAfterId : TGUIDString;
    FBudgetedCostWorkPerformed : Double;
    FBudgetedCostWorkScheduled : Double;
    FBudgetWork : string;
    FBudgetWorkMilliseconds : TInt32;
    FBudgetWorkTimeSpan : TTime;
    FCompletion : TDateTime;
    FConstraintStartEnd : TDateTime;
    FConstraintType : TInt32;
    FContact : string;
    FCost : Double;
    FDeadline : TDateTime;
    FDuration : string;
    FDurationMilliseconds : TInt32;
    FDurationTimeSpan : TTime;
    FFinish : TDateTime;
    FFixedCost : Double;
    FFixedCostAccrual : TInt32;
    FIsActive : boolean;
    FIsEffortDriven : boolean;
    FIsLockedByManager : boolean;
    FIsManual : boolean;
    FIsMarked : boolean;
    FIsMilestone : boolean;
    FLevelingAdjustsAssignments : boolean;
    FLevelingCanSplit : boolean;
    FLevelingDelay : string;
    FLevelingDelayMilliseconds : TInt32;
    FLevelingDelayTimeSpan : TTime;
    FName : string;
    FOutlineLevel : TInt32;
    FParentId : TGUIDString;
    FPercentComplete : TInt32;
    FPercentPhysicalWorkComplete : TInt32;
    FPriority : TInt32;
    FRemainingDuration : string;
    FRemainingDurationMilliseconds : TInt32;
    FRemainingDurationTimeSpan : TTime;
    FStart : TDateTime;
    FTaskType : TInt32;
    FUsePercentPhysicalWorkComplete : boolean;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    procedure SetActualCost(AIndex: Integer; const AValue: Double);
    procedure SetActualCostWorkPerformed(AIndex: Integer; 
                                    const AValue: Double);
    procedure SetActualFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualOvertimeCost(AIndex: Integer; const AValue: Double);
    procedure SetActualOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetActualOvertimeWorkMilliseconds(AIndex: Integer; 
                                           const AValue: TInt32);
    procedure SetActualOvertimeWorkTimeSpan(AIndex: Integer; 
                                       const AValue: TTime);
    procedure SetActualStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetAddAfterId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetBudgetedCostWorkPerformed(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetBudgetedCostWorkScheduled(AIndex: Integer; 
                                      const AValue: Double);
    procedure SetBudgetWork(AIndex: Integer; const AValue: string);
    procedure SetBudgetWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetBudgetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetCompletion(AIndex: Integer; const AValue: TDateTime);
    procedure SetConstraintStartEnd(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetConstraintType(AIndex: Integer; const AValue: TInt32);
    procedure SetContact(AIndex: Integer; const AValue: string);
    procedure SetCost(AIndex: Integer; const AValue: Double);
    procedure SetDeadline(AIndex: Integer; const AValue: TDateTime);
    procedure SetDuration(AIndex: Integer; const AValue: string);
    procedure SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetDurationTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetFixedCost(AIndex: Integer; const AValue: Double);
    procedure SetFixedCostAccrual(AIndex: Integer; const AValue: TInt32);
    procedure SetIsActive(AIndex: Integer; const AValue: boolean);
    procedure SetIsEffortDriven(AIndex: Integer; const AValue: boolean);
    procedure SetIsLockedByManager(AIndex: Integer; const AValue: boolean);
    procedure SetIsManual(AIndex: Integer; const AValue: boolean);
    procedure SetIsMarked(AIndex: Integer; const AValue: boolean);
    procedure SetIsMilestone(AIndex: Integer; const AValue: boolean);
    procedure SetLevelingAdjustsAssignments(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetLevelingCanSplit(AIndex: Integer; const AValue: boolean);
    procedure SetLevelingDelay(AIndex: Integer; const AValue: string);
    procedure SetLevelingDelayMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetLevelingDelayTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOutlineLevel(AIndex: Integer; const AValue: TInt32);
    procedure SetParentId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPercentComplete(AIndex: Integer; const AValue: TInt32);
    procedure SetPercentPhysicalWorkComplete(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetPriority(AIndex: Integer; const AValue: TInt32);
    procedure SetRemainingDuration(AIndex: Integer; const AValue: string);
    procedure SetRemainingDurationMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetRemainingDurationTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetTaskType(AIndex: Integer; const AValue: TInt32);
    procedure SetUsePercentPhysicalWorkComplete(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function Assignments(AService: TODataService) : TPSDraftAssignment;
    function Calendar(AService: TODataService) : TPSCalendar;
    function Parent(AService: TODataService) : TPSDraftTask;
    function Predecessors(AService: TODataService) : TPSDraftTaskLink;
    function Successors(AService: TODataService) : TPSDraftTaskLink;
  published
    Property ActualCost : Double index 728 read FActualCost write SetActualCost;
    Property ActualCostWorkPerformed : Double index 736 read FActualCostWorkPerformed write SetActualCostWorkPerformed;
    Property ActualFinish : TDateTime index 744 read FActualFinish write SetActualFinish;
    Property ActualOvertimeCost : Double index 752 read FActualOvertimeCost write SetActualOvertimeCost;
    Property ActualOvertimeWork : string index 760 read FActualOvertimeWork write SetActualOvertimeWork;
    Property ActualOvertimeWorkMilliseconds : TInt32 index 768 read FActualOvertimeWorkMilliseconds write SetActualOvertimeWorkMilliseconds;
    Property ActualOvertimeWorkTimeSpan : TTime index 776 read FActualOvertimeWorkTimeSpan write SetActualOvertimeWorkTimeSpan;
    Property ActualStart : TDateTime index 784 read FActualStart write SetActualStart;
    Property ActualWork : string index 792 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 800 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 808 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property AddAfterId : TGUIDString index 816 read FAddAfterId write SetAddAfterId;
    Property BudgetedCostWorkPerformed : Double index 824 read FBudgetedCostWorkPerformed write SetBudgetedCostWorkPerformed;
    Property BudgetedCostWorkScheduled : Double index 832 read FBudgetedCostWorkScheduled write SetBudgetedCostWorkScheduled;
    Property BudgetWork : string index 840 read FBudgetWork write SetBudgetWork;
    Property BudgetWorkMilliseconds : TInt32 index 848 read FBudgetWorkMilliseconds write SetBudgetWorkMilliseconds;
    Property BudgetWorkTimeSpan : TTime index 856 read FBudgetWorkTimeSpan write SetBudgetWorkTimeSpan;
    Property Completion : TDateTime index 864 read FCompletion write SetCompletion;
    Property ConstraintStartEnd : TDateTime index 872 read FConstraintStartEnd write SetConstraintStartEnd;
    Property ConstraintType : TInt32 index 880 read FConstraintType write SetConstraintType;
    Property Contact : string index 888 read FContact write SetContact;
    Property Cost : Double index 896 read FCost write SetCost;
    Property Deadline : TDateTime index 904 read FDeadline write SetDeadline;
    Property Duration : string index 912 read FDuration write SetDuration;
    Property DurationMilliseconds : TInt32 index 920 read FDurationMilliseconds write SetDurationMilliseconds;
    Property DurationTimeSpan : TTime index 928 read FDurationTimeSpan write SetDurationTimeSpan;
    Property Finish : TDateTime index 936 read FFinish write SetFinish;
    Property FixedCost : Double index 944 read FFixedCost write SetFixedCost;
    Property FixedCostAccrual : TInt32 index 952 read FFixedCostAccrual write SetFixedCostAccrual;
    Property IsActive : boolean index 960 read FIsActive write SetIsActive;
    Property IsEffortDriven : boolean index 968 read FIsEffortDriven write SetIsEffortDriven;
    Property IsLockedByManager : boolean index 976 read FIsLockedByManager write SetIsLockedByManager;
    Property IsManual : boolean index 984 read FIsManual write SetIsManual;
    Property IsMarked : boolean index 992 read FIsMarked write SetIsMarked;
    Property IsMilestone : boolean index 1000 read FIsMilestone write SetIsMilestone;
    Property LevelingAdjustsAssignments : boolean index 1008 read FLevelingAdjustsAssignments write SetLevelingAdjustsAssignments;
    Property LevelingCanSplit : boolean index 1016 read FLevelingCanSplit write SetLevelingCanSplit;
    Property LevelingDelay : string index 1024 read FLevelingDelay write SetLevelingDelay;
    Property LevelingDelayMilliseconds : TInt32 index 1032 read FLevelingDelayMilliseconds write SetLevelingDelayMilliseconds;
    Property LevelingDelayTimeSpan : TTime index 1040 read FLevelingDelayTimeSpan write SetLevelingDelayTimeSpan;
    Property Name : string index 1048 read FName write SetName;
    Property OutlineLevel : TInt32 index 1056 read FOutlineLevel write SetOutlineLevel;
    Property ParentId : TGUIDString index 1064 read FParentId write SetParentId;
    Property PercentComplete : TInt32 index 1072 read FPercentComplete write SetPercentComplete;
    Property PercentPhysicalWorkComplete : TInt32 index 1080 read FPercentPhysicalWorkComplete write SetPercentPhysicalWorkComplete;
    Property Priority : TInt32 index 1088 read FPriority write SetPriority;
    Property RemainingDuration : string index 1096 read FRemainingDuration write SetRemainingDuration;
    Property RemainingDurationMilliseconds : TInt32 index 1104 read FRemainingDurationMilliseconds write SetRemainingDurationMilliseconds;
    Property RemainingDurationTimeSpan : TTime index 1112 read FRemainingDurationTimeSpan write SetRemainingDurationTimeSpan;
    Property Start : TDateTime index 1120 read FStart write SetStart;
    Property TaskType : TInt32 index 1128 read FTaskType write SetTaskType;
    Property UsePercentPhysicalWorkComplete : boolean index 1136 read FUsePercentPhysicalWorkComplete write SetUsePercentPhysicalWorkComplete;
    Property Work : string index 1144 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 1152 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 1160 read FWorkTimeSpan write SetWorkTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: StatusTask
    --------------------------------------------------------------------}
  
  TPSStatusTask = Class(TODataEntity)
  private
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FDeadline : TDateTime;
    FDuration : string;
    FDurationMilliseconds : TInt32;
    FDurationTimeSpan : TTime;
    FFinish : TDateTime;
    FId : TGUIDString;
    FName : string;
    FOvertime : string;
    FOvertimeMilliseconds : TInt32;
    FOvertimeTimeSpan : TTime;
    FPercentComplete : TInt16;
    FPercentWorkComplete : TInt16;
    FPhysicalPercentComplete : TInt16;
    FRegularWork : string;
    FRegularWorkMilliseconds : TInt32;
    FRegularWorkTimeSpan : TTime;
    FRemainingDuration : string;
    FRemainingDurationMilliseconds : TInt32;
    FRemainingDurationTimeSpan : TTime;
    FRemainingOvertime : string;
    FRemainingOvertimeMilliseconds : TInt32;
    FRemainingOvertimeTimeSpan : TTime;
    FRemainingWork : string;
    FRemainingWorkMilliseconds : TInt32;
    FRemainingWorkTimeSpan : TTime;
    FResume : TDateTime;
    FStart : TDateTime;
    FWork : string;
    FWorkMilliseconds : TInt32;
    FWorkTimeSpan : TTime;
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetDeadline(AIndex: Integer; const AValue: TDateTime);
    procedure SetDuration(AIndex: Integer; const AValue: string);
    procedure SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetDurationTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOvertime(AIndex: Integer; const AValue: string);
    procedure SetOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetOvertimeTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPercentComplete(AIndex: Integer; const AValue: TInt16);
    procedure SetPercentWorkComplete(AIndex: Integer; const AValue: TInt16);
    procedure SetPhysicalPercentComplete(AIndex: Integer; 
                                    const AValue: TInt16);
    procedure SetRegularWork(AIndex: Integer; const AValue: string);
    procedure SetRegularWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetRemainingDuration(AIndex: Integer; const AValue: string);
    procedure SetRemainingDurationMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetRemainingDurationTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetRemainingOvertime(AIndex: Integer; const AValue: string);
    procedure SetRemainingOvertimeMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetRemainingOvertimeTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetRemainingWork(AIndex: Integer; const AValue: string);
    procedure SetRemainingWorkMilliseconds(AIndex: Integer; 
                                      const AValue: TInt32);
    procedure SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetResume(AIndex: Integer; const AValue: TDateTime);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetWork(AIndex: Integer; const AValue: string);
    procedure SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ActualWork : string index 0 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 8 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 16 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property Deadline : TDateTime index 24 read FDeadline write SetDeadline;
    Property Duration : string index 32 read FDuration write SetDuration;
    Property DurationMilliseconds : TInt32 index 40 read FDurationMilliseconds write SetDurationMilliseconds;
    Property DurationTimeSpan : TTime index 48 read FDurationTimeSpan write SetDurationTimeSpan;
    Property Finish : TDateTime index 56 read FFinish write SetFinish;
    Property Id : TGUIDString index 64 read FId write SetId;
    Property Name : string index 72 read FName write SetName;
    Property Overtime : string index 80 read FOvertime write SetOvertime;
    Property OvertimeMilliseconds : TInt32 index 88 read FOvertimeMilliseconds write SetOvertimeMilliseconds;
    Property OvertimeTimeSpan : TTime index 96 read FOvertimeTimeSpan write SetOvertimeTimeSpan;
    Property PercentComplete : TInt16 index 104 read FPercentComplete write SetPercentComplete;
    Property PercentWorkComplete : TInt16 index 112 read FPercentWorkComplete write SetPercentWorkComplete;
    Property PhysicalPercentComplete : TInt16 index 120 read FPhysicalPercentComplete write SetPhysicalPercentComplete;
    Property RegularWork : string index 128 read FRegularWork write SetRegularWork;
    Property RegularWorkMilliseconds : TInt32 index 136 read FRegularWorkMilliseconds write SetRegularWorkMilliseconds;
    Property RegularWorkTimeSpan : TTime index 144 read FRegularWorkTimeSpan write SetRegularWorkTimeSpan;
    Property RemainingDuration : string index 152 read FRemainingDuration write SetRemainingDuration;
    Property RemainingDurationMilliseconds : TInt32 index 160 read FRemainingDurationMilliseconds write SetRemainingDurationMilliseconds;
    Property RemainingDurationTimeSpan : TTime index 168 read FRemainingDurationTimeSpan write SetRemainingDurationTimeSpan;
    Property RemainingOvertime : string index 176 read FRemainingOvertime write SetRemainingOvertime;
    Property RemainingOvertimeMilliseconds : TInt32 index 184 read FRemainingOvertimeMilliseconds write SetRemainingOvertimeMilliseconds;
    Property RemainingOvertimeTimeSpan : TTime index 192 read FRemainingOvertimeTimeSpan write SetRemainingOvertimeTimeSpan;
    Property RemainingWork : string index 200 read FRemainingWork write SetRemainingWork;
    Property RemainingWorkMilliseconds : TInt32 index 208 read FRemainingWorkMilliseconds write SetRemainingWorkMilliseconds;
    Property RemainingWorkTimeSpan : TTime index 216 read FRemainingWorkTimeSpan write SetRemainingWorkTimeSpan;
    Property Resume : TDateTime index 224 read FResume write SetResume;
    Property Start : TDateTime index 232 read FStart write SetStart;
    Property Work : string index 240 read FWork write SetWork;
    Property WorkMilliseconds : TInt32 index 248 read FWorkMilliseconds write SetWorkMilliseconds;
    Property WorkTimeSpan : TTime index 256 read FWorkTimeSpan write SetWorkTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EntityTypes
    --------------------------------------------------------------------}
  
  TPSEntityTypes = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function AssignmentEntity(AService: TODataService) : TPSEntityType;
    function ProjectEntity(AService: TODataService) : TPSEntityType;
    function ResourceEntity(AService: TODataService) : TPSEntityType;
    function TaskEntity(AService: TODataService) : TPSEntityType;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    PS: Event
    --------------------------------------------------------------------}
  
  TPSEvent = Class(TODataEntity)
  private
    FEventName : string;
    FId : TInt32;
    FSourceName : string;
    procedure SetEventName(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetSourceName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property EventName : string index 0 read FEventName write SetEventName;
    Property Id : TInt32 index 8 read FId write SetId;
    Property SourceName : string index 16 read FSourceName write SetSourceName;
  end;
  
  
  { --------------------------------------------------------------------
    PS: EventHandler
    --------------------------------------------------------------------}
  
  TPSEventHandler = Class(TODataEntity)
  private
    FAssemblyName : string;
    FCancelOnError : boolean;
    FClassName : string;
    FDescription : string;
    FEndpointUrl : string;
    FEventId : TInt32;
    FId : TGUIDString;
    FName : string;
    FOrder : TInt32;
    procedure SetAssemblyName(AIndex: Integer; const AValue: string);
    procedure SetCancelOnError(AIndex: Integer; const AValue: boolean);
    procedure SetClassName(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEndpointUrl(AIndex: Integer; const AValue: string);
    procedure SetEventId(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOrder(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Event(AService: TODataService) : TPSEvent;
  published
    Property AssemblyName : string index 0 read FAssemblyName write SetAssemblyName;
    Property CancelOnError : boolean index 8 read FCancelOnError write SetCancelOnError;
    Property ClassName : string index 16 read FClassName write SetClassName;
    Property Description : string index 24 read FDescription write SetDescription;
    Property EndpointUrl : string index 32 read FEndpointUrl write SetEndpointUrl;
    Property EventId : TInt32 index 40 read FEventId write SetEventId;
    Property Id : TGUIDString index 48 read FId write SetId;
    Property Name : string index 56 read FName write SetName;
    Property Order : TInt32 index 64 read FOrder write SetOrder;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupCost
    --------------------------------------------------------------------}
  
  TPSLookupCost = Class(TPSLookupEntry)
  private
    FValue : double;
    procedure SetValue(AIndex: Integer; const AValue: double);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Value : double index 48 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupDate
    --------------------------------------------------------------------}
  
  TPSLookupDate = Class(TPSLookupEntry)
  private
    FValue : TDateTime;
    procedure SetValue(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Value : TDateTime index 48 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupDuration
    --------------------------------------------------------------------}
  
  TPSLookupDuration = Class(TPSLookupEntry)
  private
    FValue : string;
    FValueMilliseconds : TInt32;
    FValueTimeSpan : TTime;
    procedure SetValue(AIndex: Integer; const AValue: string);
    procedure SetValueMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetValueTimeSpan(AIndex: Integer; const AValue: TTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Value : string index 48 read FValue write SetValue;
    Property ValueMilliseconds : TInt32 index 56 read FValueMilliseconds write SetValueMilliseconds;
    Property ValueTimeSpan : TTime index 64 read FValueTimeSpan write SetValueTimeSpan;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupNumber
    --------------------------------------------------------------------}
  
  TPSLookupNumber = Class(TPSLookupEntry)
  private
    FValue : double;
    procedure SetValue(AIndex: Integer; const AValue: double);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Value : double index 48 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    PS: LookupText
    --------------------------------------------------------------------}
  
  TPSLookupText = Class(TPSLookupEntry)
  private
    FHasChildren : boolean;
    FMask : TPSLookupMask;
    FValue : string;
    procedure SetHasChildren(AIndex: Integer; const AValue: boolean);
    procedure SetMask(AIndex: Integer; const AValue: TPSLookupMask);
    procedure SetValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Parent(AService: TODataService) : TPSLookupText;
  published
    Property HasChildren : boolean index 48 read FHasChildren write SetHasChildren;
    Property Mask : TPSLookupMask index 56 read FMask write SetMask;
    Property Value : string index 64 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PlanAssignment
    --------------------------------------------------------------------}
  
  TPSPlanAssignment = Class(TODataEntity)
  private
    FBookingType : TInt32;
    FCanLevel : boolean;
    FCode : string;
    FCostCenter : string;
    FEmail : string;
    FGroup : string;
    FHireDate : TDateTime;
    FId : TGUIDString;
    FIsTeam : boolean;
    FName : string;
    FPhonetics : string;
    FResourceType : TInt32;
    FTerminationDate : TDateTime;
    procedure SetBookingType(AIndex: Integer; const AValue: TInt32);
    procedure SetCanLevel(AIndex: Integer; const AValue: boolean);
    procedure SetCode(AIndex: Integer; const AValue: string);
    procedure SetCostCenter(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetHireDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsTeam(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPhonetics(AIndex: Integer; const AValue: string);
    procedure SetResourceType(AIndex: Integer; const AValue: TInt32);
    procedure SetTerminationDate(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function Intervals(AService: TODataService) : TPSPlanAssignmentInterval;
    function Resource(AService: TODataService) : TPSEnterpriseResource;
  published
    Property BookingType : TInt32 index 0 read FBookingType write SetBookingType;
    Property CanLevel : boolean index 8 read FCanLevel write SetCanLevel;
    Property Code : string index 16 read FCode write SetCode;
    Property CostCenter : string index 24 read FCostCenter write SetCostCenter;
    Property Email : string index 32 read FEmail write SetEmail;
    Property Group : string index 40 read FGroup write SetGroup;
    Property HireDate : TDateTime index 48 read FHireDate write SetHireDate;
    Property Id : TGUIDString index 56 read FId write SetId;
    Property IsTeam : boolean index 64 read FIsTeam write SetIsTeam;
    Property Name : string index 72 read FName write SetName;
    Property Phonetics : string index 80 read FPhonetics write SetPhonetics;
    Property ResourceType : TInt32 index 88 read FResourceType write SetResourceType;
    Property TerminationDate : TDateTime index 96 read FTerminationDate write SetTerminationDate;
  end;
  
  
  { --------------------------------------------------------------------
    PS: PlanAssignmentInterval
    --------------------------------------------------------------------}
  
  TPSPlanAssignmentInterval = Class(TODataEntity)
  private
    FDuration : string;
    FDurationMilliseconds : TInt32;
    FDurationTimeSpan : TTime;
    F_End : TDateTime;
    FName : string;
    FStart : TDateTime;
    procedure SetDuration(AIndex: Integer; const AValue: string);
    procedure SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32);
    procedure SetDurationTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure Set_End(AIndex: Integer; const AValue: TDateTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Duration : string index 0 read FDuration write SetDuration;
    Property DurationMilliseconds : TInt32 index 8 read FDurationMilliseconds write SetDurationMilliseconds;
    Property DurationTimeSpan : TTime index 16 read FDurationTimeSpan write SetDurationTimeSpan;
    Property _End : TDateTime index 24 read F_End write Set_End;
    Property Name : string index 32 read FName write SetName;
    Property Start : TDateTime index 40 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectServerData
    --------------------------------------------------------------------}
  
  TPSProjectServerData = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ProjectServer
    --------------------------------------------------------------------}
  
  TPSProjectServer = Class(TODataEntity)
  private
    FIsDelegate : boolean;
    FIsReadOnly : boolean;
    procedure SetIsDelegate(AIndex: Integer; const AValue: boolean);
    procedure SetIsReadOnly(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Calendars(AService: TODataService) : TPSCalendar;
    function CustomFields(AService: TODataService) : TPSCustomField;
    function EnterpriseProjectTypes(AService: TODataService)
                                : TPSEnterpriseProjectType;
    function EnterpriseResources(AService: TODataService)
                             : TPSEnterpriseResource;
    function EntityTypes(AService: TODataService) : TPSEntityTypes;
    function EventHandlers(AService: TODataService) : TPSEventHandler;
    function Events(AService: TODataService) : TPSEvent;
    function LookupTables(AService: TODataService) : TPSLookupTable;
    function Phases(AService: TODataService) : TPSPhase;
    function ProjectDetailPages(AService: TODataService)
                            : TPSProjectDetailPage;
    function Projects(AService: TODataService) : TPSPublishedProject;
    function Stages(AService: TODataService) : TPSStage;
    function TimeSheetPeriods(AService: TODataService) : TPSTimeSheetPeriod;
    function WorkflowActivities(AService: TODataService)
                            : TPSWorkflowActivities;
    function WorkflowDesigner(AService: TODataService) : TPSWorkflowDesigner;
  published
    Property IsDelegate : boolean index 0 read FIsDelegate write SetIsDelegate;
    Property IsReadOnly : boolean index 8 read FIsReadOnly write SetIsReadOnly;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimeSheetPeriod
    --------------------------------------------------------------------}
  
  TPSTimeSheetPeriod = Class(TODataEntity)
  private
    F_End : TDateTime;
    FId : TGUIDString;
    FName : string;
    FStart : TDateTime;
    procedure Set_End(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
    function TimeSheet(AService: TODataService) : TPSTimeSheet;
  published
    Property _End : TDateTime index 0 read F_End write Set_End;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Name : string index 16 read FName write SetName;
    Property Start : TDateTime index 24 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimeSheet
    --------------------------------------------------------------------}
  
  TPSTimeSheet = Class(TODataEntity)
  private
    FComments : string;
    FEntryMode : TInt32;
    FId : TGUIDString;
    FIsControlledByOwner : boolean;
    FIsProcessed : boolean;
    FName : string;
    FStatus : TInt32;
    FTotalActualWork : string;
    FTotalActualWorkMilliseconds : TInt32;
    FTotalActualWorkTimeSpan : TTime;
    FTotalNonBillableOvertimeWork : string;
    FTotalNonBillableOvertimeWorkMilliseconds : TInt32;
    FTotalNonBillableOvertimeWorkTimeSpan : TTime;
    FTotalNonBillableWork : string;
    FTotalNonBillableWorkMilliseconds : TInt32;
    FTotalNonBillableWorkTimeSpan : TTime;
    FTotalOvertimeWork : string;
    FTotalOvertimeWorkMilliseconds : TInt32;
    FTotalOvertimeWorkTimeSpan : TTime;
    FTotalWork : string;
    FTotalWorkMilliseconds : TInt32;
    FTotalWorkTimeSpan : TTime;
    FWeekStartsOn : Byte;
    procedure SetComments(AIndex: Integer; const AValue: string);
    procedure SetEntryMode(AIndex: Integer; const AValue: TInt32);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsControlledByOwner(AIndex: Integer; const AValue: boolean);
    procedure SetIsProcessed(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetTotalActualWork(AIndex: Integer; const AValue: string);
    procedure SetTotalActualWorkMilliseconds(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetTotalActualWorkTimeSpan(AIndex: Integer; 
                                    const AValue: TTime);
    procedure SetTotalNonBillableOvertimeWork(AIndex: Integer; 
                                         const AValue: string);
    procedure SetTotalNonBillableOvertimeWorkMilliseconds(AIndex: Integer; 
                                                     const AValue: TInt32);
    procedure SetTotalNonBillableOvertimeWorkTimeSpan(AIndex: Integer; 
                                                 const AValue: TTime);
    procedure SetTotalNonBillableWork(AIndex: Integer; const AValue: string);
    procedure SetTotalNonBillableWorkMilliseconds(AIndex: Integer; 
                                             const AValue: TInt32);
    procedure SetTotalNonBillableWorkTimeSpan(AIndex: Integer; 
                                         const AValue: TTime);
    procedure SetTotalOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetTotalOvertimeWorkMilliseconds(AIndex: Integer; 
                                          const AValue: TInt32);
    procedure SetTotalOvertimeWorkTimeSpan(AIndex: Integer; 
                                      const AValue: TTime);
    procedure SetTotalWork(AIndex: Integer; const AValue: string);
    procedure SetTotalWorkMilliseconds(AIndex: Integer; 
                                  const AValue: TInt32);
    procedure SetTotalWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetWeekStartsOn(AIndex: Integer; const AValue: Byte);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Creator(AService: TODataService) : TSPUser;
    function Lines(AService: TODataService) : TPSTimeSheetLine;
    function Manager(AService: TODataService) : TSPUser;
    function Period(AService: TODataService) : TPSTimeSheetPeriod;
  published
    Property Comments : string index 0 read FComments write SetComments;
    Property EntryMode : TInt32 index 8 read FEntryMode write SetEntryMode;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property IsControlledByOwner : boolean index 24 read FIsControlledByOwner write SetIsControlledByOwner;
    Property IsProcessed : boolean index 32 read FIsProcessed write SetIsProcessed;
    Property Name : string index 40 read FName write SetName;
    Property Status : TInt32 index 48 read FStatus write SetStatus;
    Property TotalActualWork : string index 56 read FTotalActualWork write SetTotalActualWork;
    Property TotalActualWorkMilliseconds : TInt32 index 64 read FTotalActualWorkMilliseconds write SetTotalActualWorkMilliseconds;
    Property TotalActualWorkTimeSpan : TTime index 72 read FTotalActualWorkTimeSpan write SetTotalActualWorkTimeSpan;
    Property TotalNonBillableOvertimeWork : string index 80 read FTotalNonBillableOvertimeWork write SetTotalNonBillableOvertimeWork;
    Property TotalNonBillableOvertimeWorkMilliseconds : TInt32 index 88 read FTotalNonBillableOvertimeWorkMilliseconds write SetTotalNonBillableOvertimeWorkMilliseconds;
    Property TotalNonBillableOvertimeWorkTimeSpan : TTime index 96 read FTotalNonBillableOvertimeWorkTimeSpan write SetTotalNonBillableOvertimeWorkTimeSpan;
    Property TotalNonBillableWork : string index 104 read FTotalNonBillableWork write SetTotalNonBillableWork;
    Property TotalNonBillableWorkMilliseconds : TInt32 index 112 read FTotalNonBillableWorkMilliseconds write SetTotalNonBillableWorkMilliseconds;
    Property TotalNonBillableWorkTimeSpan : TTime index 120 read FTotalNonBillableWorkTimeSpan write SetTotalNonBillableWorkTimeSpan;
    Property TotalOvertimeWork : string index 128 read FTotalOvertimeWork write SetTotalOvertimeWork;
    Property TotalOvertimeWorkMilliseconds : TInt32 index 136 read FTotalOvertimeWorkMilliseconds write SetTotalOvertimeWorkMilliseconds;
    Property TotalOvertimeWorkTimeSpan : TTime index 144 read FTotalOvertimeWorkTimeSpan write SetTotalOvertimeWorkTimeSpan;
    Property TotalWork : string index 152 read FTotalWork write SetTotalWork;
    Property TotalWorkMilliseconds : TInt32 index 160 read FTotalWorkMilliseconds write SetTotalWorkMilliseconds;
    Property TotalWorkTimeSpan : TTime index 168 read FTotalWorkTimeSpan write SetTotalWorkTimeSpan;
    Property WeekStartsOn : Byte index 176 read FWeekStartsOn write SetWeekStartsOn;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimeSheetLine
    --------------------------------------------------------------------}
  
  TPSTimeSheetLine = Class(TODataEntity)
  private
    FComment : string;
    FId : TGUIDString;
    FLineClass : TInt32;
    FProjectName : string;
    FStatus : TInt32;
    FTaskName : string;
    FTotalWork : string;
    FTotalWorkMilliseconds : TInt32;
    FTotalWorkTimeSpan : TTime;
    FValidationType : TInt32;
    procedure SetComment(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLineClass(AIndex: Integer; const AValue: TInt32);
    procedure SetProjectName(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetTaskName(AIndex: Integer; const AValue: string);
    procedure SetTotalWork(AIndex: Integer; const AValue: string);
    procedure SetTotalWorkMilliseconds(AIndex: Integer; 
                                  const AValue: TInt32);
    procedure SetTotalWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetValidationType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Assignment(AService: TODataService) : TPSPublishedAssignment;
    function TimeSheet(AService: TODataService) : TPSTimeSheet;
    function Work(AService: TODataService) : TPSTimeSheetWork;
  published
    Property Comment : string index 0 read FComment write SetComment;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property LineClass : TInt32 index 16 read FLineClass write SetLineClass;
    Property ProjectName : string index 24 read FProjectName write SetProjectName;
    Property Status : TInt32 index 32 read FStatus write SetStatus;
    Property TaskName : string index 40 read FTaskName write SetTaskName;
    Property TotalWork : string index 48 read FTotalWork write SetTotalWork;
    Property TotalWorkMilliseconds : TInt32 index 56 read FTotalWorkMilliseconds write SetTotalWorkMilliseconds;
    Property TotalWorkTimeSpan : TTime index 64 read FTotalWorkTimeSpan write SetTotalWorkTimeSpan;
    Property ValidationType : TInt32 index 72 read FValidationType write SetValidationType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimeSheetWork
    --------------------------------------------------------------------}
  
  TPSTimeSheetWork = Class(TODataEntity)
  private
    FActualWork : string;
    FActualWorkMilliseconds : TInt32;
    FActualWorkTimeSpan : TTime;
    FComment : string;
    F_End : TDateTime;
    FId : TGUIDString;
    FNonBillableOvertimeWork : string;
    FNonBillableOvertimeWorkMilliseconds : TInt32;
    FNonBillableOvertimeWorkTimeSpan : TTime;
    FNonBillableWork : string;
    FNonBillableWorkMilliseconds : TInt32;
    FNonBillableWorkTimeSpan : TTime;
    FOvertimeWork : string;
    FOvertimeWorkMilliseconds : TInt32;
    FOvertimeWorkTimeSpan : TTime;
    FPlannedWork : string;
    FPlannedWorkMilliseconds : TInt32;
    FPlannedWorkTimeSpan : TTime;
    FStart : TDateTime;
    procedure SetActualWork(AIndex: Integer; const AValue: string);
    procedure SetActualWorkMilliseconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetComment(AIndex: Integer; const AValue: string);
    procedure Set_End(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetNonBillableOvertimeWork(AIndex: Integer; 
                                    const AValue: string);
    procedure SetNonBillableOvertimeWorkMilliseconds(AIndex: Integer; 
                                                const AValue: TInt32);
    procedure SetNonBillableOvertimeWorkTimeSpan(AIndex: Integer; 
                                            const AValue: TTime);
    procedure SetNonBillableWork(AIndex: Integer; const AValue: string);
    procedure SetNonBillableWorkMilliseconds(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetNonBillableWorkTimeSpan(AIndex: Integer; 
                                    const AValue: TTime);
    procedure SetOvertimeWork(AIndex: Integer; const AValue: string);
    procedure SetOvertimeWorkMilliseconds(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetPlannedWork(AIndex: Integer; const AValue: string);
    procedure SetPlannedWorkMilliseconds(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetPlannedWorkTimeSpan(AIndex: Integer; const AValue: TTime);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ActualWork : string index 0 read FActualWork write SetActualWork;
    Property ActualWorkMilliseconds : TInt32 index 8 read FActualWorkMilliseconds write SetActualWorkMilliseconds;
    Property ActualWorkTimeSpan : TTime index 16 read FActualWorkTimeSpan write SetActualWorkTimeSpan;
    Property Comment : string index 24 read FComment write SetComment;
    Property _End : TDateTime index 32 read F_End write Set_End;
    Property Id : TGUIDString index 40 read FId write SetId;
    Property NonBillableOvertimeWork : string index 48 read FNonBillableOvertimeWork write SetNonBillableOvertimeWork;
    Property NonBillableOvertimeWorkMilliseconds : TInt32 index 56 read FNonBillableOvertimeWorkMilliseconds write SetNonBillableOvertimeWorkMilliseconds;
    Property NonBillableOvertimeWorkTimeSpan : TTime index 64 read FNonBillableOvertimeWorkTimeSpan write SetNonBillableOvertimeWorkTimeSpan;
    Property NonBillableWork : string index 72 read FNonBillableWork write SetNonBillableWork;
    Property NonBillableWorkMilliseconds : TInt32 index 80 read FNonBillableWorkMilliseconds write SetNonBillableWorkMilliseconds;
    Property NonBillableWorkTimeSpan : TTime index 88 read FNonBillableWorkTimeSpan write SetNonBillableWorkTimeSpan;
    Property OvertimeWork : string index 96 read FOvertimeWork write SetOvertimeWork;
    Property OvertimeWorkMilliseconds : TInt32 index 104 read FOvertimeWorkMilliseconds write SetOvertimeWorkMilliseconds;
    Property OvertimeWorkTimeSpan : TTime index 112 read FOvertimeWorkTimeSpan write SetOvertimeWorkTimeSpan;
    Property PlannedWork : string index 120 read FPlannedWork write SetPlannedWork;
    Property PlannedWorkMilliseconds : TInt32 index 128 read FPlannedWorkMilliseconds write SetPlannedWorkMilliseconds;
    Property PlannedWorkTimeSpan : TTime index 136 read FPlannedWorkTimeSpan write SetPlannedWorkTimeSpan;
    Property Start : TDateTime index 144 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    PS: WorkflowActivities
    --------------------------------------------------------------------}
  
  TPSWorkflowActivities = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    PS: WorkflowDesigner
    --------------------------------------------------------------------}
  
  TPSWorkflowDesigner = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Fields(AService: TODataService) : TPSWorkflowDesignerField;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    PS: WorkflowDesignerField
    --------------------------------------------------------------------}
  
  TPSWorkflowDesignerField = Class(TODataEntity)
  private
    FDisplayName : string;
    FId : string;
    FIsLookupField : boolean;
    FIsReadOnly : boolean;
    FSPFieldType : TInt32;
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetIsLookupField(AIndex: Integer; const AValue: boolean);
    procedure SetIsReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetSPFieldType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function LookupEntries(AService: TODataService) : TPSLookupEntry;
  published
    Property DisplayName : string index 0 read FDisplayName write SetDisplayName;
    Property Id : string index 8 read FId write SetId;
    Property IsLookupField : boolean index 16 read FIsLookupField write SetIsLookupField;
    Property IsReadOnly : boolean index 24 read FIsReadOnly write SetIsReadOnly;
    Property SPFieldType : TInt32 index 32 read FSPFieldType write SetSPFieldType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ResourceCalendarException
    --------------------------------------------------------------------}
  
  TPSResourceCalendarException = Class(TPSCalendarException)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ResourcePlan
    --------------------------------------------------------------------}
  
  TPSResourcePlan = Class(TODataEntity)
  private
    FFinish : TDateTime;
    FId : TGUIDString;
    FStart : TDateTime;
    FUtilizationDate : TDateTime;
    FUtilizationType : TInt32;
    procedure SetFinish(AIndex: Integer; const AValue: TDateTime);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
    procedure SetUtilizationDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetUtilizationType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Assignments(AService: TODataService) : TPSPlanAssignment;
  published
    Property Finish : TDateTime index 0 read FFinish write SetFinish;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property Start : TDateTime index 16 read FStart write SetStart;
    Property UtilizationDate : TDateTime index 24 read FUtilizationDate write SetUtilizationDate;
    Property UtilizationType : TInt32 index 32 read FUtilizationType write SetUtilizationType;
  end;
  
  
  { --------------------------------------------------------------------
    PS: ServiceStatus
    --------------------------------------------------------------------}
  
  TPSServiceStatus = Class(TODataEntity)
  private
    FIsDelegate : boolean;
    FIsReadOnly : boolean;
    procedure SetIsDelegate(AIndex: Integer; const AValue: boolean);
    procedure SetIsReadOnly(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property IsDelegate : boolean index 0 read FIsDelegate write SetIsDelegate;
    Property IsReadOnly : boolean index 8 read FIsReadOnly write SetIsReadOnly;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TaskServiceOdataEndpoint
    --------------------------------------------------------------------}
  
  TPSTaskServiceOdataEndpoint = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    PS: TimePhase
    --------------------------------------------------------------------}
  
  TPSTimePhase = Class(TODataEntity)
  private
    F_End : TDateTime;
    FStart : TDateTime;
    procedure Set_End(AIndex: Integer; const AValue: TDateTime);
    procedure SetStart(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
    function Assignments(AService: TODataService) : TPSStatusAssignment;
  published
    Property _End : TDateTime index 0 read F_End write Set_End;
    Property Start : TDateTime index 8 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazineData
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazineData = Class(TODataEntity)
  private
    FAboutMe : string;
    FBackgroundImageUrl : string;
    FBackgroundImageX : TInt32;
    FBackgroundImageY : TInt32;
    FDepartmentName : string;
    FDisplayName : string;
    FEmail : string;
    FHasEditPermission : boolean;
    FOffice : string;
    FPhone : string;
    FPictureUrl : string;
    FTitle : string;
    procedure SetAboutMe(AIndex: Integer; const AValue: string);
    procedure SetBackgroundImageUrl(AIndex: Integer; const AValue: string);
    procedure SetBackgroundImageX(AIndex: Integer; const AValue: TInt32);
    procedure SetBackgroundImageY(AIndex: Integer; const AValue: TInt32);
    procedure SetDepartmentName(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetHasEditPermission(AIndex: Integer; const AValue: boolean);
    procedure SetOffice(AIndex: Integer; const AValue: string);
    procedure SetPhone(AIndex: Integer; const AValue: string);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AboutMe : string index 0 read FAboutMe write SetAboutMe;
    Property BackgroundImageUrl : string index 8 read FBackgroundImageUrl write SetBackgroundImageUrl;
    Property BackgroundImageX : TInt32 index 16 read FBackgroundImageX write SetBackgroundImageX;
    Property BackgroundImageY : TInt32 index 24 read FBackgroundImageY write SetBackgroundImageY;
    Property DepartmentName : string index 32 read FDepartmentName write SetDepartmentName;
    Property DisplayName : string index 40 read FDisplayName write SetDisplayName;
    Property Email : string index 48 read FEmail write SetEmail;
    Property HasEditPermission : boolean index 56 read FHasEditPermission write SetHasEditPermission;
    Property Office : string index 64 read FOffice write SetOffice;
    Property Phone : string index 72 read FPhone write SetPhone;
    Property PictureUrl : string index 80 read FPictureUrl write SetPictureUrl;
    Property Title : string index 88 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazinePeopleBasicInfo
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazinePeopleBasicInfo = Class(TODataEntity)
  private
    FAccountName : string;
    FDisplayName : string;
    FPictureUrl : string;
    FTitle : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
    Property PictureUrl : string index 16 read FPictureUrl write SetPictureUrl;
    Property Title : string index 24 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazinePeopleModel
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazinePeopleModel = Class(TODataEntity)
  private
    FAboutMe : string;
    FBackgroundImageUrl : string;
    FBasicInfo : TSP_PublishingPersonMagazinePeopleBasicInfo;
    FBirthday : string;
    FCustomProperties : TSPKeyValueArray;
    FDepartmentName : string;
    FDirectReports : TSP_PublishingPersonMagazinePeopleBasicInfoArray;
    FEmail : string;
    FHasEditPermission : boolean;
    FInterest : string;
    FLync : string;
    FManagerChain : TSP_PublishingPersonMagazinePeopleBasicInfoArray;
    FOffice : string;
    FOneDriveUrl : string;
    FPastProjects : string;
    FPhone : string;
    FSchools : string;
    FSkills : string;
    procedure SetAboutMe(AIndex: Integer; const AValue: string);
    procedure SetBackgroundImageUrl(AIndex: Integer; const AValue: string);
    procedure SetBasicInfo(AIndex: Integer; 
                      const AValue: TSP_PublishingPersonMagazinePeopleBasicInfo);
    procedure SetBirthday(AIndex: Integer; const AValue: string);
    procedure SetCustomProperties(AIndex: Integer; 
                             const AValue: TSPKeyValueArray);
    procedure SetDepartmentName(AIndex: Integer; const AValue: string);
    procedure SetDirectReports(AIndex: Integer; 
                          const AValue: TSP_PublishingPersonMagazinePeopleBasicInfoArray);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetHasEditPermission(AIndex: Integer; const AValue: boolean);
    procedure SetInterest(AIndex: Integer; const AValue: string);
    procedure SetLync(AIndex: Integer; const AValue: string);
    procedure SetManagerChain(AIndex: Integer; 
                         const AValue: TSP_PublishingPersonMagazinePeopleBasicInfoArray);
    procedure SetOffice(AIndex: Integer; const AValue: string);
    procedure SetOneDriveUrl(AIndex: Integer; const AValue: string);
    procedure SetPastProjects(AIndex: Integer; const AValue: string);
    procedure SetPhone(AIndex: Integer; const AValue: string);
    procedure SetSchools(AIndex: Integer; const AValue: string);
    procedure SetSkills(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AboutMe : string index 0 read FAboutMe write SetAboutMe;
    Property BackgroundImageUrl : string index 8 read FBackgroundImageUrl write SetBackgroundImageUrl;
    Property BasicInfo : TSP_PublishingPersonMagazinePeopleBasicInfo index 16 read FBasicInfo write SetBasicInfo;
    Property Birthday : string index 24 read FBirthday write SetBirthday;
    Property CustomProperties : TSPKeyValueArray index 32 read FCustomProperties write SetCustomProperties;
    Property DepartmentName : string index 40 read FDepartmentName write SetDepartmentName;
    Property DirectReports : TSP_PublishingPersonMagazinePeopleBasicInfoArray index 48 read FDirectReports write SetDirectReports;
    Property Email : string index 56 read FEmail write SetEmail;
    Property HasEditPermission : boolean index 64 read FHasEditPermission write SetHasEditPermission;
    Property Interest : string index 72 read FInterest write SetInterest;
    Property Lync : string index 80 read FLync write SetLync;
    Property ManagerChain : TSP_PublishingPersonMagazinePeopleBasicInfoArray index 88 read FManagerChain write SetManagerChain;
    Property Office : string index 96 read FOffice write SetOffice;
    Property OneDriveUrl : string index 104 read FOneDriveUrl write SetOneDriveUrl;
    Property PastProjects : string index 112 read FPastProjects write SetPastProjects;
    Property Phone : string index 120 read FPhone write SetPhone;
    Property Schools : string index 128 read FSchools write SetSchools;
    Property Skills : string index 136 read FSkills write SetSkills;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazineUserProfileDirectsData
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazineUserProfileDirectsData = Class(TODataEntity)
  private
    FDirectReports : TSP_PublishingPersonMagazineUserProfileArray;
    procedure SetDirectReports(AIndex: Integer; 
                          const AValue: TSP_PublishingPersonMagazineUserProfileArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property DirectReports : TSP_PublishingPersonMagazineUserProfileArray index 0 read FDirectReports write SetDirectReports;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazineUserProfile
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazineUserProfile = Class(TODataEntity)
  private
    FAboutMe : string;
    FAccountName : string;
    FBirthday : string;
    FCustomProperties : TSPKeyValueArray;
    FDepartmentName : string;
    FDisplayName : string;
    FEmail : string;
    FHasEditPermission : boolean;
    FInterest : string;
    FLync : string;
    FOffice : string;
    FOneDriveUrl : string;
    FPastProjects : string;
    FPhone : string;
    FPictureUrl : string;
    FSchools : string;
    FSkills : string;
    FTitle : string;
    FUserName : string;
    procedure SetAboutMe(AIndex: Integer; const AValue: string);
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetBirthday(AIndex: Integer; const AValue: string);
    procedure SetCustomProperties(AIndex: Integer; 
                             const AValue: TSPKeyValueArray);
    procedure SetDepartmentName(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetHasEditPermission(AIndex: Integer; const AValue: boolean);
    procedure SetInterest(AIndex: Integer; const AValue: string);
    procedure SetLync(AIndex: Integer; const AValue: string);
    procedure SetOffice(AIndex: Integer; const AValue: string);
    procedure SetOneDriveUrl(AIndex: Integer; const AValue: string);
    procedure SetPastProjects(AIndex: Integer; const AValue: string);
    procedure SetPhone(AIndex: Integer; const AValue: string);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetSchools(AIndex: Integer; const AValue: string);
    procedure SetSkills(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUserName(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AboutMe : string index 0 read FAboutMe write SetAboutMe;
    Property AccountName : string index 8 read FAccountName write SetAccountName;
    Property Birthday : string index 16 read FBirthday write SetBirthday;
    Property CustomProperties : TSPKeyValueArray index 24 read FCustomProperties write SetCustomProperties;
    Property DepartmentName : string index 32 read FDepartmentName write SetDepartmentName;
    Property DisplayName : string index 40 read FDisplayName write SetDisplayName;
    Property Email : string index 48 read FEmail write SetEmail;
    Property HasEditPermission : boolean index 56 read FHasEditPermission write SetHasEditPermission;
    Property Interest : string index 64 read FInterest write SetInterest;
    Property Lync : string index 72 read FLync write SetLync;
    Property Office : string index 80 read FOffice write SetOffice;
    Property OneDriveUrl : string index 88 read FOneDriveUrl write SetOneDriveUrl;
    Property PastProjects : string index 96 read FPastProjects write SetPastProjects;
    Property Phone : string index 104 read FPhone write SetPhone;
    Property PictureUrl : string index 112 read FPictureUrl write SetPictureUrl;
    Property Schools : string index 120 read FSchools write SetSchools;
    Property Skills : string index 128 read FSkills write SetSkills;
    Property Title : string index 136 read FTitle write SetTitle;
    Property UserName : string index 144 read FUserName write SetUserName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazineUserProfileData
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazineUserProfileData = Class(TODataEntity)
  private
    FManagerChain : TSP_PublishingPersonMagazineUserProfileArray;
    FPrimary : TSP_PublishingPersonMagazineUserProfile;
    procedure SetManagerChain(AIndex: Integer; 
                         const AValue: TSP_PublishingPersonMagazineUserProfileArray);
    procedure SetPrimary(AIndex: Integer; 
                    const AValue: TSP_PublishingPersonMagazineUserProfile);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ManagerChain : TSP_PublishingPersonMagazineUserProfileArray index 0 read FManagerChain write SetManagerChain;
    Property Primary : TSP_PublishingPersonMagazineUserProfile index 8 read FPrimary write SetPrimary;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PublishSiteInformation
    --------------------------------------------------------------------}
  
  TSP_PublishingPublishSiteInformation = Class(TODataEntity)
  private
    FSiteType : TInt32;
    FSiteUrl : string;
    FTitle : string;
    procedure SetSiteType(AIndex: Integer; const AValue: TInt32);
    procedure SetSiteUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property SiteType : TInt32 index 0 read FSiteType write SetSiteType;
    Property SiteUrl : string index 8 read FSiteUrl write SetSiteUrl;
    Property Title : string index 16 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: VideoItem
    --------------------------------------------------------------------}
  
  TSP_PublishingVideoItem = Class(TODataEntity)
  private
    FChannelID : TGUIDString;
    FCreatedDate : TDateTime;
    FDescription : string;
    FDisplayFormUrl : string;
    FFileName : string;
    FOwnerName : string;
    FPlayerPageUrl : string;
    FServerRelativeUrl : string;
    FThumbnailUrl : string;
    FTitle : string;
    FID : TGUIDString;
    FUrl : string;
    FVideoDurationInSeconds : TInt32;
    FVideoProcessingStatus : TInt32;
    FViewCount : TInt32;
    FYammerObjectUrl : string;
    procedure SetChannelID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetCreatedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDisplayFormUrl(AIndex: Integer; const AValue: string);
    procedure SetFileName(AIndex: Integer; const AValue: string);
    procedure SetOwnerName(AIndex: Integer; const AValue: string);
    procedure SetPlayerPageUrl(AIndex: Integer; const AValue: string);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetThumbnailUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetVideoDurationInSeconds(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetVideoProcessingStatus(AIndex: Integer; 
                                  const AValue: TInt32);
    procedure SetViewCount(AIndex: Integer; const AValue: TInt32);
    procedure SetYammerObjectUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Author(AService: TODataService) : TSPUser;
    function Owner(AService: TODataService) : TSPUser;
    function PeopleInMedia(AService: TODataService) : TSPUser;
  published
    Property ChannelID : TGUIDString index 0 read FChannelID write SetChannelID;
    Property CreatedDate : TDateTime index 8 read FCreatedDate write SetCreatedDate;
    Property Description : string index 16 read FDescription write SetDescription;
    Property DisplayFormUrl : string index 24 read FDisplayFormUrl write SetDisplayFormUrl;
    Property FileName : string index 32 read FFileName write SetFileName;
    Property OwnerName : string index 40 read FOwnerName write SetOwnerName;
    Property PlayerPageUrl : string index 48 read FPlayerPageUrl write SetPlayerPageUrl;
    Property ServerRelativeUrl : string index 56 read FServerRelativeUrl write SetServerRelativeUrl;
    Property ThumbnailUrl : string index 64 read FThumbnailUrl write SetThumbnailUrl;
    Property Title : string index 72 read FTitle write SetTitle;
    Property ID : TGUIDString index 80 read FID write SetID;
    Property Url : string index 88 read FUrl write SetUrl;
    Property VideoDurationInSeconds : TInt32 index 96 read FVideoDurationInSeconds write SetVideoDurationInSeconds;
    Property VideoProcessingStatus : TInt32 index 104 read FVideoProcessingStatus write SetVideoProcessingStatus;
    Property ViewCount : TInt32 index 112 read FViewCount write SetViewCount;
    Property YammerObjectUrl : string index 120 read FYammerObjectUrl write SetYammerObjectUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PersonMagazine
    --------------------------------------------------------------------}
  
  TSP_PublishingPersonMagazine = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingDocProps
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingDocProps = Class(TODataEntity)
  private
    FAuthor : string;
    FContentTypeId : string;
    FDocLibraryUrl : string;
    FFileType : string;
    FModified : TDateTime;
    FServerRedirectedEmbedUrl : string;
    FServerRedirectedPreviewUrl : string;
    FSiteId : TGUIDString;
    FSiteTitle : string;
    FTitle : string;
    FUniqueId : TGUIDString;
    FUrl : string;
    FWebId : TGUIDString;
    procedure SetAuthor(AIndex: Integer; const AValue: string);
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetDocLibraryUrl(AIndex: Integer; const AValue: string);
    procedure SetFileType(AIndex: Integer; const AValue: string);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetServerRedirectedEmbedUrl(AIndex: Integer; 
                                     const AValue: string);
    procedure SetServerRedirectedPreviewUrl(AIndex: Integer; 
                                       const AValue: string);
    procedure SetSiteId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetSiteTitle(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Author : string index 0 read FAuthor write SetAuthor;
    Property ContentTypeId : string index 8 read FContentTypeId write SetContentTypeId;
    Property DocLibraryUrl : string index 16 read FDocLibraryUrl write SetDocLibraryUrl;
    Property FileType : string index 24 read FFileType write SetFileType;
    Property Modified : TDateTime index 32 read FModified write SetModified;
    Property ServerRedirectedEmbedUrl : string index 40 read FServerRedirectedEmbedUrl write SetServerRedirectedEmbedUrl;
    Property ServerRedirectedPreviewUrl : string index 48 read FServerRedirectedPreviewUrl write SetServerRedirectedPreviewUrl;
    Property SiteId : TGUIDString index 56 read FSiteId write SetSiteId;
    Property SiteTitle : string index 64 read FSiteTitle write SetSiteTitle;
    Property Title : string index 72 read FTitle write SetTitle;
    Property UniqueId : TGUIDString index 80 read FUniqueId write SetUniqueId;
    Property Url : string index 88 read FUrl write SetUrl;
    Property WebId : TGUIDString index 96 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingMagazineProps
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingMagazineProps = Class(TODataEntity)
  private
    FBannerColor : string;
    FBannerImageUrl : string;
    FBannerPattern : string;
    FDescription : string;
    FIsUserContributor : boolean;
    FIsUserOwner : boolean;
    FMagazineType : TInt32;
    FPublishedDate : TDateTime;
    FTitle : string;
    procedure SetBannerColor(AIndex: Integer; const AValue: string);
    procedure SetBannerImageUrl(AIndex: Integer; const AValue: string);
    procedure SetBannerPattern(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetIsUserContributor(AIndex: Integer; const AValue: boolean);
    procedure SetIsUserOwner(AIndex: Integer; const AValue: boolean);
    procedure SetMagazineType(AIndex: Integer; const AValue: TInt32);
    procedure SetPublishedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property BannerColor : string index 0 read FBannerColor write SetBannerColor;
    Property BannerImageUrl : string index 8 read FBannerImageUrl write SetBannerImageUrl;
    Property BannerPattern : string index 16 read FBannerPattern write SetBannerPattern;
    Property Description : string index 24 read FDescription write SetDescription;
    Property IsUserContributor : boolean index 32 read FIsUserContributor write SetIsUserContributor;
    Property IsUserOwner : boolean index 40 read FIsUserOwner write SetIsUserOwner;
    Property MagazineType : TInt32 index 48 read FMagazineType write SetMagazineType;
    Property PublishedDate : TDateTime index 56 read FPublishedDate write SetPublishedDate;
    Property Title : string index 64 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingPost
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingPost = Class(TODataEntity)
  private
    FAuthor : string;
    FContent : string;
    FCreatedDate : TDateTime;
    FFriendlyUrlFileName : string;
    FId : TInt32;
    FModifiedDate : TDateTime;
    FOperationType : TInt32;
    FTitle : string;
    FUserIsAuthor : boolean;
    FVersion : string;
    procedure SetAuthor(AIndex: Integer; const AValue: string);
    procedure SetContent(AIndex: Integer; const AValue: string);
    procedure SetCreatedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetFriendlyUrlFileName(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetModifiedDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetOperationType(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUserIsAuthor(AIndex: Integer; const AValue: boolean);
    procedure SetVersion(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function images(AService: TODataService) : TSP_File;
  published
    Property Author : string index 0 read FAuthor write SetAuthor;
    Property Content : string index 8 read FContent write SetContent;
    Property CreatedDate : TDateTime index 16 read FCreatedDate write SetCreatedDate;
    Property FriendlyUrlFileName : string index 24 read FFriendlyUrlFileName write SetFriendlyUrlFileName;
    Property Id : TInt32 index 32 read FId write SetId;
    Property ModifiedDate : TDateTime index 40 read FModifiedDate write SetModifiedDate;
    Property OperationType : TInt32 index 48 read FOperationType write SetOperationType;
    Property Title : string index 56 read FTitle write SetTitle;
    Property UserIsAuthor : boolean index 64 read FUserIsAuthor write SetUserIsAuthor;
    Property Version : string index 72 read FVersion write SetVersion;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingPostServiceManager
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingPostServiceManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function bannerimages(AService: TODataService) : TSP_File;
    function contributors(AService: TODataService)
                      : TSP_PublishingPointPublishingUser;
    function creators(AService: TODataService)
                  : TSP_PublishingPointPublishingUser;
    function magazineprops(AService: TODataService)
                       : TSP_PublishingPointPublishingMagazineProps;
    function posts(AService: TODataService)
               : TSP_PublishingPointPublishingPost;
    function viewers(AService: TODataService)
                 : TSP_PublishingPointPublishingUser;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingUser
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingUser = Class(TODataEntity)
  private
    FAccountName : string;
    FDepartment : string;
    FEmail : string;
    FID : TInt32;
    FIsDomainGroup : boolean;
    FIsMagazineOwner : boolean;
    FJobTitle : string;
    FLoginName : string;
    FName : string;
    FPictureUrl : string;
    FSipAddress : string;
    procedure SetAccountName(AIndex: Integer; const AValue: string);
    procedure SetDepartment(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: TInt32);
    procedure SetIsDomainGroup(AIndex: Integer; const AValue: boolean);
    procedure SetIsMagazineOwner(AIndex: Integer; const AValue: boolean);
    procedure SetJobTitle(AIndex: Integer; const AValue: string);
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPictureUrl(AIndex: Integer; const AValue: string);
    procedure SetSipAddress(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AccountName : string index 0 read FAccountName write SetAccountName;
    Property Department : string index 8 read FDepartment write SetDepartment;
    Property Email : string index 16 read FEmail write SetEmail;
    Property ID : TInt32 index 24 read FID write SetID;
    Property IsDomainGroup : boolean index 32 read FIsDomainGroup write SetIsDomainGroup;
    Property IsMagazineOwner : boolean index 40 read FIsMagazineOwner write SetIsMagazineOwner;
    Property JobTitle : string index 48 read FJobTitle write SetJobTitle;
    Property LoginName : string index 56 read FLoginName write SetLoginName;
    Property Name : string index 64 read FName write SetName;
    Property PictureUrl : string index 72 read FPictureUrl write SetPictureUrl;
    Property SipAddress : string index 80 read FSipAddress write SetSipAddress;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingSiteManager
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingSiteManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: PointPublishingSiteStatus
    --------------------------------------------------------------------}
  
  TSP_PublishingPointPublishingSiteStatus = Class(TODataEntity)
  private
    FFriendlyUrl : string;
    FSiteUrl : string;
    FStatus : TInt32;
    procedure SetFriendlyUrl(AIndex: Integer; const AValue: string);
    procedure SetSiteUrl(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FriendlyUrl : string index 0 read FFriendlyUrl write SetFriendlyUrl;
    Property SiteUrl : string index 8 read FSiteUrl write SetSiteUrl;
    Property Status : TInt32 index 16 read FStatus write SetStatus;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: SpotlightChannel
    --------------------------------------------------------------------}
  
  TSP_PublishingSpotlightChannel = Class(TODataEntity)
  private
    FChannelId : TGUIDString;
    FId : TInt32;
    FTileHtmlColor : string;
    FTitle : string;
    FVideoLibraryServerRelativeUrl : string;
    procedure SetChannelId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetTileHtmlColor(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetVideoLibraryServerRelativeUrl(AIndex: Integer; 
                                          const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Channel(AService: TODataService) : TSP_PublishingVideoChannel;
  published
    Property ChannelId : TGUIDString index 0 read FChannelId write SetChannelId;
    Property Id : TInt32 index 8 read FId write SetId;
    Property TileHtmlColor : string index 16 read FTileHtmlColor write SetTileHtmlColor;
    Property Title : string index 24 read FTitle write SetTitle;
    Property VideoLibraryServerRelativeUrl : string index 32 read FVideoLibraryServerRelativeUrl write SetVideoLibraryServerRelativeUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: VideoChannel
    --------------------------------------------------------------------}
  
  TSP_PublishingVideoChannel = Class(TODataEntity)
  private
    FChannelPageUrl : string;
    FDescription : string;
    FId : TGUIDString;
    FTileHtmlColor : string;
    FTitle : string;
    FYammerEnabled : boolean;
    procedure SetChannelPageUrl(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetTileHtmlColor(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetYammerEnabled(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Search(AService: TODataService) : TSP_PublishingSearch;
    function SpotlightVideos(AService: TODataService)
                         : TSP_PublishingSpotlightVideo;
    function Videos(AService: TODataService) : TSP_PublishingVideoItem;
  published
    Property ChannelPageUrl : string index 0 read FChannelPageUrl write SetChannelPageUrl;
    Property Description : string index 8 read FDescription write SetDescription;
    Property Id : TGUIDString index 16 read FId write SetId;
    Property TileHtmlColor : string index 24 read FTileHtmlColor write SetTileHtmlColor;
    Property Title : string index 32 read FTitle write SetTitle;
    Property YammerEnabled : boolean index 40 read FYammerEnabled write SetYammerEnabled;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: Search
    --------------------------------------------------------------------}
  
  TSP_PublishingSearch = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: SpotlightVideo
    --------------------------------------------------------------------}
  
  TSP_PublishingSpotlightVideo = Class(TODataEntity)
  private
    FId : TInt32;
    FServerRelativeUrl : string;
    FUrl : string;
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Video(AService: TODataService) : TSP_PublishingVideoItem;
  published
    Property Id : TInt32 index 0 read FId write SetId;
    Property ServerRelativeUrl : string index 8 read FServerRelativeUrl write SetServerRelativeUrl;
    Property Url : string index 16 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: VideoPermissionGroup
    --------------------------------------------------------------------}
  
  TSP_PublishingVideoPermissionGroup = Class(TODataEntity)
  private
    FId : TInt32;
    procedure SetId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Users(AService: TODataService) : TSPUser;
  published
    Property Id : TInt32 index 0 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: VideoServiceDiscoverer
    --------------------------------------------------------------------}
  
  TSP_PublishingVideoServiceDiscoverer = Class(TODataEntity)
  private
    FChannelUrlTemplate : string;
    FIsLicensedForVideoPortal : boolean;
    FIsVideoPortalEnabled : boolean;
    FPlayerUrlTemplate : string;
    FVideoPortalLayoutsUrl : string;
    FVideoPortalUrl : string;
    procedure SetChannelUrlTemplate(AIndex: Integer; const AValue: string);
    procedure SetIsLicensedForVideoPortal(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetIsVideoPortalEnabled(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetPlayerUrlTemplate(AIndex: Integer; const AValue: string);
    procedure SetVideoPortalLayoutsUrl(AIndex: Integer; 
                                  const AValue: string);
    procedure SetVideoPortalUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ChannelUrlTemplate : string index 0 read FChannelUrlTemplate write SetChannelUrlTemplate;
    Property IsLicensedForVideoPortal : boolean index 8 read FIsLicensedForVideoPortal write SetIsLicensedForVideoPortal;
    Property IsVideoPortalEnabled : boolean index 16 read FIsVideoPortalEnabled write SetIsVideoPortalEnabled;
    Property PlayerUrlTemplate : string index 24 read FPlayerUrlTemplate write SetPlayerUrlTemplate;
    Property VideoPortalLayoutsUrl : string index 32 read FVideoPortalLayoutsUrl write SetVideoPortalLayoutsUrl;
    Property VideoPortalUrl : string index 40 read FVideoPortalUrl write SetVideoPortalUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Publishing: VideoServiceManager
    --------------------------------------------------------------------}
  
  TSP_PublishingVideoServiceManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CanEditChannels(AService: TODataService)
                         : TSP_PublishingVideoChannel;
    function Channels(AService: TODataService) : TSP_PublishingVideoChannel;
    function Search(AService: TODataService) : TSP_PublishingSearch;
    function SpotlightChannels(AService: TODataService)
                           : TSP_PublishingSpotlightChannel;
    function SpotlightVideos(AService: TODataService)
                         : TSP_PublishingSpotlightVideo;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: PersonalResultSuggestion
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion = Class(TODataEntity)
  private
    FHighlightedTitle : string;
    FIsBestBet : boolean;
    FTitle : string;
    FUrl : string;
    procedure SetHighlightedTitle(AIndex: Integer; const AValue: string);
    procedure SetIsBestBet(AIndex: Integer; const AValue: boolean);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property HighlightedTitle : string index 0 read FHighlightedTitle write SetHighlightedTitle;
    Property IsBestBet : boolean index 8 read FIsBestBet write SetIsBestBet;
    Property Title : string index 16 read FTitle write SetTitle;
    Property Url : string index 24 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QueryAutoCompletionMatch
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch = Class(TODataEntity)
  private
    FAlternation : boolean;
    FKey : string;
    F_Length : int64;
    FMatchType : string;
    FScore : Double;
    FSourceName : string;
    FStart : int64;
    FValue : string;
    procedure SetAlternation(AIndex: Integer; const AValue: boolean);
    procedure SetKey(AIndex: Integer; const AValue: string);
    procedure Set_Length(AIndex: Integer; const AValue: int64);
    procedure SetMatchType(AIndex: Integer; const AValue: string);
    procedure SetScore(AIndex: Integer; const AValue: Double);
    procedure SetSourceName(AIndex: Integer; const AValue: string);
    procedure SetStart(AIndex: Integer; const AValue: int64);
    procedure SetValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property Alternation : boolean index 0 read FAlternation write SetAlternation;
    Property Key : string index 8 read FKey write SetKey;
    Property _Length : int64 index 16 read F_Length write Set_Length;
    Property MatchType : string index 24 read FMatchType write SetMatchType;
    Property Score : Double index 32 read FScore write SetScore;
    Property SourceName : string index 40 read FSourceName write SetSourceName;
    Property Start : int64 index 48 read FStart write SetStart;
    Property Value : string index 56 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QueryAutoCompletionResults
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults = Class(TODataEntity)
  private
    FCoreExecutionTimeMs : int64;
    FCorrelationId : string;
    FQueries : TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionArray;
    procedure SetCoreExecutionTimeMs(AIndex: Integer; const AValue: int64);
    procedure SetCorrelationId(AIndex: Integer; const AValue: string);
    procedure SetQueries(AIndex: Integer; 
                    const AValue: TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CoreExecutionTimeMs : int64 index 0 read FCoreExecutionTimeMs write SetCoreExecutionTimeMs;
    Property CorrelationId : string index 8 read FCorrelationId write SetCorrelationId;
    Property Queries : TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionArray index 16 read FQueries write SetQueries;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QueryAutoCompletion
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion = Class(TODataEntity)
  private
    FMatches : TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatchArray;
    FQuery : string;
    FScore : Double;
    FSource : string;
    procedure SetMatches(AIndex: Integer; 
                    const AValue: TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatchArray);
    procedure SetQuery(AIndex: Integer; const AValue: string);
    procedure SetScore(AIndex: Integer; const AValue: Double);
    procedure SetSource(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Matches : TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatchArray index 0 read FMatches write SetMatches;
    Property Query : string index 8 read FQuery write SetQuery;
    Property Score : Double index 16 read FScore write SetScore;
    Property Source : string index 24 read FSource write SetSource;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QueryPropertyValue
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue = Class(TODataEntity)
  private
    FBoolVal : boolean;
    FIntVal : TInt32;
    FQueryPropertyValueTypeIndex : TInt32;
    FStrArray : TStringArray;
    FStrVal : string;
    procedure SetBoolVal(AIndex: Integer; const AValue: boolean);
    procedure SetIntVal(AIndex: Integer; const AValue: TInt32);
    procedure SetQueryPropertyValueTypeIndex(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetStrArray(AIndex: Integer; const AValue: TStringArray);
    procedure SetStrVal(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property BoolVal : boolean index 0 read FBoolVal write SetBoolVal;
    Property IntVal : TInt32 index 8 read FIntVal write SetIntVal;
    Property QueryPropertyValueTypeIndex : TInt32 index 16 read FQueryPropertyValueTypeIndex write SetQueryPropertyValueTypeIndex;
    Property StrArray : TStringArray index 24 read FStrArray write SetStrArray;
    Property StrVal : string index 32 read FStrVal write SetStrVal;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QuerySuggestionQuery
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery = Class(TODataEntity)
  private
    FIsPersonal : boolean;
    FQuery : string;
    procedure SetIsPersonal(AIndex: Integer; const AValue: boolean);
    procedure SetQuery(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property IsPersonal : boolean index 0 read FIsPersonal write SetIsPersonal;
    Property Query : string index 8 read FQuery write SetQuery;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QuerySuggestionRange
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange = Class(TODataEntity)
  private
    F_Length : TInt32;
    FStart : TInt32;
    procedure Set_Length(AIndex: Integer; const AValue: TInt32);
    procedure SetStart(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property _Length : TInt32 index 0 read F_Length write Set_Length;
    Property Start : TInt32 index 8 read FStart write SetStart;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QuerySuggestionResults
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults = Class(TODataEntity)
  private
    FPeopleNames : TStringArray;
    FPersonalResults : TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestionArray;
    FQueries : TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQueryArray;
    procedure SetPeopleNames(AIndex: Integer; const AValue: TStringArray);
    procedure SetPersonalResults(AIndex: Integer; 
                            const AValue: TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestionArray);
    procedure SetQueries(AIndex: Integer; 
                    const AValue: TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQueryArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property PeopleNames : TStringArray index 0 read FPeopleNames write SetPeopleNames;
    Property PersonalResults : TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestionArray index 8 read FPersonalResults write SetPersonalResults;
    Property Queries : TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQueryArray index 16 read FQueries write SetQueries;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: ReorderingRule
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRule = Class(TODataEntity)
  private
    FBoost : TInt32;
    FMatchType : TInt32;
    FMatchValue : string;
    procedure SetBoost(AIndex: Integer; const AValue: TInt32);
    procedure SetMatchType(AIndex: Integer; const AValue: TInt32);
    procedure SetMatchValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Boost : TInt32 index 0 read FBoost write SetBoost;
    Property MatchType : TInt32 index 8 read FMatchType write SetMatchType;
    Property MatchValue : string index 16 read FMatchValue write SetMatchValue;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: Sort
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QuerySort = Class(TODataEntity)
  private
    FDirection : TInt32;
    F_Property : string;
    procedure SetDirection(AIndex: Integer; const AValue: TInt32);
    procedure Set_Property(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property Direction : TInt32 index 0 read FDirection write SetDirection;
    Property _Property : string index 8 read F_Property write Set_Property;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: StringCollection
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryStringCollection = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FItems : TStringArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetItems(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Items : TStringArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: QueryPersonalizationData
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: RankingLabeling
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: ReorderingRuleCollection
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FItems : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetItems(AIndex: Integer; 
                  const AValue: TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Items : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Query: SortCollection
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_QuerySortCollection = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FItems : TMicrosoft_SharePoint_Client_Search_QuerySortArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetItems(AIndex: Integer; 
                  const AValue: TMicrosoft_SharePoint_Client_Search_QuerySortArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Items : TMicrosoft_SharePoint_Client_Search_QuerySortArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: CustomResult
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTCustomResult = Class(TODataEntity)
  private
    FGroupTemplateId : string;
    FItemTemplateId : string;
    FProperties : TSPKeyValueArray;
    FResultTitle : string;
    FResultTitleUrl : string;
    FTable : TSPSimpleDataTable;
    FTableType : string;
    procedure SetGroupTemplateId(AIndex: Integer; const AValue: string);
    procedure SetItemTemplateId(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetResultTitle(AIndex: Integer; const AValue: string);
    procedure SetResultTitleUrl(AIndex: Integer; const AValue: string);
    procedure SetTable(AIndex: Integer; const AValue: TSPSimpleDataTable);
    procedure SetTableType(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property GroupTemplateId : string index 0 read FGroupTemplateId write SetGroupTemplateId;
    Property ItemTemplateId : string index 8 read FItemTemplateId write SetItemTemplateId;
    Property Properties : TSPKeyValueArray index 16 read FProperties write SetProperties;
    Property ResultTitle : string index 24 read FResultTitle write SetResultTitle;
    Property ResultTitleUrl : string index 32 read FResultTitleUrl write SetResultTitleUrl;
    Property Table : TSPSimpleDataTable index 40 read FTable write SetTable;
    Property TableType : string index 48 read FTableType write SetTableType;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: QueryProperty
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTQueryProperty = Class(TODataEntity)
  private
    FName : string;
    FValue : TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetValue(AIndex: Integer; 
                  const AValue: TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
    Property Value : TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue index 8 read FValue write SetValue;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: QueryResult
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTQueryResult = Class(TODataEntity)
  private
    FCustomResults : TMicrosoft_Office_Server_Search_RESTCustomResultArray;
    FQueryId : string;
    FQueryRuleId : TGUIDString;
    FRefinementResults : TMicrosoft_Office_Server_Search_RESTRefinementResults;
    FRelevantResults : TMicrosoft_Office_Server_Search_RESTRelevantResults;
    FSpecialTermResults : TMicrosoft_Office_Server_Search_RESTSpecialTermResults;
    procedure SetCustomResults(AIndex: Integer; 
                          const AValue: TMicrosoft_Office_Server_Search_RESTCustomResultArray);
    procedure SetQueryId(AIndex: Integer; const AValue: string);
    procedure SetQueryRuleId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetRefinementResults(AIndex: Integer; 
                              const AValue: TMicrosoft_Office_Server_Search_RESTRefinementResults);
    procedure SetRelevantResults(AIndex: Integer; 
                            const AValue: TMicrosoft_Office_Server_Search_RESTRelevantResults);
    procedure SetSpecialTermResults(AIndex: Integer; 
                               const AValue: TMicrosoft_Office_Server_Search_RESTSpecialTermResults);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CustomResults : TMicrosoft_Office_Server_Search_RESTCustomResultArray index 0 read FCustomResults write SetCustomResults;
    Property QueryId : string index 8 read FQueryId write SetQueryId;
    Property QueryRuleId : TGUIDString index 16 read FQueryRuleId write SetQueryRuleId;
    Property RefinementResults : TMicrosoft_Office_Server_Search_RESTRefinementResults index 24 read FRefinementResults write SetRefinementResults;
    Property RelevantResults : TMicrosoft_Office_Server_Search_RESTRelevantResults index 32 read FRelevantResults write SetRelevantResults;
    Property SpecialTermResults : TMicrosoft_Office_Server_Search_RESTSpecialTermResults index 40 read FSpecialTermResults write SetSpecialTermResults;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: RefinementResults
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTRefinementResults = Class(TODataEntity)
  private
    FGroupTemplateId : string;
    FItemTemplateId : string;
    FProperties : TSPKeyValueArray;
    FRefiners : TMicrosoft_Office_Server_Search_RESTRefinerArray;
    FResultTitle : string;
    FResultTitleUrl : string;
    procedure SetGroupTemplateId(AIndex: Integer; const AValue: string);
    procedure SetItemTemplateId(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetRefiners(AIndex: Integer; 
                     const AValue: TMicrosoft_Office_Server_Search_RESTRefinerArray);
    procedure SetResultTitle(AIndex: Integer; const AValue: string);
    procedure SetResultTitleUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property GroupTemplateId : string index 0 read FGroupTemplateId write SetGroupTemplateId;
    Property ItemTemplateId : string index 8 read FItemTemplateId write SetItemTemplateId;
    Property Properties : TSPKeyValueArray index 16 read FProperties write SetProperties;
    Property Refiners : TMicrosoft_Office_Server_Search_RESTRefinerArray index 24 read FRefiners write SetRefiners;
    Property ResultTitle : string index 32 read FResultTitle write SetResultTitle;
    Property ResultTitleUrl : string index 40 read FResultTitleUrl write SetResultTitleUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: Refiner
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTRefiner = Class(TODataEntity)
  private
    FEntries : TMicrosoft_Office_Server_Search_RESTRefinerEntryArray;
    FName : string;
    procedure SetEntries(AIndex: Integer; 
                    const AValue: TMicrosoft_Office_Server_Search_RESTRefinerEntryArray);
    procedure SetName(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Entries : TMicrosoft_Office_Server_Search_RESTRefinerEntryArray index 0 read FEntries write SetEntries;
    Property Name : string index 8 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: RefinerEntry
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTRefinerEntry = Class(TODataEntity)
  private
    FRefinementCount : int64;
    FRefinementName : string;
    FRefinementToken : string;
    FRefinementValue : string;
    procedure SetRefinementCount(AIndex: Integer; const AValue: int64);
    procedure SetRefinementName(AIndex: Integer; const AValue: string);
    procedure SetRefinementToken(AIndex: Integer; const AValue: string);
    procedure SetRefinementValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property RefinementCount : int64 index 0 read FRefinementCount write SetRefinementCount;
    Property RefinementName : string index 8 read FRefinementName write SetRefinementName;
    Property RefinementToken : string index 16 read FRefinementToken write SetRefinementToken;
    Property RefinementValue : string index 24 read FRefinementValue write SetRefinementValue;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: RelevantResults
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTRelevantResults = Class(TODataEntity)
  private
    FGroupTemplateId : string;
    FItemTemplateId : string;
    FProperties : TSPKeyValueArray;
    FResultTitle : string;
    FResultTitleUrl : string;
    FRowCount : TInt32;
    FTable : TSPSimpleDataTable;
    FTotalRows : TInt32;
    FTotalRowsIncludingDuplicates : TInt32;
    procedure SetGroupTemplateId(AIndex: Integer; const AValue: string);
    procedure SetItemTemplateId(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetResultTitle(AIndex: Integer; const AValue: string);
    procedure SetResultTitleUrl(AIndex: Integer; const AValue: string);
    procedure SetRowCount(AIndex: Integer; const AValue: TInt32);
    procedure SetTable(AIndex: Integer; const AValue: TSPSimpleDataTable);
    procedure SetTotalRows(AIndex: Integer; const AValue: TInt32);
    procedure SetTotalRowsIncludingDuplicates(AIndex: Integer; 
                                         const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property GroupTemplateId : string index 0 read FGroupTemplateId write SetGroupTemplateId;
    Property ItemTemplateId : string index 8 read FItemTemplateId write SetItemTemplateId;
    Property Properties : TSPKeyValueArray index 16 read FProperties write SetProperties;
    Property ResultTitle : string index 24 read FResultTitle write SetResultTitle;
    Property ResultTitleUrl : string index 32 read FResultTitleUrl write SetResultTitleUrl;
    Property RowCount : TInt32 index 40 read FRowCount write SetRowCount;
    Property Table : TSPSimpleDataTable index 48 read FTable write SetTable;
    Property TotalRows : TInt32 index 56 read FTotalRows write SetTotalRows;
    Property TotalRowsIncludingDuplicates : TInt32 index 64 read FTotalRowsIncludingDuplicates write SetTotalRowsIncludingDuplicates;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: SpecialTermResults
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTSpecialTermResults = Class(TODataEntity)
  private
    FGroupTemplateId : string;
    FItemTemplateId : string;
    FProperties : TSPKeyValueArray;
    FResults : TMicrosoft_Office_Server_Search_RESTSpecialTermResultArray;
    FResultTitle : string;
    FResultTitleUrl : string;
    procedure SetGroupTemplateId(AIndex: Integer; const AValue: string);
    procedure SetItemTemplateId(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetResults(AIndex: Integer; 
                    const AValue: TMicrosoft_Office_Server_Search_RESTSpecialTermResultArray);
    procedure SetResultTitle(AIndex: Integer; const AValue: string);
    procedure SetResultTitleUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property GroupTemplateId : string index 0 read FGroupTemplateId write SetGroupTemplateId;
    Property ItemTemplateId : string index 8 read FItemTemplateId write SetItemTemplateId;
    Property Properties : TSPKeyValueArray index 16 read FProperties write SetProperties;
    Property Results : TMicrosoft_Office_Server_Search_RESTSpecialTermResultArray index 24 read FResults write SetResults;
    Property ResultTitle : string index 32 read FResultTitle write SetResultTitle;
    Property ResultTitleUrl : string index 40 read FResultTitleUrl write SetResultTitleUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: SpecialTermResult
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTSpecialTermResult = Class(TODataEntity)
  private
    FDescription : string;
    FIsVisualBestBet : boolean;
    FPiSearchResultId : string;
    FRenderTemplateId : string;
    FTitle : string;
    FUrl : string;
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetIsVisualBestBet(AIndex: Integer; const AValue: boolean);
    procedure SetPiSearchResultId(AIndex: Integer; const AValue: string);
    procedure SetRenderTemplateId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Description : string index 0 read FDescription write SetDescription;
    Property IsVisualBestBet : boolean index 8 read FIsVisualBestBet write SetIsVisualBestBet;
    Property PiSearchResultId : string index 16 read FPiSearchResultId write SetPiSearchResultId;
    Property RenderTemplateId : string index 24 read FRenderTemplateId write SetRenderTemplateId;
    Property Title : string index 32 read FTitle write SetTitle;
    Property Url : string index 40 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: SearchRequest
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTSearchRequest = Class(TODataEntity)
  private
    FBlockDedupeMode : TInt32;
    FBypassResultTypes : boolean;
    FClientType : string;
    FCollapseSpecification : string;
    FCulture : TInt32;
    FDesiredSnippetLength : TInt32;
    FEnableFQL : boolean;
    FEnableInterleaving : boolean;
    FEnableNicknames : boolean;
    FEnableOrderingHitHighlightedProperty : boolean;
    FEnablePhonetic : boolean;
    FEnableQueryRules : boolean;
    FEnableSorting : boolean;
    FEnableStemming : boolean;
    FGenerateBlockRankLog : boolean;
    FHiddenConstraints : string;
    FHitHighlightedMultivaluePropertyLimit : TInt32;
    FHitHighlightedProperties : TStringArray;
    FImpressionId : string;
    FMaxSnippetLength : TInt32;
    FPersonalizationData : TGUIDString;
    FProcessBestBets : boolean;
    FProcessPersonalFavorites : boolean;
    FProperties : TMicrosoft_Office_Server_Search_RESTQueryPropertyArray;
    FQueryTag : string;
    FQueryTemplate : string;
    FQueryTemplatePropertiesUrl : string;
    FQuerytext : string;
    FRankingModelId : string;
    FRefinementFilters : TStringArray;
    FRefiners : string;
    FReorderingRules : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray;
    FResultsUrl : string;
    FRowLimit : TInt32;
    FRowsPerPage : TInt32;
    FSelectProperties : TStringArray;
    FSortList : TMicrosoft_SharePoint_Client_Search_QuerySortArray;
    FSourceId : TGUIDString;
    FStartRow : TInt32;
    FSummaryLength : TInt32;
    FTimeout : TInt32;
    FTimeZoneId : TInt32;
    FTotalRowsExactMinimum : TInt32;
    FTrimDuplicates : boolean;
    FTrimDuplicatesIncludeId : int64;
    FUILanguage : TInt32;
    procedure SetBlockDedupeMode(AIndex: Integer; const AValue: TInt32);
    procedure SetBypassResultTypes(AIndex: Integer; const AValue: boolean);
    procedure SetClientType(AIndex: Integer; const AValue: string);
    procedure SetCollapseSpecification(AIndex: Integer; 
                                  const AValue: string);
    procedure SetCulture(AIndex: Integer; const AValue: TInt32);
    procedure SetDesiredSnippetLength(AIndex: Integer; const AValue: TInt32);
    procedure SetEnableFQL(AIndex: Integer; const AValue: boolean);
    procedure SetEnableInterleaving(AIndex: Integer; const AValue: boolean);
    procedure SetEnableNicknames(AIndex: Integer; const AValue: boolean);
    procedure SetEnableOrderingHitHighlightedProperty(AIndex: Integer; 
                                                 const AValue: boolean);
    procedure SetEnablePhonetic(AIndex: Integer; const AValue: boolean);
    procedure SetEnableQueryRules(AIndex: Integer; const AValue: boolean);
    procedure SetEnableSorting(AIndex: Integer; const AValue: boolean);
    procedure SetEnableStemming(AIndex: Integer; const AValue: boolean);
    procedure SetGenerateBlockRankLog(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetHiddenConstraints(AIndex: Integer; const AValue: string);
    procedure SetHitHighlightedMultivaluePropertyLimit(AIndex: Integer; 
                                                  const AValue: TInt32);
    procedure SetHitHighlightedProperties(AIndex: Integer; 
                                     const AValue: TStringArray);
    procedure SetImpressionId(AIndex: Integer; const AValue: string);
    procedure SetMaxSnippetLength(AIndex: Integer; const AValue: TInt32);
    procedure SetPersonalizationData(AIndex: Integer; 
                                const AValue: TGUIDString);
    procedure SetProcessBestBets(AIndex: Integer; const AValue: boolean);
    procedure SetProcessPersonalFavorites(AIndex: Integer; 
                                     const AValue: boolean);
    procedure SetProperties(AIndex: Integer; 
                       const AValue: TMicrosoft_Office_Server_Search_RESTQueryPropertyArray);
    procedure SetQueryTag(AIndex: Integer; const AValue: string);
    procedure SetQueryTemplate(AIndex: Integer; const AValue: string);
    procedure SetQueryTemplatePropertiesUrl(AIndex: Integer; 
                                       const AValue: string);
    procedure SetQuerytext(AIndex: Integer; const AValue: string);
    procedure SetRankingModelId(AIndex: Integer; const AValue: string);
    procedure SetRefinementFilters(AIndex: Integer; 
                              const AValue: TStringArray);
    procedure SetRefiners(AIndex: Integer; const AValue: string);
    procedure SetReorderingRules(AIndex: Integer; 
                            const AValue: TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray);
    procedure SetResultsUrl(AIndex: Integer; const AValue: string);
    procedure SetRowLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetRowsPerPage(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectProperties(AIndex: Integer; 
                             const AValue: TStringArray);
    procedure SetSortList(AIndex: Integer; 
                     const AValue: TMicrosoft_SharePoint_Client_Search_QuerySortArray);
    procedure SetSourceId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetStartRow(AIndex: Integer; const AValue: TInt32);
    procedure SetSummaryLength(AIndex: Integer; const AValue: TInt32);
    procedure SetTimeout(AIndex: Integer; const AValue: TInt32);
    procedure SetTimeZoneId(AIndex: Integer; const AValue: TInt32);
    procedure SetTotalRowsExactMinimum(AIndex: Integer; 
                                  const AValue: TInt32);
    procedure SetTrimDuplicates(AIndex: Integer; const AValue: boolean);
    procedure SetTrimDuplicatesIncludeId(AIndex: Integer; 
                                    const AValue: int64);
    procedure SetUILanguage(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property BlockDedupeMode : TInt32 index 0 read FBlockDedupeMode write SetBlockDedupeMode;
    Property BypassResultTypes : boolean index 8 read FBypassResultTypes write SetBypassResultTypes;
    Property ClientType : string index 16 read FClientType write SetClientType;
    Property CollapseSpecification : string index 24 read FCollapseSpecification write SetCollapseSpecification;
    Property Culture : TInt32 index 32 read FCulture write SetCulture;
    Property DesiredSnippetLength : TInt32 index 40 read FDesiredSnippetLength write SetDesiredSnippetLength;
    Property EnableFQL : boolean index 48 read FEnableFQL write SetEnableFQL;
    Property EnableInterleaving : boolean index 56 read FEnableInterleaving write SetEnableInterleaving;
    Property EnableNicknames : boolean index 64 read FEnableNicknames write SetEnableNicknames;
    Property EnableOrderingHitHighlightedProperty : boolean index 72 read FEnableOrderingHitHighlightedProperty write SetEnableOrderingHitHighlightedProperty;
    Property EnablePhonetic : boolean index 80 read FEnablePhonetic write SetEnablePhonetic;
    Property EnableQueryRules : boolean index 88 read FEnableQueryRules write SetEnableQueryRules;
    Property EnableSorting : boolean index 96 read FEnableSorting write SetEnableSorting;
    Property EnableStemming : boolean index 104 read FEnableStemming write SetEnableStemming;
    Property GenerateBlockRankLog : boolean index 112 read FGenerateBlockRankLog write SetGenerateBlockRankLog;
    Property HiddenConstraints : string index 120 read FHiddenConstraints write SetHiddenConstraints;
    Property HitHighlightedMultivaluePropertyLimit : TInt32 index 128 read FHitHighlightedMultivaluePropertyLimit write SetHitHighlightedMultivaluePropertyLimit;
    Property HitHighlightedProperties : TStringArray index 136 read FHitHighlightedProperties write SetHitHighlightedProperties;
    Property ImpressionId : string index 144 read FImpressionId write SetImpressionId;
    Property MaxSnippetLength : TInt32 index 152 read FMaxSnippetLength write SetMaxSnippetLength;
    Property PersonalizationData : TGUIDString index 160 read FPersonalizationData write SetPersonalizationData;
    Property ProcessBestBets : boolean index 168 read FProcessBestBets write SetProcessBestBets;
    Property ProcessPersonalFavorites : boolean index 176 read FProcessPersonalFavorites write SetProcessPersonalFavorites;
    Property Properties : TMicrosoft_Office_Server_Search_RESTQueryPropertyArray index 184 read FProperties write SetProperties;
    Property QueryTag : string index 192 read FQueryTag write SetQueryTag;
    Property QueryTemplate : string index 200 read FQueryTemplate write SetQueryTemplate;
    Property QueryTemplatePropertiesUrl : string index 208 read FQueryTemplatePropertiesUrl write SetQueryTemplatePropertiesUrl;
    Property Querytext : string index 216 read FQuerytext write SetQuerytext;
    Property RankingModelId : string index 224 read FRankingModelId write SetRankingModelId;
    Property RefinementFilters : TStringArray index 232 read FRefinementFilters write SetRefinementFilters;
    Property Refiners : string index 240 read FRefiners write SetRefiners;
    Property ReorderingRules : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray index 248 read FReorderingRules write SetReorderingRules;
    Property ResultsUrl : string index 256 read FResultsUrl write SetResultsUrl;
    Property RowLimit : TInt32 index 264 read FRowLimit write SetRowLimit;
    Property RowsPerPage : TInt32 index 272 read FRowsPerPage write SetRowsPerPage;
    Property SelectProperties : TStringArray index 280 read FSelectProperties write SetSelectProperties;
    Property SortList : TMicrosoft_SharePoint_Client_Search_QuerySortArray index 288 read FSortList write SetSortList;
    Property SourceId : TGUIDString index 296 read FSourceId write SetSourceId;
    Property StartRow : TInt32 index 304 read FStartRow write SetStartRow;
    Property SummaryLength : TInt32 index 312 read FSummaryLength write SetSummaryLength;
    Property Timeout : TInt32 index 320 read FTimeout write SetTimeout;
    Property TimeZoneId : TInt32 index 328 read FTimeZoneId write SetTimeZoneId;
    Property TotalRowsExactMinimum : TInt32 index 336 read FTotalRowsExactMinimum write SetTotalRowsExactMinimum;
    Property TrimDuplicates : boolean index 344 read FTrimDuplicates write SetTrimDuplicates;
    Property TrimDuplicatesIncludeId : int64 index 352 read FTrimDuplicatesIncludeId write SetTrimDuplicatesIncludeId;
    Property UILanguage : TInt32 index 360 read FUILanguage write SetUILanguage;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: SearchResult
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTSearchResult = Class(TODataEntity)
  private
    FElapsedTime : TInt32;
    FPrimaryQueryResult : TMicrosoft_Office_Server_Search_RESTQueryResult;
    FProperties : TSPKeyValueArray;
    FSecondaryQueryResults : TMicrosoft_Office_Server_Search_RESTQueryResultArray;
    FSpellingSuggestion : string;
    FTriggeredRules : TGuidStringArray;
    procedure SetElapsedTime(AIndex: Integer; const AValue: TInt32);
    procedure SetPrimaryQueryResult(AIndex: Integer; 
                               const AValue: TMicrosoft_Office_Server_Search_RESTQueryResult);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetSecondaryQueryResults(AIndex: Integer; 
                                  const AValue: TMicrosoft_Office_Server_Search_RESTQueryResultArray);
    procedure SetSpellingSuggestion(AIndex: Integer; const AValue: string);
    procedure SetTriggeredRules(AIndex: Integer; 
                           const AValue: TGuidStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ElapsedTime : TInt32 index 0 read FElapsedTime write SetElapsedTime;
    Property PrimaryQueryResult : TMicrosoft_Office_Server_Search_RESTQueryResult index 8 read FPrimaryQueryResult write SetPrimaryQueryResult;
    Property Properties : TSPKeyValueArray index 16 read FProperties write SetProperties;
    Property SecondaryQueryResults : TMicrosoft_Office_Server_Search_RESTQueryResultArray index 24 read FSecondaryQueryResults write SetSecondaryQueryResults;
    Property SpellingSuggestion : string index 32 read FSpellingSuggestion write SetSpellingSuggestion;
    Property TriggeredRules : TGuidStringArray index 40 read FTriggeredRules write SetTriggeredRules;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.Search.REST: SearchService
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_Search_RESTSearchService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Analytics: AnalyticsAction
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction = Class(TODataEntity)
  private
    FActionType : string;
    FExpireTime : TDateTime;
    FProperties : TSPKeyValueArray;
    FUserTime : TDateTime;
    procedure SetActionType(AIndex: Integer; const AValue: string);
    procedure SetExpireTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetUserTime(AIndex: Integer; const AValue: TDateTime);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ActionType : string index 0 read FActionType write SetActionType;
    Property ExpireTime : TDateTime index 8 read FExpireTime write SetExpireTime;
    Property Properties : TSPKeyValueArray index 16 read FProperties write SetProperties;
    Property UserTime : TDateTime index 24 read FUserTime write SetUserTime;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Analytics: AnalyticsActor
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor = Class(TODataEntity)
  private
    FId : string;
    FProperties : TSPKeyValueArray;
    FTenantId : TGUIDString;
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetTenantId(AIndex: Integer; const AValue: TGUIDString);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : string index 0 read FId write SetId;
    Property Properties : TSPKeyValueArray index 8 read FProperties write SetProperties;
    Property TenantId : TGUIDString index 16 read FTenantId write SetTenantId;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Analytics: AnalyticsItem
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem = Class(TODataEntity)
  private
    FId : string;
    FProperties : TSPKeyValueArray;
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Id : string index 0 read FId write SetId;
    Property Properties : TSPKeyValueArray index 8 read FProperties write SetProperties;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Analytics: AnalyticsSignal
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal = Class(TODataEntity)
  private
    FAction : TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction;
    FActor : TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor;
    FItem : TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem;
    FSource : string;
    procedure SetAction(AIndex: Integer; 
                   const AValue: TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction);
    procedure SetActor(AIndex: Integer; 
                  const AValue: TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor);
    procedure SetItem(AIndex: Integer; 
                 const AValue: TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem);
    procedure SetSource(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Action : TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction index 0 read FAction write SetAction;
    Property Actor : TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor index 8 read FActor write SetActor;
    Property Item : TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem index 16 read FItem write SetItem;
    Property Source : string index 24 read FSource write SetSource;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Analytics: SignalStore
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Yammer: WacToken
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_YammerWacToken = Class(TODataEntity)
  private
    FAccessToken : string;
    FAccessTokenTtl : int64;
    FAppUrl : string;
    FErrorMessageToDisplay : string;
    FFavIconTarget : string;
    FRedirectUrl : string;
    procedure SetAccessToken(AIndex: Integer; const AValue: string);
    procedure SetAccessTokenTtl(AIndex: Integer; const AValue: int64);
    procedure SetAppUrl(AIndex: Integer; const AValue: string);
    procedure SetErrorMessageToDisplay(AIndex: Integer; 
                                  const AValue: string);
    procedure SetFavIconTarget(AIndex: Integer; const AValue: string);
    procedure SetRedirectUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AccessToken : string index 0 read FAccessToken write SetAccessToken;
    Property AccessTokenTtl : int64 index 8 read FAccessTokenTtl write SetAccessTokenTtl;
    Property AppUrl : string index 16 read FAppUrl write SetAppUrl;
    Property ErrorMessageToDisplay : string index 24 read FErrorMessageToDisplay write SetErrorMessageToDisplay;
    Property FavIconTarget : string index 32 read FFavIconTarget write SetFavIconTarget;
    Property RedirectUrl : string index 40 read FRedirectUrl write SetRedirectUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Yammer: WacApi
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_YammerWacApi = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal: CollaborationMailboxResponse
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_PortalCollaborationMailboxResponse = Class(TODataEntity)
  private
    FAlternateUrl : string;
    FCorrelationId : string;
    FErrorCode : TInt32;
    FStatus : TInt32;
    FUrl : string;
    procedure SetAlternateUrl(AIndex: Integer; const AValue: string);
    procedure SetCorrelationId(AIndex: Integer; const AValue: string);
    procedure SetErrorCode(AIndex: Integer; const AValue: TInt32);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AlternateUrl : string index 0 read FAlternateUrl write SetAlternateUrl;
    Property CorrelationId : string index 8 read FCorrelationId write SetCorrelationId;
    Property ErrorCode : TInt32 index 16 read FErrorCode write SetErrorCode;
    Property Status : TInt32 index 24 read FStatus write SetStatus;
    Property Url : string index 32 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal: CollaborationMailbox
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_PortalCollaborationMailbox = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal: CommunityModeration
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_PortalCommunityModeration = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal: MySiteRecommendations
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_PortalMySiteRecommendations = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: SharedWithMeDocumentUser
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser = Class(TODataEntity)
  private
    FLoginName : string;
    FSipAddress : string;
    FTitle : string;
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetSipAddress(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property LoginName : string index 0 read FLoginName write SetLoginName;
    Property SipAddress : string index 8 read FSipAddress write SetSipAddress;
    Property Title : string index 16 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: MySiteLinks
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks = Class(TODataEntity)
  private
    FAllDocumentsLink : string;
    FAllDocumentsLinkHref : string;
    FAllDocumentsLinkTarget : string;
    FAllSitesLink : string;
    FAllSitesLinkHref : string;
    FAllSitesLinkTarget : string;
    procedure SetAllDocumentsLink(AIndex: Integer; const AValue: string);
    procedure SetAllDocumentsLinkHref(AIndex: Integer; const AValue: string);
    procedure SetAllDocumentsLinkTarget(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAllSitesLink(AIndex: Integer; const AValue: string);
    procedure SetAllSitesLinkHref(AIndex: Integer; const AValue: string);
    procedure SetAllSitesLinkTarget(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllDocumentsLink : string index 0 read FAllDocumentsLink write SetAllDocumentsLink;
    Property AllDocumentsLinkHref : string index 8 read FAllDocumentsLinkHref write SetAllDocumentsLinkHref;
    Property AllDocumentsLinkTarget : string index 16 read FAllDocumentsLinkTarget write SetAllDocumentsLinkTarget;
    Property AllSitesLink : string index 24 read FAllSitesLink write SetAllSitesLink;
    Property AllSitesLinkHref : string index 32 read FAllSitesLinkHref write SetAllSitesLinkHref;
    Property AllSitesLinkTarget : string index 40 read FAllSitesLinkTarget write SetAllSitesLinkTarget;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: MySiteDismissStatusText
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: MySiteDocumentMoveUtility
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: SharedWithMeDocument
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument = Class(TODataEntity)
  private
    FAuthors : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray;
    FContentTypeId : TSPContentTypeId;
    FDocId : string;
    FEditors : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray;
    FExtension : string;
    FFileLeafRef : string;
    FFileRef : string;
    FId : TInt32;
    FIsContainer : boolean;
    FIsMyDocument : boolean;
    FLinkingUrl : string;
    FListId : string;
    FListItemId : string;
    FModified : TDateTime;
    FParentLink : string;
    FProgId : string;
    FServerRedirectedEmbedUrl : string;
    FServerRedirectedPreviewUrl : string;
    FServerRedirectedUrl : string;
    FSharedWithInternal : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray;
    FSiteId : string;
    FSiteUrl : string;
    FTitle : string;
    FUniqueId : string;
    FUrlPath : string;
    FWebId : string;
    procedure SetAuthors(AIndex: Integer; 
                    const AValue: TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray);
    procedure SetContentTypeId(AIndex: Integer; 
                          const AValue: TSPContentTypeId);
    procedure SetDocId(AIndex: Integer; const AValue: string);
    procedure SetEditors(AIndex: Integer; 
                    const AValue: TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray);
    procedure SetExtension(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetIsContainer(AIndex: Integer; const AValue: boolean);
    procedure SetIsMyDocument(AIndex: Integer; const AValue: boolean);
    procedure SetLinkingUrl(AIndex: Integer; const AValue: string);
    procedure SetListId(AIndex: Integer; const AValue: string);
    procedure SetListItemId(AIndex: Integer; const AValue: string);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetParentLink(AIndex: Integer; const AValue: string);
    procedure SetProgId(AIndex: Integer; const AValue: string);
    procedure SetServerRedirectedEmbedUrl(AIndex: Integer; 
                                     const AValue: string);
    procedure SetServerRedirectedPreviewUrl(AIndex: Integer; 
                                       const AValue: string);
    procedure SetServerRedirectedUrl(AIndex: Integer; const AValue: string);
    procedure SetSharedWithInternal(AIndex: Integer; 
                               const AValue: TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray);
    procedure SetSiteId(AIndex: Integer; const AValue: string);
    procedure SetSiteUrl(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: string);
    procedure SetUrlPath(AIndex: Integer; const AValue: string);
    procedure SetWebId(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Authors : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray index 0 read FAuthors write SetAuthors;
    Property ContentTypeId : TSPContentTypeId index 8 read FContentTypeId write SetContentTypeId;
    Property DocId : string index 16 read FDocId write SetDocId;
    Property Editors : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray index 24 read FEditors write SetEditors;
    Property Extension : string index 32 read FExtension write SetExtension;
    Property FileLeafRef : string index 40 read FFileLeafRef write SetFileLeafRef;
    Property FileRef : string index 48 read FFileRef write SetFileRef;
    Property Id : TInt32 index 56 read FId write SetId;
    Property IsContainer : boolean index 64 read FIsContainer write SetIsContainer;
    Property IsMyDocument : boolean index 72 read FIsMyDocument write SetIsMyDocument;
    Property LinkingUrl : string index 80 read FLinkingUrl write SetLinkingUrl;
    Property ListId : string index 88 read FListId write SetListId;
    Property ListItemId : string index 96 read FListItemId write SetListItemId;
    Property Modified : TDateTime index 104 read FModified write SetModified;
    Property ParentLink : string index 112 read FParentLink write SetParentLink;
    Property ProgId : string index 120 read FProgId write SetProgId;
    Property ServerRedirectedEmbedUrl : string index 128 read FServerRedirectedEmbedUrl write SetServerRedirectedEmbedUrl;
    Property ServerRedirectedPreviewUrl : string index 136 read FServerRedirectedPreviewUrl write SetServerRedirectedPreviewUrl;
    Property ServerRedirectedUrl : string index 144 read FServerRedirectedUrl write SetServerRedirectedUrl;
    Property SharedWithInternal : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray index 152 read FSharedWithInternal write SetSharedWithInternal;
    Property SiteId : string index 160 read FSiteId write SetSiteId;
    Property SiteUrl : string index 168 read FSiteUrl write SetSiteUrl;
    Property Title : string index 176 read FTitle write SetTitle;
    Property UniqueId : string index 184 read FUniqueId write SetUniqueId;
    Property UrlPath : string index 192 read FUrlPath write SetUrlPath;
    Property WebId : string index 200 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: DocumentsSharedWithMe
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: DocumentsSharedWithGroup
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: DocumentsSharedWithPerson
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.UserProfiles: PromotedSites
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.Project: MyRecsCacheBlob
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob = Class(TODataEntity)
  private
    FDateCached : TDateTime;
    FFillInQuery : string;
    FFillInSortBy : string;
    FQuery : string;
    FQueryInfo : TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo;
    F_Result : string;
    FSortBy : string;
    procedure SetDateCached(AIndex: Integer; const AValue: TDateTime);
    procedure SetFillInQuery(AIndex: Integer; const AValue: string);
    procedure SetFillInSortBy(AIndex: Integer; const AValue: string);
    procedure SetQuery(AIndex: Integer; const AValue: string);
    procedure SetQueryInfo(AIndex: Integer; 
                      const AValue: TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo);
    procedure Set_Result(AIndex: Integer; const AValue: string);
    procedure SetSortBy(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property DateCached : TDateTime index 0 read FDateCached write SetDateCached;
    Property FillInQuery : string index 8 read FFillInQuery write SetFillInQuery;
    Property FillInSortBy : string index 16 read FFillInSortBy write SetFillInSortBy;
    Property Query : string index 24 read FQuery write SetQuery;
    Property QueryInfo : TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo index 32 read FQueryInfo write SetQueryInfo;
    Property _Result : string index 40 read F_Result write Set_Result;
    Property SortBy : string index 48 read FSortBy write SetSortBy;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.Project: MyRecsQueryInfo
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo = Class(TODataEntity)
  private
    FCategory : TInt32;
    FExpertiseTags : TStringArray;
    FFollowedUrls : TStringArray;
    FInterestTags : TStringArray;
    FQueryInfoExists : boolean;
    FSuggestedTags : TStringArray;
    procedure SetCategory(AIndex: Integer; const AValue: TInt32);
    procedure SetExpertiseTags(AIndex: Integer; const AValue: TStringArray);
    procedure SetFollowedUrls(AIndex: Integer; const AValue: TStringArray);
    procedure SetInterestTags(AIndex: Integer; const AValue: TStringArray);
    procedure SetQueryInfoExists(AIndex: Integer; const AValue: boolean);
    procedure SetSuggestedTags(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Category : TInt32 index 0 read FCategory write SetCategory;
    Property ExpertiseTags : TStringArray index 8 read FExpertiseTags write SetExpertiseTags;
    Property FollowedUrls : TStringArray index 16 read FFollowedUrls write SetFollowedUrls;
    Property InterestTags : TStringArray index 24 read FInterestTags write SetInterestTags;
    Property QueryInfoExists : boolean index 32 read FQueryInfoExists write SetQueryInfoExists;
    Property SuggestedTags : TStringArray index 40 read FSuggestedTags write SetSuggestedTags;
  end;
  
  
  { --------------------------------------------------------------------
    SP.SiteHealth: SiteHealthResult
    --------------------------------------------------------------------}
  
  TSP_SiteHealthSiteHealthResult = Class(TODataEntity)
  private
    FMessageAsText : string;
    FRuleHelpLink : string;
    FRuleId : TGUIDString;
    FRuleIsRepairable : boolean;
    FRuleName : string;
    FStatus : TInt32;
    FTimeStamp : TDateTime;
    procedure SetMessageAsText(AIndex: Integer; const AValue: string);
    procedure SetRuleHelpLink(AIndex: Integer; const AValue: string);
    procedure SetRuleId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetRuleIsRepairable(AIndex: Integer; const AValue: boolean);
    procedure SetRuleName(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetTimeStamp(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property MessageAsText : string index 0 read FMessageAsText write SetMessageAsText;
    Property RuleHelpLink : string index 8 read FRuleHelpLink write SetRuleHelpLink;
    Property RuleId : TGUIDString index 16 read FRuleId write SetRuleId;
    Property RuleIsRepairable : boolean index 24 read FRuleIsRepairable write SetRuleIsRepairable;
    Property RuleName : string index 32 read FRuleName write SetRuleName;
    Property Status : TInt32 index 40 read FStatus write SetStatus;
    Property TimeStamp : TDateTime index 48 read FTimeStamp write SetTimeStamp;
  end;
  
  
  { --------------------------------------------------------------------
    SP.SiteHealth: SiteHealthSummary
    --------------------------------------------------------------------}
  
  TSP_SiteHealthSiteHealthSummary = Class(TODataEntity)
  private
    FFailedErrorCount : TInt32;
    FFailedWarningCount : TInt32;
    FPassedCount : TInt32;
    FResults : TSP_SiteHealthSiteHealthResultArray;
    procedure SetFailedErrorCount(AIndex: Integer; const AValue: TInt32);
    procedure SetFailedWarningCount(AIndex: Integer; const AValue: TInt32);
    procedure SetPassedCount(AIndex: Integer; const AValue: TInt32);
    procedure SetResults(AIndex: Integer; 
                    const AValue: TSP_SiteHealthSiteHealthResultArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FailedErrorCount : TInt32 index 0 read FFailedErrorCount write SetFailedErrorCount;
    Property FailedWarningCount : TInt32 index 8 read FFailedWarningCount write SetFailedWarningCount;
    Property PassedCount : TInt32 index 16 read FPassedCount write SetPassedCount;
    Property Results : TSP_SiteHealthSiteHealthResultArray index 24 read FResults write SetResults;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: UsageEntry
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationUsageEntry = Class(TODataEntity)
  private
    FEventTypeId : TInt32;
    FItemId : string;
    FScopeId : TGUIDString;
    FSite : TGUIDString;
    FUser : string;
    procedure SetEventTypeId(AIndex: Integer; const AValue: TInt32);
    procedure SetItemId(AIndex: Integer; const AValue: string);
    procedure SetScopeId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetSite(AIndex: Integer; const AValue: TGUIDString);
    procedure SetUser(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property EventTypeId : TInt32 index 0 read FEventTypeId write SetEventTypeId;
    Property ItemId : string index 8 read FItemId write SetItemId;
    Property ScopeId : TGUIDString index 16 read FScopeId write SetScopeId;
    Property Site : TGUIDString index 24 read FSite write SetSite;
    Property User : string index 32 read FUser write SetUser;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: SPAppStateQueryJobDefinition
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: SPFarm
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationSPFarm = Class(TODataEntity)
  private
    FId : TGUIDString;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Local(AService: TODataService)
               : TMicrosoft_SharePoint_AdministrationSPFarm;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: FeatureDefinition
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationFeatureDefinition = Class(TODataEntity)
  private
    FDisplayName : string;
    FId : TGUIDString;
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property DisplayName : string index 0 read FDisplayName write SetDisplayName;
    Property Id : TGUIDString index 8 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: SPTenantAppInstanceData
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: SPWebApplication
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationSPWebApplication = Class(TODataEntity)
  private
    FDisplayName : string;
    FId : TGUIDString;
    FOutboundMailPort : TInt32;
    FOutboundMailReplyToAddress : string;
    FOutboundMailSenderAddress : string;
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOutboundMailPort(AIndex: Integer; const AValue: TInt32);
    procedure SetOutboundMailReplyToAddress(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOutboundMailSenderAddress(AIndex: Integer; 
                                      const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Sites(AService: TODataService) : TSPSite;
  published
    Property DisplayName : string index 0 read FDisplayName write SetDisplayName;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property OutboundMailPort : TInt32 index 16 read FOutboundMailPort write SetOutboundMailPort;
    Property OutboundMailReplyToAddress : string index 24 read FOutboundMailReplyToAddress write SetOutboundMailReplyToAddress;
    Property OutboundMailSenderAddress : string index 32 read FOutboundMailSenderAddress write SetOutboundMailSenderAddress;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: SPWebService
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationSPWebService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ContentService(AService: TODataService)
                        : TMicrosoft_SharePoint_AdministrationSPWebService;
    function WebApplications(AService: TODataService)
                         : TMicrosoft_SharePoint_AdministrationSPWebApplication;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Administration: SPAnalyticsUsageService
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UI.ApplicationPages: ClientPeoplePickerQueryParameters
    --------------------------------------------------------------------}
  
  TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters = Class(TODataEntity)
  private
    FAllowEmailAddresses : boolean;
    FAllowMultipleEntities : boolean;
    FAllUrlZones : boolean;
    FEnabledClaimProviders : string;
    FForceClaims : boolean;
    FMaximumEntitySuggestions : TInt32;
    FPrincipalSource : TInt32;
    FPrincipalType : TInt32;
    FQueryString : string;
    FRequired : boolean;
    FSharePointGroupID : TInt32;
    FUrlZone : TInt32;
    FUrlZoneSpecified : boolean;
    FWebApplicationID : TGUIDString;
    procedure SetAllowEmailAddresses(AIndex: Integer; const AValue: boolean);
    procedure SetAllowMultipleEntities(AIndex: Integer; 
                                  const AValue: boolean);
    procedure SetAllUrlZones(AIndex: Integer; const AValue: boolean);
    procedure SetEnabledClaimProviders(AIndex: Integer; 
                                  const AValue: string);
    procedure SetForceClaims(AIndex: Integer; const AValue: boolean);
    procedure SetMaximumEntitySuggestions(AIndex: Integer; 
                                     const AValue: TInt32);
    procedure SetPrincipalSource(AIndex: Integer; const AValue: TInt32);
    procedure SetPrincipalType(AIndex: Integer; const AValue: TInt32);
    procedure SetQueryString(AIndex: Integer; const AValue: string);
    procedure SetRequired(AIndex: Integer; const AValue: boolean);
    procedure SetSharePointGroupID(AIndex: Integer; const AValue: TInt32);
    procedure SetUrlZone(AIndex: Integer; const AValue: TInt32);
    procedure SetUrlZoneSpecified(AIndex: Integer; const AValue: boolean);
    procedure SetWebApplicationID(AIndex: Integer; 
                             const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AllowEmailAddresses : boolean index 0 read FAllowEmailAddresses write SetAllowEmailAddresses;
    Property AllowMultipleEntities : boolean index 8 read FAllowMultipleEntities write SetAllowMultipleEntities;
    Property AllUrlZones : boolean index 16 read FAllUrlZones write SetAllUrlZones;
    Property EnabledClaimProviders : string index 24 read FEnabledClaimProviders write SetEnabledClaimProviders;
    Property ForceClaims : boolean index 32 read FForceClaims write SetForceClaims;
    Property MaximumEntitySuggestions : TInt32 index 40 read FMaximumEntitySuggestions write SetMaximumEntitySuggestions;
    Property PrincipalSource : TInt32 index 48 read FPrincipalSource write SetPrincipalSource;
    Property PrincipalType : TInt32 index 56 read FPrincipalType write SetPrincipalType;
    Property QueryString : string index 64 read FQueryString write SetQueryString;
    Property Required : boolean index 72 read FRequired write SetRequired;
    Property SharePointGroupID : TInt32 index 80 read FSharePointGroupID write SetSharePointGroupID;
    Property UrlZone : TInt32 index 88 read FUrlZone write SetUrlZone;
    Property UrlZoneSpecified : boolean index 96 read FUrlZoneSpecified write SetUrlZoneSpecified;
    Property WebApplicationID : TGUIDString index 104 read FWebApplicationID write SetWebApplicationID;
  end;
  
  
  { --------------------------------------------------------------------
    SP.UI.ApplicationPages: ClientPeoplePickerWebServiceInterface
    --------------------------------------------------------------------}
  
  TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.PageInstrumentation: PageImpressionClient
    --------------------------------------------------------------------}
  
  TSP_PageInstrumentationPageImpressionClient = Class(TODataEntity)
  private
    FBasePageCorrelationId : string;
    FClientIdToClickInfoMap : TSPKeyValueArray;
    procedure SetBasePageCorrelationId(AIndex: Integer; 
                                  const AValue: string);
    procedure SetClientIdToClickInfoMap(AIndex: Integer; 
                                   const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property BasePageCorrelationId : string index 0 read FBasePageCorrelationId write SetBasePageCorrelationId;
    Property ClientIdToClickInfoMap : TSPKeyValueArray index 8 read FClientIdToClickInfoMap write SetClientIdToClickInfoMap;
  end;
  
  
  { --------------------------------------------------------------------
    SP.PageInstrumentation: ClickManager
    --------------------------------------------------------------------}
  
  TSP_PageInstrumentationClickManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Utilities: EmailProperties
    --------------------------------------------------------------------}
  
  TSP_UtilitiesEmailProperties = Class(TODataEntity)
  private
    FAdditionalHeaders : TSPKeyValueArray;
    FBCC : TStringArray;
    FBody : string;
    FCC : TStringArray;
    FFrom : string;
    FSubject : string;
    F_To : TStringArray;
    procedure SetAdditionalHeaders(AIndex: Integer; 
                              const AValue: TSPKeyValueArray);
    procedure SetBCC(AIndex: Integer; const AValue: TStringArray);
    procedure SetBody(AIndex: Integer; const AValue: string);
    procedure SetCC(AIndex: Integer; const AValue: TStringArray);
    procedure SetFrom(AIndex: Integer; const AValue: string);
    procedure SetSubject(AIndex: Integer; const AValue: string);
    procedure Set_To(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property AdditionalHeaders : TSPKeyValueArray index 0 read FAdditionalHeaders write SetAdditionalHeaders;
    Property BCC : TStringArray index 8 read FBCC write SetBCC;
    Property Body : string index 16 read FBody write SetBody;
    Property CC : TStringArray index 24 read FCC write SetCC;
    Property From : string index 32 read FFrom write SetFrom;
    Property Subject : string index 40 read FSubject write SetSubject;
    Property _To : TStringArray index 48 read F_To write Set_To;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Utilities: PrincipalInfo
    --------------------------------------------------------------------}
  
  TSP_UtilitiesPrincipalInfo = Class(TODataEntity)
  private
    FDepartment : string;
    FDisplayName : string;
    FEmail : string;
    FJobTitle : string;
    FLoginName : string;
    FMobile : string;
    FPrincipalId : TInt32;
    FPrincipalType : TInt32;
    FSIPAddress : string;
    procedure SetDepartment(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetJobTitle(AIndex: Integer; const AValue: string);
    procedure SetLoginName(AIndex: Integer; const AValue: string);
    procedure SetMobile(AIndex: Integer; const AValue: string);
    procedure SetPrincipalId(AIndex: Integer; const AValue: TInt32);
    procedure SetPrincipalType(AIndex: Integer; const AValue: TInt32);
    procedure SetSIPAddress(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Department : string index 0 read FDepartment write SetDepartment;
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
    Property Email : string index 16 read FEmail write SetEmail;
    Property JobTitle : string index 24 read FJobTitle write SetJobTitle;
    Property LoginName : string index 32 read FLoginName write SetLoginName;
    Property Mobile : string index 40 read FMobile write SetMobile;
    Property PrincipalId : TInt32 index 48 read FPrincipalId write SetPrincipalId;
    Property PrincipalType : TInt32 index 56 read FPrincipalType write SetPrincipalType;
    Property SIPAddress : string index 64 read FSIPAddress write SetSIPAddress;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Utilities: WikiPageCreationInformation
    --------------------------------------------------------------------}
  
  TSP_UtilitiesWikiPageCreationInformation = Class(TODataEntity)
  private
    FServerRelativeUrl : string;
    FWikiHtmlContent : string;
    procedure SetServerRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetWikiHtmlContent(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ServerRelativeUrl : string index 0 read FServerRelativeUrl write SetServerRelativeUrl;
    Property WikiHtmlContent : string index 8 read FWikiHtmlContent write SetWikiHtmlContent;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Utilities: MarketplaceUtilities
    --------------------------------------------------------------------}
  
  TSP_UtilitiesMarketplaceUtilities = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Utilities: Utility
    --------------------------------------------------------------------}
  
  TSP_UtilitiesUtility = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WebParts: TileData
    --------------------------------------------------------------------}
  
  TSP_WebPartsTileData = Class(TODataEntity)
  private
    FBackgroundCollageImageLocations : TStringArray;
    FBackgroundImageLocation : string;
    FBackgroundImageRendersAsIcon : boolean;
    FBodyText : string;
    FDescription : string;
    FHoverDisabled : boolean;
    FID : TInt32;
    FIsWide : boolean;
    FLinkLocation : string;
    FTileOrder : TInt32;
    FTitle : string;
    FTransparentOverlay : boolean;
    procedure SetBackgroundCollageImageLocations(AIndex: Integer; 
                                            const AValue: TStringArray);
    procedure SetBackgroundImageLocation(AIndex: Integer; 
                                    const AValue: string);
    procedure SetBackgroundImageRendersAsIcon(AIndex: Integer; 
                                         const AValue: boolean);
    procedure SetBodyText(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetHoverDisabled(AIndex: Integer; const AValue: boolean);
    procedure SetID(AIndex: Integer; const AValue: TInt32);
    procedure SetIsWide(AIndex: Integer; const AValue: boolean);
    procedure SetLinkLocation(AIndex: Integer; const AValue: string);
    procedure SetTileOrder(AIndex: Integer; const AValue: TInt32);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTransparentOverlay(AIndex: Integer; const AValue: boolean);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property BackgroundCollageImageLocations : TStringArray index 0 read FBackgroundCollageImageLocations write SetBackgroundCollageImageLocations;
    Property BackgroundImageLocation : string index 8 read FBackgroundImageLocation write SetBackgroundImageLocation;
    Property BackgroundImageRendersAsIcon : boolean index 16 read FBackgroundImageRendersAsIcon write SetBackgroundImageRendersAsIcon;
    Property BodyText : string index 24 read FBodyText write SetBodyText;
    Property Description : string index 32 read FDescription write SetDescription;
    Property HoverDisabled : boolean index 40 read FHoverDisabled write SetHoverDisabled;
    Property ID : TInt32 index 48 read FID write SetID;
    Property IsWide : boolean index 56 read FIsWide write SetIsWide;
    Property LinkLocation : string index 64 read FLinkLocation write SetLinkLocation;
    Property TileOrder : TInt32 index 72 read FTileOrder write SetTileOrder;
    Property Title : string index 80 read FTitle write SetTitle;
    Property TransparentOverlay : boolean index 88 read FTransparentOverlay write SetTransparentOverlay;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WebParts: LimitedWebPartManager
    --------------------------------------------------------------------}
  
  TSP_WebPartsLimitedWebPartManager = Class(TODataEntity)
  private
    FHasPersonalizedParts : boolean;
    FScope : TInt32;
    procedure SetHasPersonalizedParts(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetScope(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function WebParts(AService: TODataService)
                  : TSP_WebPartsWebPartDefinition;
  published
    Property HasPersonalizedParts : boolean index 0 read FHasPersonalizedParts write SetHasPersonalizedParts;
    Property Scope : TInt32 index 8 read FScope write SetScope;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WebParts: WebPartDefinition
    --------------------------------------------------------------------}
  
  TSP_WebPartsWebPartDefinition = Class(TODataEntity)
  private
    FId : TGUIDString;
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function WebPart(AService: TODataService) : TSP_WebPartsWebPart;
  published
    Property Id : TGUIDString index 0 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WebParts: WebPart
    --------------------------------------------------------------------}
  
  TSP_WebPartsWebPart = Class(TODataEntity)
  private
    FHidden : boolean;
    FIsClosed : boolean;
    FSubtitle : string;
    FTitle : string;
    FTitleUrl : string;
    FZoneIndex : TInt32;
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetIsClosed(AIndex: Integer; const AValue: boolean);
    procedure SetSubtitle(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTitleUrl(AIndex: Integer; const AValue: string);
    procedure SetZoneIndex(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Properties(AService: TODataService) : TSPPropertyValues;
  published
    Property Hidden : boolean index 0 read FHidden write SetHidden;
    Property IsClosed : boolean index 8 read FIsClosed write SetIsClosed;
    Property Subtitle : string index 16 read FSubtitle write SetSubtitle;
    Property Title : string index 24 read FTitle write SetTitle;
    Property TitleUrl : string index 32 read FTitleUrl write SetTitleUrl;
    Property ZoneIndex : TInt32 index 40 read FZoneIndex write SetZoneIndex;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Workflow: WorkflowAssociationCreationInformation
    --------------------------------------------------------------------}
  
  TSP_WorkflowWorkflowAssociationCreationInformation = Class(TODataEntity)
  private
    FContentTypeAssociationHistoryListName : string;
    FContentTypeAssociationTaskListName : string;
    FName : string;
    procedure SetContentTypeAssociationHistoryListName(AIndex: Integer; 
                                                  const AValue: string);
    procedure SetContentTypeAssociationTaskListName(AIndex: Integer; 
                                               const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property ContentTypeAssociationHistoryListName : string index 0 read FContentTypeAssociationHistoryListName write SetContentTypeAssociationHistoryListName;
    Property ContentTypeAssociationTaskListName : string index 8 read FContentTypeAssociationTaskListName write SetContentTypeAssociationTaskListName;
    Property Name : string index 16 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Workflow: WorkflowAssociation
    --------------------------------------------------------------------}
  
  TSP_WorkflowWorkflowAssociation = Class(TODataEntity)
  private
    FAllowManual : boolean;
    FAssociationData : string;
    FAutoStartChange : boolean;
    FAutoStartCreate : boolean;
    FBaseId : TGUIDString;
    FCreated : TDateTime;
    FDescription : string;
    FEnabled : boolean;
    FHistoryListTitle : string;
    FId : TGUIDString;
    FInstantiationUrl : string;
    FInternalName : string;
    FIsDeclarative : boolean;
    FListId : TGUIDString;
    FModified : TDateTime;
    FName : string;
    FTaskListTitle : string;
    FWebId : TGUIDString;
    procedure SetAllowManual(AIndex: Integer; const AValue: boolean);
    procedure SetAssociationData(AIndex: Integer; const AValue: string);
    procedure SetAutoStartChange(AIndex: Integer; const AValue: boolean);
    procedure SetAutoStartCreate(AIndex: Integer; const AValue: boolean);
    procedure SetBaseId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetHistoryListTitle(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInstantiationUrl(AIndex: Integer; const AValue: string);
    procedure SetInternalName(AIndex: Integer; const AValue: string);
    procedure SetIsDeclarative(AIndex: Integer; const AValue: boolean);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTaskListTitle(AIndex: Integer; const AValue: string);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllowManual : boolean index 0 read FAllowManual write SetAllowManual;
    Property AssociationData : string index 8 read FAssociationData write SetAssociationData;
    Property AutoStartChange : boolean index 16 read FAutoStartChange write SetAutoStartChange;
    Property AutoStartCreate : boolean index 24 read FAutoStartCreate write SetAutoStartCreate;
    Property BaseId : TGUIDString index 32 read FBaseId write SetBaseId;
    Property Created : TDateTime index 40 read FCreated write SetCreated;
    Property Description : string index 48 read FDescription write SetDescription;
    Property Enabled : boolean index 56 read FEnabled write SetEnabled;
    Property HistoryListTitle : string index 64 read FHistoryListTitle write SetHistoryListTitle;
    Property Id : TGUIDString index 72 read FId write SetId;
    Property InstantiationUrl : string index 80 read FInstantiationUrl write SetInstantiationUrl;
    Property InternalName : string index 88 read FInternalName write SetInternalName;
    Property IsDeclarative : boolean index 96 read FIsDeclarative write SetIsDeclarative;
    Property ListId : TGUIDString index 104 read FListId write SetListId;
    Property Modified : TDateTime index 112 read FModified write SetModified;
    Property Name : string index 120 read FName write SetName;
    Property TaskListTitle : string index 128 read FTaskListTitle write SetTaskListTitle;
    Property WebId : TGUIDString index 136 read FWebId write SetWebId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Workflow: WorkflowTemplate
    --------------------------------------------------------------------}
  
  TSP_WorkflowWorkflowTemplate = Class(TODataEntity)
  private
    FAllowManual : boolean;
    FAssociationUrl : string;
    FAutoStartChange : boolean;
    FAutoStartCreate : boolean;
    FDescription : string;
    FId : TGUIDString;
    FIsDeclarative : boolean;
    FName : string;
    FPermissionsManual : TSPBasePermissions;
    procedure SetAllowManual(AIndex: Integer; const AValue: boolean);
    procedure SetAssociationUrl(AIndex: Integer; const AValue: string);
    procedure SetAutoStartChange(AIndex: Integer; const AValue: boolean);
    procedure SetAutoStartCreate(AIndex: Integer; const AValue: boolean);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsDeclarative(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPermissionsManual(AIndex: Integer; 
                              const AValue: TSPBasePermissions);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllowManual : boolean index 0 read FAllowManual write SetAllowManual;
    Property AssociationUrl : string index 8 read FAssociationUrl write SetAssociationUrl;
    Property AutoStartChange : boolean index 16 read FAutoStartChange write SetAutoStartChange;
    Property AutoStartCreate : boolean index 24 read FAutoStartCreate write SetAutoStartCreate;
    Property Description : string index 32 read FDescription write SetDescription;
    Property Id : TGUIDString index 40 read FId write SetId;
    Property IsDeclarative : boolean index 48 read FIsDeclarative write SetIsDeclarative;
    Property Name : string index 56 read FName write SetName;
    Property PermissionsManual : TSPBasePermissions index 64 read FPermissionsManual write SetPermissionsManual;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Workflow: SPWorkflow
    --------------------------------------------------------------------}
  
  TSP_WorkflowSPWorkflow = Class(TODataEntity)
  private
    FAssociationId : TGUIDString;
    FInstanceId : TGUIDString;
    FIsCompleted : boolean;
    FStatusText : string;
    procedure SetAssociationId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInstanceId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetIsCompleted(AIndex: Integer; const AValue: boolean);
    procedure SetStatusText(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AssociationId : TGUIDString index 0 read FAssociationId write SetAssociationId;
    Property InstanceId : TGUIDString index 8 read FInstanceId write SetInstanceId;
    Property IsCompleted : boolean index 16 read FIsCompleted write SetIsCompleted;
    Property StatusText : string index 24 read FStatusText write SetStatusText;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Workflow: SPWorkflowManager
    --------------------------------------------------------------------}
  
  TSP_WorkflowSPWorkflowManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Workflow: SPWorkflowTask
    --------------------------------------------------------------------}
  
  TSP_WorkflowSPWorkflowTask = Class(TSPListItem)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Sharing: UserRoleAssignment
    --------------------------------------------------------------------}
  
  TSP_SharingUserRoleAssignment = Class(TODataEntity)
  private
    FRole : TInt32;
    FUserId : string;
    procedure SetRole(AIndex: Integer; const AValue: TInt32);
    procedure SetUserId(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Role : TInt32 index 0 read FRole write SetRole;
    Property UserId : string index 8 read FUserId write SetUserId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Sharing: UserSharingResult
    --------------------------------------------------------------------}
  
  TSP_SharingUserSharingResult = Class(TODataEntity)
  private
    FAllowedRoles : TInt32Array;
    FCurrentRole : TInt32;
    FDisplayName : string;
    FEmail : string;
    FInvitationLink : string;
    FIsUserKnown : boolean;
    FMessage : string;
    FStatus : boolean;
    FUser : string;
    procedure SetAllowedRoles(AIndex: Integer; const AValue: TInt32Array);
    procedure SetCurrentRole(AIndex: Integer; const AValue: TInt32);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetEmail(AIndex: Integer; const AValue: string);
    procedure SetInvitationLink(AIndex: Integer; const AValue: string);
    procedure SetIsUserKnown(AIndex: Integer; const AValue: boolean);
    procedure SetMessage(AIndex: Integer; const AValue: string);
    procedure SetStatus(AIndex: Integer; const AValue: boolean);
    procedure SetUser(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
  published
    Property AllowedRoles : TInt32Array index 0 read FAllowedRoles write SetAllowedRoles;
    Property CurrentRole : TInt32 index 8 read FCurrentRole write SetCurrentRole;
    Property DisplayName : string index 16 read FDisplayName write SetDisplayName;
    Property Email : string index 24 read FEmail write SetEmail;
    Property InvitationLink : string index 32 read FInvitationLink write SetInvitationLink;
    Property IsUserKnown : boolean index 40 read FIsUserKnown write SetIsUserKnown;
    Property Message : string index 48 read FMessage write SetMessage;
    Property Status : boolean index 56 read FStatus write SetStatus;
    Property User : string index 64 read FUser write SetUser;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Sharing: DocumentSharingManager
    --------------------------------------------------------------------}
  
  TSP_SharingDocumentSharingManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Sharing: WebSharingManager
    --------------------------------------------------------------------}
  
  TSP_SharingWebSharingManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Taxonomy: TaxonomyFieldValue
    --------------------------------------------------------------------}
  
  TSP_TaxonomyTaxonomyFieldValue = Class(TODataEntity)
  private
    F_Label : string;
    FTermGuid : string;
    FWssId : TInt32;
    procedure Set_Label(AIndex: Integer; const AValue: string);
    procedure SetTermGuid(AIndex: Integer; const AValue: string);
    procedure SetWssId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property _Label : string index 0 read F_Label write Set_Label;
    Property TermGuid : string index 8 read FTermGuid write SetTermGuid;
    Property WssId : TInt32 index 16 read FWssId write SetWssId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Translation: TranslationItemInfo
    --------------------------------------------------------------------}
  
  TSP_TranslationTranslationItemInfo = Class(TODataEntity)
  private
    FCanceled : boolean;
    FErrorMessage : string;
    FFailed : boolean;
    FInProgress : boolean;
    FInputFile : string;
    FNotStarted : boolean;
    FOutputFile : string;
    F_Result : TInt32;
    FSucceeded : boolean;
    FTranslationId : TGUIDString;
    procedure SetCanceled(AIndex: Integer; const AValue: boolean);
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
    procedure SetFailed(AIndex: Integer; const AValue: boolean);
    procedure SetInProgress(AIndex: Integer; const AValue: boolean);
    procedure SetInputFile(AIndex: Integer; const AValue: string);
    procedure SetNotStarted(AIndex: Integer; const AValue: boolean);
    procedure SetOutputFile(AIndex: Integer; const AValue: string);
    procedure Set_Result(AIndex: Integer; const AValue: TInt32);
    procedure SetSucceeded(AIndex: Integer; const AValue: boolean);
    procedure SetTranslationId(AIndex: Integer; const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
  published
    Property Canceled : boolean index 0 read FCanceled write SetCanceled;
    Property ErrorMessage : string index 8 read FErrorMessage write SetErrorMessage;
    Property Failed : boolean index 16 read FFailed write SetFailed;
    Property InProgress : boolean index 24 read FInProgress write SetInProgress;
    Property InputFile : string index 32 read FInputFile write SetInputFile;
    Property NotStarted : boolean index 40 read FNotStarted write SetNotStarted;
    Property OutputFile : string index 48 read FOutputFile write SetOutputFile;
    Property _Result : TInt32 index 56 read F_Result write Set_Result;
    Property Succeeded : boolean index 64 read FSucceeded write SetSucceeded;
    Property TranslationId : TGUIDString index 72 read FTranslationId write SetTranslationId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Translation: TranslationJobInfo
    --------------------------------------------------------------------}
  
  TSP_TranslationTranslationJobInfo = Class(TODataEntity)
  private
    FCanceled : boolean;
    FCancelTime : TDateTime;
    FJobId : TGUIDString;
    FName : string;
    FPartiallySubmitted : boolean;
    FSubmittedTime : TDateTime;
    procedure SetCanceled(AIndex: Integer; const AValue: boolean);
    procedure SetCancelTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetJobId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPartiallySubmitted(AIndex: Integer; const AValue: boolean);
    procedure SetSubmittedTime(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property Canceled : boolean index 0 read FCanceled write SetCanceled;
    Property CancelTime : TDateTime index 8 read FCancelTime write SetCancelTime;
    Property JobId : TGUIDString index 16 read FJobId write SetJobId;
    Property Name : string index 24 read FName write SetName;
    Property PartiallySubmitted : boolean index 32 read FPartiallySubmitted write SetPartiallySubmitted;
    Property SubmittedTime : TDateTime index 40 read FSubmittedTime write SetSubmittedTime;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Translation: SyncTranslator
    --------------------------------------------------------------------}
  
  TSP_TranslationSyncTranslator = Class(TODataEntity)
  private
    FOutputSaveBehavior : TInt32;
    procedure SetOutputSaveBehavior(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property OutputSaveBehavior : TInt32 index 0 read FOutputSaveBehavior write SetOutputSaveBehavior;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Translation: TranslationJob
    --------------------------------------------------------------------}
  
  TSP_TranslationTranslationJob = Class(TODataEntity)
  private
    FJobId : TGUIDString;
    FName : string;
    FOutputSaveBehavior : TInt32;
    procedure SetJobId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetOutputSaveBehavior(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property JobId : TGUIDString index 0 read FJobId write SetJobId;
    Property Name : string index 8 read FName write SetName;
    Property OutputSaveBehavior : TInt32 index 16 read FOutputSaveBehavior write SetOutputSaveBehavior;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Translation: TranslationJobStatus
    --------------------------------------------------------------------}
  
  TSP_TranslationTranslationJobStatus = Class(TODataEntity)
  private
    FCanceled : TInt32;
    FCount : TInt32;
    FFailed : TInt32;
    FInProgress : TInt32;
    FName : string;
    FNotStarted : TInt32;
    FSucceeded : TInt32;
    procedure SetCanceled(AIndex: Integer; const AValue: TInt32);
    procedure SetCount(AIndex: Integer; const AValue: TInt32);
    procedure SetFailed(AIndex: Integer; const AValue: TInt32);
    procedure SetInProgress(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNotStarted(AIndex: Integer; const AValue: TInt32);
    procedure SetSucceeded(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Canceled : TInt32 index 0 read FCanceled write SetCanceled;
    Property Count : TInt32 index 8 read FCount write SetCount;
    Property Failed : TInt32 index 16 read FFailed write SetFailed;
    Property InProgress : TInt32 index 24 read FInProgress write SetInProgress;
    Property Name : string index 32 read FName write SetName;
    Property NotStarted : TInt32 index 40 read FNotStarted write SetNotStarted;
    Property Succeeded : TInt32 index 48 read FSucceeded write SetSucceeded;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Translation: VariationsTranslationTimerJob
    --------------------------------------------------------------------}
  
  TSP_TranslationVariationsTranslationTimerJob = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantAdministration: SPOTenantWebTemplate
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate = Class(TODataEntity)
  private
    FCompatibilityLevel : TInt32;
    FDescription : string;
    FDisplayCategory : string;
    FLcid : int64;
    FName : string;
    FTitle : string;
    procedure SetCompatibilityLevel(AIndex: Integer; const AValue: TInt32);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDisplayCategory(AIndex: Integer; const AValue: string);
    procedure SetLcid(AIndex: Integer; const AValue: int64);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
  published
    Property CompatibilityLevel : TInt32 index 0 read FCompatibilityLevel write SetCompatibilityLevel;
    Property Description : string index 8 read FDescription write SetDescription;
    Property DisplayCategory : string index 16 read FDisplayCategory write SetDisplayCategory;
    Property Lcid : int64 index 24 read FLcid write SetLcid;
    Property Name : string index 32 read FName write SetName;
    Property Title : string index 40 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantAdministration: SPOTenantWebTemplateCollection
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FItems : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetItems(AIndex: Integer; 
                  const AValue: TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property Items : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateArray index 8 read FItems write SetItems;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.AppData.Access: AccessApp
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_AppData_AccessAccessApp = Class(TMS_AppDataApp)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: BaseSession
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMBaseSession = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: BooleanCriterion
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMBooleanCriterion = Class(TODataEntity)
  private
    FCompareType : TInt32;
    procedure SetCompareType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CompareType : TInt32 index 0 read FCompareType write SetCompareType;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: CalloutInfo
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMCalloutInfo = Class(TODataEntity)
  private
    FContacts : TStringArray;
    FDirectLinkTitle : string;
    FDirectLinkUrl : string;
    FHierarchy : TStringArray;
    FPredecessors : TStringArray;
    FSuccessors : TStringArray;
    FTitle : string;
    FUrl : string;
    procedure SetContacts(AIndex: Integer; const AValue: TStringArray);
    procedure SetDirectLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetDirectLinkUrl(AIndex: Integer; const AValue: string);
    procedure SetHierarchy(AIndex: Integer; const AValue: TStringArray);
    procedure SetPredecessors(AIndex: Integer; const AValue: TStringArray);
    procedure SetSuccessors(AIndex: Integer; const AValue: TStringArray);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Contacts : TStringArray index 0 read FContacts write SetContacts;
    Property DirectLinkTitle : string index 8 read FDirectLinkTitle write SetDirectLinkTitle;
    Property DirectLinkUrl : string index 16 read FDirectLinkUrl write SetDirectLinkUrl;
    Property Hierarchy : TStringArray index 24 read FHierarchy write SetHierarchy;
    Property Predecessors : TStringArray index 32 read FPredecessors write SetPredecessors;
    Property Successors : TStringArray index 40 read FSuccessors write SetSuccessors;
    Property Title : string index 48 read FTitle write SetTitle;
    Property Url : string index 56 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: CreateRefreshJobResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMCreateRefreshJobResult = Class(TODataEntity)
  private
    FCreatedJob : boolean;
    FCurrentJobId : TInt32;
    FEncounteredError : boolean;
    procedure SetCreatedJob(AIndex: Integer; const AValue: boolean);
    procedure SetCurrentJobId(AIndex: Integer; const AValue: TInt32);
    procedure SetEncounteredError(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CreatedJob : boolean index 0 read FCreatedJob write SetCreatedJob;
    Property CurrentJobId : TInt32 index 8 read FCurrentJobId write SetCurrentJobId;
    Property EncounteredError : boolean index 16 read FEncounteredError write SetEncounteredError;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: CustomAttributeFilter
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMCustomAttributeFilter = Class(TODataEntity)
  private
    FAttributes : TStringArray;
    FConcatType : TInt32;
    procedure SetAttributes(AIndex: Integer; const AValue: TStringArray);
    procedure SetConcatType(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Attributes : TStringArray index 0 read FAttributes write SetAttributes;
    Property ConcatType : TInt32 index 8 read FConcatType write SetConcatType;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: DashboardScriptExtensionInfo
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMDashboardScriptExtensionInfo = Class(TODataEntity)
  private
    FProviderKey : string;
    FScriptClass : string;
    FScriptData : string;
    FScriptFiles : TStringArray;
    procedure SetProviderKey(AIndex: Integer; const AValue: string);
    procedure SetScriptClass(AIndex: Integer; const AValue: string);
    procedure SetScriptData(AIndex: Integer; const AValue: string);
    procedure SetScriptFiles(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ProviderKey : string index 0 read FProviderKey write SetProviderKey;
    Property ScriptClass : string index 8 read FScriptClass write SetScriptClass;
    Property ScriptData : string index 16 read FScriptData write SetScriptData;
    Property ScriptFiles : TStringArray index 24 read FScriptFiles write SetScriptFiles;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: DateRangeCriterion
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMDateRangeCriterion = Class(TODataEntity)
  private
    FRangeEndValue : TDateTime;
    FRangeStartValue : TDateTime;
    procedure SetRangeEndValue(AIndex: Integer; const AValue: TDateTime);
    procedure SetRangeStartValue(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property RangeEndValue : TDateTime index 0 read FRangeEndValue write SetRangeEndValue;
    Property RangeStartValue : TDateTime index 8 read FRangeStartValue write SetRangeStartValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: ExchangeUserSyncState
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMExchangeUserSyncState = Class(TODataEntity)
  private
    FIsOptedIn : boolean;
    FLastEndTime : TDateTime;
    FLastSyncResult : TInt32;
    procedure SetIsOptedIn(AIndex: Integer; const AValue: boolean);
    procedure SetLastEndTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetLastSyncResult(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property IsOptedIn : boolean index 0 read FIsOptedIn write SetIsOptedIn;
    Property LastEndTime : TDateTime index 8 read FLastEndTime write SetLastEndTime;
    Property LastSyncResult : TInt32 index 16 read FLastSyncResult write SetLastSyncResult;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: Location
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMLocation = Class(TODataEntity)
  private
    FColor : string;
    FId : TInt32;
    FImportant : boolean;
    FName : string;
    FParentId : TInt32;
    FRootProviderKey : string;
    FUrl : string;
    procedure SetColor(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetImportant(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetParentId(AIndex: Integer; const AValue: TInt32);
    procedure SetRootProviderKey(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Color : string index 0 read FColor write SetColor;
    Property Id : TInt32 index 8 read FId write SetId;
    Property Important : boolean index 16 read FImportant write SetImportant;
    Property Name : string index 24 read FName write SetName;
    Property ParentId : TInt32 index 32 read FParentId write SetParentId;
    Property RootProviderKey : string index 40 read FRootProviderKey write SetRootProviderKey;
    Property Url : string index 48 read FUrl write SetUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: LocationDisplaySetting
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMLocationDisplaySetting = Class(TODataEntity)
  private
    FColor : string;
    FId : TInt32;
    procedure SetColor(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Color : string index 0 read FColor write SetColor;
    Property Id : TInt32 index 8 read FId write SetId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: LocationFilter
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMLocationFilter = Class(TODataEntity)
  private
    FIncludeUncategorizedTasks : boolean;
    FLocationKeys : TInt32Array;
    procedure SetIncludeUncategorizedTasks(AIndex: Integer; 
                                      const AValue: boolean);
    procedure SetLocationKeys(AIndex: Integer; const AValue: TInt32Array);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property IncludeUncategorizedTasks : boolean index 0 read FIncludeUncategorizedTasks write SetIncludeUncategorizedTasks;
    Property LocationKeys : TInt32Array index 8 read FLocationKeys write SetLocationKeys;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: Task
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTask = Class(TODataEntity)
  private
    FCustomAttributes : TStringArray;
    FDescription : string;
    FDueDate : TDateTime;
    FEditUrl : string;
    FId : TInt32;
    FIsCompleted : boolean;
    FIsPersonal : boolean;
    FIsReadOnly : boolean;
    FLastModified : TDateTime;
    FLocationId : TInt32;
    FName : string;
    FPinAge : TInt32;
    FSerializedCustomDataForClient : string;
    FStartDate : TDateTime;
    procedure SetCustomAttributes(AIndex: Integer; 
                             const AValue: TStringArray);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDueDate(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditUrl(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetIsCompleted(AIndex: Integer; const AValue: boolean);
    procedure SetIsPersonal(AIndex: Integer; const AValue: boolean);
    procedure SetIsReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetLastModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetLocationId(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetPinAge(AIndex: Integer; const AValue: TInt32);
    procedure SetSerializedCustomDataForClient(AIndex: Integer; 
                                          const AValue: string);
    procedure SetStartDate(AIndex: Integer; const AValue: TDateTime);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CustomAttributes : TStringArray index 0 read FCustomAttributes write SetCustomAttributes;
    Property Description : string index 8 read FDescription write SetDescription;
    Property DueDate : TDateTime index 16 read FDueDate write SetDueDate;
    Property EditUrl : string index 24 read FEditUrl write SetEditUrl;
    Property Id : TInt32 index 32 read FId write SetId;
    Property IsCompleted : boolean index 40 read FIsCompleted write SetIsCompleted;
    Property IsPersonal : boolean index 48 read FIsPersonal write SetIsPersonal;
    Property IsReadOnly : boolean index 56 read FIsReadOnly write SetIsReadOnly;
    Property LastModified : TDateTime index 64 read FLastModified write SetLastModified;
    Property LocationId : TInt32 index 72 read FLocationId write SetLocationId;
    Property Name : string index 80 read FName write SetName;
    Property PinAge : TInt32 index 88 read FPinAge write SetPinAge;
    Property SerializedCustomDataForClient : string index 96 read FSerializedCustomDataForClient write SetSerializedCustomDataForClient;
    Property StartDate : TDateTime index 104 read FStartDate write SetStartDate;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: LocationOrientedSortableSession
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMLocationOrientedSortableSession = Class(TSP_WorkManagement_OMBaseSession)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: LocationOrientedUserOrderedSession
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMLocationOrientedUserOrderedSession = Class(TSP_WorkManagement_OMBaseSession)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: LocationUpdateResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMLocationUpdateResult = Class(TODataEntity)
  private
    FActiveAddedCount : int64;
    FAddedCount : int64;
    FRemovedCount : int64;
    FRootLocationId : TInt32;
    FUpdatedCount : int64;
    procedure SetActiveAddedCount(AIndex: Integer; const AValue: int64);
    procedure SetAddedCount(AIndex: Integer; const AValue: int64);
    procedure SetRemovedCount(AIndex: Integer; const AValue: int64);
    procedure SetRootLocationId(AIndex: Integer; const AValue: TInt32);
    procedure SetUpdatedCount(AIndex: Integer; const AValue: int64);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ActiveAddedCount : int64 index 0 read FActiveAddedCount write SetActiveAddedCount;
    Property AddedCount : int64 index 8 read FAddedCount write SetAddedCount;
    Property RemovedCount : int64 index 16 read FRemovedCount write SetRemovedCount;
    Property RootLocationId : TInt32 index 24 read FRootLocationId write SetRootLocationId;
    Property UpdatedCount : int64 index 32 read FUpdatedCount write SetUpdatedCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: NameCriterion
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMNameCriterion = Class(TODataEntity)
  private
    FCompareType : TInt32;
    FCompareValue : string;
    procedure SetCompareType(AIndex: Integer; const AValue: TInt32);
    procedure SetCompareValue(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CompareType : TInt32 index 0 read FCompareType write SetCompareType;
    Property CompareValue : string index 8 read FCompareValue write SetCompareValue;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: NonTaskDataReadResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMNonTaskDataReadResult = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function AllLocatons(AService: TODataService)
                     : TSP_WorkManagement_OMLocation;
    function PersistedProperties(AService: TODataService)
                             : TSP_WorkManagement_OMPersistedProperties;
    function RefreshHistory(AService: TODataService)
                        : TSP_WorkManagement_OMRefreshHistory;
    function ScriptExtensions(AService: TODataService)
                          : TSP_WorkManagement_OMDashboardScriptExtensionInfo;
    function UserSettings(AService: TODataService)
                      : TSP_WorkManagement_OMUserSettings;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: PersistedProperties
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMPersistedProperties = Class(TODataEntity)
  private
    FFilteredLocationIds : TInt32Array;
    FGroupByProjects : boolean;
    FHasShownMarkAsImportantCallout : boolean;
    FHasShownTaskListTooLongNotification : boolean;
    FQuickLaunchLandingPage : string;
    procedure SetFilteredLocationIds(AIndex: Integer; 
                                const AValue: TInt32Array);
    procedure SetGroupByProjects(AIndex: Integer; const AValue: boolean);
    procedure SetHasShownMarkAsImportantCallout(AIndex: Integer; 
                                           const AValue: boolean);
    procedure SetHasShownTaskListTooLongNotification(AIndex: Integer; 
                                                const AValue: boolean);
    procedure SetQuickLaunchLandingPage(AIndex: Integer; 
                                   const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FilteredLocationIds : TInt32Array index 0 read FFilteredLocationIds write SetFilteredLocationIds;
    Property GroupByProjects : boolean index 8 read FGroupByProjects write SetGroupByProjects;
    Property HasShownMarkAsImportantCallout : boolean index 16 read FHasShownMarkAsImportantCallout write SetHasShownMarkAsImportantCallout;
    Property HasShownTaskListTooLongNotification : boolean index 24 read FHasShownTaskListTooLongNotification write SetHasShownTaskListTooLongNotification;
    Property QuickLaunchLandingPage : string index 32 read FQuickLaunchLandingPage write SetQuickLaunchLandingPage;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: RefreshHistory
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMRefreshHistory = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Refreshes(AService: TODataService)
                   : TSP_WorkManagement_OMRefreshResult;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: RefreshResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMRefreshResult = Class(TODataEntity)
  private
    FAggregatorRefreshState : TInt32;
    FCorrelationId : string;
    FRefreshFinished : TDateTime;
    FRefreshId : TInt32;
    procedure SetAggregatorRefreshState(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetCorrelationId(AIndex: Integer; const AValue: string);
    procedure SetRefreshFinished(AIndex: Integer; const AValue: TDateTime);
    procedure SetRefreshId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ProviderStatuses(AService: TODataService)
                          : TSP_WorkManagement_OMProviderRefreshStatus;
    function TaskChangesByLocation(AService: TODataService)
                               : TSP_WorkManagement_OMLocationUpdateResult;
  published
    Property AggregatorRefreshState : TInt32 index 0 read FAggregatorRefreshState write SetAggregatorRefreshState;
    Property CorrelationId : string index 8 read FCorrelationId write SetCorrelationId;
    Property RefreshFinished : TDateTime index 16 read FRefreshFinished write SetRefreshFinished;
    Property RefreshId : TInt32 index 24 read FRefreshId write SetRefreshId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: ProviderRefreshStatus
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMProviderRefreshStatus = Class(TODataEntity)
  private
    FProviderKey : string;
    FProviderLocalizedName : string;
    FRefreshFinished : TDateTime;
    FRefreshStarted : TDateTime;
    FRootLocationId : TInt32;
    procedure SetProviderKey(AIndex: Integer; const AValue: string);
    procedure SetProviderLocalizedName(AIndex: Integer; 
                                  const AValue: string);
    procedure SetRefreshFinished(AIndex: Integer; const AValue: TDateTime);
    procedure SetRefreshStarted(AIndex: Integer; const AValue: TDateTime);
    procedure SetRootLocationId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ProviderKey : string index 0 read FProviderKey write SetProviderKey;
    Property ProviderLocalizedName : string index 8 read FProviderLocalizedName write SetProviderLocalizedName;
    Property RefreshFinished : TDateTime index 16 read FRefreshFinished write SetRefreshFinished;
    Property RefreshStarted : TDateTime index 24 read FRefreshStarted write SetRefreshStarted;
    Property RootLocationId : TInt32 index 32 read FRootLocationId write SetRootLocationId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: UserSettings
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMUserSettings = Class(TODataEntity)
  private
    FDaysAfterCurrentDateTimelineEnds : TInt32;
    FDaysATaskIsConsideredNewTask : TInt32;
    FDaysBeforeCurrentDateTimelineStarts : TInt32;
    FImportantLocationIds : TInt32Array;
    FImportantTasksLimit : TInt32;
    FInactiveMonthsBeforeLocationExpiration : TInt32;
    FLateTasksLimit : TInt32;
    FOldTasksLimit : TInt32;
    FUpcomingTasksLimit : TInt32;
    procedure SetDaysAfterCurrentDateTimelineEnds(AIndex: Integer; 
                                             const AValue: TInt32);
    procedure SetDaysATaskIsConsideredNewTask(AIndex: Integer; 
                                         const AValue: TInt32);
    procedure SetDaysBeforeCurrentDateTimelineStarts(AIndex: Integer; 
                                                const AValue: TInt32);
    procedure SetImportantLocationIds(AIndex: Integer; 
                                 const AValue: TInt32Array);
    procedure SetImportantTasksLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetInactiveMonthsBeforeLocationExpiration(AIndex: Integer; 
                                                   const AValue: TInt32);
    procedure SetLateTasksLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetOldTasksLimit(AIndex: Integer; const AValue: TInt32);
    procedure SetUpcomingTasksLimit(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property DaysAfterCurrentDateTimelineEnds : TInt32 index 0 read FDaysAfterCurrentDateTimelineEnds write SetDaysAfterCurrentDateTimelineEnds;
    Property DaysATaskIsConsideredNewTask : TInt32 index 8 read FDaysATaskIsConsideredNewTask write SetDaysATaskIsConsideredNewTask;
    Property DaysBeforeCurrentDateTimelineStarts : TInt32 index 16 read FDaysBeforeCurrentDateTimelineStarts write SetDaysBeforeCurrentDateTimelineStarts;
    Property ImportantLocationIds : TInt32Array index 24 read FImportantLocationIds write SetImportantLocationIds;
    Property ImportantTasksLimit : TInt32 index 32 read FImportantTasksLimit write SetImportantTasksLimit;
    Property InactiveMonthsBeforeLocationExpiration : TInt32 index 40 read FInactiveMonthsBeforeLocationExpiration write SetInactiveMonthsBeforeLocationExpiration;
    Property LateTasksLimit : TInt32 index 48 read FLateTasksLimit write SetLateTasksLimit;
    Property OldTasksLimit : TInt32 index 56 read FOldTasksLimit write SetOldTasksLimit;
    Property UpcomingTasksLimit : TInt32 index 64 read FUpcomingTasksLimit write SetUpcomingTasksLimit;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: OrderInfo
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMOrderInfo = Class(TODataEntity)
  private
    FField : TInt32;
    FIsDescending : boolean;
    procedure SetField(AIndex: Integer; const AValue: TInt32);
    procedure SetIsDescending(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Field : TInt32 index 0 read FField write SetField;
    Property IsDescending : boolean index 8 read FIsDescending write SetIsDescending;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: ProviderErrorInfo
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMProviderErrorInfo = Class(TODataEntity)
  private
    FCorrelationId : string;
    FLastSuccessfulRefresh : TDateTime;
    FLocalizedName : string;
    procedure SetCorrelationId(AIndex: Integer; const AValue: string);
    procedure SetLastSuccessfulRefresh(AIndex: Integer; 
                                  const AValue: TDateTime);
    procedure SetLocalizedName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CorrelationId : string index 0 read FCorrelationId write SetCorrelationId;
    Property LastSuccessfulRefresh : TDateTime index 8 read FLastSuccessfulRefresh write SetLastSuccessfulRefresh;
    Property LocalizedName : string index 16 read FLocalizedName write SetLocalizedName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: RefreshHealthInfo
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMRefreshHealthInfo = Class(TODataEntity)
  private
    FLatestRefreshTime : TDateTime;
    FNewTasks : TInt32;
    FSucceeded : boolean;
    procedure SetLatestRefreshTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetNewTasks(AIndex: Integer; const AValue: TInt32);
    procedure SetSucceeded(AIndex: Integer; const AValue: boolean);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ProviderErrors(AService: TODataService)
                        : TSP_WorkManagement_OMProviderErrorInfo;
  published
    Property LatestRefreshTime : TDateTime index 0 read FLatestRefreshTime write SetLatestRefreshTime;
    Property NewTasks : TInt32 index 8 read FNewTasks write SetNewTasks;
    Property Succeeded : boolean index 16 read FSucceeded write SetSucceeded;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: SortableSessionManager
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMSortableSessionManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: SortableSession
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMSortableSession = Class(TSP_WorkManagement_OMBaseSession)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: SortableTaskQuery
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMSortableTaskQuery = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CoreQuery(AService: TODataService)
                   : TSP_WorkManagement_OMTaskQuery;
    function Order(AService: TODataService) : TSP_WorkManagement_OMOrderInfo;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: TaskQuery
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTaskQuery = Class(TODataEntity)
  private
    FKeywordFilter : string;
    FLastQueryTime : TDateTime;
    FPinnedFilter : TInt32;
    procedure SetKeywordFilter(AIndex: Integer; const AValue: string);
    procedure SetLastQueryTime(AIndex: Integer; const AValue: TDateTime);
    procedure SetPinnedFilter(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CustomAttributeFilter(AService: TODataService)
                               : TSP_WorkManagement_OMCustomAttributeFilter;
    function FieldFilter(AService: TODataService)
                     : TSP_WorkManagement_OMTaskFilter;
    function LastModifiedDateRangeFilter(AService: TODataService)
                                     : TSP_WorkManagement_OMDateRangeCriterion;
    function LocationFilter(AService: TODataService)
                        : TSP_WorkManagement_OMLocationFilter;
  published
    Property KeywordFilter : string index 0 read FKeywordFilter write SetKeywordFilter;
    Property LastQueryTime : TDateTime index 8 read FLastQueryTime write SetLastQueryTime;
    Property PinnedFilter : TInt32 index 16 read FPinnedFilter write SetPinnedFilter;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: TaskFilter
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTaskFilter = Class(TODataEntity)
  private
    FCriterionConcatType : TInt32;
    FIdsToFilterBy : TInt32Array;
    procedure SetCriterionConcatType(AIndex: Integer; const AValue: TInt32);
    procedure SetIdsToFilterBy(AIndex: Integer; const AValue: TInt32Array);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function CompletedCriterion(AService: TODataService)
                            : TSP_WorkManagement_OMBooleanCriterion;
    function DueDateRangeCriterion(AService: TODataService)
                               : TSP_WorkManagement_OMDateRangeCriterion;
    function IsNewCriterion(AService: TODataService)
                        : TSP_WorkManagement_OMBooleanCriterion;
    function NameCriterion(AService: TODataService)
                       : TSP_WorkManagement_OMNameCriterion;
    function StartDateRangeCriterion(AService: TODataService)
                                 : TSP_WorkManagement_OMDateRangeCriterion;
  published
    Property CriterionConcatType : TInt32 index 0 read FCriterionConcatType write SetCriterionConcatType;
    Property IdsToFilterBy : TInt32Array index 8 read FIdsToFilterBy write SetIdsToFilterBy;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: TaskQueryByLocationResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTaskQueryByLocationResult = Class(TODataEntity)
  private
    FError : TInt32;
    FErrorMessage : string;
    procedure SetError(AIndex: Integer; const AValue: TInt32);
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Results(AService: TODataService) : TSP_WorkManagement_OMTask;
  published
    Property Error : TInt32 index 0 read FError write SetError;
    Property ErrorMessage : string index 8 read FErrorMessage write SetErrorMessage;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: TaskQueryResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTaskQueryResult = Class(TODataEntity)
  private
    FError : TInt32;
    FErrorMessage : string;
    procedure SetError(AIndex: Integer; const AValue: TInt32);
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Results(AService: TODataService) : TSP_WorkManagement_OMTask;
  published
    Property Error : TInt32 index 0 read FError write SetError;
    Property ErrorMessage : string index 8 read FErrorMessage write SetErrorMessage;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: TaskRefreshResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTaskRefreshResult = Class(TODataEntity)
  private
    FErrorCorrelationId : string;
    FRefreshState : TInt32;
    procedure SetErrorCorrelationId(AIndex: Integer; const AValue: string);
    procedure SetRefreshState(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function _Result(AService: TODataService) : TSP_WorkManagement_OMTask;
  published
    Property ErrorCorrelationId : string index 0 read FErrorCorrelationId write SetErrorCorrelationId;
    Property RefreshState : TInt32 index 8 read FRefreshState write SetRefreshState;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: TaskWriteResult
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMTaskWriteResult = Class(TODataEntity)
  private
    FError : TInt32;
    FErrorMessage : string;
    procedure SetError(AIndex: Integer; const AValue: TInt32);
    procedure SetErrorMessage(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function _Result(AService: TODataService) : TSP_WorkManagement_OMTask;
  published
    Property Error : TInt32 index 0 read FError write SetError;
    Property ErrorMessage : string index 8 read FErrorMessage write SetErrorMessage;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: UserOrderedSessionManager
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMUserOrderedSessionManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: UserOrderedSession
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMUserOrderedSession = Class(TSP_WorkManagement_OMBaseSession)
  public
    class function ObjectRestKind : String;  Override;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: UserSettingsManager
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMUserSettingsManager = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkManagement.OM: ViewSelectionInfo
    --------------------------------------------------------------------}
  
  TSP_WorkManagement_OMViewSelectionInfo = Class(TODataEntity)
  private
    FId : TInt32;
    FImage : string;
    FName : string;
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetImage(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id : TInt32 index 0 read FId write SetId;
    Property Image : string index 8 read FImage write SetImage;
    Property Name : string index 16 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.AppServices: App
    --------------------------------------------------------------------}
  
  TMicrosoft_AppServicesApp = Class(TODataEntity)
  private
    FId : string;
    FManifest : string;
    procedure SetId(AIndex: Integer; const AValue: string);
    procedure SetManifest(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id : string index 0 read FId write SetId;
    Property Manifest : string index 8 read FManifest write SetManifest;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.AppServices: AppStore
    --------------------------------------------------------------------}
  
  TMicrosoft_AppServicesAppStore = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Apps(AService: TODataService) : TMicrosoft_AppServicesApp;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.CompliancePolicy: PolicyEvaluationInfo
    --------------------------------------------------------------------}
  
  TSP_CompliancePolicyPolicyEvaluationInfo = Class(TODataEntity)
  private
    FApplicablePolicies : TStringArray;
    FDlpAccessScope : TInt32;
    FOverriddenRules : TStringArray;
    procedure SetApplicablePolicies(AIndex: Integer; 
                               const AValue: TStringArray);
    procedure SetDlpAccessScope(AIndex: Integer; const AValue: TInt32);
    procedure SetOverriddenRules(AIndex: Integer; 
                            const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ApplicablePolicies : TStringArray index 0 read FApplicablePolicies write SetApplicablePolicies;
    Property DlpAccessScope : TInt32 index 8 read FDlpAccessScope write SetDlpAccessScope;
    Property OverriddenRules : TStringArray index 16 read FOverriddenRules write SetOverriddenRules;
  end;
  
  
  { --------------------------------------------------------------------
    SP.CompliancePolicy: SPPolicyStoreProxy
    --------------------------------------------------------------------}
  
  TSP_CompliancePolicySPPolicyStoreProxy = Class(TODataEntity)
  private
    FPolicyStoreUrl : string;
    procedure SetPolicyStoreUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property PolicyStoreUrl : string index 0 read FPolicyStoreUrl write SetPolicyStoreUrl;
  end;
  
  
  { --------------------------------------------------------------------
    SPO.Identity: SPOIdentityHelper
    --------------------------------------------------------------------}
  
  TSPO_IdentitySPOIdentityHelper = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    OBA.Server.ServerWrapper: Diagnostics
    --------------------------------------------------------------------}
  
  TOBA_Server_ServerWrapperDiagnostics = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    OBA.Server.ServerWrapper: Reporting
    --------------------------------------------------------------------}
  
  TOBA_Server_ServerWrapperReporting = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    OBA.Server.ServerWrapper: Taskflow
    --------------------------------------------------------------------}
  
  TOBA_Server_ServerWrapperTaskflow = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowDefinition
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowDefinition = Class(TODataEntity)
  private
    FAssociationUrl : string;
    FDescription : string;
    FDisplayName : string;
    FDraftVersion : string;
    FFormField : string;
    FId : TGUIDString;
    FInitiationUrl : string;
    FProperties : TSPKeyValueArray;
    F_Published : boolean;
    FRequiresAssociationForm : boolean;
    FRequiresInitiationForm : boolean;
    FRestrictToScope : string;
    FRestrictToType : string;
    FXaml : string;
    procedure SetAssociationUrl(AIndex: Integer; const AValue: string);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetDraftVersion(AIndex: Integer; const AValue: string);
    procedure SetFormField(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInitiationUrl(AIndex: Integer; const AValue: string);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure Set_Published(AIndex: Integer; const AValue: boolean);
    procedure SetRequiresAssociationForm(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetRequiresInitiationForm(AIndex: Integer; 
                                   const AValue: boolean);
    procedure SetRestrictToScope(AIndex: Integer; const AValue: string);
    procedure SetRestrictToType(AIndex: Integer; const AValue: string);
    procedure SetXaml(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    class function ExportPropertyName(const AName: String) : String
                                 ;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AssociationUrl : string index 0 read FAssociationUrl write SetAssociationUrl;
    Property Description : string index 8 read FDescription write SetDescription;
    Property DisplayName : string index 16 read FDisplayName write SetDisplayName;
    Property DraftVersion : string index 24 read FDraftVersion write SetDraftVersion;
    Property FormField : string index 32 read FFormField write SetFormField;
    Property Id : TGUIDString index 40 read FId write SetId;
    Property InitiationUrl : string index 48 read FInitiationUrl write SetInitiationUrl;
    Property Properties : TSPKeyValueArray index 56 read FProperties write SetProperties;
    Property _Published : boolean index 64 read F_Published write Set_Published;
    Property RequiresAssociationForm : boolean index 72 read FRequiresAssociationForm write SetRequiresAssociationForm;
    Property RequiresInitiationForm : boolean index 80 read FRequiresInitiationForm write SetRequiresInitiationForm;
    Property RestrictToScope : string index 88 read FRestrictToScope write SetRestrictToScope;
    Property RestrictToType : string index 96 read FRestrictToType write SetRestrictToType;
    Property Xaml : string index 104 read FXaml write SetXaml;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowDeploymentService
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowDeploymentService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowInstance
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowInstance = Class(TODataEntity)
  private
    FFaultInfo : string;
    FId : TGUIDString;
    FInstanceCreated : TDateTime;
    FLastUpdated : TDateTime;
    FProperties : TSPKeyValueArray;
    FStatus : TInt32;
    FUserStatus : string;
    FWorkflowSubscriptionId : TGUIDString;
    procedure SetFaultInfo(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetInstanceCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetLastUpdated(AIndex: Integer; const AValue: TDateTime);
    procedure SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray);
    procedure SetStatus(AIndex: Integer; const AValue: TInt32);
    procedure SetUserStatus(AIndex: Integer; const AValue: string);
    procedure SetWorkflowSubscriptionId(AIndex: Integer; 
                                   const AValue: TGUIDString);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property FaultInfo : string index 0 read FFaultInfo write SetFaultInfo;
    Property Id : TGUIDString index 8 read FId write SetId;
    Property InstanceCreated : TDateTime index 16 read FInstanceCreated write SetInstanceCreated;
    Property LastUpdated : TDateTime index 24 read FLastUpdated write SetLastUpdated;
    Property Properties : TSPKeyValueArray index 32 read FProperties write SetProperties;
    Property Status : TInt32 index 40 read FStatus write SetStatus;
    Property UserStatus : string index 48 read FUserStatus write SetUserStatus;
    Property WorkflowSubscriptionId : TGUIDString index 56 read FWorkflowSubscriptionId write SetWorkflowSubscriptionId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowInstanceService
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowInstanceService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService)
                 : TSP_WorkflowServicesWorkflowInstanceService;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: InteropService
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesInteropService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService)
                 : TSP_WorkflowServicesInteropService;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowServicesManager
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowServicesManager = Class(TODataEntity)
  private
    FAppId : string;
    FIsConnected : boolean;
    FScopePath : string;
    FServiceHealthStatus : TInt32;
    procedure SetAppId(AIndex: Integer; const AValue: string);
    procedure SetIsConnected(AIndex: Integer; const AValue: boolean);
    procedure SetScopePath(AIndex: Integer; const AValue: string);
    procedure SetServiceHealthStatus(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService)
                 : TSP_WorkflowServicesWorkflowServicesManager;
  published
    Property AppId : string index 0 read FAppId write SetAppId;
    Property IsConnected : boolean index 8 read FIsConnected write SetIsConnected;
    Property ScopePath : string index 16 read FScopePath write SetScopePath;
    Property ServiceHealthStatus : TInt32 index 24 read FServiceHealthStatus write SetServiceHealthStatus;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowSubscription
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowSubscription = Class(TODataEntity)
  private
    FDefinitionId : TGUIDString;
    FEnabled : boolean;
    FEventSourceId : TGUIDString;
    FEventTypes : TStringArray;
    FId : TGUIDString;
    FManualStartBypassesActivationLimit : boolean;
    FName : string;
    FParentContentTypeId : string;
    FPropertyDefinitions : TSPKeyValueArray;
    FStatusFieldName : string;
    procedure SetDefinitionId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetEnabled(AIndex: Integer; const AValue: boolean);
    procedure SetEventSourceId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetEventTypes(AIndex: Integer; const AValue: TStringArray);
    procedure SetId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetManualStartBypassesActivationLimit(AIndex: Integer; 
                                               const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetParentContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetPropertyDefinitions(AIndex: Integer; 
                                const AValue: TSPKeyValueArray);
    procedure SetStatusFieldName(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property DefinitionId : TGUIDString index 0 read FDefinitionId write SetDefinitionId;
    Property Enabled : boolean index 8 read FEnabled write SetEnabled;
    Property EventSourceId : TGUIDString index 16 read FEventSourceId write SetEventSourceId;
    Property EventTypes : TStringArray index 24 read FEventTypes write SetEventTypes;
    Property Id : TGUIDString index 32 read FId write SetId;
    Property ManualStartBypassesActivationLimit : boolean index 40 read FManualStartBypassesActivationLimit write SetManualStartBypassesActivationLimit;
    Property Name : string index 48 read FName write SetName;
    Property ParentContentTypeId : string index 56 read FParentContentTypeId write SetParentContentTypeId;
    Property PropertyDefinitions : TSPKeyValueArray index 64 read FPropertyDefinitions write SetPropertyDefinitions;
    Property StatusFieldName : string index 72 read FStatusFieldName write SetStatusFieldName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowSubscriptionService
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowSubscriptionService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Current(AService: TODataService)
                 : TSP_WorkflowServicesWorkflowSubscriptionService;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.WorkflowServices: WorkflowMessagingService
    --------------------------------------------------------------------}
  
  TSP_WorkflowServicesWorkflowMessagingService = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.Server.ReputationModel: Reputation
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_Server_ReputationModelReputation = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Client.Search.Administration: DocumentCrawlLog
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.BusinessData.Infrastructure.SecureStore: ConnectionSettings
    --------------------------------------------------------------------}
  
  TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings = Class(TODataEntity)
  private
    FAuthenticationMode : string;
    FConnectionSettingsType : TInt32;
    FDescription : string;
    FName : string;
    FParentName : string;
    FProxySSOApplicationId : string;
    FProxyTarget : string;
    FSSOApplicationId : string;
    FSSOProviderImplId : string;
    FTarget : string;
    procedure SetAuthenticationMode(AIndex: Integer; const AValue: string);
    procedure SetConnectionSettingsType(AIndex: Integer; 
                                   const AValue: TInt32);
    procedure SetDescription(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetParentName(AIndex: Integer; const AValue: string);
    procedure SetProxySSOApplicationId(AIndex: Integer; 
                                  const AValue: string);
    procedure SetProxyTarget(AIndex: Integer; const AValue: string);
    procedure SetSSOApplicationId(AIndex: Integer; const AValue: string);
    procedure SetSSOProviderImplId(AIndex: Integer; const AValue: string);
    procedure SetTarget(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AuthenticationMode : string index 0 read FAuthenticationMode write SetAuthenticationMode;
    Property ConnectionSettingsType : TInt32 index 8 read FConnectionSettingsType write SetConnectionSettingsType;
    Property Description : string index 16 read FDescription write SetDescription;
    Property Name : string index 24 read FName write SetName;
    Property ParentName : string index 32 read FParentName write SetParentName;
    Property ProxySSOApplicationId : string index 40 read FProxySSOApplicationId write SetProxySSOApplicationId;
    Property ProxyTarget : string index 48 read FProxyTarget write SetProxyTarget;
    Property SSOApplicationId : string index 56 read FSSOApplicationId write SetSSOApplicationId;
    Property SSOProviderImplId : string index 64 read FSSOProviderImplId write SetSSOProviderImplId;
    Property Target : string index 72 read FTarget write SetTarget;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.SecureStoreService.Server: TargetApplicationField
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField = Class(TODataEntity)
  private
    FCredentialType : TInt32;
    FIsMasked : boolean;
    FName : string;
    procedure SetCredentialType(AIndex: Integer; const AValue: TInt32);
    procedure SetIsMasked(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property CredentialType : TInt32 index 0 read FCredentialType write SetCredentialType;
    Property IsMasked : boolean index 8 read FIsMasked write SetIsMasked;
    Property Name : string index 16 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Office.SecureStoreService.Server: TargetApplication
    --------------------------------------------------------------------}
  
  TMicrosoft_Office_SecureStoreService_ServerTargetApplication = Class(TODataEntity)
  private
    FApplicationId : string;
    FContactEmail : string;
    FFriendlyName : string;
    FTargetAppType : TInt32;
    procedure SetApplicationId(AIndex: Integer; const AValue: string);
    procedure SetContactEmail(AIndex: Integer; const AValue: string);
    procedure SetFriendlyName(AIndex: Integer; const AValue: string);
    procedure SetTargetAppType(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ApplicationId : string index 0 read FApplicationId write SetApplicationId;
    Property ContactEmail : string index 8 read FContactEmail write SetContactEmail;
    Property FriendlyName : string index 16 read FFriendlyName write SetFriendlyName;
    Property TargetAppType : TInt32 index 24 read FTargetAppType write SetTargetAppType;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.AppManagement: SPAppPrincipalInfo
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo = Class(TODataEntity)
  private
    FFlag : TInt32;
    FName : string;
    FTitle : string;
    procedure SetFlag(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Flag : TInt32 index 0 read FFlag write SetFlag;
    Property Name : string index 8 read FName write SetName;
    Property Title : string index 16 read FTitle write SetTitle;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Flighting.Runtime: SPFlight
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Flighting_RuntimeSPFlight = Class(TODataEntity)
  private
    FConfiguration : string;
    procedure SetConfiguration(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Configuration : string index 0 read FConfiguration write SetConfiguration;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Marketplace.CorporateCuratedGallery: SPCorporateCuratedGallerySettingsBase
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase = Class(TODataEntity)
  private
    FHostSiteFullUrl : string;
    procedure SetHostSiteFullUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property HostSiteFullUrl : string index 0 read FHostSiteFullUrl write SetHostSiteFullUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Marketplace.CorporateCuratedGallery: SPCorporateCuratedGallerySettingsFactory
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Marketplace: SPMarketplaceSettings
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Portal.WebControls: RecentDocument
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Portal_WebControlsRecentDocument = Class(TODataEntity)
  private
    FApplication : string;
    FFileName : string;
    FIconUrl : string;
    FId : TInt32;
    FIsPinned : boolean;
    FLinkLocation : string;
    FTimeStamp : TDateTime;
    procedure SetApplication(AIndex: Integer; const AValue: string);
    procedure SetFileName(AIndex: Integer; const AValue: string);
    procedure SetIconUrl(AIndex: Integer; const AValue: string);
    procedure SetId(AIndex: Integer; const AValue: TInt32);
    procedure SetIsPinned(AIndex: Integer; const AValue: boolean);
    procedure SetLinkLocation(AIndex: Integer; const AValue: string);
    procedure SetTimeStamp(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Application : string index 0 read FApplication write SetApplication;
    Property FileName : string index 8 read FFileName write SetFileName;
    Property IconUrl : string index 16 read FIconUrl write SetIconUrl;
    Property Id : TInt32 index 24 read FId write SetId;
    Property IsPinned : boolean index 32 read FIsPinned write SetIsPinned;
    Property LinkLocation : string index 40 read FLinkLocation write SetLinkLocation;
    Property TimeStamp : TDateTime index 48 read FTimeStamp write SetTimeStamp;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData.Runtime: EntityIdentity
    --------------------------------------------------------------------}
  
  TSP_BusinessData_RuntimeEntityIdentity = Class(TODataEntity)
  private
    FIdentifierCount : TInt32;
    procedure SetIdentifierCount(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property IdentifierCount : TInt32 index 0 read FIdentifierCount write SetIdentifierCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData.Runtime: NotificationCallback
    --------------------------------------------------------------------}
  
  TSP_BusinessData_RuntimeNotificationCallback = Class(TODataEntity)
  private
    FNotificationContext : string;
    FNotificationEndpoint : string;
    FNotificationForwarderType : string;
    procedure SetNotificationContext(AIndex: Integer; const AValue: string);
    procedure SetNotificationEndpoint(AIndex: Integer; const AValue: string);
    procedure SetNotificationForwarderType(AIndex: Integer; 
                                      const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property NotificationContext : string index 0 read FNotificationContext write SetNotificationContext;
    Property NotificationEndpoint : string index 8 read FNotificationEndpoint write SetNotificationEndpoint;
    Property NotificationForwarderType : string index 16 read FNotificationForwarderType write SetNotificationForwarderType;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData.Runtime: Subscription
    --------------------------------------------------------------------}
  
  TSP_BusinessData_RuntimeSubscription = Class(TODataEntity)
  private
    FHash : string;
    FID : TSPKeyValueArray;
    procedure SetHash(AIndex: Integer; const AValue: string);
    procedure SetID(AIndex: Integer; const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Hash : string index 0 read FHash write SetHash;
    Property ID : TSPKeyValueArray index 8 read FID write SetID;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData.Runtime: EntityInstance
    --------------------------------------------------------------------}
  
  TSP_BusinessData_RuntimeEntityInstance = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData.Runtime: EntityFieldValueDictionary
    --------------------------------------------------------------------}
  
  TSP_BusinessData_RuntimeEntityFieldValueDictionary = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: EntityField
    --------------------------------------------------------------------}
  
  TSP_BusinessDataEntityField = Class(TODataEntity)
  private
    FContainsLocalizedDisplayName : boolean;
    FDefaultDisplayName : string;
    FLocalizedDisplayName : string;
    FName : string;
    procedure SetContainsLocalizedDisplayName(AIndex: Integer; 
                                         const AValue: boolean);
    procedure SetDefaultDisplayName(AIndex: Integer; const AValue: string);
    procedure SetLocalizedDisplayName(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ContainsLocalizedDisplayName : boolean index 0 read FContainsLocalizedDisplayName write SetContainsLocalizedDisplayName;
    Property DefaultDisplayName : string index 8 read FDefaultDisplayName write SetDefaultDisplayName;
    Property LocalizedDisplayName : string index 16 read FLocalizedDisplayName write SetLocalizedDisplayName;
    Property Name : string index 24 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: Filter
    --------------------------------------------------------------------}
  
  TSP_BusinessDataFilter = Class(TODataEntity)
  private
    FDefaultDisplayName : string;
    FFilterField : string;
    FFilterType : string;
    FLocalizedDisplayName : string;
    FName : string;
    FValueCount : TInt32;
    procedure SetDefaultDisplayName(AIndex: Integer; const AValue: string);
    procedure SetFilterField(AIndex: Integer; const AValue: string);
    procedure SetFilterType(AIndex: Integer; const AValue: string);
    procedure SetLocalizedDisplayName(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetValueCount(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property DefaultDisplayName : string index 0 read FDefaultDisplayName write SetDefaultDisplayName;
    Property FilterField : string index 8 read FFilterField write SetFilterField;
    Property FilterType : string index 16 read FFilterType write SetFilterType;
    Property LocalizedDisplayName : string index 24 read FLocalizedDisplayName write SetLocalizedDisplayName;
    Property Name : string index 32 read FName write SetName;
    Property ValueCount : TInt32 index 40 read FValueCount write SetValueCount;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: EntityIdentifier
    --------------------------------------------------------------------}
  
  TSP_BusinessDataEntityIdentifier = Class(TODataEntity)
  private
    FIdentifierType : string;
    FName : string;
    procedure SetIdentifierType(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property IdentifierType : string index 0 read FIdentifierType write SetIdentifierType;
    Property Name : string index 8 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: LobSystemInstance
    --------------------------------------------------------------------}
  
  TSP_BusinessDataLobSystemInstance = Class(TODataEntity)
  private
    FName : string;
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: TypeDescriptor
    --------------------------------------------------------------------}
  
  TSP_BusinessDataTypeDescriptor = Class(TODataEntity)
  private
    FContainsReadOnly : boolean;
    FIsCollection : boolean;
    FIsReadOnly : boolean;
    FName : string;
    FTypeName : string;
    procedure SetContainsReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetIsCollection(AIndex: Integer; const AValue: boolean);
    procedure SetIsReadOnly(AIndex: Integer; const AValue: boolean);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetTypeName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property ContainsReadOnly : boolean index 0 read FContainsReadOnly write SetContainsReadOnly;
    Property IsCollection : boolean index 8 read FIsCollection write SetIsCollection;
    Property IsReadOnly : boolean index 16 read FIsReadOnly write SetIsReadOnly;
    Property Name : string index 24 read FName write SetName;
    Property TypeName : string index 32 read FTypeName write SetTypeName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: Entity
    --------------------------------------------------------------------}
  
  TSP_BusinessDataEntity = Class(TODataEntity)
  private
    FEstimatedInstanceCount : int64;
    FName : string;
    FNamespace : string;
    procedure SetEstimatedInstanceCount(AIndex: Integer; 
                                   const AValue: int64);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetNamespace(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property EstimatedInstanceCount : int64 index 0 read FEstimatedInstanceCount write SetEstimatedInstanceCount;
    Property Name : string index 8 read FName write SetName;
    Property Namespace : string index 16 read FNamespace write SetNamespace;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: LobSystem
    --------------------------------------------------------------------}
  
  TSP_BusinessDataLobSystem = Class(TODataEntity)
  private
    FName : string;
    procedure SetName(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Name : string index 0 read FName write SetName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: MethodExecutionResult
    --------------------------------------------------------------------}
  
  TSP_BusinessDataMethodExecutionResult = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ReturnParameterCollection(AService: TODataService)
                                   : TSP_BusinessData_RuntimeEntityFieldValueDictionary;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: EntityView
    --------------------------------------------------------------------}
  
  TSP_BusinessDataEntityView = Class(TODataEntity)
  private
    FName : string;
    FRelatedSpecificFinderName : string;
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetRelatedSpecificFinderName(AIndex: Integer; 
                                      const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function Fields(AService: TODataService) : TSP_BusinessDataEntityField;
  published
    Property Name : string index 0 read FName write SetName;
    Property RelatedSpecificFinderName : string index 8 read FRelatedSpecificFinderName write SetRelatedSpecificFinderName;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData: AppBdcCatalog
    --------------------------------------------------------------------}
  
  TSP_BusinessDataAppBdcCatalog = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Analytics: AnalyticsUsageEntry
    --------------------------------------------------------------------}
  
  TSP_AnalyticsAnalyticsUsageEntry = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    SP.BusinessData.Infrastructure: ExternalSubscriptionStore
    --------------------------------------------------------------------}
  
  TSP_BusinessData_InfrastructureExternalSubscriptionStore = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Navigation.REST: NavigationServiceRest
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Packaging: AppDetails
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_PackagingAppDetails = Class(TODataEntity)
  private
    FEulaUrl : string;
    FPrivacyUrl : string;
    FPublisher : string;
    FShortDescription : string;
    FSupportUrl : string;
    procedure SetEulaUrl(AIndex: Integer; const AValue: string);
    procedure SetPrivacyUrl(AIndex: Integer; const AValue: string);
    procedure SetPublisher(AIndex: Integer; const AValue: string);
    procedure SetShortDescription(AIndex: Integer; const AValue: string);
    procedure SetSupportUrl(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property EulaUrl : string index 0 read FEulaUrl write SetEulaUrl;
    Property PrivacyUrl : string index 8 read FPrivacyUrl write SetPrivacyUrl;
    Property Publisher : string index 16 read FPublisher write SetPublisher;
    Property ShortDescription : string index 24 read FShortDescription write SetShortDescription;
    Property SupportUrl : string index 32 read FSupportUrl write SetSupportUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.Packaging: AppIconInfo
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_PackagingAppIconInfo = Class(TODataEntity)
  private
    FContent : TBinary;
    FMimeType : string;
    procedure SetContent(AIndex: Integer; const AValue: TBinary);
    procedure SetMimeType(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Content : TBinary index 0 read FContent write SetContent;
    Property MimeType : string index 8 read FMimeType write SetMimeType;
  end;
  
  
  { --------------------------------------------------------------------
    SP.OAuth: NativeClient
    --------------------------------------------------------------------}
  
  TSP_OAuthNativeClient = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.WebControls: ModuleLink
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_WebControlsModuleLink = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.SharePoint.WebControls: ResourceManifestInformation
    --------------------------------------------------------------------}
  
  TMicrosoft_SharePoint_WebControlsResourceManifestInformation = Class(TODataEntity)
  private
    FRequireJsScriptBlock : string;
    FScenarioMapping : TSPKeyValueArray;
    procedure SetRequireJsScriptBlock(AIndex: Integer; const AValue: string);
    procedure SetScenarioMapping(AIndex: Integer; 
                            const AValue: TSPKeyValueArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property RequireJsScriptBlock : string index 0 read FRequireJsScriptBlock write SetRequireJsScriptBlock;
    Property ScenarioMapping : TSPKeyValueArray index 8 read FScenarioMapping write SetScenarioMapping;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.PointPublishing: PointPublishingAdmin
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantAdmin.MiddleTier: DDIAdapter
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantManagement: ExternalUser
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantManagementExternalUser = Class(TODataEntity)
  private
    FAcceptedAs : string;
    FDisplayName : string;
    FInvitedAs : string;
    FInvitedBy : string;
    FUniqueId : string;
    FUserId : TInt32;
    FWhenCreated : TDateTime;
    procedure SetAcceptedAs(AIndex: Integer; const AValue: string);
    procedure SetDisplayName(AIndex: Integer; const AValue: string);
    procedure SetInvitedAs(AIndex: Integer; const AValue: string);
    procedure SetInvitedBy(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: string);
    procedure SetUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetWhenCreated(AIndex: Integer; const AValue: TDateTime);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AcceptedAs : string index 0 read FAcceptedAs write SetAcceptedAs;
    Property DisplayName : string index 8 read FDisplayName write SetDisplayName;
    Property InvitedAs : string index 16 read FInvitedAs write SetInvitedAs;
    Property InvitedBy : string index 24 read FInvitedBy write SetInvitedBy;
    Property UniqueId : string index 32 read FUniqueId write SetUniqueId;
    Property UserId : TInt32 index 40 read FUserId write SetUserId;
    Property WhenCreated : TDateTime index 48 read FWhenCreated write SetWhenCreated;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantManagement: GetExternalUsersResults
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults = Class(TODataEntity)
  private
    FTotalUserCount : TInt32;
    FUserCollectionPosition : TInt32;
    procedure SetTotalUserCount(AIndex: Integer; const AValue: TInt32);
    procedure SetUserCollectionPosition(AIndex: Integer; 
                                   const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
    function ExternalUserCollection(AService: TODataService)
                                : TMicrosoft_Online_SharePoint_TenantManagementExternalUser;
  published
    Property TotalUserCount : TInt32 index 0 read FTotalUserCount write SetTotalUserCount;
    Property UserCollectionPosition : TInt32 index 8 read FUserCollectionPosition write SetUserCollectionPosition;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantManagement: Office365Tenant
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant = Class(TODataEntity)
  private
    FAllowedDomainListForSyncClient : TGuidStringArray;
    FDisplayStartASiteOption : boolean;
    FExternalServicesEnabled : boolean;
    FIsUnmanagedSyncClientForTenantRestricted : boolean;
    FIsUnmanagedSyncClientRestrictionFlightEnabled : boolean;
    FMySitesPublicEnabled : boolean;
    FSharingCapability : TInt32;
    FStartASiteFormUrl : string;
    procedure SetAllowedDomainListForSyncClient(AIndex: Integer; 
                                           const AValue: TGuidStringArray);
    procedure SetDisplayStartASiteOption(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetExternalServicesEnabled(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetIsUnmanagedSyncClientForTenantRestricted(AIndex: Integer; 
                                                     const AValue: boolean);
    procedure SetIsUnmanagedSyncClientRestrictionFlightEnabled
                                                          (AIndex: Integer; 
                                                          const AValue: boolean);
    procedure SetMySitesPublicEnabled(AIndex: Integer; 
                                 const AValue: boolean);
    procedure SetSharingCapability(AIndex: Integer; const AValue: TInt32);
    procedure SetStartASiteFormUrl(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property AllowedDomainListForSyncClient : TGuidStringArray index 0 read FAllowedDomainListForSyncClient write SetAllowedDomainListForSyncClient;
    Property DisplayStartASiteOption : boolean index 8 read FDisplayStartASiteOption write SetDisplayStartASiteOption;
    Property ExternalServicesEnabled : boolean index 16 read FExternalServicesEnabled write SetExternalServicesEnabled;
    Property IsUnmanagedSyncClientForTenantRestricted : boolean index 24 read FIsUnmanagedSyncClientForTenantRestricted write SetIsUnmanagedSyncClientForTenantRestricted;
    Property IsUnmanagedSyncClientRestrictionFlightEnabled : boolean index 32 read FIsUnmanagedSyncClientRestrictionFlightEnabled write SetIsUnmanagedSyncClientRestrictionFlightEnabled;
    Property MySitesPublicEnabled : boolean index 40 read FMySitesPublicEnabled write SetMySitesPublicEnabled;
    Property SharingCapability : TInt32 index 48 read FSharingCapability write SetSharingCapability;
    Property StartASiteFormUrl : string index 56 read FStartASiteFormUrl write SetStartASiteFormUrl;
  end;
  
  
  { --------------------------------------------------------------------
    Microsoft.Online.SharePoint.TenantManagement: RemoveExternalUsersResults
    --------------------------------------------------------------------}
  
  TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults = Class(TODataEntity)
  private
    FId4a81de82eeb94d6080ea5bf63e27023a : string;
    FRemoveFailed : TStringArray;
    FRemoveSucceeded : TStringArray;
    procedure SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; 
                                               const AValue: string);
    procedure SetRemoveFailed(AIndex: Integer; const AValue: TStringArray);
    procedure SetRemoveSucceeded(AIndex: Integer; 
                            const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function KeyAsURLPart : String;  Override;
  published
    Property Id4a81de82eeb94d6080ea5bf63e27023a : string index 0 read FId4a81de82eeb94d6080ea5bf63e27023a write SetId4a81de82eeb94d6080ea5bf63e27023a;
    Property RemoveFailed : TStringArray index 8 read FRemoveFailed write SetRemoveFailed;
    Property RemoveSucceeded : TStringArray index 16 read FRemoveSucceeded write SetRemoveSucceeded;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_appdataItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_appdataItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Title : string index 72 read FTitle write SetTitle;
    Property Modified : TDateTime index 80 read FModified write SetModified;
    Property Created : TDateTime index 88 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 96 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 104 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 112 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 120 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 128 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 136 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 144 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 152 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 160 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 168 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 176 read FOData__ModerationComments write SetOData__ModerationComments;
    Property Edit : string index 184 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 192 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property LinkTitle : string index 200 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 208 read FLinkTitle2 write SetLinkTitle2;
    Property SelectTitle : string index 216 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 224 read FInstanceID write SetInstanceID;
    Property Order : Double index 232 read FOrder write SetOrder;
    Property GUID : TGUIDString index 240 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 248 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 256 read FFileRef write SetFileRef;
    Property FileDirRef : string index 264 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 272 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 280 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 288 read FFSObjType write SetFSObjType;
    Property PermMask : string index 296 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 304 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 312 read FUniqueId write SetUniqueId;
    Property File_x0020_Type : string index 320 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 328 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 336 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 344 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 352 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 360 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 368 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 376 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 384 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 392 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 400 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 408 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 416 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 424 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 432 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 440 read FAppEditorId write SetAppEditorId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: UserInfoItem
    --------------------------------------------------------------------}
  
  TSP_DataUserInfoItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FOData__ModerationComments : string;
    FFile_x0020_Type : string;
    FName : string;
    FEMail : string;
    FMobilePhone : string;
    FNotes : string;
    FSipAddress : string;
    FLocale : TInt32;
    FCalendarType : TInt32;
    FAdjustHijriDays : TInt32;
    FTimeZone : TInt32;
    FTime24 : boolean;
    FAltCalendarType : TInt32;
    FCalendarViewOptions : TInt32;
    FWorkDays : TInt32;
    FWorkDayStartHour : TInt32;
    FWorkDayEndHour : TInt32;
    FMUILanguages : string;
    FContentLanguages : string;
    FIsSiteAdmin : boolean;
    FDeleted : boolean;
    FUserInfoHidden : boolean;
    FPicture : TSPFieldUrlValue;
    FDepartment : string;
    FJobTitle : string;
    FIsActive : boolean;
    FFirstName : string;
    FLastName : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FWorkPhone : string;
    FUserName : string;
    FWebSite : TSPFieldUrlValue;
    FSPSResponsibility : string;
    FOffice : string;
    FSPSPictureTimestamp : string;
    FSPSPicturePlaceholderState : TInt32;
    FSPSPictureExchangeSyncState : TInt32;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FGroupLink : string;
    FGroupEdit : string;
    FImnName : string;
    FPictureDisp : string;
    FPictureOnly_Size_36px : string;
    FPictureOnly_Size_48px : string;
    FPictureOnly_Size_72px : string;
    FNameWithPicture : string;
    FNameWithPictureAndDetails : string;
    FEditUser : string;
    FUserSelection : string;
    FContentTypeDisp : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetEMail(AIndex: Integer; const AValue: string);
    procedure SetMobilePhone(AIndex: Integer; const AValue: string);
    procedure SetNotes(AIndex: Integer; const AValue: string);
    procedure SetSipAddress(AIndex: Integer; const AValue: string);
    procedure SetLocale(AIndex: Integer; const AValue: TInt32);
    procedure SetCalendarType(AIndex: Integer; const AValue: TInt32);
    procedure SetAdjustHijriDays(AIndex: Integer; const AValue: TInt32);
    procedure SetTimeZone(AIndex: Integer; const AValue: TInt32);
    procedure SetTime24(AIndex: Integer; const AValue: boolean);
    procedure SetAltCalendarType(AIndex: Integer; const AValue: TInt32);
    procedure SetCalendarViewOptions(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkDays(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkDayStartHour(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkDayEndHour(AIndex: Integer; const AValue: TInt32);
    procedure SetMUILanguages(AIndex: Integer; const AValue: string);
    procedure SetContentLanguages(AIndex: Integer; const AValue: string);
    procedure SetIsSiteAdmin(AIndex: Integer; const AValue: boolean);
    procedure SetDeleted(AIndex: Integer; const AValue: boolean);
    procedure SetUserInfoHidden(AIndex: Integer; const AValue: boolean);
    procedure SetPicture(AIndex: Integer; const AValue: TSPFieldUrlValue);
    procedure SetDepartment(AIndex: Integer; const AValue: string);
    procedure SetJobTitle(AIndex: Integer; const AValue: string);
    procedure SetIsActive(AIndex: Integer; const AValue: boolean);
    procedure SetFirstName(AIndex: Integer; const AValue: string);
    procedure SetLastName(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetWorkPhone(AIndex: Integer; const AValue: string);
    procedure SetUserName(AIndex: Integer; const AValue: string);
    procedure SetWebSite(AIndex: Integer; const AValue: TSPFieldUrlValue);
    procedure SetSPSResponsibility(AIndex: Integer; const AValue: string);
    procedure SetOffice(AIndex: Integer; const AValue: string);
    procedure SetSPSPictureTimestamp(AIndex: Integer; const AValue: string);
    procedure SetSPSPicturePlaceholderState(AIndex: Integer; 
                                       const AValue: TInt32);
    procedure SetSPSPictureExchangeSyncState(AIndex: Integer; 
                                        const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetGroupLink(AIndex: Integer; const AValue: string);
    procedure SetGroupEdit(AIndex: Integer; const AValue: string);
    procedure SetImnName(AIndex: Integer; const AValue: string);
    procedure SetPictureDisp(AIndex: Integer; const AValue: string);
    procedure SetPictureOnly_Size_36px(AIndex: Integer; 
                                  const AValue: string);
    procedure SetPictureOnly_Size_48px(AIndex: Integer; 
                                  const AValue: string);
    procedure SetPictureOnly_Size_72px(AIndex: Integer; 
                                  const AValue: string);
    procedure SetNameWithPicture(AIndex: Integer; const AValue: string);
    procedure SetNameWithPictureAndDetails(AIndex: Integer; 
                                      const AValue: string);
    procedure SetEditUser(AIndex: Integer; const AValue: string);
    procedure SetUserSelection(AIndex: Integer; const AValue: string);
    procedure SetContentTypeDisp(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property Title : string index 64 read FTitle write SetTitle;
    Property OData__ModerationComments : string index 72 read FOData__ModerationComments write SetOData__ModerationComments;
    Property File_x0020_Type : string index 80 read FFile_x0020_Type write SetFile_x0020_Type;
    Property Name : string index 88 read FName write SetName;
    Property EMail : string index 96 read FEMail write SetEMail;
    Property MobilePhone : string index 104 read FMobilePhone write SetMobilePhone;
    Property Notes : string index 112 read FNotes write SetNotes;
    Property SipAddress : string index 120 read FSipAddress write SetSipAddress;
    Property Locale : TInt32 index 128 read FLocale write SetLocale;
    Property CalendarType : TInt32 index 136 read FCalendarType write SetCalendarType;
    Property AdjustHijriDays : TInt32 index 144 read FAdjustHijriDays write SetAdjustHijriDays;
    Property TimeZone : TInt32 index 152 read FTimeZone write SetTimeZone;
    Property Time24 : boolean index 160 read FTime24 write SetTime24;
    Property AltCalendarType : TInt32 index 168 read FAltCalendarType write SetAltCalendarType;
    Property CalendarViewOptions : TInt32 index 176 read FCalendarViewOptions write SetCalendarViewOptions;
    Property WorkDays : TInt32 index 184 read FWorkDays write SetWorkDays;
    Property WorkDayStartHour : TInt32 index 192 read FWorkDayStartHour write SetWorkDayStartHour;
    Property WorkDayEndHour : TInt32 index 200 read FWorkDayEndHour write SetWorkDayEndHour;
    Property MUILanguages : string index 208 read FMUILanguages write SetMUILanguages;
    Property ContentLanguages : string index 216 read FContentLanguages write SetContentLanguages;
    Property IsSiteAdmin : boolean index 224 read FIsSiteAdmin write SetIsSiteAdmin;
    Property Deleted : boolean index 232 read FDeleted write SetDeleted;
    Property UserInfoHidden : boolean index 240 read FUserInfoHidden write SetUserInfoHidden;
    Property Picture : TSPFieldUrlValue index 248 read FPicture write SetPicture;
    Property Department : string index 256 read FDepartment write SetDepartment;
    Property JobTitle : string index 264 read FJobTitle write SetJobTitle;
    Property IsActive : boolean index 272 read FIsActive write SetIsActive;
    Property FirstName : string index 280 read FFirstName write SetFirstName;
    Property LastName : string index 288 read FLastName write SetLastName;
    Property LinkTitle : string index 296 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 304 read FLinkTitle2 write SetLinkTitle2;
    Property WorkPhone : string index 312 read FWorkPhone write SetWorkPhone;
    Property UserName : string index 320 read FUserName write SetUserName;
    Property WebSite : TSPFieldUrlValue index 328 read FWebSite write SetWebSite;
    Property SPSResponsibility : string index 336 read FSPSResponsibility write SetSPSResponsibility;
    Property Office : string index 344 read FOffice write SetOffice;
    Property SPSPictureTimestamp : string index 352 read FSPSPictureTimestamp write SetSPSPictureTimestamp;
    Property SPSPicturePlaceholderState : TInt32 index 360 read FSPSPicturePlaceholderState write SetSPSPicturePlaceholderState;
    Property SPSPictureExchangeSyncState : TInt32 index 368 read FSPSPictureExchangeSyncState write SetSPSPictureExchangeSyncState;
    Property Modified : TDateTime index 384 read FModified write SetModified;
    Property Created : TDateTime index 392 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 400 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 408 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 416 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 424 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 432 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 440 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 448 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 456 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 464 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 472 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property Edit : string index 480 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 488 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property SelectTitle : string index 496 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 504 read FInstanceID write SetInstanceID;
    Property Order : Double index 512 read FOrder write SetOrder;
    Property GUID : TGUIDString index 520 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 528 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 536 read FFileRef write SetFileRef;
    Property FileDirRef : string index 544 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 552 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 560 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 568 read FFSObjType write SetFSObjType;
    Property PermMask : string index 576 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 584 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 592 read FUniqueId write SetUniqueId;
    Property HTML_x0020_File_x0020_Type : string index 600 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 608 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 616 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 624 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 632 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 640 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 648 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 656 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 664 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 672 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 680 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 688 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 696 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 704 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 712 read FAppEditorId write SetAppEditorId;
    Property GroupLink : string index 720 read FGroupLink write SetGroupLink;
    Property GroupEdit : string index 728 read FGroupEdit write SetGroupEdit;
    Property ImnName : string index 736 read FImnName write SetImnName;
    Property PictureDisp : string index 744 read FPictureDisp write SetPictureDisp;
    Property PictureOnly_Size_36px : string index 752 read FPictureOnly_Size_36px write SetPictureOnly_Size_36px;
    Property PictureOnly_Size_48px : string index 760 read FPictureOnly_Size_48px write SetPictureOnly_Size_48px;
    Property PictureOnly_Size_72px : string index 768 read FPictureOnly_Size_72px write SetPictureOnly_Size_72px;
    Property NameWithPicture : string index 776 read FNameWithPicture write SetNameWithPicture;
    Property NameWithPictureAndDetails : string index 784 read FNameWithPictureAndDetails write SetNameWithPictureAndDetails;
    Property EditUser : string index 792 read FEditUser write SetEditUser;
    Property UserSelection : string index 800 read FUserSelection write SetUserSelection;
    Property ContentTypeDisp : string index 808 read FContentTypeDisp write SetContentTypeDisp;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_designItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_designItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FName : string;
    FMasterPageUrl : TSPFieldUrlValue;
    FThemeUrl : TSPFieldUrlValue;
    FImageUrl : TSPFieldUrlValue;
    FFontSchemeUrl : TSPFieldUrlValue;
    FDisplayOrder : Double;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetName(AIndex: Integer; const AValue: string);
    procedure SetMasterPageUrl(AIndex: Integer; 
                          const AValue: TSPFieldUrlValue);
    procedure SetThemeUrl(AIndex: Integer; const AValue: TSPFieldUrlValue);
    procedure SetImageUrl(AIndex: Integer; const AValue: TSPFieldUrlValue);
    procedure SetFontSchemeUrl(AIndex: Integer; 
                          const AValue: TSPFieldUrlValue);
    procedure SetDisplayOrder(AIndex: Integer; const AValue: Double);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Title : string index 72 read FTitle write SetTitle;
    Property Modified : TDateTime index 80 read FModified write SetModified;
    Property Created : TDateTime index 88 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 96 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 104 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 112 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 120 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 128 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 136 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 144 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 152 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 160 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 168 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 176 read FOData__ModerationComments write SetOData__ModerationComments;
    Property Edit : string index 184 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 192 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property LinkTitle : string index 200 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 208 read FLinkTitle2 write SetLinkTitle2;
    Property SelectTitle : string index 216 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 224 read FInstanceID write SetInstanceID;
    Property Order : Double index 232 read FOrder write SetOrder;
    Property GUID : TGUIDString index 240 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 248 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 256 read FFileRef write SetFileRef;
    Property FileDirRef : string index 264 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 272 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 280 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 288 read FFSObjType write SetFSObjType;
    Property PermMask : string index 296 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 304 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 312 read FUniqueId write SetUniqueId;
    Property File_x0020_Type : string index 320 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 328 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 336 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 344 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 352 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 360 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 368 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 376 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 384 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 392 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 400 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 408 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 416 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 424 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 432 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 440 read FAppEditorId write SetAppEditorId;
    Property Name : string index 448 read FName write SetName;
    Property MasterPageUrl : TSPFieldUrlValue index 456 read FMasterPageUrl write SetMasterPageUrl;
    Property ThemeUrl : TSPFieldUrlValue index 464 read FThemeUrl write SetThemeUrl;
    Property ImageUrl : TSPFieldUrlValue index 472 read FImageUrl write SetImageUrl;
    Property FontSchemeUrl : TSPFieldUrlValue index 480 read FFontSchemeUrl write SetFontSchemeUrl;
    Property DisplayOrder : Double index 488 read FDisplayOrder write SetDisplayOrder;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: ContentTypeSyncLogListItem
    --------------------------------------------------------------------}
  
  TSP_DataContentTypeSyncLogListItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FOData__ModerationComments : string;
    FFile_x0020_Type : string;
    FPublishedObjectName : string;
    FFailure_x0020_Stage : string;
    FFailure_x0020_Message : string;
    FFailure_x0020_Time : TDateTime;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetPublishedObjectName(AIndex: Integer; const AValue: string);
    procedure SetFailure_x0020_Stage(AIndex: Integer; const AValue: string);
    procedure SetFailure_x0020_Message(AIndex: Integer; 
                                  const AValue: string);
    procedure SetFailure_x0020_Time(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property Title : string index 64 read FTitle write SetTitle;
    Property OData__ModerationComments : string index 72 read FOData__ModerationComments write SetOData__ModerationComments;
    Property File_x0020_Type : string index 80 read FFile_x0020_Type write SetFile_x0020_Type;
    Property PublishedObjectName : string index 88 read FPublishedObjectName write SetPublishedObjectName;
    Property Failure_x0020_Stage : string index 96 read FFailure_x0020_Stage write SetFailure_x0020_Stage;
    Property Failure_x0020_Message : string index 104 read FFailure_x0020_Message write SetFailure_x0020_Message;
    Property Failure_x0020_Time : TDateTime index 112 read FFailure_x0020_Time write SetFailure_x0020_Time;
    Property Modified : TDateTime index 128 read FModified write SetModified;
    Property Created : TDateTime index 136 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 144 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 152 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 160 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 168 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 176 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 184 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 192 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 200 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 208 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 216 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property Edit : string index 224 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 232 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property LinkTitle : string index 240 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 248 read FLinkTitle2 write SetLinkTitle2;
    Property SelectTitle : string index 256 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 264 read FInstanceID write SetInstanceID;
    Property Order : Double index 272 read FOrder write SetOrder;
    Property GUID : TGUIDString index 280 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 288 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 296 read FFileRef write SetFileRef;
    Property FileDirRef : string index 304 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 312 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 320 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 328 read FFSObjType write SetFSObjType;
    Property PermMask : string index 336 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 344 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 352 read FUniqueId write SetUniqueId;
    Property HTML_x0020_File_x0020_Type : string index 360 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 368 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 376 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 384 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 392 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 400 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 408 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 416 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 424 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 432 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 440 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 448 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 456 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 464 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 472 read FAppEditorId write SetAppEditorId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: IWConvertedFormsItem
    --------------------------------------------------------------------}
  
  TSP_DataIWConvertedFormsItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FTemplateId : string;
    FFormRelativeUrl : string;
    FFormVersion : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetTemplateId(AIndex: Integer; const AValue: string);
    procedure SetFormRelativeUrl(AIndex: Integer; const AValue: string);
    procedure SetFormVersion(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property TemplateId : string index 480 read FTemplateId write SetTemplateId;
    Property FormRelativeUrl : string index 488 read FFormRelativeUrl write SetFormRelativeUrl;
    Property FormVersion : string index 496 read FFormVersion write SetFormVersion;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: DocumentsItem
    --------------------------------------------------------------------}
  
  TSP_DataDocumentsItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FOData__ModerationComments : string;
    FFileLeafRef : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FTitle : string;
    FPrincipalCount : string;
    FSharedWith : string;
    FIsMyDocuments : boolean;
    FSharedWithInternalId : TInt32Array;
    FSharedWithUsersId : TInt32Array;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetPrincipalCount(AIndex: Integer; const AValue: string);
    procedure SetSharedWith(AIndex: Integer; const AValue: string);
    procedure SetIsMyDocuments(AIndex: Integer; const AValue: boolean);
    procedure SetSharedWithInternalId(AIndex: Integer; 
                                 const AValue: TInt32Array);
    procedure SetSharedWithUsersId(AIndex: Integer; 
                              const AValue: TInt32Array);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function SharedWithInternal(AService: TODataService)
                            : TSP_DataUserInfoItem;
    function SharedWithUsers(AService: TODataService) : TSP_DataUserInfoItem;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property OData__ModerationComments : string index 64 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileLeafRef : string index 72 read FFileLeafRef write SetFileLeafRef;
    Property Modified_x0020_By : string index 80 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 88 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 96 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 104 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 112 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 120 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property Title : string index 128 read FTitle write SetTitle;
    Property PrincipalCount : string index 136 read FPrincipalCount write SetPrincipalCount;
    Property SharedWith : string index 144 read FSharedWith write SetSharedWith;
    Property IsMyDocuments : boolean index 152 read FIsMyDocuments write SetIsMyDocuments;
    Property SharedWithInternalId : TInt32Array index 160 read FSharedWithInternalId write SetSharedWithInternalId;
    Property SharedWithUsersId : TInt32Array index 168 read FSharedWithUsersId write SetSharedWithUsersId;
    Property Created : TDateTime index 184 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 192 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 200 read FModified write SetModified;
    Property EditorId : TInt32 index 208 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 216 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 224 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 232 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property FileRef : string index 240 read FFileRef write SetFileRef;
    Property FileDirRef : string index 248 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 256 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 264 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 272 read FFSObjType write SetFSObjType;
    Property PermMask : string index 280 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 288 read FCheckoutUserId write SetCheckoutUserId;
    Property UniqueId : TGUIDString index 296 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 304 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 312 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property OData__EditMenuTableStart : string index 320 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 328 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 336 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 344 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 352 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 360 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 368 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 376 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 384 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 392 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 400 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 408 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 416 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 424 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 432 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 440 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 448 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 456 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 464 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 472 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 480 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 488 read FInstanceID write SetInstanceID;
    Property Order : Double index 496 read FOrder write SetOrder;
    Property GUID : TGUIDString index 504 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 512 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 520 read FWorkflowInstanceID write SetWorkflowInstanceID;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: FormServerTemplatesItem
    --------------------------------------------------------------------}
  
  TSP_DataFormServerTemplatesItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FOData__ModerationComments : string;
    FFileLeafRef : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FTitle : string;
    FTemplateUrl : string;
    Fxd_ProgID : string;
    Fxd_Signature : boolean;
    FFormName : string;
    FFormCategory : string;
    FFormVersion : string;
    FFormId : string;
    FFormLocale : string;
    FFormDescription : string;
    FCustomContentTypeId : string;
    FShowInCatalog : boolean;
    FLinkTemplateName : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FCombine : string;
    FRepairDocument : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTemplateUrl(AIndex: Integer; const AValue: string);
    procedure Setxd_ProgID(AIndex: Integer; const AValue: string);
    procedure Setxd_Signature(AIndex: Integer; const AValue: boolean);
    procedure SetFormName(AIndex: Integer; const AValue: string);
    procedure SetFormCategory(AIndex: Integer; const AValue: string);
    procedure SetFormVersion(AIndex: Integer; const AValue: string);
    procedure SetFormId(AIndex: Integer; const AValue: string);
    procedure SetFormLocale(AIndex: Integer; const AValue: string);
    procedure SetFormDescription(AIndex: Integer; const AValue: string);
    procedure SetCustomContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetShowInCatalog(AIndex: Integer; const AValue: boolean);
    procedure SetLinkTemplateName(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetCombine(AIndex: Integer; const AValue: string);
    procedure SetRepairDocument(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property OData__ModerationComments : string index 64 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileLeafRef : string index 72 read FFileLeafRef write SetFileLeafRef;
    Property Modified_x0020_By : string index 80 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 88 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 96 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 104 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 112 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 120 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property Title : string index 128 read FTitle write SetTitle;
    Property TemplateUrl : string index 136 read FTemplateUrl write SetTemplateUrl;
    Property xd_ProgID : string index 144 read Fxd_ProgID write Setxd_ProgID;
    Property xd_Signature : boolean index 152 read Fxd_Signature write Setxd_Signature;
    Property FormName : string index 160 read FFormName write SetFormName;
    Property FormCategory : string index 168 read FFormCategory write SetFormCategory;
    Property FormVersion : string index 176 read FFormVersion write SetFormVersion;
    Property FormId : string index 184 read FFormId write SetFormId;
    Property FormLocale : string index 192 read FFormLocale write SetFormLocale;
    Property FormDescription : string index 200 read FFormDescription write SetFormDescription;
    Property CustomContentTypeId : string index 208 read FCustomContentTypeId write SetCustomContentTypeId;
    Property ShowInCatalog : boolean index 216 read FShowInCatalog write SetShowInCatalog;
    Property LinkTemplateName : string index 224 read FLinkTemplateName write SetLinkTemplateName;
    Property Created : TDateTime index 240 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 248 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 256 read FModified write SetModified;
    Property EditorId : TInt32 index 264 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 272 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 280 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 288 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property FileRef : string index 296 read FFileRef write SetFileRef;
    Property FileDirRef : string index 304 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 312 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 320 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 328 read FFSObjType write SetFSObjType;
    Property PermMask : string index 336 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 344 read FCheckoutUserId write SetCheckoutUserId;
    Property UniqueId : TGUIDString index 352 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 360 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 368 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property OData__EditMenuTableStart : string index 376 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 384 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 392 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 400 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 408 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 416 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 424 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 432 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 440 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 448 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 456 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 464 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 472 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 480 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 488 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 496 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 504 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 512 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 520 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 528 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 536 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 544 read FInstanceID write SetInstanceID;
    Property Order : Double index 552 read FOrder write SetOrder;
    Property GUID : TGUIDString index 560 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 568 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 576 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property Combine : string index 584 read FCombine write SetCombine;
    Property RepairDocument : string index 592 read FRepairDocument write SetRepairDocument;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_ltItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_ltItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FTemplateTitle : string;
    FTemplateDescription : string;
    FTemplateID : string;
    FLanguage : TInt32;
    FTemplateType : TInt32;
    FBaseType : TInt32;
    FSubType : TInt32;
    FHidden : boolean;
    FMajorVersion : Double;
    FFeatureID : TGUIDString;
    FLanguageDisplay : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetTemplateTitle(AIndex: Integer; const AValue: string);
    procedure SetTemplateDescription(AIndex: Integer; const AValue: string);
    procedure SetTemplateID(AIndex: Integer; const AValue: string);
    procedure SetLanguage(AIndex: Integer; const AValue: TInt32);
    procedure SetTemplateType(AIndex: Integer; const AValue: TInt32);
    procedure SetBaseType(AIndex: Integer; const AValue: TInt32);
    procedure SetSubType(AIndex: Integer; const AValue: TInt32);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetMajorVersion(AIndex: Integer; const AValue: Double);
    procedure SetFeatureID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetLanguageDisplay(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property TemplateTitle : string index 480 read FTemplateTitle write SetTemplateTitle;
    Property TemplateDescription : string index 488 read FTemplateDescription write SetTemplateDescription;
    Property TemplateID : string index 496 read FTemplateID write SetTemplateID;
    Property Language : TInt32 index 504 read FLanguage write SetLanguage;
    Property TemplateType : TInt32 index 512 read FTemplateType write SetTemplateType;
    Property BaseType : TInt32 index 520 read FBaseType write SetBaseType;
    Property SubType : TInt32 index 528 read FSubType write SetSubType;
    Property Hidden : boolean index 536 read FHidden write SetHidden;
    Property MajorVersion : Double index 544 read FMajorVersion write SetMajorVersion;
    Property FeatureID : TGUIDString index 552 read FFeatureID write SetFeatureID;
    Property LanguageDisplay : string index 560 read FLanguageDisplay write SetLanguageDisplay;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_MaintenanceLogsItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_masterpageItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_masterpageItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FOData__ModerationComments : string;
    FFileLeafRef : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FMasterPageDescription : string;
    FUIVersion : TStringArray;
    FDefaultCssFile : string;
    FDisplayTemplateJSTemplateHidden : boolean;
    FDisplayTemplateJSTargetControlType : string;
    FDisplayTemplateJSIconUrl : TSPFieldUrlValue;
    FDisplayTemplateJSTemplateType : string;
    FDisplayTemplateJSTargetScope : string;
    FDisplayTemplateJSTargetListTemplate : string;
    FDisplayTemplateJSTargetContentType : string;
    FDisplayTemplateJSConfigurationUrl : TSPFieldUrlValue;
    FTitle : string;
    FTemplateHidden : boolean;
    FTargetControlType : TStringArray;
    FCrawlerXSLFile : TSPFieldUrlValue;
    FDisplayTemplateLevel : string;
    FManagedPropertyMapping : string;
    FCompatibleSearchDataTypes : TStringArray;
    FCompatibleManagedProperties : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FFilenameMenuNoLink : string;
    FMasterPageIcon : string;
    FFilenameNoLink : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetMasterPageDescription(AIndex: Integer; 
                                  const AValue: string);
    procedure SetUIVersion(AIndex: Integer; const AValue: TStringArray);
    procedure SetDefaultCssFile(AIndex: Integer; const AValue: string);
    procedure SetDisplayTemplateJSTemplateHidden(AIndex: Integer; 
                                            const AValue: boolean);
    procedure SetDisplayTemplateJSTargetControlType(AIndex: Integer; 
                                               const AValue: string);
    procedure SetDisplayTemplateJSIconUrl(AIndex: Integer; 
                                     const AValue: TSPFieldUrlValue);
    procedure SetDisplayTemplateJSTemplateType(AIndex: Integer; 
                                          const AValue: string);
    procedure SetDisplayTemplateJSTargetScope(AIndex: Integer; 
                                         const AValue: string);
    procedure SetDisplayTemplateJSTargetListTemplate(AIndex: Integer; 
                                                const AValue: string);
    procedure SetDisplayTemplateJSTargetContentType(AIndex: Integer; 
                                               const AValue: string);
    procedure SetDisplayTemplateJSConfigurationUrl(AIndex: Integer; 
                                              const AValue: TSPFieldUrlValue);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTemplateHidden(AIndex: Integer; const AValue: boolean);
    procedure SetTargetControlType(AIndex: Integer; 
                              const AValue: TStringArray);
    procedure SetCrawlerXSLFile(AIndex: Integer; 
                           const AValue: TSPFieldUrlValue);
    procedure SetDisplayTemplateLevel(AIndex: Integer; const AValue: string);
    procedure SetManagedPropertyMapping(AIndex: Integer; 
                                   const AValue: string);
    procedure SetCompatibleSearchDataTypes(AIndex: Integer; 
                                      const AValue: TStringArray);
    procedure SetCompatibleManagedProperties(AIndex: Integer; 
                                        const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFilenameMenuNoLink(AIndex: Integer; const AValue: string);
    procedure SetMasterPageIcon(AIndex: Integer; const AValue: string);
    procedure SetFilenameNoLink(AIndex: Integer; const AValue: string);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property OData__ModerationComments : string index 64 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileLeafRef : string index 72 read FFileLeafRef write SetFileLeafRef;
    Property Modified_x0020_By : string index 80 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 88 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 96 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 104 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 112 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 120 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property MasterPageDescription : string index 128 read FMasterPageDescription write SetMasterPageDescription;
    Property UIVersion : TStringArray index 136 read FUIVersion write SetUIVersion;
    Property DefaultCssFile : string index 144 read FDefaultCssFile write SetDefaultCssFile;
    Property DisplayTemplateJSTemplateHidden : boolean index 152 read FDisplayTemplateJSTemplateHidden write SetDisplayTemplateJSTemplateHidden;
    Property DisplayTemplateJSTargetControlType : string index 160 read FDisplayTemplateJSTargetControlType write SetDisplayTemplateJSTargetControlType;
    Property DisplayTemplateJSIconUrl : TSPFieldUrlValue index 168 read FDisplayTemplateJSIconUrl write SetDisplayTemplateJSIconUrl;
    Property DisplayTemplateJSTemplateType : string index 176 read FDisplayTemplateJSTemplateType write SetDisplayTemplateJSTemplateType;
    Property DisplayTemplateJSTargetScope : string index 184 read FDisplayTemplateJSTargetScope write SetDisplayTemplateJSTargetScope;
    Property DisplayTemplateJSTargetListTemplate : string index 192 read FDisplayTemplateJSTargetListTemplate write SetDisplayTemplateJSTargetListTemplate;
    Property DisplayTemplateJSTargetContentType : string index 200 read FDisplayTemplateJSTargetContentType write SetDisplayTemplateJSTargetContentType;
    Property DisplayTemplateJSConfigurationUrl : TSPFieldUrlValue index 208 read FDisplayTemplateJSConfigurationUrl write SetDisplayTemplateJSConfigurationUrl;
    Property Title : string index 216 read FTitle write SetTitle;
    Property TemplateHidden : boolean index 224 read FTemplateHidden write SetTemplateHidden;
    Property TargetControlType : TStringArray index 232 read FTargetControlType write SetTargetControlType;
    Property CrawlerXSLFile : TSPFieldUrlValue index 240 read FCrawlerXSLFile write SetCrawlerXSLFile;
    Property DisplayTemplateLevel : string index 248 read FDisplayTemplateLevel write SetDisplayTemplateLevel;
    Property ManagedPropertyMapping : string index 256 read FManagedPropertyMapping write SetManagedPropertyMapping;
    Property CompatibleSearchDataTypes : TStringArray index 264 read FCompatibleSearchDataTypes write SetCompatibleSearchDataTypes;
    Property CompatibleManagedProperties : string index 272 read FCompatibleManagedProperties write SetCompatibleManagedProperties;
    Property Created : TDateTime index 288 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 296 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 304 read FModified write SetModified;
    Property EditorId : TInt32 index 312 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 320 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 328 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 336 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property FileRef : string index 344 read FFileRef write SetFileRef;
    Property FileDirRef : string index 352 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 360 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 368 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 376 read FFSObjType write SetFSObjType;
    Property PermMask : string index 384 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 392 read FCheckoutUserId write SetCheckoutUserId;
    Property UniqueId : TGUIDString index 400 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 408 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 416 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property OData__EditMenuTableStart : string index 424 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 432 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 440 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 448 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 456 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 464 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 472 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 480 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 488 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 496 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 504 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 512 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 520 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 528 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 536 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 544 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 552 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 560 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 568 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 576 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 584 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 592 read FInstanceID write SetInstanceID;
    Property Order : Double index 600 read FOrder write SetOrder;
    Property GUID : TGUIDString index 608 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 616 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 624 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FilenameMenuNoLink : string index 632 read FFilenameMenuNoLink write SetFilenameMenuNoLink;
    Property MasterPageIcon : string index 640 read FMasterPageIcon write SetMasterPageIcon;
    Property FilenameNoLink : string index 648 read FFilenameNoLink write SetFilenameNoLink;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: PublishedFeedListItem
    --------------------------------------------------------------------}
  
  TSP_DataPublishedFeedListItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FOData__ModerationComments : string;
    FFile_x0020_Type : string;
    FMicroBlogType : TInt32;
    FPostAuthor : string;
    FDefinitionId : TInt32;
    FRootPostID : TInt32;
    FRootPostOwnerID : string;
    FRootPostUniqueID : string;
    FReplyCount : TInt32;
    FReferenceID : string;
    FAttributes : TInt32;
    FContent : string;
    FContentData : string;
    FSearchContent : string;
    FRefRoot : string;
    FRefReply : string;
    FPostSource : string;
    FPeopleCount : TInt32;
    FPeopleList : string;
    FMediaLinkType : TInt32;
    FMediaLinkDescription : string;
    FPostSourceUri : string;
    FMediaLinkURI : TSPFieldUrlValue;
    FMediaLinkUISnippet : TSPFieldUrlValue;
    FMediaLinkContentURI : TSPFieldUrlValue;
    FMediaLength : TInt32;
    FMediaWidth : TInt32;
    FMediaHeight : TInt32;
    FMediaPreviewWidth : TInt32;
    FMediaPreviewHeight : TInt32;
    FMediaActionWidth : TInt32;
    FMediaActionHeight : TInt32;
    FMediaActionClickUrl : TSPFieldUrlValue;
    FMediaActionClickKind : TInt32;
    FeMailSubscribers : string;
    FeMailUnsubscribed : string;
    FRemoteLocation : string;
    FLikesCount : Double;
    FLikedById : TInt32Array;
    FHashTags : TSP_TaxonomyTaxonomyFieldValueArray;
    Fj33b1bc20532487296f1bbbdead35a56 : string;
    FTaxCatchAllId : TInt32Array;
    FTaxCatchAllLabelId : TInt32Array;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetMicroBlogType(AIndex: Integer; const AValue: TInt32);
    procedure SetPostAuthor(AIndex: Integer; const AValue: string);
    procedure SetDefinitionId(AIndex: Integer; const AValue: TInt32);
    procedure SetRootPostID(AIndex: Integer; const AValue: TInt32);
    procedure SetRootPostOwnerID(AIndex: Integer; const AValue: string);
    procedure SetRootPostUniqueID(AIndex: Integer; const AValue: string);
    procedure SetReplyCount(AIndex: Integer; const AValue: TInt32);
    procedure SetReferenceID(AIndex: Integer; const AValue: string);
    procedure SetAttributes(AIndex: Integer; const AValue: TInt32);
    procedure SetContent(AIndex: Integer; const AValue: string);
    procedure SetContentData(AIndex: Integer; const AValue: string);
    procedure SetSearchContent(AIndex: Integer; const AValue: string);
    procedure SetRefRoot(AIndex: Integer; const AValue: string);
    procedure SetRefReply(AIndex: Integer; const AValue: string);
    procedure SetPostSource(AIndex: Integer; const AValue: string);
    procedure SetPeopleCount(AIndex: Integer; const AValue: TInt32);
    procedure SetPeopleList(AIndex: Integer; const AValue: string);
    procedure SetMediaLinkType(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaLinkDescription(AIndex: Integer; const AValue: string);
    procedure SetPostSourceUri(AIndex: Integer; const AValue: string);
    procedure SetMediaLinkURI(AIndex: Integer; 
                         const AValue: TSPFieldUrlValue);
    procedure SetMediaLinkUISnippet(AIndex: Integer; 
                               const AValue: TSPFieldUrlValue);
    procedure SetMediaLinkContentURI(AIndex: Integer; 
                                const AValue: TSPFieldUrlValue);
    procedure SetMediaLength(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaWidth(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaHeight(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaPreviewWidth(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaPreviewHeight(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaActionWidth(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaActionHeight(AIndex: Integer; const AValue: TInt32);
    procedure SetMediaActionClickUrl(AIndex: Integer; 
                                const AValue: TSPFieldUrlValue);
    procedure SetMediaActionClickKind(AIndex: Integer; const AValue: TInt32);
    procedure SeteMailSubscribers(AIndex: Integer; const AValue: string);
    procedure SeteMailUnsubscribed(AIndex: Integer; const AValue: string);
    procedure SetRemoteLocation(AIndex: Integer; const AValue: string);
    procedure SetLikesCount(AIndex: Integer; const AValue: Double);
    procedure SetLikedById(AIndex: Integer; const AValue: TInt32Array);
    procedure SetHashTags(AIndex: Integer; 
                     const AValue: TSP_TaxonomyTaxonomyFieldValueArray);
    procedure Setj33b1bc20532487296f1bbbdead35a56(AIndex: Integer; 
                                             const AValue: string);
    procedure SetTaxCatchAllId(AIndex: Integer; const AValue: TInt32Array);
    procedure SetTaxCatchAllLabelId(AIndex: Integer; 
                               const AValue: TInt32Array);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function LikedBy(AService: TODataService) : TSP_DataUserInfoItem;
    function TaxCatchAll(AService: TODataService)
                     : TSP_DataTaxonomyHiddenListListItem;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property Title : string index 64 read FTitle write SetTitle;
    Property OData__ModerationComments : string index 72 read FOData__ModerationComments write SetOData__ModerationComments;
    Property File_x0020_Type : string index 80 read FFile_x0020_Type write SetFile_x0020_Type;
    Property MicroBlogType : TInt32 index 88 read FMicroBlogType write SetMicroBlogType;
    Property PostAuthor : string index 96 read FPostAuthor write SetPostAuthor;
    Property DefinitionId : TInt32 index 104 read FDefinitionId write SetDefinitionId;
    Property RootPostID : TInt32 index 112 read FRootPostID write SetRootPostID;
    Property RootPostOwnerID : string index 120 read FRootPostOwnerID write SetRootPostOwnerID;
    Property RootPostUniqueID : string index 128 read FRootPostUniqueID write SetRootPostUniqueID;
    Property ReplyCount : TInt32 index 136 read FReplyCount write SetReplyCount;
    Property ReferenceID : string index 144 read FReferenceID write SetReferenceID;
    Property Attributes : TInt32 index 152 read FAttributes write SetAttributes;
    Property Content : string index 160 read FContent write SetContent;
    Property ContentData : string index 168 read FContentData write SetContentData;
    Property SearchContent : string index 176 read FSearchContent write SetSearchContent;
    Property RefRoot : string index 184 read FRefRoot write SetRefRoot;
    Property RefReply : string index 192 read FRefReply write SetRefReply;
    Property PostSource : string index 200 read FPostSource write SetPostSource;
    Property PeopleCount : TInt32 index 208 read FPeopleCount write SetPeopleCount;
    Property PeopleList : string index 216 read FPeopleList write SetPeopleList;
    Property MediaLinkType : TInt32 index 224 read FMediaLinkType write SetMediaLinkType;
    Property MediaLinkDescription : string index 232 read FMediaLinkDescription write SetMediaLinkDescription;
    Property PostSourceUri : string index 240 read FPostSourceUri write SetPostSourceUri;
    Property MediaLinkURI : TSPFieldUrlValue index 248 read FMediaLinkURI write SetMediaLinkURI;
    Property MediaLinkUISnippet : TSPFieldUrlValue index 256 read FMediaLinkUISnippet write SetMediaLinkUISnippet;
    Property MediaLinkContentURI : TSPFieldUrlValue index 264 read FMediaLinkContentURI write SetMediaLinkContentURI;
    Property MediaLength : TInt32 index 272 read FMediaLength write SetMediaLength;
    Property MediaWidth : TInt32 index 280 read FMediaWidth write SetMediaWidth;
    Property MediaHeight : TInt32 index 288 read FMediaHeight write SetMediaHeight;
    Property MediaPreviewWidth : TInt32 index 296 read FMediaPreviewWidth write SetMediaPreviewWidth;
    Property MediaPreviewHeight : TInt32 index 304 read FMediaPreviewHeight write SetMediaPreviewHeight;
    Property MediaActionWidth : TInt32 index 312 read FMediaActionWidth write SetMediaActionWidth;
    Property MediaActionHeight : TInt32 index 320 read FMediaActionHeight write SetMediaActionHeight;
    Property MediaActionClickUrl : TSPFieldUrlValue index 328 read FMediaActionClickUrl write SetMediaActionClickUrl;
    Property MediaActionClickKind : TInt32 index 336 read FMediaActionClickKind write SetMediaActionClickKind;
    Property eMailSubscribers : string index 344 read FeMailSubscribers write SeteMailSubscribers;
    Property eMailUnsubscribed : string index 352 read FeMailUnsubscribed write SeteMailUnsubscribed;
    Property RemoteLocation : string index 360 read FRemoteLocation write SetRemoteLocation;
    Property LikesCount : Double index 368 read FLikesCount write SetLikesCount;
    Property LikedById : TInt32Array index 376 read FLikedById write SetLikedById;
    Property HashTags : TSP_TaxonomyTaxonomyFieldValueArray index 384 read FHashTags write SetHashTags;
    Property j33b1bc20532487296f1bbbdead35a56 : string index 392 read Fj33b1bc20532487296f1bbbdead35a56 write Setj33b1bc20532487296f1bbbdead35a56;
    Property TaxCatchAllId : TInt32Array index 400 read FTaxCatchAllId write SetTaxCatchAllId;
    Property TaxCatchAllLabelId : TInt32Array index 408 read FTaxCatchAllLabelId write SetTaxCatchAllLabelId;
    Property Modified : TDateTime index 424 read FModified write SetModified;
    Property Created : TDateTime index 432 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 440 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 448 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 456 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 464 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 472 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 480 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 488 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 496 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 504 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 512 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property Edit : string index 520 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 528 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property LinkTitle : string index 536 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 544 read FLinkTitle2 write SetLinkTitle2;
    Property SelectTitle : string index 552 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 560 read FInstanceID write SetInstanceID;
    Property Order : Double index 568 read FOrder write SetOrder;
    Property GUID : TGUIDString index 576 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 584 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 592 read FFileRef write SetFileRef;
    Property FileDirRef : string index 600 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 608 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 616 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 624 read FFSObjType write SetFSObjType;
    Property PermMask : string index 632 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 640 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 648 read FUniqueId write SetUniqueId;
    Property HTML_x0020_File_x0020_Type : string index 656 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 664 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 672 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 680 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 688 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 696 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 704 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 712 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 720 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 728 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 736 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 744 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 752 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 760 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 768 read FAppEditorId write SetAppEditorId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: TaxonomyHiddenListListItem
    --------------------------------------------------------------------}
  
  TSP_DataTaxonomyHiddenListListItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FOData__ModerationComments : string;
    FFile_x0020_Type : string;
    FIdForTermStore : string;
    FIdForTerm : string;
    FIdForTermSet : string;
    FTerm : string;
    FPath : string;
    FCatchAllData : string;
    FCatchAllDataLabel : string;
    FTerm1031 : string;
    FPath1031 : string;
    FTerm1036 : string;
    FPath1036 : string;
    FTerm1057 : string;
    FPath1057 : string;
    FTerm1044 : string;
    FPath1044 : string;
    FTerm1049 : string;
    FPath1049 : string;
    FTerm2052 : string;
    FPath2052 : string;
    FTerm1028 : string;
    FPath1028 : string;
    FTerm1027 : string;
    FPath1027 : string;
    FTerm1081 : string;
    FPath1081 : string;
    FTerm1086 : string;
    FPath1086 : string;
    FTerm1048 : string;
    FPath1048 : string;
    FTerm1060 : string;
    FPath1060 : string;
    FTerm1030 : string;
    FPath1030 : string;
    FTerm1069 : string;
    FPath1069 : string;
    FTerm1035 : string;
    FPath1035 : string;
    FTerm1043 : string;
    FPath1043 : string;
    FTerm1051 : string;
    FPath1051 : string;
    FTerm1026 : string;
    FPath1026 : string;
    FTerm1110 : string;
    FPath1110 : string;
    FTerm1055 : string;
    FPath1055 : string;
    FTerm1050 : string;
    FPath1050 : string;
    FTerm1038 : string;
    FPath1038 : string;
    FTerm1042 : string;
    FPath1042 : string;
    FTerm1063 : string;
    FPath1063 : string;
    FTerm1033 : string;
    FPath1033 : string;
    FTerm1025 : string;
    FPath1025 : string;
    FTerm1041 : string;
    FPath1041 : string;
    FTerm1062 : string;
    FPath1062 : string;
    FTerm1046 : string;
    FPath1046 : string;
    FTerm2070 : string;
    FPath2070 : string;
    FTerm1054 : string;
    FPath1054 : string;
    FTerm1029 : string;
    FPath1029 : string;
    FTerm3082 : string;
    FPath3082 : string;
    FTerm1037 : string;
    FPath1037 : string;
    FTerm1045 : string;
    FPath1045 : string;
    FTerm2074 : string;
    FPath2074 : string;
    FTerm1058 : string;
    FPath1058 : string;
    FTerm1032 : string;
    FPath1032 : string;
    FTerm1061 : string;
    FPath1061 : string;
    FTerm1040 : string;
    FPath1040 : string;
    FTerm1087 : string;
    FPath1087 : string;
    FTerm1053 : string;
    FPath1053 : string;
    FTerm1066 : string;
    FPath1066 : string;
    FTerm10266 : string;
    FPath10266 : string;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetIdForTermStore(AIndex: Integer; const AValue: string);
    procedure SetIdForTerm(AIndex: Integer; const AValue: string);
    procedure SetIdForTermSet(AIndex: Integer; const AValue: string);
    procedure SetTerm(AIndex: Integer; const AValue: string);
    procedure SetPath(AIndex: Integer; const AValue: string);
    procedure SetCatchAllData(AIndex: Integer; const AValue: string);
    procedure SetCatchAllDataLabel(AIndex: Integer; const AValue: string);
    procedure SetTerm1031(AIndex: Integer; const AValue: string);
    procedure SetPath1031(AIndex: Integer; const AValue: string);
    procedure SetTerm1036(AIndex: Integer; const AValue: string);
    procedure SetPath1036(AIndex: Integer; const AValue: string);
    procedure SetTerm1057(AIndex: Integer; const AValue: string);
    procedure SetPath1057(AIndex: Integer; const AValue: string);
    procedure SetTerm1044(AIndex: Integer; const AValue: string);
    procedure SetPath1044(AIndex: Integer; const AValue: string);
    procedure SetTerm1049(AIndex: Integer; const AValue: string);
    procedure SetPath1049(AIndex: Integer; const AValue: string);
    procedure SetTerm2052(AIndex: Integer; const AValue: string);
    procedure SetPath2052(AIndex: Integer; const AValue: string);
    procedure SetTerm1028(AIndex: Integer; const AValue: string);
    procedure SetPath1028(AIndex: Integer; const AValue: string);
    procedure SetTerm1027(AIndex: Integer; const AValue: string);
    procedure SetPath1027(AIndex: Integer; const AValue: string);
    procedure SetTerm1081(AIndex: Integer; const AValue: string);
    procedure SetPath1081(AIndex: Integer; const AValue: string);
    procedure SetTerm1086(AIndex: Integer; const AValue: string);
    procedure SetPath1086(AIndex: Integer; const AValue: string);
    procedure SetTerm1048(AIndex: Integer; const AValue: string);
    procedure SetPath1048(AIndex: Integer; const AValue: string);
    procedure SetTerm1060(AIndex: Integer; const AValue: string);
    procedure SetPath1060(AIndex: Integer; const AValue: string);
    procedure SetTerm1030(AIndex: Integer; const AValue: string);
    procedure SetPath1030(AIndex: Integer; const AValue: string);
    procedure SetTerm1069(AIndex: Integer; const AValue: string);
    procedure SetPath1069(AIndex: Integer; const AValue: string);
    procedure SetTerm1035(AIndex: Integer; const AValue: string);
    procedure SetPath1035(AIndex: Integer; const AValue: string);
    procedure SetTerm1043(AIndex: Integer; const AValue: string);
    procedure SetPath1043(AIndex: Integer; const AValue: string);
    procedure SetTerm1051(AIndex: Integer; const AValue: string);
    procedure SetPath1051(AIndex: Integer; const AValue: string);
    procedure SetTerm1026(AIndex: Integer; const AValue: string);
    procedure SetPath1026(AIndex: Integer; const AValue: string);
    procedure SetTerm1110(AIndex: Integer; const AValue: string);
    procedure SetPath1110(AIndex: Integer; const AValue: string);
    procedure SetTerm1055(AIndex: Integer; const AValue: string);
    procedure SetPath1055(AIndex: Integer; const AValue: string);
    procedure SetTerm1050(AIndex: Integer; const AValue: string);
    procedure SetPath1050(AIndex: Integer; const AValue: string);
    procedure SetTerm1038(AIndex: Integer; const AValue: string);
    procedure SetPath1038(AIndex: Integer; const AValue: string);
    procedure SetTerm1042(AIndex: Integer; const AValue: string);
    procedure SetPath1042(AIndex: Integer; const AValue: string);
    procedure SetTerm1063(AIndex: Integer; const AValue: string);
    procedure SetPath1063(AIndex: Integer; const AValue: string);
    procedure SetTerm1033(AIndex: Integer; const AValue: string);
    procedure SetPath1033(AIndex: Integer; const AValue: string);
    procedure SetTerm1025(AIndex: Integer; const AValue: string);
    procedure SetPath1025(AIndex: Integer; const AValue: string);
    procedure SetTerm1041(AIndex: Integer; const AValue: string);
    procedure SetPath1041(AIndex: Integer; const AValue: string);
    procedure SetTerm1062(AIndex: Integer; const AValue: string);
    procedure SetPath1062(AIndex: Integer; const AValue: string);
    procedure SetTerm1046(AIndex: Integer; const AValue: string);
    procedure SetPath1046(AIndex: Integer; const AValue: string);
    procedure SetTerm2070(AIndex: Integer; const AValue: string);
    procedure SetPath2070(AIndex: Integer; const AValue: string);
    procedure SetTerm1054(AIndex: Integer; const AValue: string);
    procedure SetPath1054(AIndex: Integer; const AValue: string);
    procedure SetTerm1029(AIndex: Integer; const AValue: string);
    procedure SetPath1029(AIndex: Integer; const AValue: string);
    procedure SetTerm3082(AIndex: Integer; const AValue: string);
    procedure SetPath3082(AIndex: Integer; const AValue: string);
    procedure SetTerm1037(AIndex: Integer; const AValue: string);
    procedure SetPath1037(AIndex: Integer; const AValue: string);
    procedure SetTerm1045(AIndex: Integer; const AValue: string);
    procedure SetPath1045(AIndex: Integer; const AValue: string);
    procedure SetTerm2074(AIndex: Integer; const AValue: string);
    procedure SetPath2074(AIndex: Integer; const AValue: string);
    procedure SetTerm1058(AIndex: Integer; const AValue: string);
    procedure SetPath1058(AIndex: Integer; const AValue: string);
    procedure SetTerm1032(AIndex: Integer; const AValue: string);
    procedure SetPath1032(AIndex: Integer; const AValue: string);
    procedure SetTerm1061(AIndex: Integer; const AValue: string);
    procedure SetPath1061(AIndex: Integer; const AValue: string);
    procedure SetTerm1040(AIndex: Integer; const AValue: string);
    procedure SetPath1040(AIndex: Integer; const AValue: string);
    procedure SetTerm1087(AIndex: Integer; const AValue: string);
    procedure SetPath1087(AIndex: Integer; const AValue: string);
    procedure SetTerm1053(AIndex: Integer; const AValue: string);
    procedure SetPath1053(AIndex: Integer; const AValue: string);
    procedure SetTerm1066(AIndex: Integer; const AValue: string);
    procedure SetPath1066(AIndex: Integer; const AValue: string);
    procedure SetTerm10266(AIndex: Integer; const AValue: string);
    procedure SetPath10266(AIndex: Integer; const AValue: string);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property Title : string index 64 read FTitle write SetTitle;
    Property OData__ModerationComments : string index 72 read FOData__ModerationComments write SetOData__ModerationComments;
    Property File_x0020_Type : string index 80 read FFile_x0020_Type write SetFile_x0020_Type;
    Property IdForTermStore : string index 88 read FIdForTermStore write SetIdForTermStore;
    Property IdForTerm : string index 96 read FIdForTerm write SetIdForTerm;
    Property IdForTermSet : string index 104 read FIdForTermSet write SetIdForTermSet;
    Property Term : string index 112 read FTerm write SetTerm;
    Property Path : string index 120 read FPath write SetPath;
    Property CatchAllData : string index 128 read FCatchAllData write SetCatchAllData;
    Property CatchAllDataLabel : string index 136 read FCatchAllDataLabel write SetCatchAllDataLabel;
    Property Term1031 : string index 144 read FTerm1031 write SetTerm1031;
    Property Path1031 : string index 152 read FPath1031 write SetPath1031;
    Property Term1036 : string index 160 read FTerm1036 write SetTerm1036;
    Property Path1036 : string index 168 read FPath1036 write SetPath1036;
    Property Term1057 : string index 176 read FTerm1057 write SetTerm1057;
    Property Path1057 : string index 184 read FPath1057 write SetPath1057;
    Property Term1044 : string index 192 read FTerm1044 write SetTerm1044;
    Property Path1044 : string index 200 read FPath1044 write SetPath1044;
    Property Term1049 : string index 208 read FTerm1049 write SetTerm1049;
    Property Path1049 : string index 216 read FPath1049 write SetPath1049;
    Property Term2052 : string index 224 read FTerm2052 write SetTerm2052;
    Property Path2052 : string index 232 read FPath2052 write SetPath2052;
    Property Term1028 : string index 240 read FTerm1028 write SetTerm1028;
    Property Path1028 : string index 248 read FPath1028 write SetPath1028;
    Property Term1027 : string index 256 read FTerm1027 write SetTerm1027;
    Property Path1027 : string index 264 read FPath1027 write SetPath1027;
    Property Term1081 : string index 272 read FTerm1081 write SetTerm1081;
    Property Path1081 : string index 280 read FPath1081 write SetPath1081;
    Property Term1086 : string index 288 read FTerm1086 write SetTerm1086;
    Property Path1086 : string index 296 read FPath1086 write SetPath1086;
    Property Term1048 : string index 304 read FTerm1048 write SetTerm1048;
    Property Path1048 : string index 312 read FPath1048 write SetPath1048;
    Property Term1060 : string index 320 read FTerm1060 write SetTerm1060;
    Property Path1060 : string index 328 read FPath1060 write SetPath1060;
    Property Term1030 : string index 336 read FTerm1030 write SetTerm1030;
    Property Path1030 : string index 344 read FPath1030 write SetPath1030;
    Property Term1069 : string index 352 read FTerm1069 write SetTerm1069;
    Property Path1069 : string index 360 read FPath1069 write SetPath1069;
    Property Term1035 : string index 368 read FTerm1035 write SetTerm1035;
    Property Path1035 : string index 376 read FPath1035 write SetPath1035;
    Property Term1043 : string index 384 read FTerm1043 write SetTerm1043;
    Property Path1043 : string index 392 read FPath1043 write SetPath1043;
    Property Term1051 : string index 400 read FTerm1051 write SetTerm1051;
    Property Path1051 : string index 408 read FPath1051 write SetPath1051;
    Property Term1026 : string index 416 read FTerm1026 write SetTerm1026;
    Property Path1026 : string index 424 read FPath1026 write SetPath1026;
    Property Term1110 : string index 432 read FTerm1110 write SetTerm1110;
    Property Path1110 : string index 440 read FPath1110 write SetPath1110;
    Property Term1055 : string index 448 read FTerm1055 write SetTerm1055;
    Property Path1055 : string index 456 read FPath1055 write SetPath1055;
    Property Term1050 : string index 464 read FTerm1050 write SetTerm1050;
    Property Path1050 : string index 472 read FPath1050 write SetPath1050;
    Property Term1038 : string index 480 read FTerm1038 write SetTerm1038;
    Property Path1038 : string index 488 read FPath1038 write SetPath1038;
    Property Term1042 : string index 496 read FTerm1042 write SetTerm1042;
    Property Path1042 : string index 504 read FPath1042 write SetPath1042;
    Property Term1063 : string index 512 read FTerm1063 write SetTerm1063;
    Property Path1063 : string index 520 read FPath1063 write SetPath1063;
    Property Term1033 : string index 528 read FTerm1033 write SetTerm1033;
    Property Path1033 : string index 536 read FPath1033 write SetPath1033;
    Property Term1025 : string index 544 read FTerm1025 write SetTerm1025;
    Property Path1025 : string index 552 read FPath1025 write SetPath1025;
    Property Term1041 : string index 560 read FTerm1041 write SetTerm1041;
    Property Path1041 : string index 568 read FPath1041 write SetPath1041;
    Property Term1062 : string index 576 read FTerm1062 write SetTerm1062;
    Property Path1062 : string index 584 read FPath1062 write SetPath1062;
    Property Term1046 : string index 592 read FTerm1046 write SetTerm1046;
    Property Path1046 : string index 600 read FPath1046 write SetPath1046;
    Property Term2070 : string index 608 read FTerm2070 write SetTerm2070;
    Property Path2070 : string index 616 read FPath2070 write SetPath2070;
    Property Term1054 : string index 624 read FTerm1054 write SetTerm1054;
    Property Path1054 : string index 632 read FPath1054 write SetPath1054;
    Property Term1029 : string index 640 read FTerm1029 write SetTerm1029;
    Property Path1029 : string index 648 read FPath1029 write SetPath1029;
    Property Term3082 : string index 656 read FTerm3082 write SetTerm3082;
    Property Path3082 : string index 664 read FPath3082 write SetPath3082;
    Property Term1037 : string index 672 read FTerm1037 write SetTerm1037;
    Property Path1037 : string index 680 read FPath1037 write SetPath1037;
    Property Term1045 : string index 688 read FTerm1045 write SetTerm1045;
    Property Path1045 : string index 696 read FPath1045 write SetPath1045;
    Property Term2074 : string index 704 read FTerm2074 write SetTerm2074;
    Property Path2074 : string index 712 read FPath2074 write SetPath2074;
    Property Term1058 : string index 720 read FTerm1058 write SetTerm1058;
    Property Path1058 : string index 728 read FPath1058 write SetPath1058;
    Property Term1032 : string index 736 read FTerm1032 write SetTerm1032;
    Property Path1032 : string index 744 read FPath1032 write SetPath1032;
    Property Term1061 : string index 752 read FTerm1061 write SetTerm1061;
    Property Path1061 : string index 760 read FPath1061 write SetPath1061;
    Property Term1040 : string index 768 read FTerm1040 write SetTerm1040;
    Property Path1040 : string index 776 read FPath1040 write SetPath1040;
    Property Term1087 : string index 784 read FTerm1087 write SetTerm1087;
    Property Path1087 : string index 792 read FPath1087 write SetPath1087;
    Property Term1053 : string index 800 read FTerm1053 write SetTerm1053;
    Property Path1053 : string index 808 read FPath1053 write SetPath1053;
    Property Term1066 : string index 816 read FTerm1066 write SetTerm1066;
    Property Path1066 : string index 824 read FPath1066 write SetPath1066;
    Property Term10266 : string index 832 read FTerm10266 write SetTerm10266;
    Property Path10266 : string index 840 read FPath10266 write SetPath10266;
    Property Modified : TDateTime index 856 read FModified write SetModified;
    Property Created : TDateTime index 864 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 872 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 880 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 888 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 896 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 904 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 912 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 920 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 928 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 936 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 944 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property Edit : string index 952 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 960 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property LinkTitle : string index 968 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 976 read FLinkTitle2 write SetLinkTitle2;
    Property SelectTitle : string index 984 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 992 read FInstanceID write SetInstanceID;
    Property Order : Double index 1000 read FOrder write SetOrder;
    Property GUID : TGUIDString index 1008 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 1016 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 1024 read FFileRef write SetFileRef;
    Property FileDirRef : string index 1032 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 1040 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 1048 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 1056 read FFSObjType write SetFSObjType;
    Property PermMask : string index 1064 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 1072 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 1080 read FUniqueId write SetUniqueId;
    Property HTML_x0020_File_x0020_Type : string index 1088 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 1096 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 1104 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 1112 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 1120 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 1128 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 1136 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 1144 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 1152 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 1160 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 1168 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 1176 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 1184 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 1192 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 1200 read FAppEditorId write SetAppEditorId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: SiteAssetsItem
    --------------------------------------------------------------------}
  
  TSP_DataSiteAssetsItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FTitle : string;
    FTemplateUrl : string;
    Fxd_ProgID : string;
    Fxd_Signature : boolean;
    FCombine : string;
    FRepairDocument : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTemplateUrl(AIndex: Integer; const AValue: string);
    procedure Setxd_ProgID(AIndex: Integer; const AValue: string);
    procedure Setxd_Signature(AIndex: Integer; const AValue: boolean);
    procedure SetCombine(AIndex: Integer; const AValue: string);
    procedure SetRepairDocument(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property Title : string index 480 read FTitle write SetTitle;
    Property TemplateUrl : string index 488 read FTemplateUrl write SetTemplateUrl;
    Property xd_ProgID : string index 496 read Fxd_ProgID write Setxd_ProgID;
    Property xd_Signature : boolean index 504 read Fxd_Signature write Setxd_Signature;
    Property Combine : string index 512 read FCombine write SetCombine;
    Property RepairDocument : string index 520 read FRepairDocument write SetRepairDocument;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: SocialItem
    --------------------------------------------------------------------}
  
  TSP_DataSocialItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FTitle : string;
    FOData__ModerationComments : string;
    FFile_x0020_Type : string;
    FUnreadMentions : TInt32;
    FLastPostId : string;
    FSocialProperties : string;
    FUrl : string;
    FFarmId : string;
    FSiteId : TGUIDString;
    FWebId : TGUIDString;
    FParentUrl : string;
    FIconUrl : string;
    FHidden : boolean;
    FHasFeed : boolean;
    FFlags : string;
    FListId : TGUIDString;
    FItemUniqueId : TGUIDString;
    FItemId : TInt32;
    FSubtype : TInt32;
    FFileTypeProgid : string;
    FServerUrlProgid : string;
    FGroupId : TGUIDString;
    FPinned : TInt32;
    FModified : TDateTime;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    Fowshiddenversion : TInt32;
    FWorkflowVersion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FAttachments : boolean;
    FOData__ModerationStatus : TInt32;
    FEdit : string;
    FLinkTitleNoMenu : string;
    FLinkTitle : string;
    FLinkTitle2 : string;
    FSelectTitle : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowInstanceID : TGUIDString;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FHTML_x0020_File_x0020_Type : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetUnreadMentions(AIndex: Integer; const AValue: TInt32);
    procedure SetLastPostId(AIndex: Integer; const AValue: string);
    procedure SetSocialProperties(AIndex: Integer; const AValue: string);
    procedure SetUrl(AIndex: Integer; const AValue: string);
    procedure SetFarmId(AIndex: Integer; const AValue: string);
    procedure SetSiteId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWebId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetParentUrl(AIndex: Integer; const AValue: string);
    procedure SetIconUrl(AIndex: Integer; const AValue: string);
    procedure SetHidden(AIndex: Integer; const AValue: boolean);
    procedure SetHasFeed(AIndex: Integer; const AValue: boolean);
    procedure SetFlags(AIndex: Integer; const AValue: string);
    procedure SetListId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetItemUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetItemId(AIndex: Integer; const AValue: TInt32);
    procedure SetSubtype(AIndex: Integer; const AValue: TInt32);
    procedure SetFileTypeProgid(AIndex: Integer; const AValue: string);
    procedure SetServerUrlProgid(AIndex: Integer; const AValue: string);
    procedure SetGroupId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetPinned(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetAttachments(AIndex: Integer; const AValue: boolean);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure SetLinkTitleNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle(AIndex: Integer; const AValue: string);
    procedure SetLinkTitle2(AIndex: Integer; const AValue: string);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 56 read FContentTypeId write SetContentTypeId;
    Property Title : string index 64 read FTitle write SetTitle;
    Property OData__ModerationComments : string index 72 read FOData__ModerationComments write SetOData__ModerationComments;
    Property File_x0020_Type : string index 80 read FFile_x0020_Type write SetFile_x0020_Type;
    Property UnreadMentions : TInt32 index 88 read FUnreadMentions write SetUnreadMentions;
    Property LastPostId : string index 96 read FLastPostId write SetLastPostId;
    Property SocialProperties : string index 104 read FSocialProperties write SetSocialProperties;
    Property Url : string index 112 read FUrl write SetUrl;
    Property FarmId : string index 120 read FFarmId write SetFarmId;
    Property SiteId : TGUIDString index 128 read FSiteId write SetSiteId;
    Property WebId : TGUIDString index 136 read FWebId write SetWebId;
    Property ParentUrl : string index 144 read FParentUrl write SetParentUrl;
    Property IconUrl : string index 152 read FIconUrl write SetIconUrl;
    Property Hidden : boolean index 160 read FHidden write SetHidden;
    Property HasFeed : boolean index 168 read FHasFeed write SetHasFeed;
    Property Flags : string index 176 read FFlags write SetFlags;
    Property ListId : TGUIDString index 184 read FListId write SetListId;
    Property ItemUniqueId : TGUIDString index 192 read FItemUniqueId write SetItemUniqueId;
    Property ItemId : TInt32 index 200 read FItemId write SetItemId;
    Property Subtype : TInt32 index 208 read FSubtype write SetSubtype;
    Property FileTypeProgid : string index 216 read FFileTypeProgid write SetFileTypeProgid;
    Property ServerUrlProgid : string index 224 read FServerUrlProgid write SetServerUrlProgid;
    Property GroupId : TGUIDString index 232 read FGroupId write SetGroupId;
    Property Pinned : TInt32 index 240 read FPinned write SetPinned;
    Property Modified : TDateTime index 256 read FModified write SetModified;
    Property Created : TDateTime index 264 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 272 read FAuthorId write SetAuthorId;
    Property EditorId : TInt32 index 280 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 288 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 296 read FOData__CopySource write SetOData__CopySource;
    Property owshiddenversion : TInt32 index 304 read Fowshiddenversion write Setowshiddenversion;
    Property WorkflowVersion : TInt32 index 312 read FWorkflowVersion write SetWorkflowVersion;
    Property OData__UIVersion : TInt32 index 320 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 328 read FOData__UIVersionString write SetOData__UIVersionString;
    Property Attachments : boolean index 336 read FAttachments write SetAttachments;
    Property OData__ModerationStatus : TInt32 index 344 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property Edit : string index 352 read FEdit write SetEdit;
    Property LinkTitleNoMenu : string index 360 read FLinkTitleNoMenu write SetLinkTitleNoMenu;
    Property LinkTitle : string index 368 read FLinkTitle write SetLinkTitle;
    Property LinkTitle2 : string index 376 read FLinkTitle2 write SetLinkTitle2;
    Property SelectTitle : string index 384 read FSelectTitle write SetSelectTitle;
    Property InstanceID : TInt32 index 392 read FInstanceID write SetInstanceID;
    Property Order : Double index 400 read FOrder write SetOrder;
    Property GUID : TGUIDString index 408 read FGUID write SetGUID;
    Property WorkflowInstanceID : TGUIDString index 416 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property FileRef : string index 424 read FFileRef write SetFileRef;
    Property FileDirRef : string index 432 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 440 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 448 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 456 read FFSObjType write SetFSObjType;
    Property PermMask : string index 464 read FPermMask write SetPermMask;
    Property FileLeafRef : string index 472 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 480 read FUniqueId write SetUniqueId;
    Property HTML_x0020_File_x0020_Type : string index 488 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__EditMenuTableStart : string index 496 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 504 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 512 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 520 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 528 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 536 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 544 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 552 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 560 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 568 read FBaseName write SetBaseName;
    Property OData__Level : TInt32 index 576 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 584 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 592 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 600 read FAppEditorId write SetAppEditorId;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_solutionsItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_solutionsItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FSolutionId : TGUIDString;
    FSolutionTitle : string;
    FSolutionDescription : string;
    FSolutionHash : string;
    FComputedStatus : string;
    FComputedQuota : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetSolutionId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetSolutionTitle(AIndex: Integer; const AValue: string);
    procedure SetSolutionDescription(AIndex: Integer; const AValue: string);
    procedure SetSolutionHash(AIndex: Integer; const AValue: string);
    procedure SetComputedStatus(AIndex: Integer; const AValue: string);
    procedure SetComputedQuota(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property SolutionId : TGUIDString index 480 read FSolutionId write SetSolutionId;
    Property SolutionTitle : string index 488 read FSolutionTitle write SetSolutionTitle;
    Property SolutionDescription : string index 496 read FSolutionDescription write SetSolutionDescription;
    Property SolutionHash : string index 504 read FSolutionHash write SetSolutionHash;
    Property ComputedStatus : string index 512 read FComputedStatus write SetComputedStatus;
    Property ComputedQuota : string index 520 read FComputedQuota write SetComputedQuota;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: Style_x0020_LibraryItem
    --------------------------------------------------------------------}
  
  TSP_DataStyle_x0020_LibraryItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FTitle : string;
    FTemplateUrl : string;
    Fxd_ProgID : string;
    Fxd_Signature : boolean;
    FCombine : string;
    FRepairDocument : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetTemplateUrl(AIndex: Integer; const AValue: string);
    procedure Setxd_ProgID(AIndex: Integer; const AValue: string);
    procedure Setxd_Signature(AIndex: Integer; const AValue: boolean);
    procedure SetCombine(AIndex: Integer; const AValue: string);
    procedure SetRepairDocument(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property Title : string index 480 read FTitle write SetTitle;
    Property TemplateUrl : string index 488 read FTemplateUrl write SetTemplateUrl;
    Property xd_ProgID : string index 496 read Fxd_ProgID write Setxd_ProgID;
    Property xd_Signature : boolean index 504 read Fxd_Signature write Setxd_Signature;
    Property Combine : string index 512 read FCombine write SetCombine;
    Property RepairDocument : string index 520 read FRepairDocument write SetRepairDocument;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_themeItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_themeItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FThemeDescription : string;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetThemeDescription(AIndex: Integer; const AValue: string);
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property ThemeDescription : string index 480 read FThemeDescription write SetThemeDescription;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: OData__x005f_catalogs_x002f_wpItem
    --------------------------------------------------------------------}
  
  TSP_DataOData__x005f_catalogs_x002f_wpItem = Class(TSPListItem)
  private
    FContentTypeId : string;
    FCreated : TDateTime;
    FAuthorId : TInt32;
    FModified : TDateTime;
    FEditorId : TInt32;
    FOData__HasCopyDestinations : boolean;
    FOData__CopySource : string;
    FOData__ModerationStatus : TInt32;
    FOData__ModerationComments : string;
    FFileRef : string;
    FFileDirRef : string;
    FLast_x0020_Modified : TDateTime;
    FCreated_x0020_Date : TDateTime;
    FFSObjType : TInt32;
    FPermMask : string;
    FCheckoutUserId : TInt32;
    FFileLeafRef : string;
    FUniqueId : TGUIDString;
    FOData__CheckinComment : string;
    FLinkCheckedOutTitle : string;
    FModified_x0020_By : string;
    FCreated_x0020_By : string;
    FFile_x0020_Type : string;
    FHTML_x0020_File_x0020_Type : string;
    FOData__SourceUrl : string;
    FOData__SharedFileIndex : string;
    FOData__EditMenuTableStart : string;
    FOData__EditMenuTableStart2 : string;
    FOData__EditMenuTableEnd : string;
    FLinkFilenameNoMenu : string;
    FLinkFilename : string;
    FLinkFilename2 : string;
    FDocIcon : string;
    FServerUrl : string;
    FEncodedAbsUrl : string;
    FBaseName : string;
    FFileSizeDisplay : string;
    FOData__Level : TInt32;
    FOData__IsCurrentVersion : boolean;
    FAppAuthorId : TInt32;
    FAppEditorId : TInt32;
    FSelectTitle : string;
    FSelectFilename : string;
    FEdit : string;
    Fowshiddenversion : TInt32;
    FOData__UIVersion : TInt32;
    FOData__UIVersionString : string;
    FInstanceID : TInt32;
    FOrder : Double;
    FGUID : TGUIDString;
    FWorkflowVersion : TInt32;
    FWorkflowInstanceID : TGUIDString;
    FTitle : string;
    FWebPartDescription : string;
    FWebPartAssembly : string;
    FWebPartTypeName : string;
    FWebPartPartImageLarge : string;
    FLinkWebPart : string;
    FWebPartIcon : string;
    FGroup : string;
    FQuickAddGroups : TStringArray;
    procedure SetContentTypeId(AIndex: Integer; const AValue: string);
    procedure SetCreated(AIndex: Integer; const AValue: TDateTime);
    procedure SetAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetModified(AIndex: Integer; const AValue: TDateTime);
    procedure SetEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__HasCopyDestinations(AIndex: Integer; 
                                       const AValue: boolean);
    procedure SetOData__CopySource(AIndex: Integer; const AValue: string);
    procedure SetOData__ModerationStatus(AIndex: Integer; 
                                    const AValue: TInt32);
    procedure SetOData__ModerationComments(AIndex: Integer; 
                                      const AValue: string);
    procedure SetFileRef(AIndex: Integer; const AValue: string);
    procedure SetFileDirRef(AIndex: Integer; const AValue: string);
    procedure SetLast_x0020_Modified(AIndex: Integer; 
                                const AValue: TDateTime);
    procedure SetCreated_x0020_Date(AIndex: Integer; 
                               const AValue: TDateTime);
    procedure SetFSObjType(AIndex: Integer; const AValue: TInt32);
    procedure SetPermMask(AIndex: Integer; const AValue: string);
    procedure SetCheckoutUserId(AIndex: Integer; const AValue: TInt32);
    procedure SetFileLeafRef(AIndex: Integer; const AValue: string);
    procedure SetUniqueId(AIndex: Integer; const AValue: TGUIDString);
    procedure SetOData__CheckinComment(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string);
    procedure SetModified_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetCreated_x0020_By(AIndex: Integer; const AValue: string);
    procedure SetFile_x0020_Type(AIndex: Integer; const AValue: string);
    procedure SetHTML_x0020_File_x0020_Type(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__SourceUrl(AIndex: Integer; const AValue: string);
    procedure SetOData__SharedFileIndex(AIndex: Integer; 
                                   const AValue: string);
    procedure SetOData__EditMenuTableStart(AIndex: Integer; 
                                      const AValue: string);
    procedure SetOData__EditMenuTableStart2(AIndex: Integer; 
                                       const AValue: string);
    procedure SetOData__EditMenuTableEnd(AIndex: Integer; 
                                    const AValue: string);
    procedure SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename(AIndex: Integer; const AValue: string);
    procedure SetLinkFilename2(AIndex: Integer; const AValue: string);
    procedure SetDocIcon(AIndex: Integer; const AValue: string);
    procedure SetServerUrl(AIndex: Integer; const AValue: string);
    procedure SetEncodedAbsUrl(AIndex: Integer; const AValue: string);
    procedure SetBaseName(AIndex: Integer; const AValue: string);
    procedure SetFileSizeDisplay(AIndex: Integer; const AValue: string);
    procedure SetOData__Level(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__IsCurrentVersion(AIndex: Integer; 
                                    const AValue: boolean);
    procedure SetAppAuthorId(AIndex: Integer; const AValue: TInt32);
    procedure SetAppEditorId(AIndex: Integer; const AValue: TInt32);
    procedure SetSelectTitle(AIndex: Integer; const AValue: string);
    procedure SetSelectFilename(AIndex: Integer; const AValue: string);
    procedure SetEdit(AIndex: Integer; const AValue: string);
    procedure Setowshiddenversion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetOData__UIVersionString(AIndex: Integer; 
                                   const AValue: string);
    procedure SetInstanceID(AIndex: Integer; const AValue: TInt32);
    procedure SetOrder(AIndex: Integer; const AValue: Double);
    procedure SetGUID(AIndex: Integer; const AValue: TGUIDString);
    procedure SetWorkflowVersion(AIndex: Integer; const AValue: TInt32);
    procedure SetWorkflowInstanceID(AIndex: Integer; 
                               const AValue: TGUIDString);
    procedure SetTitle(AIndex: Integer; const AValue: string);
    procedure SetWebPartDescription(AIndex: Integer; const AValue: string);
    procedure SetWebPartAssembly(AIndex: Integer; const AValue: string);
    procedure SetWebPartTypeName(AIndex: Integer; const AValue: string);
    procedure SetWebPartPartImageLarge(AIndex: Integer; 
                                  const AValue: string);
    procedure SetLinkWebPart(AIndex: Integer; const AValue: string);
    procedure SetWebPartIcon(AIndex: Integer; const AValue: string);
    procedure SetGroup(AIndex: Integer; const AValue: string);
    procedure SetQuickAddGroups(AIndex: Integer; const AValue: TStringArray);
  protected
    {$IFDEF VER2_6}
    procedure SetArrayLength(const AName: String; ALength: Longint)
                        ;  Override;
    {$ENDIF VER2_6}
  public
    class function ObjectRestKind : String;  Override;
    function Author(AService: TODataService) : TSP_DataUserInfoItem;
    function Editor(AService: TODataService) : TSP_DataUserInfoItem;
    function CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem;
  published
    Property ContentTypeId : string index 64 read FContentTypeId write SetContentTypeId;
    Property Created : TDateTime index 72 read FCreated write SetCreated;
    Property AuthorId : TInt32 index 80 read FAuthorId write SetAuthorId;
    Property Modified : TDateTime index 88 read FModified write SetModified;
    Property EditorId : TInt32 index 96 read FEditorId write SetEditorId;
    Property OData__HasCopyDestinations : boolean index 104 read FOData__HasCopyDestinations write SetOData__HasCopyDestinations;
    Property OData__CopySource : string index 112 read FOData__CopySource write SetOData__CopySource;
    Property OData__ModerationStatus : TInt32 index 120 read FOData__ModerationStatus write SetOData__ModerationStatus;
    Property OData__ModerationComments : string index 128 read FOData__ModerationComments write SetOData__ModerationComments;
    Property FileRef : string index 136 read FFileRef write SetFileRef;
    Property FileDirRef : string index 144 read FFileDirRef write SetFileDirRef;
    Property Last_x0020_Modified : TDateTime index 152 read FLast_x0020_Modified write SetLast_x0020_Modified;
    Property Created_x0020_Date : TDateTime index 160 read FCreated_x0020_Date write SetCreated_x0020_Date;
    Property FSObjType : TInt32 index 168 read FFSObjType write SetFSObjType;
    Property PermMask : string index 176 read FPermMask write SetPermMask;
    Property CheckoutUserId : TInt32 index 184 read FCheckoutUserId write SetCheckoutUserId;
    Property FileLeafRef : string index 192 read FFileLeafRef write SetFileLeafRef;
    Property UniqueId : TGUIDString index 200 read FUniqueId write SetUniqueId;
    Property OData__CheckinComment : string index 208 read FOData__CheckinComment write SetOData__CheckinComment;
    Property LinkCheckedOutTitle : string index 216 read FLinkCheckedOutTitle write SetLinkCheckedOutTitle;
    Property Modified_x0020_By : string index 224 read FModified_x0020_By write SetModified_x0020_By;
    Property Created_x0020_By : string index 232 read FCreated_x0020_By write SetCreated_x0020_By;
    Property File_x0020_Type : string index 240 read FFile_x0020_Type write SetFile_x0020_Type;
    Property HTML_x0020_File_x0020_Type : string index 248 read FHTML_x0020_File_x0020_Type write SetHTML_x0020_File_x0020_Type;
    Property OData__SourceUrl : string index 256 read FOData__SourceUrl write SetOData__SourceUrl;
    Property OData__SharedFileIndex : string index 264 read FOData__SharedFileIndex write SetOData__SharedFileIndex;
    Property OData__EditMenuTableStart : string index 272 read FOData__EditMenuTableStart write SetOData__EditMenuTableStart;
    Property OData__EditMenuTableStart2 : string index 280 read FOData__EditMenuTableStart2 write SetOData__EditMenuTableStart2;
    Property OData__EditMenuTableEnd : string index 288 read FOData__EditMenuTableEnd write SetOData__EditMenuTableEnd;
    Property LinkFilenameNoMenu : string index 296 read FLinkFilenameNoMenu write SetLinkFilenameNoMenu;
    Property LinkFilename : string index 304 read FLinkFilename write SetLinkFilename;
    Property LinkFilename2 : string index 312 read FLinkFilename2 write SetLinkFilename2;
    Property DocIcon : string index 320 read FDocIcon write SetDocIcon;
    Property ServerUrl : string index 328 read FServerUrl write SetServerUrl;
    Property EncodedAbsUrl : string index 336 read FEncodedAbsUrl write SetEncodedAbsUrl;
    Property BaseName : string index 344 read FBaseName write SetBaseName;
    Property FileSizeDisplay : string index 352 read FFileSizeDisplay write SetFileSizeDisplay;
    Property OData__Level : TInt32 index 360 read FOData__Level write SetOData__Level;
    Property OData__IsCurrentVersion : boolean index 368 read FOData__IsCurrentVersion write SetOData__IsCurrentVersion;
    Property AppAuthorId : TInt32 index 376 read FAppAuthorId write SetAppAuthorId;
    Property AppEditorId : TInt32 index 384 read FAppEditorId write SetAppEditorId;
    Property SelectTitle : string index 392 read FSelectTitle write SetSelectTitle;
    Property SelectFilename : string index 400 read FSelectFilename write SetSelectFilename;
    Property Edit : string index 408 read FEdit write SetEdit;
    Property owshiddenversion : TInt32 index 416 read Fowshiddenversion write Setowshiddenversion;
    Property OData__UIVersion : TInt32 index 424 read FOData__UIVersion write SetOData__UIVersion;
    Property OData__UIVersionString : string index 432 read FOData__UIVersionString write SetOData__UIVersionString;
    Property InstanceID : TInt32 index 440 read FInstanceID write SetInstanceID;
    Property Order : Double index 448 read FOrder write SetOrder;
    Property GUID : TGUIDString index 456 read FGUID write SetGUID;
    Property WorkflowVersion : TInt32 index 464 read FWorkflowVersion write SetWorkflowVersion;
    Property WorkflowInstanceID : TGUIDString index 472 read FWorkflowInstanceID write SetWorkflowInstanceID;
    Property Title : string index 480 read FTitle write SetTitle;
    Property WebPartDescription : string index 488 read FWebPartDescription write SetWebPartDescription;
    Property WebPartAssembly : string index 496 read FWebPartAssembly write SetWebPartAssembly;
    Property WebPartTypeName : string index 504 read FWebPartTypeName write SetWebPartTypeName;
    Property WebPartPartImageLarge : string index 512 read FWebPartPartImageLarge write SetWebPartPartImageLarge;
    Property LinkWebPart : string index 520 read FLinkWebPart write SetLinkWebPart;
    Property WebPartIcon : string index 528 read FWebPartIcon write SetWebPartIcon;
    Property Group : string index 536 read FGroup write SetGroup;
    Property QuickAddGroups : TStringArray index 544 read FQuickAddGroups write SetQuickAddGroups;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ApiData
    --------------------------------------------------------------------}
  
  TSPApiData = Class(TODataEntityContainer)
  private
    FApps : TSPAppsEntitySet;
    FFiles : TSPFilesEntitySet;
    FLists : TSPListsEntitySet;
    FMes : TSPMesEntitySet;
    FSites : TSPSitesEntitySet;
    FWebs : TSPWebsEntitySet;
    FAppStores : TSPAppStoresEntitySet;
    FConnectionSettingss : TSPConnectionSettingssEntitySet;
    FTargetApplications : TSPTargetApplicationsEntitySet;
    FTargetApplicationFields : TSPTargetApplicationFieldsEntitySet;
    FReputations : TSPReputationsEntitySet;
    FSearchServices : TSPSearchServicesEntitySet;
    FApps1 : TSPApps1EntitySet;
    FPointPublishingAdmins : TSPPointPublishingAdminsEntitySet;
    FDDIAdapters : TSPDDIAdaptersEntitySet;
    FSPOTenantWebTemplateCollections : TSPSPOTenantWebTemplateCollectionsEntitySet;
    FExternalUsers : TSPExternalUsersEntitySet;
    FGetExternalUsersResultss : TSPGetExternalUsersResultssEntitySet;
    FOffice365Tenants : TSPOffice365TenantsEntitySet;
    FRemoveExternalUsersResultss : TSPRemoveExternalUsersResultssEntitySet;
    FFeatureDefinitions : TSPFeatureDefinitionsEntitySet;
    FSPAnalyticsUsageServices : TSPSPAnalyticsUsageServicesEntitySet;
    FSPAppStateQueryJobDefinitions : TSPSPAppStateQueryJobDefinitionsEntitySet;
    FSPFarms : TSPSPFarmsEntitySet;
    FSPTenantAppInstanceDatas : TSPSPTenantAppInstanceDatasEntitySet;
    FSPWebApplications : TSPSPWebApplicationsEntitySet;
    FSPWebServices : TSPSPWebServicesEntitySet;
    FSPAppPrincipalInfos : TSPSPAppPrincipalInfosEntitySet;
    FDocumentCrawlLogs : TSPDocumentCrawlLogsEntitySet;
    FSignalStores : TSPSignalStoresEntitySet;
    FQueryPersonalizationDatas : TSPQueryPersonalizationDatasEntitySet;
    FRankingLabelings : TSPRankingLabelingsEntitySet;
    FReorderingRuleCollections : TSPReorderingRuleCollectionsEntitySet;
    FSortCollections : TSPSortCollectionsEntitySet;
    FStringCollections : TSPStringCollectionsEntitySet;
    FSPFlights : TSPSPFlightsEntitySet;
    FSPCorporateCuratedGallerySettingsBases : TSPSPCorporateCuratedGallerySettingsBasesEntitySet;
    FSPCorporateCuratedGallerySettingsFactorys : TSPSPCorporateCuratedGallerySettingsFactorysEntitySet;
    FSPMarketplaceSettingss : TSPSPMarketplaceSettingssEntitySet;
    FNavigationServiceRests : TSPNavigationServiceRestsEntitySet;
    FAppDetailss : TSPAppDetailssEntitySet;
    FAppIconInfos : TSPAppIconInfosEntitySet;
    FCollaborationMailboxs : TSPCollaborationMailboxsEntitySet;
    FCommunityModerations : TSPCommunityModerationsEntitySet;
    FMySiteRecommendationss : TSPMySiteRecommendationssEntitySet;
    FDocumentsSharedWithGroups : TSPDocumentsSharedWithGroupsEntitySet;
    FDocumentsSharedWithMes : TSPDocumentsSharedWithMesEntitySet;
    FDocumentsSharedWithPersons : TSPDocumentsSharedWithPersonsEntitySet;
    FMySiteDismissStatusTexts : TSPMySiteDismissStatusTextsEntitySet;
    FMySiteDocumentMoveUtilitys : TSPMySiteDocumentMoveUtilitysEntitySet;
    FMySiteLinkss : TSPMySiteLinkssEntitySet;
    FPromotedSitess : TSPPromotedSitessEntitySet;
    FSharedWithMeDocuments : TSPSharedWithMeDocumentsEntitySet;
    FRecentDocuments : TSPRecentDocumentsEntitySet;
    FModuleLinks : TSPModuleLinksEntitySet;
    FResourceManifestInformations : TSPResourceManifestInformationsEntitySet;
    FWacApis : TSPWacApisEntitySet;
    FEntityItems : TSPEntityItemsEntitySet;
    FEntityTypes : TSPEntityTypesEntitySet;
    FEntityTypeBases : TSPEntityTypeBasesEntitySet;
    FExternalEntityTypes : TSPExternalEntityTypesEntitySet;
    FFields : TSPFieldsEntitySet;
    FODataStoreContexts : TSPODataStoreContextsEntitySet;
    FRequestContexts : TSPRequestContextsEntitySet;
    FSqlStoreContexts : TSPSqlStoreContextsEntitySet;
    FStoreContextBases : TSPStoreContextBasesEntitySet;
    FFiles1 : TSPFiles1EntitySet;
    FFileServices : TSPFileServicesEntitySet;
    FFolders : TSPFoldersEntitySet;
    FMeFileServices : TSPMeFileServicesEntitySet;
    FDiagnosticss : TSPDiagnosticssEntitySet;
    FReportings : TSPReportingsEntitySet;
    FTaskflows : TSPTaskflowsEntitySet;
    FAssignments : TSPAssignmentsEntitySet;
    FBaseCalendarExceptions : TSPBaseCalendarExceptionsEntitySet;
    FCalendars : TSPCalendarsEntitySet;
    FCalendarExceptions : TSPCalendarExceptionsEntitySet;
    FCustomFields : TSPCustomFieldsEntitySet;
    FDraftAssignments : TSPDraftAssignmentsEntitySet;
    FDraftProjects : TSPDraftProjectsEntitySet;
    FDraftProjectResources : TSPDraftProjectResourcesEntitySet;
    FDraftTasks : TSPDraftTasksEntitySet;
    FDraftTaskLinks : TSPDraftTaskLinksEntitySet;
    FEnterpriseProjectTypes : TSPEnterpriseProjectTypesEntitySet;
    FEnterpriseResources : TSPEnterpriseResourcesEntitySet;
    FEntityTypes1 : TSPEntityTypes1EntitySet;
    FEntityTypess : TSPEntityTypessEntitySet;
    FEvents : TSPEventsEntitySet;
    FEventHandlers : TSPEventHandlersEntitySet;
    FLookupCosts : TSPLookupCostsEntitySet;
    FLookupDates : TSPLookupDatesEntitySet;
    FLookupDurations : TSPLookupDurationsEntitySet;
    FLookupEntrys : TSPLookupEntrysEntitySet;
    FLookupNumbers : TSPLookupNumbersEntitySet;
    FLookupTables : TSPLookupTablesEntitySet;
    FLookupTabless : TSPLookupTablessEntitySet;
    FLookupTexts : TSPLookupTextsEntitySet;
    FPhases : TSPPhasesEntitySet;
    FPlanAssignments : TSPPlanAssignmentsEntitySet;
    FPlanAssignmentIntervals : TSPPlanAssignmentIntervalsEntitySet;
    FProjects : TSPProjectsEntitySet;
    FProjectDetailPages : TSPProjectDetailPagesEntitySet;
    FProjectResources : TSPProjectResourcesEntitySet;
    FProjectServers : TSPProjectServersEntitySet;
    FProjectServerDatas : TSPProjectServerDatasEntitySet;
    FPublishedAssignments : TSPPublishedAssignmentsEntitySet;
    FPublishedProjects : TSPPublishedProjectsEntitySet;
    FPublishedProjectResources : TSPPublishedProjectResourcesEntitySet;
    FPublishedTasks : TSPPublishedTasksEntitySet;
    FPublishedTaskLinks : TSPPublishedTaskLinksEntitySet;
    FQueueJobs : TSPQueueJobsEntitySet;
    FResourceCalendarExceptions : TSPResourceCalendarExceptionsEntitySet;
    FResourcePlans : TSPResourcePlansEntitySet;
    FServiceStatuss : TSPServiceStatussEntitySet;
    FStages : TSPStagesEntitySet;
    FStageCustomFields : TSPStageCustomFieldsEntitySet;
    FStageDetailPages : TSPStageDetailPagesEntitySet;
    FStatusAssignments : TSPStatusAssignmentsEntitySet;
    FStatusTasks : TSPStatusTasksEntitySet;
    FTasks : TSPTasksEntitySet;
    FTaskLinks : TSPTaskLinksEntitySet;
    FTaskServiceOdataEndpoints : TSPTaskServiceOdataEndpointsEntitySet;
    FTimePhases : TSPTimePhasesEntitySet;
    FTimeSheets : TSPTimeSheetsEntitySet;
    FTimeSheetLines : TSPTimeSheetLinesEntitySet;
    FTimeSheetPeriods : TSPTimeSheetPeriodsEntitySet;
    FTimeSheetWorks : TSPTimeSheetWorksEntitySet;
    FWorkflowActivitiess : TSPWorkflowActivitiessEntitySet;
    FWorkflowDesigners : TSPWorkflowDesignersEntitySet;
    FWorkflowDesignerFields : TSPWorkflowDesignerFieldsEntitySet;
    FAccessRequestss : TSPAccessRequestssEntitySet;
    FAlternateUrls : TSPAlternateUrlsEntitySet;
    FAnalyticsUsageEntrys : TSPAnalyticsUsageEntrysEntitySet;
    FApiMetadatas : TSPApiMetadatasEntitySet;
    FApps12 : TSPApps12EntitySet;
    FAppCatalogs : TSPAppCatalogsEntitySet;
    FAppContextSites : TSPAppContextSitesEntitySet;
    FAppInstances : TSPAppInstancesEntitySet;
    FAppInstanceErrorDetailss : TSPAppInstanceErrorDetailssEntitySet;
    FAppTiles : TSPAppTilesEntitySet;
    FAttachments : TSPAttachmentsEntitySet;
    FAudits : TSPAuditsEntitySet;
    FAppBdcCatalogs : TSPAppBdcCatalogsEntitySet;
    FEntitys : TSPEntitysEntitySet;
    FEntityFields : TSPEntityFieldsEntitySet;
    FEntityIdentifiers : TSPEntityIdentifiersEntitySet;
    FEntityViews : TSPEntityViewsEntitySet;
    FFilters : TSPFiltersEntitySet;
    FExternalSubscriptionStores : TSPExternalSubscriptionStoresEntitySet;
    FLobSystems : TSPLobSystemsEntitySet;
    FLobSystemInstances : TSPLobSystemInstancesEntitySet;
    FMethodExecutionResults : TSPMethodExecutionResultsEntitySet;
    FEntityFieldValueDictionarys : TSPEntityFieldValueDictionarysEntitySet;
    FEntityIdentitys : TSPEntityIdentitysEntitySet;
    FEntityInstances : TSPEntityInstancesEntitySet;
    FNotificationCallbacks : TSPNotificationCallbacksEntitySet;
    FSubscriptions : TSPSubscriptionsEntitySet;
    FTypeDescriptors : TSPTypeDescriptorsEntitySet;
    FChanges : TSPChangesEntitySet;
    FCompatibilityRanges : TSPCompatibilityRangesEntitySet;
    FPolicyEvaluationInfos : TSPPolicyEvaluationInfosEntitySet;
    FSPPolicyStoreProxys : TSPSPPolicyStoreProxysEntitySet;
    FContentTypes : TSPContentTypesEntitySet;
    FCreatablesInfos : TSPCreatablesInfosEntitySet;
    FDirectorySessions : TSPDirectorySessionsEntitySet;
    FGroups : TSPGroupsEntitySet;
    FGroupAndUserStatuss : TSPGroupAndUserStatussEntitySet;
    FLinkCollections : TSPLinkCollectionsEntitySet;
    FMembershipResults : TSPMembershipResultsEntitySet;
    FMembersInfos : TSPMembersInfosEntitySet;
    FMyGroupsResults : TSPMyGroupsResultsEntitySet;
    FPropertys : TSPPropertysEntitySet;
    FPropertyDictionarys : TSPPropertyDictionarysEntitySet;
    FSharePointDirectoryProviders : TSPSharePointDirectoryProvidersEntitySet;
    FSPHelpers : TSPSPHelpersEntitySet;
    FUsers : TSPUsersEntitySet;
    FUserRequestSchemas : TSPUserRequestSchemasEntitySet;
    FDlpPolicyTips : TSPDlpPolicyTipsEntitySet;
    FEventReceiverDefinitions : TSPEventReceiverDefinitionsEntitySet;
    FFeatures : TSPFeaturesEntitySet;
    FFields1 : TSPFields1EntitySet;
    FFieldLinks : TSPFieldLinksEntitySet;
    FFieldStringValuess : TSPFieldStringValuessEntitySet;
    FFiles12 : TSPFiles12EntitySet;
    FFileVersions : TSPFileVersionsEntitySet;
    FFolders1 : TSPFolders1EntitySet;
    FForms : TSPFormsEntitySet;
    FGroups1 : TSPGroups1EntitySet;
    FInformationRightsManagementSettingss : TSPInformationRightsManagementSettingssEntitySet;
    FListItems : TSPListItemsEntitySet;
    FListTemplates : TSPListTemplatesEntitySet;
    FMicrofeedAttachmentStores : TSPMicrofeedAttachmentStoresEntitySet;
    FMicrofeedDatas : TSPMicrofeedDatasEntitySet;
    FMicrofeedManagers : TSPMicrofeedManagersEntitySet;
    FMicrofeedPostDefinitionManagers : TSPMicrofeedPostDefinitionManagersEntitySet;
    FMicrofeedPostOptionCollections : TSPMicrofeedPostOptionCollectionsEntitySet;
    FMicrofeedStores : TSPMicrofeedStoresEntitySet;
    FMountedFolderInfos : TSPMountedFolderInfosEntitySet;
    FMountPoints : TSPMountPointsEntitySet;
    FMountPointInfos : TSPMountPointInfosEntitySet;
    FMoveCopyUtils : TSPMoveCopyUtilsEntitySet;
    FNavigations : TSPNavigationsEntitySet;
    FNavigationNodes : TSPNavigationNodesEntitySet;
    FNativeClients : TSPNativeClientsEntitySet;
    FObjectSharingInformations : TSPObjectSharingInformationsEntitySet;
    FObjectSharingInformationUsers : TSPObjectSharingInformationUsersEntitySet;
    FObjectSharingSettingss : TSPObjectSharingSettingssEntitySet;
    FClickManagers : TSPClickManagersEntitySet;
    FPickerSettingss : TSPPickerSettingssEntitySet;
    FPrincipals : TSPPrincipalsEntitySet;
    FPropertyValuess : TSPPropertyValuessEntitySet;
    FPersonMagazines : TSPPersonMagazinesEntitySet;
    FPointPublishingDocPropss : TSPPointPublishingDocPropssEntitySet;
    FPointPublishingMagazinePropss : TSPPointPublishingMagazinePropssEntitySet;
    FPointPublishingPosts : TSPPointPublishingPostsEntitySet;
    FPointPublishingPostServiceManagers : TSPPointPublishingPostServiceManagersEntitySet;
    FPointPublishingSiteManagers : TSPPointPublishingSiteManagersEntitySet;
    FPointPublishingSiteStatuss : TSPPointPublishingSiteStatussEntitySet;
    FPointPublishingUsers : TSPPointPublishingUsersEntitySet;
    FSearchs : TSPSearchsEntitySet;
    FSpotlightChannels : TSPSpotlightChannelsEntitySet;
    FSpotlightVideos : TSPSpotlightVideosEntitySet;
    FVideoChannels : TSPVideoChannelsEntitySet;
    FVideoItems : TSPVideoItemsEntitySet;
    FVideoPermissionGroups : TSPVideoPermissionGroupsEntitySet;
    FVideoServiceDiscoverers : TSPVideoServiceDiscoverersEntitySet;
    FVideoServiceManagers : TSPVideoServiceManagersEntitySet;
    FPushNotificationSubscribers : TSPPushNotificationSubscribersEntitySet;
    FRecycleBinItems : TSPRecycleBinItemsEntitySet;
    FRegionalSettingss : TSPRegionalSettingssEntitySet;
    FRelatedFields : TSPRelatedFieldsEntitySet;
    FRelatedItemManagers : TSPRelatedItemManagersEntitySet;
    FRemoteWebs : TSPRemoteWebsEntitySet;
    FRequestContexts1 : TSPRequestContexts1EntitySet;
    FRoleAssignments : TSPRoleAssignmentsEntitySet;
    FRoleDefinitions : TSPRoleDefinitionsEntitySet;
    FSecurableObjects : TSPSecurableObjectsEntitySet;
    FServerSettingss : TSPServerSettingssEntitySet;
    FSharePointSharingSettingss : TSPSharePointSharingSettingssEntitySet;
    FDocumentSharingManagers : TSPDocumentSharingManagersEntitySet;
    FWebSharingManagers : TSPWebSharingManagersEntitySet;
    FSharingResults : TSPSharingResultsEntitySet;
    FSiteHealthSummarys : TSPSiteHealthSummarysEntitySet;
    FSiteUrls : TSPSiteUrlsEntitySet;
    FSocialAnnouncementManagers : TSPSocialAnnouncementManagersEntitySet;
    FSocialFeedManagers : TSPSocialFeedManagersEntitySet;
    FSocialFollowingManagers : TSPSocialFollowingManagersEntitySet;
    FSocialRestActors : TSPSocialRestActorsEntitySet;
    FSocialRestFeeds : TSPSocialRestFeedsEntitySet;
    FSocialRestFeedManagers : TSPSocialRestFeedManagersEntitySet;
    FSocialRestFollowingManagers : TSPSocialRestFollowingManagersEntitySet;
    FSocialRestThreads : TSPSocialRestThreadsEntitySet;
    FSolutionExporters : TSPSolutionExportersEntitySet;
    FSPAppLicenseManagers : TSPSPAppLicenseManagersEntitySet;
    FSPDataLeakagePreventionStatusInfos : TSPSPDataLeakagePreventionStatusInfosEntitySet;
    FTenantAppInstances : TSPTenantAppInstancesEntitySet;
    FTenantAppUtilitys : TSPTenantAppUtilitysEntitySet;
    FTenantSettingss : TSPTenantSettingssEntitySet;
    FThemeInfos : TSPThemeInfosEntitySet;
    FTimeZones : TSPTimeZonesEntitySet;
    FSyncTranslators : TSPSyncTranslatorsEntitySet;
    FTranslationJobs : TSPTranslationJobsEntitySet;
    FTranslationJobStatuss : TSPTranslationJobStatussEntitySet;
    FVariationsTranslationTimerJobs : TSPVariationsTranslationTimerJobsEntitySet;
    FTypeInformations : TSPTypeInformationsEntitySet;
    FClientPeoplePickerWebServiceInterfaces : TSPClientPeoplePickerWebServiceInterfacesEntitySet;
    FUsers1 : TSPUsers1EntitySet;
    FUserCustomActions : TSPUserCustomActionsEntitySet;
    FFollowedContents : TSPFollowedContentsEntitySet;
    FFollowedItemDatas : TSPFollowedItemDatasEntitySet;
    FHashTagCollections : TSPHashTagCollectionsEntitySet;
    FPeopleManagers : TSPPeopleManagersEntitySet;
    FPersonPropertiess : TSPPersonPropertiessEntitySet;
    FProfileImageStores : TSPProfileImageStoresEntitySet;
    FProfileLoaders : TSPProfileLoadersEntitySet;
    FUserProfiles : TSPUserProfilesEntitySet;
    FUserProfilePropertiesForUsers : TSPUserProfilePropertiesForUsersEntitySet;
    FUserResources : TSPUserResourcesEntitySet;
    FUserSolutions : TSPUserSolutionsEntitySet;
    FMarketplaceUtilitiess : TSPMarketplaceUtilitiessEntitySet;
    FUtilitys : TSPUtilitysEntitySet;
    FViews : TSPViewsEntitySet;
    FViewFieldCollections : TSPViewFieldCollectionsEntitySet;
    FWebInformations : TSPWebInformationsEntitySet;
    FLimitedWebPartManagers : TSPLimitedWebPartManagersEntitySet;
    FWebParts : TSPWebPartsEntitySet;
    FWebPartDefinitions : TSPWebPartDefinitionsEntitySet;
    FWebProxys : TSPWebProxysEntitySet;
    FWebTemplates : TSPWebTemplatesEntitySet;
    FSPWorkflows : TSPSPWorkflowsEntitySet;
    FSPWorkflowManagers : TSPSPWorkflowManagersEntitySet;
    FWorkflowAssociations : TSPWorkflowAssociationsEntitySet;
    FWorkflowTemplates : TSPWorkflowTemplatesEntitySet;
    FInteropServices : TSPInteropServicesEntitySet;
    FWorkflowDefinitions : TSPWorkflowDefinitionsEntitySet;
    FWorkflowDeploymentServices : TSPWorkflowDeploymentServicesEntitySet;
    FWorkflowInstances : TSPWorkflowInstancesEntitySet;
    FWorkflowInstanceServices : TSPWorkflowInstanceServicesEntitySet;
    FWorkflowMessagingServices : TSPWorkflowMessagingServicesEntitySet;
    FWorkflowServicesManagers : TSPWorkflowServicesManagersEntitySet;
    FWorkflowSubscriptions : TSPWorkflowSubscriptionsEntitySet;
    FWorkflowSubscriptionServices : TSPWorkflowSubscriptionServicesEntitySet;
    FBaseSessions : TSPBaseSessionsEntitySet;
    FBooleanCriterions : TSPBooleanCriterionsEntitySet;
    FCalloutInfos : TSPCalloutInfosEntitySet;
    FCreateRefreshJobResults : TSPCreateRefreshJobResultsEntitySet;
    FCustomAttributeFilters : TSPCustomAttributeFiltersEntitySet;
    FDashboardScriptExtensionInfos : TSPDashboardScriptExtensionInfosEntitySet;
    FDateRangeCriterions : TSPDateRangeCriterionsEntitySet;
    FExchangeUserSyncStates : TSPExchangeUserSyncStatesEntitySet;
    FLocations : TSPLocationsEntitySet;
    FLocationDisplaySettings : TSPLocationDisplaySettingsEntitySet;
    FLocationFilters : TSPLocationFiltersEntitySet;
    FLocationUpdateResults : TSPLocationUpdateResultsEntitySet;
    FNameCriterions : TSPNameCriterionsEntitySet;
    FNonTaskDataReadResults : TSPNonTaskDataReadResultsEntitySet;
    FOrderInfos : TSPOrderInfosEntitySet;
    FPersistedPropertiess : TSPPersistedPropertiessEntitySet;
    FProviderErrorInfos : TSPProviderErrorInfosEntitySet;
    FProviderRefreshStatuss : TSPProviderRefreshStatussEntitySet;
    FRefreshHealthInfos : TSPRefreshHealthInfosEntitySet;
    FRefreshHistorys : TSPRefreshHistorysEntitySet;
    FRefreshResults : TSPRefreshResultsEntitySet;
    FSortableSessionManagers : TSPSortableSessionManagersEntitySet;
    FSortableTaskQuerys : TSPSortableTaskQuerysEntitySet;
    FTasks1 : TSPTasks1EntitySet;
    FTaskFilters : TSPTaskFiltersEntitySet;
    FTaskQuerys : TSPTaskQuerysEntitySet;
    FTaskQueryByLocationResults : TSPTaskQueryByLocationResultsEntitySet;
    FTaskQueryResults : TSPTaskQueryResultsEntitySet;
    FTaskRefreshResults : TSPTaskRefreshResultsEntitySet;
    FTaskWriteResults : TSPTaskWriteResultsEntitySet;
    FUserOrderedSessionManagers : TSPUserOrderedSessionManagersEntitySet;
    FUserSettingss : TSPUserSettingssEntitySet;
    FUserSettingsManagers : TSPUserSettingsManagersEntitySet;
    FViewSelectionInfos : TSPViewSelectionInfosEntitySet;
    FSPOIdentityHelpers : TSPSPOIdentityHelpersEntitySet;
    FAppPrincipalIdentityProviders : TSPAppPrincipalIdentityProvidersEntitySet;
    FAppPrincipalManagers : TSPAppPrincipalManagersEntitySet;
    FAppPrincipalCredentials : TSPAppPrincipalCredentialsEntitySet;
    FAppPrincipalNames : TSPAppPrincipalNamesEntitySet;
    FDraftProjectResources1 : TSPDraftProjectResources1EntitySet;
    function GetApps : TSPAppsEntitySet;
    function GetFiles : TSPFilesEntitySet;
    function GetLists : TSPListsEntitySet;
    function GetMes : TSPMesEntitySet;
    function GetSites : TSPSitesEntitySet;
    function GetWebs : TSPWebsEntitySet;
    function GetAppStores : TSPAppStoresEntitySet;
    function GetConnectionSettingss : TSPConnectionSettingssEntitySet;
    function GetTargetApplications : TSPTargetApplicationsEntitySet;
    function GetTargetApplicationFields
                                    : TSPTargetApplicationFieldsEntitySet;
    function GetReputations : TSPReputationsEntitySet;
    function GetSearchServices : TSPSearchServicesEntitySet;
    function GetApps1 : TSPApps1EntitySet;
    function GetPointPublishingAdmins : TSPPointPublishingAdminsEntitySet;
    function GetDDIAdapters : TSPDDIAdaptersEntitySet;
    function GetSPOTenantWebTemplateCollections
                                            : TSPSPOTenantWebTemplateCollectionsEntitySet;
    function GetExternalUsers : TSPExternalUsersEntitySet;
    function GetGetExternalUsersResultss
                                     : TSPGetExternalUsersResultssEntitySet;
    function GetOffice365Tenants : TSPOffice365TenantsEntitySet;
    function GetRemoveExternalUsersResultss
                                        : TSPRemoveExternalUsersResultssEntitySet;
    function GetFeatureDefinitions : TSPFeatureDefinitionsEntitySet;
    function GetSPAnalyticsUsageServices
                                     : TSPSPAnalyticsUsageServicesEntitySet;
    function GetSPAppStateQueryJobDefinitions
                                          : TSPSPAppStateQueryJobDefinitionsEntitySet;
    function GetSPFarms : TSPSPFarmsEntitySet;
    function GetSPTenantAppInstanceDatas
                                     : TSPSPTenantAppInstanceDatasEntitySet;
    function GetSPWebApplications : TSPSPWebApplicationsEntitySet;
    function GetSPWebServices : TSPSPWebServicesEntitySet;
    function GetSPAppPrincipalInfos : TSPSPAppPrincipalInfosEntitySet;
    function GetDocumentCrawlLogs : TSPDocumentCrawlLogsEntitySet;
    function GetSignalStores : TSPSignalStoresEntitySet;
    function GetQueryPersonalizationDatas
                                      : TSPQueryPersonalizationDatasEntitySet;
    function GetRankingLabelings : TSPRankingLabelingsEntitySet;
    function GetReorderingRuleCollections
                                      : TSPReorderingRuleCollectionsEntitySet;
    function GetSortCollections : TSPSortCollectionsEntitySet;
    function GetStringCollections : TSPStringCollectionsEntitySet;
    function GetSPFlights : TSPSPFlightsEntitySet;
    function GetSPCorporateCuratedGallerySettingsBases
                                                   : TSPSPCorporateCuratedGallerySettingsBasesEntitySet;
    function GetSPCorporateCuratedGallerySettingsFactorys
                                                      : TSPSPCorporateCuratedGallerySettingsFactorysEntitySet;
    function GetSPMarketplaceSettingss : TSPSPMarketplaceSettingssEntitySet;
    function GetNavigationServiceRests : TSPNavigationServiceRestsEntitySet;
    function GetAppDetailss : TSPAppDetailssEntitySet;
    function GetAppIconInfos : TSPAppIconInfosEntitySet;
    function GetCollaborationMailboxs : TSPCollaborationMailboxsEntitySet;
    function GetCommunityModerations : TSPCommunityModerationsEntitySet;
    function GetMySiteRecommendationss : TSPMySiteRecommendationssEntitySet;
    function GetDocumentsSharedWithGroups
                                      : TSPDocumentsSharedWithGroupsEntitySet;
    function GetDocumentsSharedWithMes : TSPDocumentsSharedWithMesEntitySet;
    function GetDocumentsSharedWithPersons
                                       : TSPDocumentsSharedWithPersonsEntitySet;
    function GetMySiteDismissStatusTexts
                                     : TSPMySiteDismissStatusTextsEntitySet;
    function GetMySiteDocumentMoveUtilitys
                                       : TSPMySiteDocumentMoveUtilitysEntitySet;
    function GetMySiteLinkss : TSPMySiteLinkssEntitySet;
    function GetPromotedSitess : TSPPromotedSitessEntitySet;
    function GetSharedWithMeDocuments : TSPSharedWithMeDocumentsEntitySet;
    function GetRecentDocuments : TSPRecentDocumentsEntitySet;
    function GetModuleLinks : TSPModuleLinksEntitySet;
    function GetResourceManifestInformations
                                         : TSPResourceManifestInformationsEntitySet;
    function GetWacApis : TSPWacApisEntitySet;
    function GetEntityItems : TSPEntityItemsEntitySet;
    function GetEntityTypes : TSPEntityTypesEntitySet;
    function GetEntityTypeBases : TSPEntityTypeBasesEntitySet;
    function GetExternalEntityTypes : TSPExternalEntityTypesEntitySet;
    function GetFields : TSPFieldsEntitySet;
    function GetODataStoreContexts : TSPODataStoreContextsEntitySet;
    function GetRequestContexts : TSPRequestContextsEntitySet;
    function GetSqlStoreContexts : TSPSqlStoreContextsEntitySet;
    function GetStoreContextBases : TSPStoreContextBasesEntitySet;
    function GetFiles1 : TSPFiles1EntitySet;
    function GetFileServices : TSPFileServicesEntitySet;
    function GetFolders : TSPFoldersEntitySet;
    function GetMeFileServices : TSPMeFileServicesEntitySet;
    function GetDiagnosticss : TSPDiagnosticssEntitySet;
    function GetReportings : TSPReportingsEntitySet;
    function GetTaskflows : TSPTaskflowsEntitySet;
    function GetAssignments : TSPAssignmentsEntitySet;
    function GetBaseCalendarExceptions : TSPBaseCalendarExceptionsEntitySet;
    function GetCalendars : TSPCalendarsEntitySet;
    function GetCalendarExceptions : TSPCalendarExceptionsEntitySet;
    function GetCustomFields : TSPCustomFieldsEntitySet;
    function GetDraftAssignments : TSPDraftAssignmentsEntitySet;
    function GetDraftProjects : TSPDraftProjectsEntitySet;
    function GetDraftProjectResources : TSPDraftProjectResourcesEntitySet;
    function GetDraftTasks : TSPDraftTasksEntitySet;
    function GetDraftTaskLinks : TSPDraftTaskLinksEntitySet;
    function GetEnterpriseProjectTypes : TSPEnterpriseProjectTypesEntitySet;
    function GetEnterpriseResources : TSPEnterpriseResourcesEntitySet;
    function GetEntityTypes1 : TSPEntityTypes1EntitySet;
    function GetEntityTypess : TSPEntityTypessEntitySet;
    function GetEvents : TSPEventsEntitySet;
    function GetEventHandlers : TSPEventHandlersEntitySet;
    function GetLookupCosts : TSPLookupCostsEntitySet;
    function GetLookupDates : TSPLookupDatesEntitySet;
    function GetLookupDurations : TSPLookupDurationsEntitySet;
    function GetLookupEntrys : TSPLookupEntrysEntitySet;
    function GetLookupNumbers : TSPLookupNumbersEntitySet;
    function GetLookupTables : TSPLookupTablesEntitySet;
    function GetLookupTabless : TSPLookupTablessEntitySet;
    function GetLookupTexts : TSPLookupTextsEntitySet;
    function GetPhases : TSPPhasesEntitySet;
    function GetPlanAssignments : TSPPlanAssignmentsEntitySet;
    function GetPlanAssignmentIntervals
                                    : TSPPlanAssignmentIntervalsEntitySet;
    function GetProjects : TSPProjectsEntitySet;
    function GetProjectDetailPages : TSPProjectDetailPagesEntitySet;
    function GetProjectResources : TSPProjectResourcesEntitySet;
    function GetProjectServers : TSPProjectServersEntitySet;
    function GetProjectServerDatas : TSPProjectServerDatasEntitySet;
    function GetPublishedAssignments : TSPPublishedAssignmentsEntitySet;
    function GetPublishedProjects : TSPPublishedProjectsEntitySet;
    function GetPublishedProjectResources
                                      : TSPPublishedProjectResourcesEntitySet;
    function GetPublishedTasks : TSPPublishedTasksEntitySet;
    function GetPublishedTaskLinks : TSPPublishedTaskLinksEntitySet;
    function GetQueueJobs : TSPQueueJobsEntitySet;
    function GetResourceCalendarExceptions
                                       : TSPResourceCalendarExceptionsEntitySet;
    function GetResourcePlans : TSPResourcePlansEntitySet;
    function GetServiceStatuss : TSPServiceStatussEntitySet;
    function GetStages : TSPStagesEntitySet;
    function GetStageCustomFields : TSPStageCustomFieldsEntitySet;
    function GetStageDetailPages : TSPStageDetailPagesEntitySet;
    function GetStatusAssignments : TSPStatusAssignmentsEntitySet;
    function GetStatusTasks : TSPStatusTasksEntitySet;
    function GetTasks : TSPTasksEntitySet;
    function GetTaskLinks : TSPTaskLinksEntitySet;
    function GetTaskServiceOdataEndpoints
                                      : TSPTaskServiceOdataEndpointsEntitySet;
    function GetTimePhases : TSPTimePhasesEntitySet;
    function GetTimeSheets : TSPTimeSheetsEntitySet;
    function GetTimeSheetLines : TSPTimeSheetLinesEntitySet;
    function GetTimeSheetPeriods : TSPTimeSheetPeriodsEntitySet;
    function GetTimeSheetWorks : TSPTimeSheetWorksEntitySet;
    function GetWorkflowActivitiess : TSPWorkflowActivitiessEntitySet;
    function GetWorkflowDesigners : TSPWorkflowDesignersEntitySet;
    function GetWorkflowDesignerFields : TSPWorkflowDesignerFieldsEntitySet;
    function GetAccessRequestss : TSPAccessRequestssEntitySet;
    function GetAlternateUrls : TSPAlternateUrlsEntitySet;
    function GetAnalyticsUsageEntrys : TSPAnalyticsUsageEntrysEntitySet;
    function GetApiMetadatas : TSPApiMetadatasEntitySet;
    function GetApps12 : TSPApps12EntitySet;
    function GetAppCatalogs : TSPAppCatalogsEntitySet;
    function GetAppContextSites : TSPAppContextSitesEntitySet;
    function GetAppInstances : TSPAppInstancesEntitySet;
    function GetAppInstanceErrorDetailss
                                     : TSPAppInstanceErrorDetailssEntitySet;
    function GetAppTiles : TSPAppTilesEntitySet;
    function GetAttachments : TSPAttachmentsEntitySet;
    function GetAudits : TSPAuditsEntitySet;
    function GetAppBdcCatalogs : TSPAppBdcCatalogsEntitySet;
    function GetEntitys : TSPEntitysEntitySet;
    function GetEntityFields : TSPEntityFieldsEntitySet;
    function GetEntityIdentifiers : TSPEntityIdentifiersEntitySet;
    function GetEntityViews : TSPEntityViewsEntitySet;
    function GetFilters : TSPFiltersEntitySet;
    function GetExternalSubscriptionStores
                                       : TSPExternalSubscriptionStoresEntitySet;
    function GetLobSystems : TSPLobSystemsEntitySet;
    function GetLobSystemInstances : TSPLobSystemInstancesEntitySet;
    function GetMethodExecutionResults : TSPMethodExecutionResultsEntitySet;
    function GetEntityFieldValueDictionarys
                                        : TSPEntityFieldValueDictionarysEntitySet;
    function GetEntityIdentitys : TSPEntityIdentitysEntitySet;
    function GetEntityInstances : TSPEntityInstancesEntitySet;
    function GetNotificationCallbacks : TSPNotificationCallbacksEntitySet;
    function GetSubscriptions : TSPSubscriptionsEntitySet;
    function GetTypeDescriptors : TSPTypeDescriptorsEntitySet;
    function GetChanges : TSPChangesEntitySet;
    function GetCompatibilityRanges : TSPCompatibilityRangesEntitySet;
    function GetPolicyEvaluationInfos : TSPPolicyEvaluationInfosEntitySet;
    function GetSPPolicyStoreProxys : TSPSPPolicyStoreProxysEntitySet;
    function GetContentTypes : TSPContentTypesEntitySet;
    function GetCreatablesInfos : TSPCreatablesInfosEntitySet;
    function GetDirectorySessions : TSPDirectorySessionsEntitySet;
    function GetGroups : TSPGroupsEntitySet;
    function GetGroupAndUserStatuss : TSPGroupAndUserStatussEntitySet;
    function GetLinkCollections : TSPLinkCollectionsEntitySet;
    function GetMembershipResults : TSPMembershipResultsEntitySet;
    function GetMembersInfos : TSPMembersInfosEntitySet;
    function GetMyGroupsResults : TSPMyGroupsResultsEntitySet;
    function GetPropertys : TSPPropertysEntitySet;
    function GetPropertyDictionarys : TSPPropertyDictionarysEntitySet;
    function GetSharePointDirectoryProviders
                                         : TSPSharePointDirectoryProvidersEntitySet;
    function GetSPHelpers : TSPSPHelpersEntitySet;
    function GetUsers : TSPUsersEntitySet;
    function GetUserRequestSchemas : TSPUserRequestSchemasEntitySet;
    function GetDlpPolicyTips : TSPDlpPolicyTipsEntitySet;
    function GetEventReceiverDefinitions
                                     : TSPEventReceiverDefinitionsEntitySet;
    function GetFeatures : TSPFeaturesEntitySet;
    function GetFields1 : TSPFields1EntitySet;
    function GetFieldLinks : TSPFieldLinksEntitySet;
    function GetFieldStringValuess : TSPFieldStringValuessEntitySet;
    function GetFiles12 : TSPFiles12EntitySet;
    function GetFileVersions : TSPFileVersionsEntitySet;
    function GetFolders1 : TSPFolders1EntitySet;
    function GetForms : TSPFormsEntitySet;
    function GetGroups1 : TSPGroups1EntitySet;
    function GetInformationRightsManagementSettingss
                                                 : TSPInformationRightsManagementSettingssEntitySet;
    function GetListItems : TSPListItemsEntitySet;
    function GetListTemplates : TSPListTemplatesEntitySet;
    function GetMicrofeedAttachmentStores
                                      : TSPMicrofeedAttachmentStoresEntitySet;
    function GetMicrofeedDatas : TSPMicrofeedDatasEntitySet;
    function GetMicrofeedManagers : TSPMicrofeedManagersEntitySet;
    function GetMicrofeedPostDefinitionManagers
                                            : TSPMicrofeedPostDefinitionManagersEntitySet;
    function GetMicrofeedPostOptionCollections
                                           : TSPMicrofeedPostOptionCollectionsEntitySet;
    function GetMicrofeedStores : TSPMicrofeedStoresEntitySet;
    function GetMountedFolderInfos : TSPMountedFolderInfosEntitySet;
    function GetMountPoints : TSPMountPointsEntitySet;
    function GetMountPointInfos : TSPMountPointInfosEntitySet;
    function GetMoveCopyUtils : TSPMoveCopyUtilsEntitySet;
    function GetNavigations : TSPNavigationsEntitySet;
    function GetNavigationNodes : TSPNavigationNodesEntitySet;
    function GetNativeClients : TSPNativeClientsEntitySet;
    function GetObjectSharingInformations
                                      : TSPObjectSharingInformationsEntitySet;
    function GetObjectSharingInformationUsers
                                          : TSPObjectSharingInformationUsersEntitySet;
    function GetObjectSharingSettingss : TSPObjectSharingSettingssEntitySet;
    function GetClickManagers : TSPClickManagersEntitySet;
    function GetPickerSettingss : TSPPickerSettingssEntitySet;
    function GetPrincipals : TSPPrincipalsEntitySet;
    function GetPropertyValuess : TSPPropertyValuessEntitySet;
    function GetPersonMagazines : TSPPersonMagazinesEntitySet;
    function GetPointPublishingDocPropss
                                     : TSPPointPublishingDocPropssEntitySet;
    function GetPointPublishingMagazinePropss
                                          : TSPPointPublishingMagazinePropssEntitySet;
    function GetPointPublishingPosts : TSPPointPublishingPostsEntitySet;
    function GetPointPublishingPostServiceManagers
                                               : TSPPointPublishingPostServiceManagersEntitySet;
    function GetPointPublishingSiteManagers
                                        : TSPPointPublishingSiteManagersEntitySet;
    function GetPointPublishingSiteStatuss
                                       : TSPPointPublishingSiteStatussEntitySet;
    function GetPointPublishingUsers : TSPPointPublishingUsersEntitySet;
    function GetSearchs : TSPSearchsEntitySet;
    function GetSpotlightChannels : TSPSpotlightChannelsEntitySet;
    function GetSpotlightVideos : TSPSpotlightVideosEntitySet;
    function GetVideoChannels : TSPVideoChannelsEntitySet;
    function GetVideoItems : TSPVideoItemsEntitySet;
    function GetVideoPermissionGroups : TSPVideoPermissionGroupsEntitySet;
    function GetVideoServiceDiscoverers
                                    : TSPVideoServiceDiscoverersEntitySet;
    function GetVideoServiceManagers : TSPVideoServiceManagersEntitySet;
    function GetPushNotificationSubscribers
                                        : TSPPushNotificationSubscribersEntitySet;
    function GetRecycleBinItems : TSPRecycleBinItemsEntitySet;
    function GetRegionalSettingss : TSPRegionalSettingssEntitySet;
    function GetRelatedFields : TSPRelatedFieldsEntitySet;
    function GetRelatedItemManagers : TSPRelatedItemManagersEntitySet;
    function GetRemoteWebs : TSPRemoteWebsEntitySet;
    function GetRequestContexts1 : TSPRequestContexts1EntitySet;
    function GetRoleAssignments : TSPRoleAssignmentsEntitySet;
    function GetRoleDefinitions : TSPRoleDefinitionsEntitySet;
    function GetSecurableObjects : TSPSecurableObjectsEntitySet;
    function GetServerSettingss : TSPServerSettingssEntitySet;
    function GetSharePointSharingSettingss
                                       : TSPSharePointSharingSettingssEntitySet;
    function GetDocumentSharingManagers
                                    : TSPDocumentSharingManagersEntitySet;
    function GetWebSharingManagers : TSPWebSharingManagersEntitySet;
    function GetSharingResults : TSPSharingResultsEntitySet;
    function GetSiteHealthSummarys : TSPSiteHealthSummarysEntitySet;
    function GetSiteUrls : TSPSiteUrlsEntitySet;
    function GetSocialAnnouncementManagers
                                       : TSPSocialAnnouncementManagersEntitySet;
    function GetSocialFeedManagers : TSPSocialFeedManagersEntitySet;
    function GetSocialFollowingManagers
                                    : TSPSocialFollowingManagersEntitySet;
    function GetSocialRestActors : TSPSocialRestActorsEntitySet;
    function GetSocialRestFeeds : TSPSocialRestFeedsEntitySet;
    function GetSocialRestFeedManagers : TSPSocialRestFeedManagersEntitySet;
    function GetSocialRestFollowingManagers
                                        : TSPSocialRestFollowingManagersEntitySet;
    function GetSocialRestThreads : TSPSocialRestThreadsEntitySet;
    function GetSolutionExporters : TSPSolutionExportersEntitySet;
    function GetSPAppLicenseManagers : TSPSPAppLicenseManagersEntitySet;
    function GetSPDataLeakagePreventionStatusInfos
                                               : TSPSPDataLeakagePreventionStatusInfosEntitySet;
    function GetTenantAppInstances : TSPTenantAppInstancesEntitySet;
    function GetTenantAppUtilitys : TSPTenantAppUtilitysEntitySet;
    function GetTenantSettingss : TSPTenantSettingssEntitySet;
    function GetThemeInfos : TSPThemeInfosEntitySet;
    function GetTimeZones : TSPTimeZonesEntitySet;
    function GetSyncTranslators : TSPSyncTranslatorsEntitySet;
    function GetTranslationJobs : TSPTranslationJobsEntitySet;
    function GetTranslationJobStatuss : TSPTranslationJobStatussEntitySet;
    function GetVariationsTranslationTimerJobs
                                           : TSPVariationsTranslationTimerJobsEntitySet;
    function GetTypeInformations : TSPTypeInformationsEntitySet;
    function GetClientPeoplePickerWebServiceInterfaces
                                                   : TSPClientPeoplePickerWebServiceInterfacesEntitySet;
    function GetUsers1 : TSPUsers1EntitySet;
    function GetUserCustomActions : TSPUserCustomActionsEntitySet;
    function GetFollowedContents : TSPFollowedContentsEntitySet;
    function GetFollowedItemDatas : TSPFollowedItemDatasEntitySet;
    function GetHashTagCollections : TSPHashTagCollectionsEntitySet;
    function GetPeopleManagers : TSPPeopleManagersEntitySet;
    function GetPersonPropertiess : TSPPersonPropertiessEntitySet;
    function GetProfileImageStores : TSPProfileImageStoresEntitySet;
    function GetProfileLoaders : TSPProfileLoadersEntitySet;
    function GetUserProfiles : TSPUserProfilesEntitySet;
    function GetUserProfilePropertiesForUsers
                                          : TSPUserProfilePropertiesForUsersEntitySet;
    function GetUserResources : TSPUserResourcesEntitySet;
    function GetUserSolutions : TSPUserSolutionsEntitySet;
    function GetMarketplaceUtilitiess : TSPMarketplaceUtilitiessEntitySet;
    function GetUtilitys : TSPUtilitysEntitySet;
    function GetViews : TSPViewsEntitySet;
    function GetViewFieldCollections : TSPViewFieldCollectionsEntitySet;
    function GetWebInformations : TSPWebInformationsEntitySet;
    function GetLimitedWebPartManagers : TSPLimitedWebPartManagersEntitySet;
    function GetWebParts : TSPWebPartsEntitySet;
    function GetWebPartDefinitions : TSPWebPartDefinitionsEntitySet;
    function GetWebProxys : TSPWebProxysEntitySet;
    function GetWebTemplates : TSPWebTemplatesEntitySet;
    function GetSPWorkflows : TSPSPWorkflowsEntitySet;
    function GetSPWorkflowManagers : TSPSPWorkflowManagersEntitySet;
    function GetWorkflowAssociations : TSPWorkflowAssociationsEntitySet;
    function GetWorkflowTemplates : TSPWorkflowTemplatesEntitySet;
    function GetInteropServices : TSPInteropServicesEntitySet;
    function GetWorkflowDefinitions : TSPWorkflowDefinitionsEntitySet;
    function GetWorkflowDeploymentServices
                                       : TSPWorkflowDeploymentServicesEntitySet;
    function GetWorkflowInstances : TSPWorkflowInstancesEntitySet;
    function GetWorkflowInstanceServices
                                     : TSPWorkflowInstanceServicesEntitySet;
    function GetWorkflowMessagingServices
                                      : TSPWorkflowMessagingServicesEntitySet;
    function GetWorkflowServicesManagers
                                     : TSPWorkflowServicesManagersEntitySet;
    function GetWorkflowSubscriptions : TSPWorkflowSubscriptionsEntitySet;
    function GetWorkflowSubscriptionServices
                                         : TSPWorkflowSubscriptionServicesEntitySet;
    function GetBaseSessions : TSPBaseSessionsEntitySet;
    function GetBooleanCriterions : TSPBooleanCriterionsEntitySet;
    function GetCalloutInfos : TSPCalloutInfosEntitySet;
    function GetCreateRefreshJobResults
                                    : TSPCreateRefreshJobResultsEntitySet;
    function GetCustomAttributeFilters : TSPCustomAttributeFiltersEntitySet;
    function GetDashboardScriptExtensionInfos
                                          : TSPDashboardScriptExtensionInfosEntitySet;
    function GetDateRangeCriterions : TSPDateRangeCriterionsEntitySet;
    function GetExchangeUserSyncStates : TSPExchangeUserSyncStatesEntitySet;
    function GetLocations : TSPLocationsEntitySet;
    function GetLocationDisplaySettings
                                    : TSPLocationDisplaySettingsEntitySet;
    function GetLocationFilters : TSPLocationFiltersEntitySet;
    function GetLocationUpdateResults : TSPLocationUpdateResultsEntitySet;
    function GetNameCriterions : TSPNameCriterionsEntitySet;
    function GetNonTaskDataReadResults : TSPNonTaskDataReadResultsEntitySet;
    function GetOrderInfos : TSPOrderInfosEntitySet;
    function GetPersistedPropertiess : TSPPersistedPropertiessEntitySet;
    function GetProviderErrorInfos : TSPProviderErrorInfosEntitySet;
    function GetProviderRefreshStatuss : TSPProviderRefreshStatussEntitySet;
    function GetRefreshHealthInfos : TSPRefreshHealthInfosEntitySet;
    function GetRefreshHistorys : TSPRefreshHistorysEntitySet;
    function GetRefreshResults : TSPRefreshResultsEntitySet;
    function GetSortableSessionManagers
                                    : TSPSortableSessionManagersEntitySet;
    function GetSortableTaskQuerys : TSPSortableTaskQuerysEntitySet;
    function GetTasks1 : TSPTasks1EntitySet;
    function GetTaskFilters : TSPTaskFiltersEntitySet;
    function GetTaskQuerys : TSPTaskQuerysEntitySet;
    function GetTaskQueryByLocationResults
                                       : TSPTaskQueryByLocationResultsEntitySet;
    function GetTaskQueryResults : TSPTaskQueryResultsEntitySet;
    function GetTaskRefreshResults : TSPTaskRefreshResultsEntitySet;
    function GetTaskWriteResults : TSPTaskWriteResultsEntitySet;
    function GetUserOrderedSessionManagers
                                       : TSPUserOrderedSessionManagersEntitySet;
    function GetUserSettingss : TSPUserSettingssEntitySet;
    function GetUserSettingsManagers : TSPUserSettingsManagersEntitySet;
    function GetViewSelectionInfos : TSPViewSelectionInfosEntitySet;
    function GetSPOIdentityHelpers : TSPSPOIdentityHelpersEntitySet;
    function GetAppPrincipalIdentityProviders
                                          : TSPAppPrincipalIdentityProvidersEntitySet;
    function GetAppPrincipalManagers : TSPAppPrincipalManagersEntitySet;
    function GetAppPrincipalCredentials
                                    : TSPAppPrincipalCredentialsEntitySet;
    function GetAppPrincipalNames : TSPAppPrincipalNamesEntitySet;
    function GetDraftProjectResources1 : TSPDraftProjectResources1EntitySet;
  public
    class function ObjectRestKind : String;  Override;
    function CreateNewApps : TSPAppsEntitySet;
    function CreateNewFiles : TSPFilesEntitySet;
    function CreateNewLists : TSPListsEntitySet;
    function CreateNewMes : TSPMesEntitySet;
    function CreateNewSites : TSPSitesEntitySet;
    function CreateNewWebs : TSPWebsEntitySet;
    function CreateNewAppStores : TSPAppStoresEntitySet;
    function CreateNewConnectionSettingss : TSPConnectionSettingssEntitySet;
    function CreateNewTargetApplications : TSPTargetApplicationsEntitySet;
    function CreateNewTargetApplicationFields
                                          : TSPTargetApplicationFieldsEntitySet;
    function CreateNewReputations : TSPReputationsEntitySet;
    function CreateNewSearchServices : TSPSearchServicesEntitySet;
    function CreateNewApps1 : TSPApps1EntitySet;
    function CreateNewPointPublishingAdmins
                                        : TSPPointPublishingAdminsEntitySet;
    function CreateNewDDIAdapters : TSPDDIAdaptersEntitySet;
    function CreateNewSPOTenantWebTemplateCollections
                                                  : TSPSPOTenantWebTemplateCollectionsEntitySet;
    function CreateNewExternalUsers : TSPExternalUsersEntitySet;
    function CreateNewGetExternalUsersResultss
                                           : TSPGetExternalUsersResultssEntitySet;
    function CreateNewOffice365Tenants : TSPOffice365TenantsEntitySet;
    function CreateNewRemoveExternalUsersResultss
                                              : TSPRemoveExternalUsersResultssEntitySet;
    function CreateNewFeatureDefinitions : TSPFeatureDefinitionsEntitySet;
    function CreateNewSPAnalyticsUsageServices
                                           : TSPSPAnalyticsUsageServicesEntitySet;
    function CreateNewSPAppStateQueryJobDefinitions
                                                : TSPSPAppStateQueryJobDefinitionsEntitySet;
    function CreateNewSPFarms : TSPSPFarmsEntitySet;
    function CreateNewSPTenantAppInstanceDatas
                                           : TSPSPTenantAppInstanceDatasEntitySet;
    function CreateNewSPWebApplications : TSPSPWebApplicationsEntitySet;
    function CreateNewSPWebServices : TSPSPWebServicesEntitySet;
    function CreateNewSPAppPrincipalInfos : TSPSPAppPrincipalInfosEntitySet;
    function CreateNewDocumentCrawlLogs : TSPDocumentCrawlLogsEntitySet;
    function CreateNewSignalStores : TSPSignalStoresEntitySet;
    function CreateNewQueryPersonalizationDatas
                                            : TSPQueryPersonalizationDatasEntitySet;
    function CreateNewRankingLabelings : TSPRankingLabelingsEntitySet;
    function CreateNewReorderingRuleCollections
                                            : TSPReorderingRuleCollectionsEntitySet;
    function CreateNewSortCollections : TSPSortCollectionsEntitySet;
    function CreateNewStringCollections : TSPStringCollectionsEntitySet;
    function CreateNewSPFlights : TSPSPFlightsEntitySet;
    function CreateNewSPCorporateCuratedGallerySettingsBases
                                                         : TSPSPCorporateCuratedGallerySettingsBasesEntitySet;
    function CreateNewSPCorporateCuratedGallerySettingsFactorys
                                                            : TSPSPCorporateCuratedGallerySettingsFactorysEntitySet;
    function CreateNewSPMarketplaceSettingss
                                         : TSPSPMarketplaceSettingssEntitySet;
    function CreateNewNavigationServiceRests
                                         : TSPNavigationServiceRestsEntitySet;
    function CreateNewAppDetailss : TSPAppDetailssEntitySet;
    function CreateNewAppIconInfos : TSPAppIconInfosEntitySet;
    function CreateNewCollaborationMailboxs
                                        : TSPCollaborationMailboxsEntitySet;
    function CreateNewCommunityModerations
                                       : TSPCommunityModerationsEntitySet;
    function CreateNewMySiteRecommendationss
                                         : TSPMySiteRecommendationssEntitySet;
    function CreateNewDocumentsSharedWithGroups
                                            : TSPDocumentsSharedWithGroupsEntitySet;
    function CreateNewDocumentsSharedWithMes
                                         : TSPDocumentsSharedWithMesEntitySet;
    function CreateNewDocumentsSharedWithPersons
                                             : TSPDocumentsSharedWithPersonsEntitySet;
    function CreateNewMySiteDismissStatusTexts
                                           : TSPMySiteDismissStatusTextsEntitySet;
    function CreateNewMySiteDocumentMoveUtilitys
                                             : TSPMySiteDocumentMoveUtilitysEntitySet;
    function CreateNewMySiteLinkss : TSPMySiteLinkssEntitySet;
    function CreateNewPromotedSitess : TSPPromotedSitessEntitySet;
    function CreateNewSharedWithMeDocuments
                                        : TSPSharedWithMeDocumentsEntitySet;
    function CreateNewRecentDocuments : TSPRecentDocumentsEntitySet;
    function CreateNewModuleLinks : TSPModuleLinksEntitySet;
    function CreateNewResourceManifestInformations
                                               : TSPResourceManifestInformationsEntitySet;
    function CreateNewWacApis : TSPWacApisEntitySet;
    function CreateNewEntityItems : TSPEntityItemsEntitySet;
    function CreateNewEntityTypes : TSPEntityTypesEntitySet;
    function CreateNewEntityTypeBases : TSPEntityTypeBasesEntitySet;
    function CreateNewExternalEntityTypes : TSPExternalEntityTypesEntitySet;
    function CreateNewFields : TSPFieldsEntitySet;
    function CreateNewODataStoreContexts : TSPODataStoreContextsEntitySet;
    function CreateNewRequestContexts : TSPRequestContextsEntitySet;
    function CreateNewSqlStoreContexts : TSPSqlStoreContextsEntitySet;
    function CreateNewStoreContextBases : TSPStoreContextBasesEntitySet;
    function CreateNewFiles1 : TSPFiles1EntitySet;
    function CreateNewFileServices : TSPFileServicesEntitySet;
    function CreateNewFolders : TSPFoldersEntitySet;
    function CreateNewMeFileServices : TSPMeFileServicesEntitySet;
    function CreateNewDiagnosticss : TSPDiagnosticssEntitySet;
    function CreateNewReportings : TSPReportingsEntitySet;
    function CreateNewTaskflows : TSPTaskflowsEntitySet;
    function CreateNewAssignments : TSPAssignmentsEntitySet;
    function CreateNewBaseCalendarExceptions
                                         : TSPBaseCalendarExceptionsEntitySet;
    function CreateNewCalendars : TSPCalendarsEntitySet;
    function CreateNewCalendarExceptions : TSPCalendarExceptionsEntitySet;
    function CreateNewCustomFields : TSPCustomFieldsEntitySet;
    function CreateNewDraftAssignments : TSPDraftAssignmentsEntitySet;
    function CreateNewDraftProjects : TSPDraftProjectsEntitySet;
    function CreateNewDraftProjectResources
                                        : TSPDraftProjectResourcesEntitySet;
    function CreateNewDraftTasks : TSPDraftTasksEntitySet;
    function CreateNewDraftTaskLinks : TSPDraftTaskLinksEntitySet;
    function CreateNewEnterpriseProjectTypes
                                         : TSPEnterpriseProjectTypesEntitySet;
    function CreateNewEnterpriseResources : TSPEnterpriseResourcesEntitySet;
    function CreateNewEntityTypes1 : TSPEntityTypes1EntitySet;
    function CreateNewEntityTypess : TSPEntityTypessEntitySet;
    function CreateNewEvents : TSPEventsEntitySet;
    function CreateNewEventHandlers : TSPEventHandlersEntitySet;
    function CreateNewLookupCosts : TSPLookupCostsEntitySet;
    function CreateNewLookupDates : TSPLookupDatesEntitySet;
    function CreateNewLookupDurations : TSPLookupDurationsEntitySet;
    function CreateNewLookupEntrys : TSPLookupEntrysEntitySet;
    function CreateNewLookupNumbers : TSPLookupNumbersEntitySet;
    function CreateNewLookupTables : TSPLookupTablesEntitySet;
    function CreateNewLookupTabless : TSPLookupTablessEntitySet;
    function CreateNewLookupTexts : TSPLookupTextsEntitySet;
    function CreateNewPhases : TSPPhasesEntitySet;
    function CreateNewPlanAssignments : TSPPlanAssignmentsEntitySet;
    function CreateNewPlanAssignmentIntervals
                                          : TSPPlanAssignmentIntervalsEntitySet;
    function CreateNewProjects : TSPProjectsEntitySet;
    function CreateNewProjectDetailPages : TSPProjectDetailPagesEntitySet;
    function CreateNewProjectResources : TSPProjectResourcesEntitySet;
    function CreateNewProjectServers : TSPProjectServersEntitySet;
    function CreateNewProjectServerDatas : TSPProjectServerDatasEntitySet;
    function CreateNewPublishedAssignments
                                       : TSPPublishedAssignmentsEntitySet;
    function CreateNewPublishedProjects : TSPPublishedProjectsEntitySet;
    function CreateNewPublishedProjectResources
                                            : TSPPublishedProjectResourcesEntitySet;
    function CreateNewPublishedTasks : TSPPublishedTasksEntitySet;
    function CreateNewPublishedTaskLinks : TSPPublishedTaskLinksEntitySet;
    function CreateNewQueueJobs : TSPQueueJobsEntitySet;
    function CreateNewResourceCalendarExceptions
                                             : TSPResourceCalendarExceptionsEntitySet;
    function CreateNewResourcePlans : TSPResourcePlansEntitySet;
    function CreateNewServiceStatuss : TSPServiceStatussEntitySet;
    function CreateNewStages : TSPStagesEntitySet;
    function CreateNewStageCustomFields : TSPStageCustomFieldsEntitySet;
    function CreateNewStageDetailPages : TSPStageDetailPagesEntitySet;
    function CreateNewStatusAssignments : TSPStatusAssignmentsEntitySet;
    function CreateNewStatusTasks : TSPStatusTasksEntitySet;
    function CreateNewTasks : TSPTasksEntitySet;
    function CreateNewTaskLinks : TSPTaskLinksEntitySet;
    function CreateNewTaskServiceOdataEndpoints
                                            : TSPTaskServiceOdataEndpointsEntitySet;
    function CreateNewTimePhases : TSPTimePhasesEntitySet;
    function CreateNewTimeSheets : TSPTimeSheetsEntitySet;
    function CreateNewTimeSheetLines : TSPTimeSheetLinesEntitySet;
    function CreateNewTimeSheetPeriods : TSPTimeSheetPeriodsEntitySet;
    function CreateNewTimeSheetWorks : TSPTimeSheetWorksEntitySet;
    function CreateNewWorkflowActivitiess : TSPWorkflowActivitiessEntitySet;
    function CreateNewWorkflowDesigners : TSPWorkflowDesignersEntitySet;
    function CreateNewWorkflowDesignerFields
                                         : TSPWorkflowDesignerFieldsEntitySet;
    function CreateNewAccessRequestss : TSPAccessRequestssEntitySet;
    function CreateNewAlternateUrls : TSPAlternateUrlsEntitySet;
    function CreateNewAnalyticsUsageEntrys
                                       : TSPAnalyticsUsageEntrysEntitySet;
    function CreateNewApiMetadatas : TSPApiMetadatasEntitySet;
    function CreateNewApps12 : TSPApps12EntitySet;
    function CreateNewAppCatalogs : TSPAppCatalogsEntitySet;
    function CreateNewAppContextSites : TSPAppContextSitesEntitySet;
    function CreateNewAppInstances : TSPAppInstancesEntitySet;
    function CreateNewAppInstanceErrorDetailss
                                           : TSPAppInstanceErrorDetailssEntitySet;
    function CreateNewAppTiles : TSPAppTilesEntitySet;
    function CreateNewAttachments : TSPAttachmentsEntitySet;
    function CreateNewAudits : TSPAuditsEntitySet;
    function CreateNewAppBdcCatalogs : TSPAppBdcCatalogsEntitySet;
    function CreateNewEntitys : TSPEntitysEntitySet;
    function CreateNewEntityFields : TSPEntityFieldsEntitySet;
    function CreateNewEntityIdentifiers : TSPEntityIdentifiersEntitySet;
    function CreateNewEntityViews : TSPEntityViewsEntitySet;
    function CreateNewFilters : TSPFiltersEntitySet;
    function CreateNewExternalSubscriptionStores
                                             : TSPExternalSubscriptionStoresEntitySet;
    function CreateNewLobSystems : TSPLobSystemsEntitySet;
    function CreateNewLobSystemInstances : TSPLobSystemInstancesEntitySet;
    function CreateNewMethodExecutionResults
                                         : TSPMethodExecutionResultsEntitySet;
    function CreateNewEntityFieldValueDictionarys
                                              : TSPEntityFieldValueDictionarysEntitySet;
    function CreateNewEntityIdentitys : TSPEntityIdentitysEntitySet;
    function CreateNewEntityInstances : TSPEntityInstancesEntitySet;
    function CreateNewNotificationCallbacks
                                        : TSPNotificationCallbacksEntitySet;
    function CreateNewSubscriptions : TSPSubscriptionsEntitySet;
    function CreateNewTypeDescriptors : TSPTypeDescriptorsEntitySet;
    function CreateNewChanges : TSPChangesEntitySet;
    function CreateNewCompatibilityRanges : TSPCompatibilityRangesEntitySet;
    function CreateNewPolicyEvaluationInfos
                                        : TSPPolicyEvaluationInfosEntitySet;
    function CreateNewSPPolicyStoreProxys : TSPSPPolicyStoreProxysEntitySet;
    function CreateNewContentTypes : TSPContentTypesEntitySet;
    function CreateNewCreatablesInfos : TSPCreatablesInfosEntitySet;
    function CreateNewDirectorySessions : TSPDirectorySessionsEntitySet;
    function CreateNewGroups : TSPGroupsEntitySet;
    function CreateNewGroupAndUserStatuss : TSPGroupAndUserStatussEntitySet;
    function CreateNewLinkCollections : TSPLinkCollectionsEntitySet;
    function CreateNewMembershipResults : TSPMembershipResultsEntitySet;
    function CreateNewMembersInfos : TSPMembersInfosEntitySet;
    function CreateNewMyGroupsResults : TSPMyGroupsResultsEntitySet;
    function CreateNewPropertys : TSPPropertysEntitySet;
    function CreateNewPropertyDictionarys : TSPPropertyDictionarysEntitySet;
    function CreateNewSharePointDirectoryProviders
                                               : TSPSharePointDirectoryProvidersEntitySet;
    function CreateNewSPHelpers : TSPSPHelpersEntitySet;
    function CreateNewUsers : TSPUsersEntitySet;
    function CreateNewUserRequestSchemas : TSPUserRequestSchemasEntitySet;
    function CreateNewDlpPolicyTips : TSPDlpPolicyTipsEntitySet;
    function CreateNewEventReceiverDefinitions
                                           : TSPEventReceiverDefinitionsEntitySet;
    function CreateNewFeatures : TSPFeaturesEntitySet;
    function CreateNewFields1 : TSPFields1EntitySet;
    function CreateNewFieldLinks : TSPFieldLinksEntitySet;
    function CreateNewFieldStringValuess : TSPFieldStringValuessEntitySet;
    function CreateNewFiles12 : TSPFiles12EntitySet;
    function CreateNewFileVersions : TSPFileVersionsEntitySet;
    function CreateNewFolders1 : TSPFolders1EntitySet;
    function CreateNewForms : TSPFormsEntitySet;
    function CreateNewGroups1 : TSPGroups1EntitySet;
    function CreateNewInformationRightsManagementSettingss
                                                       : TSPInformationRightsManagementSettingssEntitySet;
    function CreateNewListItems : TSPListItemsEntitySet;
    function CreateNewListTemplates : TSPListTemplatesEntitySet;
    function CreateNewMicrofeedAttachmentStores
                                            : TSPMicrofeedAttachmentStoresEntitySet;
    function CreateNewMicrofeedDatas : TSPMicrofeedDatasEntitySet;
    function CreateNewMicrofeedManagers : TSPMicrofeedManagersEntitySet;
    function CreateNewMicrofeedPostDefinitionManagers
                                                  : TSPMicrofeedPostDefinitionManagersEntitySet;
    function CreateNewMicrofeedPostOptionCollections
                                                 : TSPMicrofeedPostOptionCollectionsEntitySet;
    function CreateNewMicrofeedStores : TSPMicrofeedStoresEntitySet;
    function CreateNewMountedFolderInfos : TSPMountedFolderInfosEntitySet;
    function CreateNewMountPoints : TSPMountPointsEntitySet;
    function CreateNewMountPointInfos : TSPMountPointInfosEntitySet;
    function CreateNewMoveCopyUtils : TSPMoveCopyUtilsEntitySet;
    function CreateNewNavigations : TSPNavigationsEntitySet;
    function CreateNewNavigationNodes : TSPNavigationNodesEntitySet;
    function CreateNewNativeClients : TSPNativeClientsEntitySet;
    function CreateNewObjectSharingInformations
                                            : TSPObjectSharingInformationsEntitySet;
    function CreateNewObjectSharingInformationUsers
                                                : TSPObjectSharingInformationUsersEntitySet;
    function CreateNewObjectSharingSettingss
                                         : TSPObjectSharingSettingssEntitySet;
    function CreateNewClickManagers : TSPClickManagersEntitySet;
    function CreateNewPickerSettingss : TSPPickerSettingssEntitySet;
    function CreateNewPrincipals : TSPPrincipalsEntitySet;
    function CreateNewPropertyValuess : TSPPropertyValuessEntitySet;
    function CreateNewPersonMagazines : TSPPersonMagazinesEntitySet;
    function CreateNewPointPublishingDocPropss
                                           : TSPPointPublishingDocPropssEntitySet;
    function CreateNewPointPublishingMagazinePropss
                                                : TSPPointPublishingMagazinePropssEntitySet;
    function CreateNewPointPublishingPosts
                                       : TSPPointPublishingPostsEntitySet;
    function CreateNewPointPublishingPostServiceManagers
                                                     : TSPPointPublishingPostServiceManagersEntitySet;
    function CreateNewPointPublishingSiteManagers
                                              : TSPPointPublishingSiteManagersEntitySet;
    function CreateNewPointPublishingSiteStatuss
                                             : TSPPointPublishingSiteStatussEntitySet;
    function CreateNewPointPublishingUsers
                                       : TSPPointPublishingUsersEntitySet;
    function CreateNewSearchs : TSPSearchsEntitySet;
    function CreateNewSpotlightChannels : TSPSpotlightChannelsEntitySet;
    function CreateNewSpotlightVideos : TSPSpotlightVideosEntitySet;
    function CreateNewVideoChannels : TSPVideoChannelsEntitySet;
    function CreateNewVideoItems : TSPVideoItemsEntitySet;
    function CreateNewVideoPermissionGroups
                                        : TSPVideoPermissionGroupsEntitySet;
    function CreateNewVideoServiceDiscoverers
                                          : TSPVideoServiceDiscoverersEntitySet;
    function CreateNewVideoServiceManagers
                                       : TSPVideoServiceManagersEntitySet;
    function CreateNewPushNotificationSubscribers
                                              : TSPPushNotificationSubscribersEntitySet;
    function CreateNewRecycleBinItems : TSPRecycleBinItemsEntitySet;
    function CreateNewRegionalSettingss : TSPRegionalSettingssEntitySet;
    function CreateNewRelatedFields : TSPRelatedFieldsEntitySet;
    function CreateNewRelatedItemManagers : TSPRelatedItemManagersEntitySet;
    function CreateNewRemoteWebs : TSPRemoteWebsEntitySet;
    function CreateNewRequestContexts1 : TSPRequestContexts1EntitySet;
    function CreateNewRoleAssignments : TSPRoleAssignmentsEntitySet;
    function CreateNewRoleDefinitions : TSPRoleDefinitionsEntitySet;
    function CreateNewSecurableObjects : TSPSecurableObjectsEntitySet;
    function CreateNewServerSettingss : TSPServerSettingssEntitySet;
    function CreateNewSharePointSharingSettingss
                                             : TSPSharePointSharingSettingssEntitySet;
    function CreateNewDocumentSharingManagers
                                          : TSPDocumentSharingManagersEntitySet;
    function CreateNewWebSharingManagers : TSPWebSharingManagersEntitySet;
    function CreateNewSharingResults : TSPSharingResultsEntitySet;
    function CreateNewSiteHealthSummarys : TSPSiteHealthSummarysEntitySet;
    function CreateNewSiteUrls : TSPSiteUrlsEntitySet;
    function CreateNewSocialAnnouncementManagers
                                             : TSPSocialAnnouncementManagersEntitySet;
    function CreateNewSocialFeedManagers : TSPSocialFeedManagersEntitySet;
    function CreateNewSocialFollowingManagers
                                          : TSPSocialFollowingManagersEntitySet;
    function CreateNewSocialRestActors : TSPSocialRestActorsEntitySet;
    function CreateNewSocialRestFeeds : TSPSocialRestFeedsEntitySet;
    function CreateNewSocialRestFeedManagers
                                         : TSPSocialRestFeedManagersEntitySet;
    function CreateNewSocialRestFollowingManagers
                                              : TSPSocialRestFollowingManagersEntitySet;
    function CreateNewSocialRestThreads : TSPSocialRestThreadsEntitySet;
    function CreateNewSolutionExporters : TSPSolutionExportersEntitySet;
    function CreateNewSPAppLicenseManagers
                                       : TSPSPAppLicenseManagersEntitySet;
    function CreateNewSPDataLeakagePreventionStatusInfos
                                                     : TSPSPDataLeakagePreventionStatusInfosEntitySet;
    function CreateNewTenantAppInstances : TSPTenantAppInstancesEntitySet;
    function CreateNewTenantAppUtilitys : TSPTenantAppUtilitysEntitySet;
    function CreateNewTenantSettingss : TSPTenantSettingssEntitySet;
    function CreateNewThemeInfos : TSPThemeInfosEntitySet;
    function CreateNewTimeZones : TSPTimeZonesEntitySet;
    function CreateNewSyncTranslators : TSPSyncTranslatorsEntitySet;
    function CreateNewTranslationJobs : TSPTranslationJobsEntitySet;
    function CreateNewTranslationJobStatuss
                                        : TSPTranslationJobStatussEntitySet;
    function CreateNewVariationsTranslationTimerJobs
                                                 : TSPVariationsTranslationTimerJobsEntitySet;
    function CreateNewTypeInformations : TSPTypeInformationsEntitySet;
    function CreateNewClientPeoplePickerWebServiceInterfaces
                                                         : TSPClientPeoplePickerWebServiceInterfacesEntitySet;
    function CreateNewUsers1 : TSPUsers1EntitySet;
    function CreateNewUserCustomActions : TSPUserCustomActionsEntitySet;
    function CreateNewFollowedContents : TSPFollowedContentsEntitySet;
    function CreateNewFollowedItemDatas : TSPFollowedItemDatasEntitySet;
    function CreateNewHashTagCollections : TSPHashTagCollectionsEntitySet;
    function CreateNewPeopleManagers : TSPPeopleManagersEntitySet;
    function CreateNewPersonPropertiess : TSPPersonPropertiessEntitySet;
    function CreateNewProfileImageStores : TSPProfileImageStoresEntitySet;
    function CreateNewProfileLoaders : TSPProfileLoadersEntitySet;
    function CreateNewUserProfiles : TSPUserProfilesEntitySet;
    function CreateNewUserProfilePropertiesForUsers
                                                : TSPUserProfilePropertiesForUsersEntitySet;
    function CreateNewUserResources : TSPUserResourcesEntitySet;
    function CreateNewUserSolutions : TSPUserSolutionsEntitySet;
    function CreateNewMarketplaceUtilitiess
                                        : TSPMarketplaceUtilitiessEntitySet;
    function CreateNewUtilitys : TSPUtilitysEntitySet;
    function CreateNewViews : TSPViewsEntitySet;
    function CreateNewViewFieldCollections
                                       : TSPViewFieldCollectionsEntitySet;
    function CreateNewWebInformations : TSPWebInformationsEntitySet;
    function CreateNewLimitedWebPartManagers
                                         : TSPLimitedWebPartManagersEntitySet;
    function CreateNewWebParts : TSPWebPartsEntitySet;
    function CreateNewWebPartDefinitions : TSPWebPartDefinitionsEntitySet;
    function CreateNewWebProxys : TSPWebProxysEntitySet;
    function CreateNewWebTemplates : TSPWebTemplatesEntitySet;
    function CreateNewSPWorkflows : TSPSPWorkflowsEntitySet;
    function CreateNewSPWorkflowManagers : TSPSPWorkflowManagersEntitySet;
    function CreateNewWorkflowAssociations
                                       : TSPWorkflowAssociationsEntitySet;
    function CreateNewWorkflowTemplates : TSPWorkflowTemplatesEntitySet;
    function CreateNewInteropServices : TSPInteropServicesEntitySet;
    function CreateNewWorkflowDefinitions : TSPWorkflowDefinitionsEntitySet;
    function CreateNewWorkflowDeploymentServices
                                             : TSPWorkflowDeploymentServicesEntitySet;
    function CreateNewWorkflowInstances : TSPWorkflowInstancesEntitySet;
    function CreateNewWorkflowInstanceServices
                                           : TSPWorkflowInstanceServicesEntitySet;
    function CreateNewWorkflowMessagingServices
                                            : TSPWorkflowMessagingServicesEntitySet;
    function CreateNewWorkflowServicesManagers
                                           : TSPWorkflowServicesManagersEntitySet;
    function CreateNewWorkflowSubscriptions
                                        : TSPWorkflowSubscriptionsEntitySet;
    function CreateNewWorkflowSubscriptionServices
                                               : TSPWorkflowSubscriptionServicesEntitySet;
    function CreateNewBaseSessions : TSPBaseSessionsEntitySet;
    function CreateNewBooleanCriterions : TSPBooleanCriterionsEntitySet;
    function CreateNewCalloutInfos : TSPCalloutInfosEntitySet;
    function CreateNewCreateRefreshJobResults
                                          : TSPCreateRefreshJobResultsEntitySet;
    function CreateNewCustomAttributeFilters
                                         : TSPCustomAttributeFiltersEntitySet;
    function CreateNewDashboardScriptExtensionInfos
                                                : TSPDashboardScriptExtensionInfosEntitySet;
    function CreateNewDateRangeCriterions : TSPDateRangeCriterionsEntitySet;
    function CreateNewExchangeUserSyncStates
                                         : TSPExchangeUserSyncStatesEntitySet;
    function CreateNewLocations : TSPLocationsEntitySet;
    function CreateNewLocationDisplaySettings
                                          : TSPLocationDisplaySettingsEntitySet;
    function CreateNewLocationFilters : TSPLocationFiltersEntitySet;
    function CreateNewLocationUpdateResults
                                        : TSPLocationUpdateResultsEntitySet;
    function CreateNewNameCriterions : TSPNameCriterionsEntitySet;
    function CreateNewNonTaskDataReadResults
                                         : TSPNonTaskDataReadResultsEntitySet;
    function CreateNewOrderInfos : TSPOrderInfosEntitySet;
    function CreateNewPersistedPropertiess
                                       : TSPPersistedPropertiessEntitySet;
    function CreateNewProviderErrorInfos : TSPProviderErrorInfosEntitySet;
    function CreateNewProviderRefreshStatuss
                                         : TSPProviderRefreshStatussEntitySet;
    function CreateNewRefreshHealthInfos : TSPRefreshHealthInfosEntitySet;
    function CreateNewRefreshHistorys : TSPRefreshHistorysEntitySet;
    function CreateNewRefreshResults : TSPRefreshResultsEntitySet;
    function CreateNewSortableSessionManagers
                                          : TSPSortableSessionManagersEntitySet;
    function CreateNewSortableTaskQuerys : TSPSortableTaskQuerysEntitySet;
    function CreateNewTasks1 : TSPTasks1EntitySet;
    function CreateNewTaskFilters : TSPTaskFiltersEntitySet;
    function CreateNewTaskQuerys : TSPTaskQuerysEntitySet;
    function CreateNewTaskQueryByLocationResults
                                             : TSPTaskQueryByLocationResultsEntitySet;
    function CreateNewTaskQueryResults : TSPTaskQueryResultsEntitySet;
    function CreateNewTaskRefreshResults : TSPTaskRefreshResultsEntitySet;
    function CreateNewTaskWriteResults : TSPTaskWriteResultsEntitySet;
    function CreateNewUserOrderedSessionManagers
                                             : TSPUserOrderedSessionManagersEntitySet;
    function CreateNewUserSettingss : TSPUserSettingssEntitySet;
    function CreateNewUserSettingsManagers
                                       : TSPUserSettingsManagersEntitySet;
    function CreateNewViewSelectionInfos : TSPViewSelectionInfosEntitySet;
    function CreateNewSPOIdentityHelpers : TSPSPOIdentityHelpersEntitySet;
    function CreateNewAppPrincipalIdentityProviders
                                                : TSPAppPrincipalIdentityProvidersEntitySet;
    function CreateNewAppPrincipalManagers
                                       : TSPAppPrincipalManagersEntitySet;
    function CreateNewAppPrincipalCredentials
                                          : TSPAppPrincipalCredentialsEntitySet;
    function CreateNewAppPrincipalNames : TSPAppPrincipalNamesEntitySet;
    function CreateNewDraftProjectResources1
                                         : TSPDraftProjectResources1EntitySet;
  published
    Property Apps : TSPAppsEntitySet read GetApps;
    Property Files : TSPFilesEntitySet read GetFiles;
    Property Lists : TSPListsEntitySet read GetLists;
    Property Mes : TSPMesEntitySet read GetMes;
    Property Sites : TSPSitesEntitySet read GetSites;
    Property Webs : TSPWebsEntitySet read GetWebs;
    Property AppStores : TSPAppStoresEntitySet read GetAppStores;
    Property ConnectionSettingss : TSPConnectionSettingssEntitySet read GetConnectionSettingss;
    Property TargetApplications : TSPTargetApplicationsEntitySet read GetTargetApplications;
    Property TargetApplicationFields : TSPTargetApplicationFieldsEntitySet read GetTargetApplicationFields;
    Property Reputations : TSPReputationsEntitySet read GetReputations;
    Property SearchServices : TSPSearchServicesEntitySet read GetSearchServices;
    Property Apps1 : TSPApps1EntitySet read GetApps1;
    Property PointPublishingAdmins : TSPPointPublishingAdminsEntitySet read GetPointPublishingAdmins;
    Property DDIAdapters : TSPDDIAdaptersEntitySet read GetDDIAdapters;
    Property SPOTenantWebTemplateCollections : TSPSPOTenantWebTemplateCollectionsEntitySet read GetSPOTenantWebTemplateCollections;
    Property ExternalUsers : TSPExternalUsersEntitySet read GetExternalUsers;
    Property GetExternalUsersResultss : TSPGetExternalUsersResultssEntitySet read GetGetExternalUsersResultss;
    Property Office365Tenants : TSPOffice365TenantsEntitySet read GetOffice365Tenants;
    Property RemoveExternalUsersResultss : TSPRemoveExternalUsersResultssEntitySet read GetRemoveExternalUsersResultss;
    Property FeatureDefinitions : TSPFeatureDefinitionsEntitySet read GetFeatureDefinitions;
    Property SPAnalyticsUsageServices : TSPSPAnalyticsUsageServicesEntitySet read GetSPAnalyticsUsageServices;
    Property SPAppStateQueryJobDefinitions : TSPSPAppStateQueryJobDefinitionsEntitySet read GetSPAppStateQueryJobDefinitions;
    Property SPFarms : TSPSPFarmsEntitySet read GetSPFarms;
    Property SPTenantAppInstanceDatas : TSPSPTenantAppInstanceDatasEntitySet read GetSPTenantAppInstanceDatas;
    Property SPWebApplications : TSPSPWebApplicationsEntitySet read GetSPWebApplications;
    Property SPWebServices : TSPSPWebServicesEntitySet read GetSPWebServices;
    Property SPAppPrincipalInfos : TSPSPAppPrincipalInfosEntitySet read GetSPAppPrincipalInfos;
    Property DocumentCrawlLogs : TSPDocumentCrawlLogsEntitySet read GetDocumentCrawlLogs;
    Property SignalStores : TSPSignalStoresEntitySet read GetSignalStores;
    Property QueryPersonalizationDatas : TSPQueryPersonalizationDatasEntitySet read GetQueryPersonalizationDatas;
    Property RankingLabelings : TSPRankingLabelingsEntitySet read GetRankingLabelings;
    Property ReorderingRuleCollections : TSPReorderingRuleCollectionsEntitySet read GetReorderingRuleCollections;
    Property SortCollections : TSPSortCollectionsEntitySet read GetSortCollections;
    Property StringCollections : TSPStringCollectionsEntitySet read GetStringCollections;
    Property SPFlights : TSPSPFlightsEntitySet read GetSPFlights;
    Property SPCorporateCuratedGallerySettingsBases : TSPSPCorporateCuratedGallerySettingsBasesEntitySet read GetSPCorporateCuratedGallerySettingsBases;
    Property SPCorporateCuratedGallerySettingsFactorys : TSPSPCorporateCuratedGallerySettingsFactorysEntitySet read GetSPCorporateCuratedGallerySettingsFactorys;
    Property SPMarketplaceSettingss : TSPSPMarketplaceSettingssEntitySet read GetSPMarketplaceSettingss;
    Property NavigationServiceRests : TSPNavigationServiceRestsEntitySet read GetNavigationServiceRests;
    Property AppDetailss : TSPAppDetailssEntitySet read GetAppDetailss;
    Property AppIconInfos : TSPAppIconInfosEntitySet read GetAppIconInfos;
    Property CollaborationMailboxs : TSPCollaborationMailboxsEntitySet read GetCollaborationMailboxs;
    Property CommunityModerations : TSPCommunityModerationsEntitySet read GetCommunityModerations;
    Property MySiteRecommendationss : TSPMySiteRecommendationssEntitySet read GetMySiteRecommendationss;
    Property DocumentsSharedWithGroups : TSPDocumentsSharedWithGroupsEntitySet read GetDocumentsSharedWithGroups;
    Property DocumentsSharedWithMes : TSPDocumentsSharedWithMesEntitySet read GetDocumentsSharedWithMes;
    Property DocumentsSharedWithPersons : TSPDocumentsSharedWithPersonsEntitySet read GetDocumentsSharedWithPersons;
    Property MySiteDismissStatusTexts : TSPMySiteDismissStatusTextsEntitySet read GetMySiteDismissStatusTexts;
    Property MySiteDocumentMoveUtilitys : TSPMySiteDocumentMoveUtilitysEntitySet read GetMySiteDocumentMoveUtilitys;
    Property MySiteLinkss : TSPMySiteLinkssEntitySet read GetMySiteLinkss;
    Property PromotedSitess : TSPPromotedSitessEntitySet read GetPromotedSitess;
    Property SharedWithMeDocuments : TSPSharedWithMeDocumentsEntitySet read GetSharedWithMeDocuments;
    Property RecentDocuments : TSPRecentDocumentsEntitySet read GetRecentDocuments;
    Property ModuleLinks : TSPModuleLinksEntitySet read GetModuleLinks;
    Property ResourceManifestInformations : TSPResourceManifestInformationsEntitySet read GetResourceManifestInformations;
    Property WacApis : TSPWacApisEntitySet read GetWacApis;
    Property EntityItems : TSPEntityItemsEntitySet read GetEntityItems;
    Property EntityTypes : TSPEntityTypesEntitySet read GetEntityTypes;
    Property EntityTypeBases : TSPEntityTypeBasesEntitySet read GetEntityTypeBases;
    Property ExternalEntityTypes : TSPExternalEntityTypesEntitySet read GetExternalEntityTypes;
    Property Fields : TSPFieldsEntitySet read GetFields;
    Property ODataStoreContexts : TSPODataStoreContextsEntitySet read GetODataStoreContexts;
    Property RequestContexts : TSPRequestContextsEntitySet read GetRequestContexts;
    Property SqlStoreContexts : TSPSqlStoreContextsEntitySet read GetSqlStoreContexts;
    Property StoreContextBases : TSPStoreContextBasesEntitySet read GetStoreContextBases;
    Property Files1 : TSPFiles1EntitySet read GetFiles1;
    Property FileServices : TSPFileServicesEntitySet read GetFileServices;
    Property Folders : TSPFoldersEntitySet read GetFolders;
    Property MeFileServices : TSPMeFileServicesEntitySet read GetMeFileServices;
    Property Diagnosticss : TSPDiagnosticssEntitySet read GetDiagnosticss;
    Property Reportings : TSPReportingsEntitySet read GetReportings;
    Property Taskflows : TSPTaskflowsEntitySet read GetTaskflows;
    Property Assignments : TSPAssignmentsEntitySet read GetAssignments;
    Property BaseCalendarExceptions : TSPBaseCalendarExceptionsEntitySet read GetBaseCalendarExceptions;
    Property Calendars : TSPCalendarsEntitySet read GetCalendars;
    Property CalendarExceptions : TSPCalendarExceptionsEntitySet read GetCalendarExceptions;
    Property CustomFields : TSPCustomFieldsEntitySet read GetCustomFields;
    Property DraftAssignments : TSPDraftAssignmentsEntitySet read GetDraftAssignments;
    Property DraftProjects : TSPDraftProjectsEntitySet read GetDraftProjects;
    Property DraftProjectResources : TSPDraftProjectResourcesEntitySet read GetDraftProjectResources;
    Property DraftTasks : TSPDraftTasksEntitySet read GetDraftTasks;
    Property DraftTaskLinks : TSPDraftTaskLinksEntitySet read GetDraftTaskLinks;
    Property EnterpriseProjectTypes : TSPEnterpriseProjectTypesEntitySet read GetEnterpriseProjectTypes;
    Property EnterpriseResources : TSPEnterpriseResourcesEntitySet read GetEnterpriseResources;
    Property EntityTypes1 : TSPEntityTypes1EntitySet read GetEntityTypes1;
    Property EntityTypess : TSPEntityTypessEntitySet read GetEntityTypess;
    Property Events : TSPEventsEntitySet read GetEvents;
    Property EventHandlers : TSPEventHandlersEntitySet read GetEventHandlers;
    Property LookupCosts : TSPLookupCostsEntitySet read GetLookupCosts;
    Property LookupDates : TSPLookupDatesEntitySet read GetLookupDates;
    Property LookupDurations : TSPLookupDurationsEntitySet read GetLookupDurations;
    Property LookupEntrys : TSPLookupEntrysEntitySet read GetLookupEntrys;
    Property LookupNumbers : TSPLookupNumbersEntitySet read GetLookupNumbers;
    Property LookupTables : TSPLookupTablesEntitySet read GetLookupTables;
    Property LookupTabless : TSPLookupTablessEntitySet read GetLookupTabless;
    Property LookupTexts : TSPLookupTextsEntitySet read GetLookupTexts;
    Property Phases : TSPPhasesEntitySet read GetPhases;
    Property PlanAssignments : TSPPlanAssignmentsEntitySet read GetPlanAssignments;
    Property PlanAssignmentIntervals : TSPPlanAssignmentIntervalsEntitySet read GetPlanAssignmentIntervals;
    Property Projects : TSPProjectsEntitySet read GetProjects;
    Property ProjectDetailPages : TSPProjectDetailPagesEntitySet read GetProjectDetailPages;
    Property ProjectResources : TSPProjectResourcesEntitySet read GetProjectResources;
    Property ProjectServers : TSPProjectServersEntitySet read GetProjectServers;
    Property ProjectServerDatas : TSPProjectServerDatasEntitySet read GetProjectServerDatas;
    Property PublishedAssignments : TSPPublishedAssignmentsEntitySet read GetPublishedAssignments;
    Property PublishedProjects : TSPPublishedProjectsEntitySet read GetPublishedProjects;
    Property PublishedProjectResources : TSPPublishedProjectResourcesEntitySet read GetPublishedProjectResources;
    Property PublishedTasks : TSPPublishedTasksEntitySet read GetPublishedTasks;
    Property PublishedTaskLinks : TSPPublishedTaskLinksEntitySet read GetPublishedTaskLinks;
    Property QueueJobs : TSPQueueJobsEntitySet read GetQueueJobs;
    Property ResourceCalendarExceptions : TSPResourceCalendarExceptionsEntitySet read GetResourceCalendarExceptions;
    Property ResourcePlans : TSPResourcePlansEntitySet read GetResourcePlans;
    Property ServiceStatuss : TSPServiceStatussEntitySet read GetServiceStatuss;
    Property Stages : TSPStagesEntitySet read GetStages;
    Property StageCustomFields : TSPStageCustomFieldsEntitySet read GetStageCustomFields;
    Property StageDetailPages : TSPStageDetailPagesEntitySet read GetStageDetailPages;
    Property StatusAssignments : TSPStatusAssignmentsEntitySet read GetStatusAssignments;
    Property StatusTasks : TSPStatusTasksEntitySet read GetStatusTasks;
    Property Tasks : TSPTasksEntitySet read GetTasks;
    Property TaskLinks : TSPTaskLinksEntitySet read GetTaskLinks;
    Property TaskServiceOdataEndpoints : TSPTaskServiceOdataEndpointsEntitySet read GetTaskServiceOdataEndpoints;
    Property TimePhases : TSPTimePhasesEntitySet read GetTimePhases;
    Property TimeSheets : TSPTimeSheetsEntitySet read GetTimeSheets;
    Property TimeSheetLines : TSPTimeSheetLinesEntitySet read GetTimeSheetLines;
    Property TimeSheetPeriods : TSPTimeSheetPeriodsEntitySet read GetTimeSheetPeriods;
    Property TimeSheetWorks : TSPTimeSheetWorksEntitySet read GetTimeSheetWorks;
    Property WorkflowActivitiess : TSPWorkflowActivitiessEntitySet read GetWorkflowActivitiess;
    Property WorkflowDesigners : TSPWorkflowDesignersEntitySet read GetWorkflowDesigners;
    Property WorkflowDesignerFields : TSPWorkflowDesignerFieldsEntitySet read GetWorkflowDesignerFields;
    Property AccessRequestss : TSPAccessRequestssEntitySet read GetAccessRequestss;
    Property AlternateUrls : TSPAlternateUrlsEntitySet read GetAlternateUrls;
    Property AnalyticsUsageEntrys : TSPAnalyticsUsageEntrysEntitySet read GetAnalyticsUsageEntrys;
    Property ApiMetadatas : TSPApiMetadatasEntitySet read GetApiMetadatas;
    Property Apps12 : TSPApps12EntitySet read GetApps12;
    Property AppCatalogs : TSPAppCatalogsEntitySet read GetAppCatalogs;
    Property AppContextSites : TSPAppContextSitesEntitySet read GetAppContextSites;
    Property AppInstances : TSPAppInstancesEntitySet read GetAppInstances;
    Property AppInstanceErrorDetailss : TSPAppInstanceErrorDetailssEntitySet read GetAppInstanceErrorDetailss;
    Property AppTiles : TSPAppTilesEntitySet read GetAppTiles;
    Property Attachments : TSPAttachmentsEntitySet read GetAttachments;
    Property Audits : TSPAuditsEntitySet read GetAudits;
    Property AppBdcCatalogs : TSPAppBdcCatalogsEntitySet read GetAppBdcCatalogs;
    Property Entitys : TSPEntitysEntitySet read GetEntitys;
    Property EntityFields : TSPEntityFieldsEntitySet read GetEntityFields;
    Property EntityIdentifiers : TSPEntityIdentifiersEntitySet read GetEntityIdentifiers;
    Property EntityViews : TSPEntityViewsEntitySet read GetEntityViews;
    Property Filters : TSPFiltersEntitySet read GetFilters;
    Property ExternalSubscriptionStores : TSPExternalSubscriptionStoresEntitySet read GetExternalSubscriptionStores;
    Property LobSystems : TSPLobSystemsEntitySet read GetLobSystems;
    Property LobSystemInstances : TSPLobSystemInstancesEntitySet read GetLobSystemInstances;
    Property MethodExecutionResults : TSPMethodExecutionResultsEntitySet read GetMethodExecutionResults;
    Property EntityFieldValueDictionarys : TSPEntityFieldValueDictionarysEntitySet read GetEntityFieldValueDictionarys;
    Property EntityIdentitys : TSPEntityIdentitysEntitySet read GetEntityIdentitys;
    Property EntityInstances : TSPEntityInstancesEntitySet read GetEntityInstances;
    Property NotificationCallbacks : TSPNotificationCallbacksEntitySet read GetNotificationCallbacks;
    Property Subscriptions : TSPSubscriptionsEntitySet read GetSubscriptions;
    Property TypeDescriptors : TSPTypeDescriptorsEntitySet read GetTypeDescriptors;
    Property Changes : TSPChangesEntitySet read GetChanges;
    Property CompatibilityRanges : TSPCompatibilityRangesEntitySet read GetCompatibilityRanges;
    Property PolicyEvaluationInfos : TSPPolicyEvaluationInfosEntitySet read GetPolicyEvaluationInfos;
    Property SPPolicyStoreProxys : TSPSPPolicyStoreProxysEntitySet read GetSPPolicyStoreProxys;
    Property ContentTypes : TSPContentTypesEntitySet read GetContentTypes;
    Property CreatablesInfos : TSPCreatablesInfosEntitySet read GetCreatablesInfos;
    Property DirectorySessions : TSPDirectorySessionsEntitySet read GetDirectorySessions;
    Property Groups : TSPGroupsEntitySet read GetGroups;
    Property GroupAndUserStatuss : TSPGroupAndUserStatussEntitySet read GetGroupAndUserStatuss;
    Property LinkCollections : TSPLinkCollectionsEntitySet read GetLinkCollections;
    Property MembershipResults : TSPMembershipResultsEntitySet read GetMembershipResults;
    Property MembersInfos : TSPMembersInfosEntitySet read GetMembersInfos;
    Property MyGroupsResults : TSPMyGroupsResultsEntitySet read GetMyGroupsResults;
    Property Propertys : TSPPropertysEntitySet read GetPropertys;
    Property PropertyDictionarys : TSPPropertyDictionarysEntitySet read GetPropertyDictionarys;
    Property SharePointDirectoryProviders : TSPSharePointDirectoryProvidersEntitySet read GetSharePointDirectoryProviders;
    Property SPHelpers : TSPSPHelpersEntitySet read GetSPHelpers;
    Property Users : TSPUsersEntitySet read GetUsers;
    Property UserRequestSchemas : TSPUserRequestSchemasEntitySet read GetUserRequestSchemas;
    Property DlpPolicyTips : TSPDlpPolicyTipsEntitySet read GetDlpPolicyTips;
    Property EventReceiverDefinitions : TSPEventReceiverDefinitionsEntitySet read GetEventReceiverDefinitions;
    Property Features : TSPFeaturesEntitySet read GetFeatures;
    Property Fields1 : TSPFields1EntitySet read GetFields1;
    Property FieldLinks : TSPFieldLinksEntitySet read GetFieldLinks;
    Property FieldStringValuess : TSPFieldStringValuessEntitySet read GetFieldStringValuess;
    Property Files12 : TSPFiles12EntitySet read GetFiles12;
    Property FileVersions : TSPFileVersionsEntitySet read GetFileVersions;
    Property Folders1 : TSPFolders1EntitySet read GetFolders1;
    Property Forms : TSPFormsEntitySet read GetForms;
    Property Groups1 : TSPGroups1EntitySet read GetGroups1;
    Property InformationRightsManagementSettingss : TSPInformationRightsManagementSettingssEntitySet read GetInformationRightsManagementSettingss;
    Property ListItems : TSPListItemsEntitySet read GetListItems;
    Property ListTemplates : TSPListTemplatesEntitySet read GetListTemplates;
    Property MicrofeedAttachmentStores : TSPMicrofeedAttachmentStoresEntitySet read GetMicrofeedAttachmentStores;
    Property MicrofeedDatas : TSPMicrofeedDatasEntitySet read GetMicrofeedDatas;
    Property MicrofeedManagers : TSPMicrofeedManagersEntitySet read GetMicrofeedManagers;
    Property MicrofeedPostDefinitionManagers : TSPMicrofeedPostDefinitionManagersEntitySet read GetMicrofeedPostDefinitionManagers;
    Property MicrofeedPostOptionCollections : TSPMicrofeedPostOptionCollectionsEntitySet read GetMicrofeedPostOptionCollections;
    Property MicrofeedStores : TSPMicrofeedStoresEntitySet read GetMicrofeedStores;
    Property MountedFolderInfos : TSPMountedFolderInfosEntitySet read GetMountedFolderInfos;
    Property MountPoints : TSPMountPointsEntitySet read GetMountPoints;
    Property MountPointInfos : TSPMountPointInfosEntitySet read GetMountPointInfos;
    Property MoveCopyUtils : TSPMoveCopyUtilsEntitySet read GetMoveCopyUtils;
    Property Navigations : TSPNavigationsEntitySet read GetNavigations;
    Property NavigationNodes : TSPNavigationNodesEntitySet read GetNavigationNodes;
    Property NativeClients : TSPNativeClientsEntitySet read GetNativeClients;
    Property ObjectSharingInformations : TSPObjectSharingInformationsEntitySet read GetObjectSharingInformations;
    Property ObjectSharingInformationUsers : TSPObjectSharingInformationUsersEntitySet read GetObjectSharingInformationUsers;
    Property ObjectSharingSettingss : TSPObjectSharingSettingssEntitySet read GetObjectSharingSettingss;
    Property ClickManagers : TSPClickManagersEntitySet read GetClickManagers;
    Property PickerSettingss : TSPPickerSettingssEntitySet read GetPickerSettingss;
    Property Principals : TSPPrincipalsEntitySet read GetPrincipals;
    Property PropertyValuess : TSPPropertyValuessEntitySet read GetPropertyValuess;
    Property PersonMagazines : TSPPersonMagazinesEntitySet read GetPersonMagazines;
    Property PointPublishingDocPropss : TSPPointPublishingDocPropssEntitySet read GetPointPublishingDocPropss;
    Property PointPublishingMagazinePropss : TSPPointPublishingMagazinePropssEntitySet read GetPointPublishingMagazinePropss;
    Property PointPublishingPosts : TSPPointPublishingPostsEntitySet read GetPointPublishingPosts;
    Property PointPublishingPostServiceManagers : TSPPointPublishingPostServiceManagersEntitySet read GetPointPublishingPostServiceManagers;
    Property PointPublishingSiteManagers : TSPPointPublishingSiteManagersEntitySet read GetPointPublishingSiteManagers;
    Property PointPublishingSiteStatuss : TSPPointPublishingSiteStatussEntitySet read GetPointPublishingSiteStatuss;
    Property PointPublishingUsers : TSPPointPublishingUsersEntitySet read GetPointPublishingUsers;
    Property Searchs : TSPSearchsEntitySet read GetSearchs;
    Property SpotlightChannels : TSPSpotlightChannelsEntitySet read GetSpotlightChannels;
    Property SpotlightVideos : TSPSpotlightVideosEntitySet read GetSpotlightVideos;
    Property VideoChannels : TSPVideoChannelsEntitySet read GetVideoChannels;
    Property VideoItems : TSPVideoItemsEntitySet read GetVideoItems;
    Property VideoPermissionGroups : TSPVideoPermissionGroupsEntitySet read GetVideoPermissionGroups;
    Property VideoServiceDiscoverers : TSPVideoServiceDiscoverersEntitySet read GetVideoServiceDiscoverers;
    Property VideoServiceManagers : TSPVideoServiceManagersEntitySet read GetVideoServiceManagers;
    Property PushNotificationSubscribers : TSPPushNotificationSubscribersEntitySet read GetPushNotificationSubscribers;
    Property RecycleBinItems : TSPRecycleBinItemsEntitySet read GetRecycleBinItems;
    Property RegionalSettingss : TSPRegionalSettingssEntitySet read GetRegionalSettingss;
    Property RelatedFields : TSPRelatedFieldsEntitySet read GetRelatedFields;
    Property RelatedItemManagers : TSPRelatedItemManagersEntitySet read GetRelatedItemManagers;
    Property RemoteWebs : TSPRemoteWebsEntitySet read GetRemoteWebs;
    Property RequestContexts1 : TSPRequestContexts1EntitySet read GetRequestContexts1;
    Property RoleAssignments : TSPRoleAssignmentsEntitySet read GetRoleAssignments;
    Property RoleDefinitions : TSPRoleDefinitionsEntitySet read GetRoleDefinitions;
    Property SecurableObjects : TSPSecurableObjectsEntitySet read GetSecurableObjects;
    Property ServerSettingss : TSPServerSettingssEntitySet read GetServerSettingss;
    Property SharePointSharingSettingss : TSPSharePointSharingSettingssEntitySet read GetSharePointSharingSettingss;
    Property DocumentSharingManagers : TSPDocumentSharingManagersEntitySet read GetDocumentSharingManagers;
    Property WebSharingManagers : TSPWebSharingManagersEntitySet read GetWebSharingManagers;
    Property SharingResults : TSPSharingResultsEntitySet read GetSharingResults;
    Property SiteHealthSummarys : TSPSiteHealthSummarysEntitySet read GetSiteHealthSummarys;
    Property SiteUrls : TSPSiteUrlsEntitySet read GetSiteUrls;
    Property SocialAnnouncementManagers : TSPSocialAnnouncementManagersEntitySet read GetSocialAnnouncementManagers;
    Property SocialFeedManagers : TSPSocialFeedManagersEntitySet read GetSocialFeedManagers;
    Property SocialFollowingManagers : TSPSocialFollowingManagersEntitySet read GetSocialFollowingManagers;
    Property SocialRestActors : TSPSocialRestActorsEntitySet read GetSocialRestActors;
    Property SocialRestFeeds : TSPSocialRestFeedsEntitySet read GetSocialRestFeeds;
    Property SocialRestFeedManagers : TSPSocialRestFeedManagersEntitySet read GetSocialRestFeedManagers;
    Property SocialRestFollowingManagers : TSPSocialRestFollowingManagersEntitySet read GetSocialRestFollowingManagers;
    Property SocialRestThreads : TSPSocialRestThreadsEntitySet read GetSocialRestThreads;
    Property SolutionExporters : TSPSolutionExportersEntitySet read GetSolutionExporters;
    Property SPAppLicenseManagers : TSPSPAppLicenseManagersEntitySet read GetSPAppLicenseManagers;
    Property SPDataLeakagePreventionStatusInfos : TSPSPDataLeakagePreventionStatusInfosEntitySet read GetSPDataLeakagePreventionStatusInfos;
    Property TenantAppInstances : TSPTenantAppInstancesEntitySet read GetTenantAppInstances;
    Property TenantAppUtilitys : TSPTenantAppUtilitysEntitySet read GetTenantAppUtilitys;
    Property TenantSettingss : TSPTenantSettingssEntitySet read GetTenantSettingss;
    Property ThemeInfos : TSPThemeInfosEntitySet read GetThemeInfos;
    Property TimeZones : TSPTimeZonesEntitySet read GetTimeZones;
    Property SyncTranslators : TSPSyncTranslatorsEntitySet read GetSyncTranslators;
    Property TranslationJobs : TSPTranslationJobsEntitySet read GetTranslationJobs;
    Property TranslationJobStatuss : TSPTranslationJobStatussEntitySet read GetTranslationJobStatuss;
    Property VariationsTranslationTimerJobs : TSPVariationsTranslationTimerJobsEntitySet read GetVariationsTranslationTimerJobs;
    Property TypeInformations : TSPTypeInformationsEntitySet read GetTypeInformations;
    Property ClientPeoplePickerWebServiceInterfaces : TSPClientPeoplePickerWebServiceInterfacesEntitySet read GetClientPeoplePickerWebServiceInterfaces;
    Property Users1 : TSPUsers1EntitySet read GetUsers1;
    Property UserCustomActions : TSPUserCustomActionsEntitySet read GetUserCustomActions;
    Property FollowedContents : TSPFollowedContentsEntitySet read GetFollowedContents;
    Property FollowedItemDatas : TSPFollowedItemDatasEntitySet read GetFollowedItemDatas;
    Property HashTagCollections : TSPHashTagCollectionsEntitySet read GetHashTagCollections;
    Property PeopleManagers : TSPPeopleManagersEntitySet read GetPeopleManagers;
    Property PersonPropertiess : TSPPersonPropertiessEntitySet read GetPersonPropertiess;
    Property ProfileImageStores : TSPProfileImageStoresEntitySet read GetProfileImageStores;
    Property ProfileLoaders : TSPProfileLoadersEntitySet read GetProfileLoaders;
    Property UserProfiles : TSPUserProfilesEntitySet read GetUserProfiles;
    Property UserProfilePropertiesForUsers : TSPUserProfilePropertiesForUsersEntitySet read GetUserProfilePropertiesForUsers;
    Property UserResources : TSPUserResourcesEntitySet read GetUserResources;
    Property UserSolutions : TSPUserSolutionsEntitySet read GetUserSolutions;
    Property MarketplaceUtilitiess : TSPMarketplaceUtilitiessEntitySet read GetMarketplaceUtilitiess;
    Property Utilitys : TSPUtilitysEntitySet read GetUtilitys;
    Property Views : TSPViewsEntitySet read GetViews;
    Property ViewFieldCollections : TSPViewFieldCollectionsEntitySet read GetViewFieldCollections;
    Property WebInformations : TSPWebInformationsEntitySet read GetWebInformations;
    Property LimitedWebPartManagers : TSPLimitedWebPartManagersEntitySet read GetLimitedWebPartManagers;
    Property WebParts : TSPWebPartsEntitySet read GetWebParts;
    Property WebPartDefinitions : TSPWebPartDefinitionsEntitySet read GetWebPartDefinitions;
    Property WebProxys : TSPWebProxysEntitySet read GetWebProxys;
    Property WebTemplates : TSPWebTemplatesEntitySet read GetWebTemplates;
    Property SPWorkflows : TSPSPWorkflowsEntitySet read GetSPWorkflows;
    Property SPWorkflowManagers : TSPSPWorkflowManagersEntitySet read GetSPWorkflowManagers;
    Property WorkflowAssociations : TSPWorkflowAssociationsEntitySet read GetWorkflowAssociations;
    Property WorkflowTemplates : TSPWorkflowTemplatesEntitySet read GetWorkflowTemplates;
    Property InteropServices : TSPInteropServicesEntitySet read GetInteropServices;
    Property WorkflowDefinitions : TSPWorkflowDefinitionsEntitySet read GetWorkflowDefinitions;
    Property WorkflowDeploymentServices : TSPWorkflowDeploymentServicesEntitySet read GetWorkflowDeploymentServices;
    Property WorkflowInstances : TSPWorkflowInstancesEntitySet read GetWorkflowInstances;
    Property WorkflowInstanceServices : TSPWorkflowInstanceServicesEntitySet read GetWorkflowInstanceServices;
    Property WorkflowMessagingServices : TSPWorkflowMessagingServicesEntitySet read GetWorkflowMessagingServices;
    Property WorkflowServicesManagers : TSPWorkflowServicesManagersEntitySet read GetWorkflowServicesManagers;
    Property WorkflowSubscriptions : TSPWorkflowSubscriptionsEntitySet read GetWorkflowSubscriptions;
    Property WorkflowSubscriptionServices : TSPWorkflowSubscriptionServicesEntitySet read GetWorkflowSubscriptionServices;
    Property BaseSessions : TSPBaseSessionsEntitySet read GetBaseSessions;
    Property BooleanCriterions : TSPBooleanCriterionsEntitySet read GetBooleanCriterions;
    Property CalloutInfos : TSPCalloutInfosEntitySet read GetCalloutInfos;
    Property CreateRefreshJobResults : TSPCreateRefreshJobResultsEntitySet read GetCreateRefreshJobResults;
    Property CustomAttributeFilters : TSPCustomAttributeFiltersEntitySet read GetCustomAttributeFilters;
    Property DashboardScriptExtensionInfos : TSPDashboardScriptExtensionInfosEntitySet read GetDashboardScriptExtensionInfos;
    Property DateRangeCriterions : TSPDateRangeCriterionsEntitySet read GetDateRangeCriterions;
    Property ExchangeUserSyncStates : TSPExchangeUserSyncStatesEntitySet read GetExchangeUserSyncStates;
    Property Locations : TSPLocationsEntitySet read GetLocations;
    Property LocationDisplaySettings : TSPLocationDisplaySettingsEntitySet read GetLocationDisplaySettings;
    Property LocationFilters : TSPLocationFiltersEntitySet read GetLocationFilters;
    Property LocationUpdateResults : TSPLocationUpdateResultsEntitySet read GetLocationUpdateResults;
    Property NameCriterions : TSPNameCriterionsEntitySet read GetNameCriterions;
    Property NonTaskDataReadResults : TSPNonTaskDataReadResultsEntitySet read GetNonTaskDataReadResults;
    Property OrderInfos : TSPOrderInfosEntitySet read GetOrderInfos;
    Property PersistedPropertiess : TSPPersistedPropertiessEntitySet read GetPersistedPropertiess;
    Property ProviderErrorInfos : TSPProviderErrorInfosEntitySet read GetProviderErrorInfos;
    Property ProviderRefreshStatuss : TSPProviderRefreshStatussEntitySet read GetProviderRefreshStatuss;
    Property RefreshHealthInfos : TSPRefreshHealthInfosEntitySet read GetRefreshHealthInfos;
    Property RefreshHistorys : TSPRefreshHistorysEntitySet read GetRefreshHistorys;
    Property RefreshResults : TSPRefreshResultsEntitySet read GetRefreshResults;
    Property SortableSessionManagers : TSPSortableSessionManagersEntitySet read GetSortableSessionManagers;
    Property SortableTaskQuerys : TSPSortableTaskQuerysEntitySet read GetSortableTaskQuerys;
    Property Tasks1 : TSPTasks1EntitySet read GetTasks1;
    Property TaskFilters : TSPTaskFiltersEntitySet read GetTaskFilters;
    Property TaskQuerys : TSPTaskQuerysEntitySet read GetTaskQuerys;
    Property TaskQueryByLocationResults : TSPTaskQueryByLocationResultsEntitySet read GetTaskQueryByLocationResults;
    Property TaskQueryResults : TSPTaskQueryResultsEntitySet read GetTaskQueryResults;
    Property TaskRefreshResults : TSPTaskRefreshResultsEntitySet read GetTaskRefreshResults;
    Property TaskWriteResults : TSPTaskWriteResultsEntitySet read GetTaskWriteResults;
    Property UserOrderedSessionManagers : TSPUserOrderedSessionManagersEntitySet read GetUserOrderedSessionManagers;
    Property UserSettingss : TSPUserSettingssEntitySet read GetUserSettingss;
    Property UserSettingsManagers : TSPUserSettingsManagersEntitySet read GetUserSettingsManagers;
    Property ViewSelectionInfos : TSPViewSelectionInfosEntitySet read GetViewSelectionInfos;
    Property SPOIdentityHelpers : TSPSPOIdentityHelpersEntitySet read GetSPOIdentityHelpers;
    Property AppPrincipalIdentityProviders : TSPAppPrincipalIdentityProvidersEntitySet read GetAppPrincipalIdentityProviders;
    Property AppPrincipalManagers : TSPAppPrincipalManagersEntitySet read GetAppPrincipalManagers;
    Property AppPrincipalCredentials : TSPAppPrincipalCredentialsEntitySet read GetAppPrincipalCredentials;
    Property AppPrincipalNames : TSPAppPrincipalNamesEntitySet read GetAppPrincipalNames;
    Property DraftProjectResources1 : TSPDraftProjectResources1EntitySet read GetDraftProjectResources1;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Apps
    --------------------------------------------------------------------}
  
  TSPAppsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: string) : TMicrosoft_AppServicesApp;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_AppServicesAppArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_AppServicesAppArray;
    function ListAll(const AQuery: String) : TMicrosoft_AppServicesAppArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_AppServicesAppArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Files
    --------------------------------------------------------------------}
  
  TSPFilesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: string) : TMS_FileServicesFileSystemItem;
    function List(const AQuery: String; out NextLink: String)
              : TMS_FileServicesFileSystemItemArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_FileServicesFileSystemItemArray;
    function ListAll(const AQuery: String)
                 : TMS_FileServicesFileSystemItemArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_FileServicesFileSystemItemArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Lists
    --------------------------------------------------------------------}
  
  TSPListsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasUniqueRoleAssignments: boolean) : TSPList;
    function List(const AQuery: String; out NextLink: String) : TSPListArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPListArray;
    function ListAll(const AQuery: String) : TSPListArray;
    function ListAll(const AQuery: TQueryParams) : TSPListArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Mes
    --------------------------------------------------------------------}
  
  TSPMesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPRequestUserContext;
    function List(const AQuery: String; out NextLink: String)
              : TSPRequestUserContextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRequestUserContextArray;
    function ListAll(const AQuery: String) : TSPRequestUserContextArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPRequestUserContextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Sites
    --------------------------------------------------------------------}
  
  TSPSitesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPSite;
    function List(const AQuery: String; out NextLink: String) : TSPSiteArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSiteArray;
    function ListAll(const AQuery: String) : TSPSiteArray;
    function ListAll(const AQuery: TQueryParams) : TSPSiteArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Webs
    --------------------------------------------------------------------}
  
  TSPWebsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasUniqueRoleAssignments: boolean) : TSPWeb;
    function List(const AQuery: String; out NextLink: String) : TSPWebArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPWebArray;
    function ListAll(const AQuery: String) : TSPWebArray;
    function ListAll(const AQuery: TQueryParams) : TSPWebArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppStores
    --------------------------------------------------------------------}
  
  TSPAppStoresEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_AppServicesAppStore;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_AppServicesAppStoreArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_AppServicesAppStoreArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_AppServicesAppStoreArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_AppServicesAppStoreArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ConnectionSettingss
    --------------------------------------------------------------------}
  
  TSPConnectionSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string)
             : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TargetApplications
    --------------------------------------------------------------------}
  
  TSPTargetApplicationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ApplicationId: string)
             : TMicrosoft_Office_SecureStoreService_ServerTargetApplication;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TargetApplicationFields
    --------------------------------------------------------------------}
  
  TSPTargetApplicationFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string)
             : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Reputations
    --------------------------------------------------------------------}
  
  TSPReputationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_Office_Server_ReputationModelReputation;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Office_Server_ReputationModelReputationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Office_Server_ReputationModelReputationArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Office_Server_ReputationModelReputationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Office_Server_ReputationModelReputationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SearchServices
    --------------------------------------------------------------------}
  
  TSPSearchServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_Office_Server_Search_RESTSearchService;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Office_Server_Search_RESTSearchServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Office_Server_Search_RESTSearchServiceArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Office_Server_Search_RESTSearchServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Office_Server_Search_RESTSearchServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Apps1
    --------------------------------------------------------------------}
  
  TSPApps1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TMS_AppDataApp;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataAppArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataAppArray;
    function ListAll(const AQuery: String) : TMS_AppDataAppArray;
    function ListAll(const AQuery: TQueryParams) : TMS_AppDataAppArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingAdmins
    --------------------------------------------------------------------}
  
  TSPPointPublishingAdminsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DDIAdapters
    --------------------------------------------------------------------}
  
  TSPDDIAdaptersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPOTenantWebTemplateCollections
    --------------------------------------------------------------------}
  
  TSPSPOTenantWebTemplateCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ExternalUsers
    --------------------------------------------------------------------}
  
  TSPExternalUsersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AcceptedAs: string)
             : TMicrosoft_Online_SharePoint_TenantManagementExternalUser;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: GetExternalUsersResultss
    --------------------------------------------------------------------}
  
  TSPGetExternalUsersResultssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const TotalUserCount: TInt32)
             : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Office365Tenants
    --------------------------------------------------------------------}
  
  TSPOffice365TenantsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const DisplayStartASiteOption: boolean)
             : TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RemoveExternalUsersResultss
    --------------------------------------------------------------------}
  
  TSPRemoveExternalUsersResultssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FeatureDefinitions
    --------------------------------------------------------------------}
  
  TSPFeatureDefinitionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString)
             : TMicrosoft_SharePoint_AdministrationFeatureDefinition;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPAnalyticsUsageServices
    --------------------------------------------------------------------}
  
  TSPSPAnalyticsUsageServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPAppStateQueryJobDefinitions
    --------------------------------------------------------------------}
  
  TSPSPAppStateQueryJobDefinitionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPFarms
    --------------------------------------------------------------------}
  
  TSPSPFarmsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString)
             : TMicrosoft_SharePoint_AdministrationSPFarm;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPFarmArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPFarmArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationSPFarmArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationSPFarmArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPTenantAppInstanceDatas
    --------------------------------------------------------------------}
  
  TSPSPTenantAppInstanceDatasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPWebApplications
    --------------------------------------------------------------------}
  
  TSPSPWebApplicationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString)
             : TMicrosoft_SharePoint_AdministrationSPWebApplication;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPWebServices
    --------------------------------------------------------------------}
  
  TSPSPWebServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_AdministrationSPWebService;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPWebServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AdministrationSPWebServiceArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AdministrationSPWebServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AdministrationSPWebServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPAppPrincipalInfos
    --------------------------------------------------------------------}
  
  TSPSPAppPrincipalInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string)
             : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DocumentCrawlLogs
    --------------------------------------------------------------------}
  
  TSPDocumentCrawlLogsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SignalStores
    --------------------------------------------------------------------}
  
  TSPSignalStoresEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: QueryPersonalizationDatas
    --------------------------------------------------------------------}
  
  TSPQueryPersonalizationDatasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RankingLabelings
    --------------------------------------------------------------------}
  
  TSPRankingLabelingsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ReorderingRuleCollections
    --------------------------------------------------------------------}
  
  TSPReorderingRuleCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SortCollections
    --------------------------------------------------------------------}
  
  TSPSortCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_QuerySortCollection;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: StringCollections
    --------------------------------------------------------------------}
  
  TSPStringCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Client_Search_QueryStringCollection;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPFlights
    --------------------------------------------------------------------}
  
  TSPSPFlightsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Configuration: string)
             : TMicrosoft_SharePoint_Flighting_RuntimeSPFlight;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPCorporateCuratedGallerySettingsBases
    --------------------------------------------------------------------}
  
  TSPSPCorporateCuratedGallerySettingsBasesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HostSiteFullUrl: string)
             : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPCorporateCuratedGallerySettingsFactorys
    --------------------------------------------------------------------}
  
  TSPSPCorporateCuratedGallerySettingsFactorysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPMarketplaceSettingss
    --------------------------------------------------------------------}
  
  TSPSPMarketplaceSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NavigationServiceRests
    --------------------------------------------------------------------}
  
  TSPNavigationServiceRestsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppDetailss
    --------------------------------------------------------------------}
  
  TSPAppDetailssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const EulaUrl: string)
             : TMicrosoft_SharePoint_PackagingAppDetails;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_PackagingAppDetailsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_PackagingAppDetailsArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_PackagingAppDetailsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_PackagingAppDetailsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppIconInfos
    --------------------------------------------------------------------}
  
  TSPAppIconInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Content: TBinary)
             : TMicrosoft_SharePoint_PackagingAppIconInfo;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_PackagingAppIconInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_PackagingAppIconInfoArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_PackagingAppIconInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_PackagingAppIconInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CollaborationMailboxs
    --------------------------------------------------------------------}
  
  TSPCollaborationMailboxsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_PortalCollaborationMailbox;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_PortalCollaborationMailboxArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_PortalCollaborationMailboxArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_PortalCollaborationMailboxArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_PortalCollaborationMailboxArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CommunityModerations
    --------------------------------------------------------------------}
  
  TSPCommunityModerationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_PortalCommunityModeration;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_PortalCommunityModerationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_PortalCommunityModerationArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_PortalCommunityModerationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_PortalCommunityModerationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MySiteRecommendationss
    --------------------------------------------------------------------}
  
  TSPMySiteRecommendationssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_PortalMySiteRecommendations;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DocumentsSharedWithGroups
    --------------------------------------------------------------------}
  
  TSPDocumentsSharedWithGroupsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DocumentsSharedWithMes
    --------------------------------------------------------------------}
  
  TSPDocumentsSharedWithMesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DocumentsSharedWithPersons
    --------------------------------------------------------------------}
  
  TSPDocumentsSharedWithPersonsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MySiteDismissStatusTexts
    --------------------------------------------------------------------}
  
  TSPMySiteDismissStatusTextsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MySiteDocumentMoveUtilitys
    --------------------------------------------------------------------}
  
  TSPMySiteDocumentMoveUtilitysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MySiteLinkss
    --------------------------------------------------------------------}
  
  TSPMySiteLinkssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AllDocumentsLink: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PromotedSitess
    --------------------------------------------------------------------}
  
  TSPPromotedSitessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SharedWithMeDocuments
    --------------------------------------------------------------------}
  
  TSPSharedWithMeDocumentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32)
             : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RecentDocuments
    --------------------------------------------------------------------}
  
  TSPRecentDocumentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32)
             : TMicrosoft_SharePoint_Portal_WebControlsRecentDocument;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ModuleLinks
    --------------------------------------------------------------------}
  
  TSPModuleLinksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_WebControlsModuleLink;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_WebControlsModuleLinkArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_WebControlsModuleLinkArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_WebControlsModuleLinkArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_WebControlsModuleLinkArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ResourceManifestInformations
    --------------------------------------------------------------------}
  
  TSPResourceManifestInformationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const RequireJsScriptBlock: string)
             : TMicrosoft_SharePoint_WebControlsResourceManifestInformation;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WacApis
    --------------------------------------------------------------------}
  
  TSPWacApisEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMicrosoft_SharePoint_YammerWacApi;
    function List(const AQuery: String; out NextLink: String)
              : TMicrosoft_SharePoint_YammerWacApiArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMicrosoft_SharePoint_YammerWacApiArray;
    function ListAll(const AQuery: String)
                 : TMicrosoft_SharePoint_YammerWacApiArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMicrosoft_SharePoint_YammerWacApiArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityItems
    --------------------------------------------------------------------}
  
  TSPEntityItemsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TMS_AppDataEntityItem;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataEntityItemArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataEntityItemArray;
    function ListAll(const AQuery: String) : TMS_AppDataEntityItemArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataEntityItemArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityTypes
    --------------------------------------------------------------------}
  
  TSPEntityTypesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TMS_AppDataEntityType;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataEntityTypeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataEntityTypeArray;
    function ListAll(const AQuery: String) : TMS_AppDataEntityTypeArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataEntityTypeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityTypeBases
    --------------------------------------------------------------------}
  
  TSPEntityTypeBasesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TMS_AppDataEntityTypeBase;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataEntityTypeBaseArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataEntityTypeBaseArray;
    function ListAll(const AQuery: String) : TMS_AppDataEntityTypeBaseArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataEntityTypeBaseArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ExternalEntityTypes
    --------------------------------------------------------------------}
  
  TSPExternalEntityTypesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TMS_AppDataExternalEntityType;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataExternalEntityTypeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataExternalEntityTypeArray;
    function ListAll(const AQuery: String)
                 : TMS_AppDataExternalEntityTypeArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataExternalEntityTypeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Fields
    --------------------------------------------------------------------}
  
  TSPFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TMS_AppDataField;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataFieldArray;
    function ListAll(const AQuery: String) : TMS_AppDataFieldArray;
    function ListAll(const AQuery: TQueryParams) : TMS_AppDataFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ODataStoreContexts
    --------------------------------------------------------------------}
  
  TSPODataStoreContextsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMS_AppDataODataStoreContext;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataODataStoreContextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataODataStoreContextArray;
    function ListAll(const AQuery: String)
                 : TMS_AppDataODataStoreContextArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataODataStoreContextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RequestContexts
    --------------------------------------------------------------------}
  
  TSPRequestContextsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMS_AppDataRequestContext;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataRequestContextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataRequestContextArray;
    function ListAll(const AQuery: String) : TMS_AppDataRequestContextArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataRequestContextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SqlStoreContexts
    --------------------------------------------------------------------}
  
  TSPSqlStoreContextsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMS_AppDataSqlStoreContext;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataSqlStoreContextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataSqlStoreContextArray;
    function ListAll(const AQuery: String) : TMS_AppDataSqlStoreContextArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataSqlStoreContextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: StoreContextBases
    --------------------------------------------------------------------}
  
  TSPStoreContextBasesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMS_AppDataStoreContextBase;
    function List(const AQuery: String; out NextLink: String)
              : TMS_AppDataStoreContextBaseArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_AppDataStoreContextBaseArray;
    function ListAll(const AQuery: String)
                 : TMS_AppDataStoreContextBaseArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_AppDataStoreContextBaseArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Files1
    --------------------------------------------------------------------}
  
  TSPFiles1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: string) : TMS_FileServices_File;
    function List(const AQuery: String; out NextLink: String)
              : TMS_FileServices_FileArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_FileServices_FileArray;
    function ListAll(const AQuery: String) : TMS_FileServices_FileArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_FileServices_FileArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FileServices
    --------------------------------------------------------------------}
  
  TSPFileServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMS_FileServicesFileService;
    function List(const AQuery: String; out NextLink: String)
              : TMS_FileServicesFileServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_FileServicesFileServiceArray;
    function ListAll(const AQuery: String)
                 : TMS_FileServicesFileServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_FileServicesFileServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Folders
    --------------------------------------------------------------------}
  
  TSPFoldersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: string) : TMS_FileServicesFolder;
    function List(const AQuery: String; out NextLink: String)
              : TMS_FileServicesFolderArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_FileServicesFolderArray;
    function ListAll(const AQuery: String) : TMS_FileServicesFolderArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_FileServicesFolderArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MeFileServices
    --------------------------------------------------------------------}
  
  TSPMeFileServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TMS_FileServicesMeFileService;
    function List(const AQuery: String; out NextLink: String)
              : TMS_FileServicesMeFileServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TMS_FileServicesMeFileServiceArray;
    function ListAll(const AQuery: String)
                 : TMS_FileServicesMeFileServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TMS_FileServicesMeFileServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Diagnosticss
    --------------------------------------------------------------------}
  
  TSPDiagnosticssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TOBA_Server_ServerWrapperDiagnostics;
    function List(const AQuery: String; out NextLink: String)
              : TOBA_Server_ServerWrapperDiagnosticsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TOBA_Server_ServerWrapperDiagnosticsArray;
    function ListAll(const AQuery: String)
                 : TOBA_Server_ServerWrapperDiagnosticsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TOBA_Server_ServerWrapperDiagnosticsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Reportings
    --------------------------------------------------------------------}
  
  TSPReportingsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TOBA_Server_ServerWrapperReporting;
    function List(const AQuery: String; out NextLink: String)
              : TOBA_Server_ServerWrapperReportingArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TOBA_Server_ServerWrapperReportingArray;
    function ListAll(const AQuery: String)
                 : TOBA_Server_ServerWrapperReportingArray;
    function ListAll(const AQuery: TQueryParams)
                 : TOBA_Server_ServerWrapperReportingArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Taskflows
    --------------------------------------------------------------------}
  
  TSPTaskflowsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TOBA_Server_ServerWrapperTaskflow;
    function List(const AQuery: String; out NextLink: String)
              : TOBA_Server_ServerWrapperTaskflowArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TOBA_Server_ServerWrapperTaskflowArray;
    function ListAll(const AQuery: String)
                 : TOBA_Server_ServerWrapperTaskflowArray;
    function ListAll(const AQuery: TQueryParams)
                 : TOBA_Server_ServerWrapperTaskflowArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Assignments
    --------------------------------------------------------------------}
  
  TSPAssignmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSAssignment;
    function List(const AQuery: String; out NextLink: String)
              : TPSAssignmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSAssignmentArray;
    function ListAll(const AQuery: String) : TPSAssignmentArray;
    function ListAll(const AQuery: TQueryParams) : TPSAssignmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: BaseCalendarExceptions
    --------------------------------------------------------------------}
  
  TSPBaseCalendarExceptionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TPSBaseCalendarException;
    function List(const AQuery: String; out NextLink: String)
              : TPSBaseCalendarExceptionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSBaseCalendarExceptionArray;
    function ListAll(const AQuery: String) : TPSBaseCalendarExceptionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSBaseCalendarExceptionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Calendars
    --------------------------------------------------------------------}
  
  TSPCalendarsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSCalendar;
    function List(const AQuery: String; out NextLink: String)
              : TPSCalendarArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSCalendarArray;
    function ListAll(const AQuery: String) : TPSCalendarArray;
    function ListAll(const AQuery: TQueryParams) : TPSCalendarArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CalendarExceptions
    --------------------------------------------------------------------}
  
  TSPCalendarExceptionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TPSCalendarException;
    function List(const AQuery: String; out NextLink: String)
              : TPSCalendarExceptionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSCalendarExceptionArray;
    function ListAll(const AQuery: String) : TPSCalendarExceptionArray;
    function ListAll(const AQuery: TQueryParams) : TPSCalendarExceptionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CustomFields
    --------------------------------------------------------------------}
  
  TSPCustomFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSCustomField;
    function List(const AQuery: String; out NextLink: String)
              : TPSCustomFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSCustomFieldArray;
    function ListAll(const AQuery: String) : TPSCustomFieldArray;
    function ListAll(const AQuery: TQueryParams) : TPSCustomFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DraftAssignments
    --------------------------------------------------------------------}
  
  TSPDraftAssignmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSDraftAssignment;
    function List(const AQuery: String; out NextLink: String)
              : TPSDraftAssignmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSDraftAssignmentArray;
    function ListAll(const AQuery: String) : TPSDraftAssignmentArray;
    function ListAll(const AQuery: TQueryParams) : TPSDraftAssignmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DraftProjects
    --------------------------------------------------------------------}
  
  TSPDraftProjectsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSDraftProject;
    function List(const AQuery: String; out NextLink: String)
              : TPSDraftProjectArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSDraftProjectArray;
    function ListAll(const AQuery: String) : TPSDraftProjectArray;
    function ListAll(const AQuery: TQueryParams) : TPSDraftProjectArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DraftProjectResources
    --------------------------------------------------------------------}
  
  TSPDraftProjectResourcesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSDraftProjectResource;
    function List(const AQuery: String; out NextLink: String)
              : TPSDraftProjectResourceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSDraftProjectResourceArray;
    function ListAll(const AQuery: String) : TPSDraftProjectResourceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSDraftProjectResourceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DraftTasks
    --------------------------------------------------------------------}
  
  TSPDraftTasksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSDraftTask;
    function List(const AQuery: String; out NextLink: String)
              : TPSDraftTaskArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSDraftTaskArray;
    function ListAll(const AQuery: String) : TPSDraftTaskArray;
    function ListAll(const AQuery: TQueryParams) : TPSDraftTaskArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DraftTaskLinks
    --------------------------------------------------------------------}
  
  TSPDraftTaskLinksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSDraftTaskLink;
    function List(const AQuery: String; out NextLink: String)
              : TPSDraftTaskLinkArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSDraftTaskLinkArray;
    function ListAll(const AQuery: String) : TPSDraftTaskLinkArray;
    function ListAll(const AQuery: TQueryParams) : TPSDraftTaskLinkArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EnterpriseProjectTypes
    --------------------------------------------------------------------}
  
  TSPEnterpriseProjectTypesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSEnterpriseProjectType;
    function List(const AQuery: String; out NextLink: String)
              : TPSEnterpriseProjectTypeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSEnterpriseProjectTypeArray;
    function ListAll(const AQuery: String) : TPSEnterpriseProjectTypeArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSEnterpriseProjectTypeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EnterpriseResources
    --------------------------------------------------------------------}
  
  TSPEnterpriseResourcesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSEnterpriseResource;
    function List(const AQuery: String; out NextLink: String)
              : TPSEnterpriseResourceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSEnterpriseResourceArray;
    function ListAll(const AQuery: String) : TPSEnterpriseResourceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSEnterpriseResourceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityTypes1
    --------------------------------------------------------------------}
  
  TSPEntityTypes1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TPSEntityType;
    function List(const AQuery: String; out NextLink: String)
              : TPSEntityTypeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSEntityTypeArray;
    function ListAll(const AQuery: String) : TPSEntityTypeArray;
    function ListAll(const AQuery: TQueryParams) : TPSEntityTypeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityTypess
    --------------------------------------------------------------------}
  
  TSPEntityTypessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TPSEntityTypes;
    function List(const AQuery: String; out NextLink: String)
              : TPSEntityTypesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSEntityTypesArray;
    function ListAll(const AQuery: String) : TPSEntityTypesArray;
    function ListAll(const AQuery: TQueryParams) : TPSEntityTypesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Events
    --------------------------------------------------------------------}
  
  TSPEventsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TPSEvent;
    function List(const AQuery: String; out NextLink: String)
              : TPSEventArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSEventArray;
    function ListAll(const AQuery: String) : TPSEventArray;
    function ListAll(const AQuery: TQueryParams) : TPSEventArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EventHandlers
    --------------------------------------------------------------------}
  
  TSPEventHandlersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSEventHandler;
    function List(const AQuery: String; out NextLink: String)
              : TPSEventHandlerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSEventHandlerArray;
    function ListAll(const AQuery: String) : TPSEventHandlerArray;
    function ListAll(const AQuery: TQueryParams) : TPSEventHandlerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupCosts
    --------------------------------------------------------------------}
  
  TSPLookupCostsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupCost;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupCostArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupCostArray;
    function ListAll(const AQuery: String) : TPSLookupCostArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupCostArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupDates
    --------------------------------------------------------------------}
  
  TSPLookupDatesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupDate;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupDateArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupDateArray;
    function ListAll(const AQuery: String) : TPSLookupDateArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupDateArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupDurations
    --------------------------------------------------------------------}
  
  TSPLookupDurationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupDuration;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupDurationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupDurationArray;
    function ListAll(const AQuery: String) : TPSLookupDurationArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupDurationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupEntrys
    --------------------------------------------------------------------}
  
  TSPLookupEntrysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupEntry;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupEntryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupEntryArray;
    function ListAll(const AQuery: String) : TPSLookupEntryArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupEntryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupNumbers
    --------------------------------------------------------------------}
  
  TSPLookupNumbersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupNumber;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupNumberArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupNumberArray;
    function ListAll(const AQuery: String) : TPSLookupNumberArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupNumberArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupTables
    --------------------------------------------------------------------}
  
  TSPLookupTablesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupTable;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupTableArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupTableArray;
    function ListAll(const AQuery: String) : TPSLookupTableArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupTableArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupTabless
    --------------------------------------------------------------------}
  
  TSPLookupTablessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TPSLookupTables;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupTablesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupTablesArray;
    function ListAll(const AQuery: String) : TPSLookupTablesArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupTablesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LookupTexts
    --------------------------------------------------------------------}
  
  TSPLookupTextsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSLookupText;
    function List(const AQuery: String; out NextLink: String)
              : TPSLookupTextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSLookupTextArray;
    function ListAll(const AQuery: String) : TPSLookupTextArray;
    function ListAll(const AQuery: TQueryParams) : TPSLookupTextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Phases
    --------------------------------------------------------------------}
  
  TSPPhasesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPhase;
    function List(const AQuery: String; out NextLink: String)
              : TPSPhaseArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPhaseArray;
    function ListAll(const AQuery: String) : TPSPhaseArray;
    function ListAll(const AQuery: TQueryParams) : TPSPhaseArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PlanAssignments
    --------------------------------------------------------------------}
  
  TSPPlanAssignmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPlanAssignment;
    function List(const AQuery: String; out NextLink: String)
              : TPSPlanAssignmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPlanAssignmentArray;
    function ListAll(const AQuery: String) : TPSPlanAssignmentArray;
    function ListAll(const AQuery: TQueryParams) : TPSPlanAssignmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PlanAssignmentIntervals
    --------------------------------------------------------------------}
  
  TSPPlanAssignmentIntervalsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TPSPlanAssignmentInterval;
    function List(const AQuery: String; out NextLink: String)
              : TPSPlanAssignmentIntervalArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPlanAssignmentIntervalArray;
    function ListAll(const AQuery: String) : TPSPlanAssignmentIntervalArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSPlanAssignmentIntervalArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Projects
    --------------------------------------------------------------------}
  
  TSPProjectsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSProject;
    function List(const AQuery: String; out NextLink: String)
              : TPSProjectArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSProjectArray;
    function ListAll(const AQuery: String) : TPSProjectArray;
    function ListAll(const AQuery: TQueryParams) : TPSProjectArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProjectDetailPages
    --------------------------------------------------------------------}
  
  TSPProjectDetailPagesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSProjectDetailPage;
    function List(const AQuery: String; out NextLink: String)
              : TPSProjectDetailPageArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSProjectDetailPageArray;
    function ListAll(const AQuery: String) : TPSProjectDetailPageArray;
    function ListAll(const AQuery: TQueryParams) : TPSProjectDetailPageArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProjectResources
    --------------------------------------------------------------------}
  
  TSPProjectResourcesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSProjectResource;
    function List(const AQuery: String; out NextLink: String)
              : TPSProjectResourceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSProjectResourceArray;
    function ListAll(const AQuery: String) : TPSProjectResourceArray;
    function ListAll(const AQuery: TQueryParams) : TPSProjectResourceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProjectServers
    --------------------------------------------------------------------}
  
  TSPProjectServersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const IsDelegate: boolean) : TPSProjectServer;
    function List(const AQuery: String; out NextLink: String)
              : TPSProjectServerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSProjectServerArray;
    function ListAll(const AQuery: String) : TPSProjectServerArray;
    function ListAll(const AQuery: TQueryParams) : TPSProjectServerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProjectServerDatas
    --------------------------------------------------------------------}
  
  TSPProjectServerDatasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TPSProjectServerData;
    function List(const AQuery: String; out NextLink: String)
              : TPSProjectServerDataArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSProjectServerDataArray;
    function ListAll(const AQuery: String) : TPSProjectServerDataArray;
    function ListAll(const AQuery: TQueryParams) : TPSProjectServerDataArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PublishedAssignments
    --------------------------------------------------------------------}
  
  TSPPublishedAssignmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPublishedAssignment;
    function List(const AQuery: String; out NextLink: String)
              : TPSPublishedAssignmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPublishedAssignmentArray;
    function ListAll(const AQuery: String) : TPSPublishedAssignmentArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSPublishedAssignmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PublishedProjects
    --------------------------------------------------------------------}
  
  TSPPublishedProjectsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPublishedProject;
    function List(const AQuery: String; out NextLink: String)
              : TPSPublishedProjectArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPublishedProjectArray;
    function ListAll(const AQuery: String) : TPSPublishedProjectArray;
    function ListAll(const AQuery: TQueryParams) : TPSPublishedProjectArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PublishedProjectResources
    --------------------------------------------------------------------}
  
  TSPPublishedProjectResourcesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPublishedProjectResource;
    function List(const AQuery: String; out NextLink: String)
              : TPSPublishedProjectResourceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPublishedProjectResourceArray;
    function ListAll(const AQuery: String)
                 : TPSPublishedProjectResourceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSPublishedProjectResourceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PublishedTasks
    --------------------------------------------------------------------}
  
  TSPPublishedTasksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPublishedTask;
    function List(const AQuery: String; out NextLink: String)
              : TPSPublishedTaskArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPublishedTaskArray;
    function ListAll(const AQuery: String) : TPSPublishedTaskArray;
    function ListAll(const AQuery: TQueryParams) : TPSPublishedTaskArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PublishedTaskLinks
    --------------------------------------------------------------------}
  
  TSPPublishedTaskLinksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSPublishedTaskLink;
    function List(const AQuery: String; out NextLink: String)
              : TPSPublishedTaskLinkArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSPublishedTaskLinkArray;
    function ListAll(const AQuery: String) : TPSPublishedTaskLinkArray;
    function ListAll(const AQuery: TQueryParams) : TPSPublishedTaskLinkArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: QueueJobs
    --------------------------------------------------------------------}
  
  TSPQueueJobsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSQueueJob;
    function List(const AQuery: String; out NextLink: String)
              : TPSQueueJobArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSQueueJobArray;
    function ListAll(const AQuery: String) : TPSQueueJobArray;
    function ListAll(const AQuery: TQueryParams) : TPSQueueJobArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ResourceCalendarExceptions
    --------------------------------------------------------------------}
  
  TSPResourceCalendarExceptionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TPSResourceCalendarException;
    function List(const AQuery: String; out NextLink: String)
              : TPSResourceCalendarExceptionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSResourceCalendarExceptionArray;
    function ListAll(const AQuery: String)
                 : TPSResourceCalendarExceptionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSResourceCalendarExceptionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ResourcePlans
    --------------------------------------------------------------------}
  
  TSPResourcePlansEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSResourcePlan;
    function List(const AQuery: String; out NextLink: String)
              : TPSResourcePlanArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSResourcePlanArray;
    function ListAll(const AQuery: String) : TPSResourcePlanArray;
    function ListAll(const AQuery: TQueryParams) : TPSResourcePlanArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ServiceStatuss
    --------------------------------------------------------------------}
  
  TSPServiceStatussEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const IsDelegate: boolean) : TPSServiceStatus;
    function List(const AQuery: String; out NextLink: String)
              : TPSServiceStatusArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSServiceStatusArray;
    function ListAll(const AQuery: String) : TPSServiceStatusArray;
    function ListAll(const AQuery: TQueryParams) : TPSServiceStatusArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Stages
    --------------------------------------------------------------------}
  
  TSPStagesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSStage;
    function List(const AQuery: String; out NextLink: String)
              : TPSStageArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSStageArray;
    function ListAll(const AQuery: String) : TPSStageArray;
    function ListAll(const AQuery: TQueryParams) : TPSStageArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: StageCustomFields
    --------------------------------------------------------------------}
  
  TSPStageCustomFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSStageCustomField;
    function List(const AQuery: String; out NextLink: String)
              : TPSStageCustomFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSStageCustomFieldArray;
    function ListAll(const AQuery: String) : TPSStageCustomFieldArray;
    function ListAll(const AQuery: TQueryParams) : TPSStageCustomFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: StageDetailPages
    --------------------------------------------------------------------}
  
  TSPStageDetailPagesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSStageDetailPage;
    function List(const AQuery: String; out NextLink: String)
              : TPSStageDetailPageArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSStageDetailPageArray;
    function ListAll(const AQuery: String) : TPSStageDetailPageArray;
    function ListAll(const AQuery: TQueryParams) : TPSStageDetailPageArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: StatusAssignments
    --------------------------------------------------------------------}
  
  TSPStatusAssignmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSStatusAssignment;
    function List(const AQuery: String; out NextLink: String)
              : TPSStatusAssignmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSStatusAssignmentArray;
    function ListAll(const AQuery: String) : TPSStatusAssignmentArray;
    function ListAll(const AQuery: TQueryParams) : TPSStatusAssignmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: StatusTasks
    --------------------------------------------------------------------}
  
  TSPStatusTasksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSStatusTask;
    function List(const AQuery: String; out NextLink: String)
              : TPSStatusTaskArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSStatusTaskArray;
    function ListAll(const AQuery: String) : TPSStatusTaskArray;
    function ListAll(const AQuery: TQueryParams) : TPSStatusTaskArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Tasks
    --------------------------------------------------------------------}
  
  TSPTasksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSTask;
    function List(const AQuery: String; out NextLink: String) : TPSTaskArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTaskArray;
    function ListAll(const AQuery: String) : TPSTaskArray;
    function ListAll(const AQuery: TQueryParams) : TPSTaskArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskLinks
    --------------------------------------------------------------------}
  
  TSPTaskLinksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSTaskLink;
    function List(const AQuery: String; out NextLink: String)
              : TPSTaskLinkArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTaskLinkArray;
    function ListAll(const AQuery: String) : TPSTaskLinkArray;
    function ListAll(const AQuery: TQueryParams) : TPSTaskLinkArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskServiceOdataEndpoints
    --------------------------------------------------------------------}
  
  TSPTaskServiceOdataEndpointsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TPSTaskServiceOdataEndpoint;
    function List(const AQuery: String; out NextLink: String)
              : TPSTaskServiceOdataEndpointArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTaskServiceOdataEndpointArray;
    function ListAll(const AQuery: String)
                 : TPSTaskServiceOdataEndpointArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSTaskServiceOdataEndpointArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimePhases
    --------------------------------------------------------------------}
  
  TSPTimePhasesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _End: TDateTime) : TPSTimePhase;
    function List(const AQuery: String; out NextLink: String)
              : TPSTimePhaseArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTimePhaseArray;
    function ListAll(const AQuery: String) : TPSTimePhaseArray;
    function ListAll(const AQuery: TQueryParams) : TPSTimePhaseArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeSheets
    --------------------------------------------------------------------}
  
  TSPTimeSheetsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSTimeSheet;
    function List(const AQuery: String; out NextLink: String)
              : TPSTimeSheetArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTimeSheetArray;
    function ListAll(const AQuery: String) : TPSTimeSheetArray;
    function ListAll(const AQuery: TQueryParams) : TPSTimeSheetArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeSheetLines
    --------------------------------------------------------------------}
  
  TSPTimeSheetLinesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSTimeSheetLine;
    function List(const AQuery: String; out NextLink: String)
              : TPSTimeSheetLineArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTimeSheetLineArray;
    function ListAll(const AQuery: String) : TPSTimeSheetLineArray;
    function ListAll(const AQuery: TQueryParams) : TPSTimeSheetLineArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeSheetPeriods
    --------------------------------------------------------------------}
  
  TSPTimeSheetPeriodsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSTimeSheetPeriod;
    function List(const AQuery: String; out NextLink: String)
              : TPSTimeSheetPeriodArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTimeSheetPeriodArray;
    function ListAll(const AQuery: String) : TPSTimeSheetPeriodArray;
    function ListAll(const AQuery: TQueryParams) : TPSTimeSheetPeriodArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeSheetWorks
    --------------------------------------------------------------------}
  
  TSPTimeSheetWorksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSTimeSheetWork;
    function List(const AQuery: String; out NextLink: String)
              : TPSTimeSheetWorkArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSTimeSheetWorkArray;
    function ListAll(const AQuery: String) : TPSTimeSheetWorkArray;
    function ListAll(const AQuery: TQueryParams) : TPSTimeSheetWorkArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowActivitiess
    --------------------------------------------------------------------}
  
  TSPWorkflowActivitiessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TPSWorkflowActivities;
    function List(const AQuery: String; out NextLink: String)
              : TPSWorkflowActivitiesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSWorkflowActivitiesArray;
    function ListAll(const AQuery: String) : TPSWorkflowActivitiesArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSWorkflowActivitiesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowDesigners
    --------------------------------------------------------------------}
  
  TSPWorkflowDesignersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TPSWorkflowDesigner;
    function List(const AQuery: String; out NextLink: String)
              : TPSWorkflowDesignerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSWorkflowDesignerArray;
    function ListAll(const AQuery: String) : TPSWorkflowDesignerArray;
    function ListAll(const AQuery: TQueryParams) : TPSWorkflowDesignerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowDesignerFields
    --------------------------------------------------------------------}
  
  TSPWorkflowDesignerFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: string) : TPSWorkflowDesignerField;
    function List(const AQuery: String; out NextLink: String)
              : TPSWorkflowDesignerFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSWorkflowDesignerFieldArray;
    function ListAll(const AQuery: String) : TPSWorkflowDesignerFieldArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSWorkflowDesignerFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AccessRequestss
    --------------------------------------------------------------------}
  
  TSPAccessRequestssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAccessRequests;
    function List(const AQuery: String; out NextLink: String)
              : TSPAccessRequestsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAccessRequestsArray;
    function ListAll(const AQuery: String) : TSPAccessRequestsArray;
    function ListAll(const AQuery: TQueryParams) : TSPAccessRequestsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AlternateUrls
    --------------------------------------------------------------------}
  
  TSPAlternateUrlsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Uri: string) : TSPAlternateUrl;
    function List(const AQuery: String; out NextLink: String)
              : TSPAlternateUrlArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAlternateUrlArray;
    function ListAll(const AQuery: String) : TSPAlternateUrlArray;
    function ListAll(const AQuery: TQueryParams) : TSPAlternateUrlArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AnalyticsUsageEntrys
    --------------------------------------------------------------------}
  
  TSPAnalyticsUsageEntrysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_AnalyticsAnalyticsUsageEntry;
    function List(const AQuery: String; out NextLink: String)
              : TSP_AnalyticsAnalyticsUsageEntryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_AnalyticsAnalyticsUsageEntryArray;
    function ListAll(const AQuery: String)
                 : TSP_AnalyticsAnalyticsUsageEntryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_AnalyticsAnalyticsUsageEntryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ApiMetadatas
    --------------------------------------------------------------------}
  
  TSPApiMetadatasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPApiMetadata;
    function List(const AQuery: String; out NextLink: String)
              : TSPApiMetadataArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPApiMetadataArray;
    function ListAll(const AQuery: String) : TSPApiMetadataArray;
    function ListAll(const AQuery: TQueryParams) : TSPApiMetadataArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Apps12
    --------------------------------------------------------------------}
  
  TSPApps12EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AssetId: string) : TSPApp;
    function List(const AQuery: String; out NextLink: String) : TSPAppArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppArray;
    function ListAll(const AQuery: String) : TSPAppArray;
    function ListAll(const AQuery: TQueryParams) : TSPAppArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppCatalogs
    --------------------------------------------------------------------}
  
  TSPAppCatalogsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAppCatalog;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppCatalogArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppCatalogArray;
    function ListAll(const AQuery: String) : TSPAppCatalogArray;
    function ListAll(const AQuery: TQueryParams) : TSPAppCatalogArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppContextSites
    --------------------------------------------------------------------}
  
  TSPAppContextSitesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAppContextSite;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppContextSiteArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppContextSiteArray;
    function ListAll(const AQuery: String) : TSPAppContextSiteArray;
    function ListAll(const AQuery: TQueryParams) : TSPAppContextSiteArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppInstances
    --------------------------------------------------------------------}
  
  TSPAppInstancesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPAppInstance;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppInstanceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppInstanceArray;
    function ListAll(const AQuery: String) : TSPAppInstanceArray;
    function ListAll(const AQuery: TQueryParams) : TSPAppInstanceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppInstanceErrorDetailss
    --------------------------------------------------------------------}
  
  TSPAppInstanceErrorDetailssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CorrelationId: TGUIDString)
             : TSPAppInstanceErrorDetails;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppInstanceErrorDetailsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppInstanceErrorDetailsArray;
    function ListAll(const AQuery: String) : TSPAppInstanceErrorDetailsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPAppInstanceErrorDetailsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppTiles
    --------------------------------------------------------------------}
  
  TSPAppTilesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AppType: TInt32) : TSPAppTile;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppTileArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppTileArray;
    function ListAll(const AQuery: String) : TSPAppTileArray;
    function ListAll(const AQuery: TQueryParams) : TSPAppTileArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Attachments
    --------------------------------------------------------------------}
  
  TSPAttachmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FileName: string) : TSPAttachment;
    function List(const AQuery: String; out NextLink: String)
              : TSPAttachmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAttachmentArray;
    function ListAll(const AQuery: String) : TSPAttachmentArray;
    function ListAll(const AQuery: TQueryParams) : TSPAttachmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Audits
    --------------------------------------------------------------------}
  
  TSPAuditsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AuditFlags: TInt32) : TSPAudit;
    function List(const AQuery: String; out NextLink: String)
              : TSPAuditArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAuditArray;
    function ListAll(const AQuery: String) : TSPAuditArray;
    function ListAll(const AQuery: TQueryParams) : TSPAuditArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppBdcCatalogs
    --------------------------------------------------------------------}
  
  TSPAppBdcCatalogsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_BusinessDataAppBdcCatalog;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataAppBdcCatalogArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataAppBdcCatalogArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessDataAppBdcCatalogArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataAppBdcCatalogArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Entitys
    --------------------------------------------------------------------}
  
  TSPEntitysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataEntity;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataEntityArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataEntityArray;
    function ListAll(const AQuery: String) : TSP_BusinessDataEntityArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataEntityArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityFields
    --------------------------------------------------------------------}
  
  TSPEntityFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataEntityField;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataEntityFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataEntityFieldArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessDataEntityFieldArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataEntityFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityIdentifiers
    --------------------------------------------------------------------}
  
  TSPEntityIdentifiersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataEntityIdentifier;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataEntityIdentifierArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataEntityIdentifierArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessDataEntityIdentifierArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataEntityIdentifierArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityViews
    --------------------------------------------------------------------}
  
  TSPEntityViewsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataEntityView;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataEntityViewArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataEntityViewArray;
    function ListAll(const AQuery: String) : TSP_BusinessDataEntityViewArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataEntityViewArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Filters
    --------------------------------------------------------------------}
  
  TSPFiltersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataFilter;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataFilterArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataFilterArray;
    function ListAll(const AQuery: String) : TSP_BusinessDataFilterArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataFilterArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ExternalSubscriptionStores
    --------------------------------------------------------------------}
  
  TSPExternalSubscriptionStoresEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_BusinessData_InfrastructureExternalSubscriptionStore;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LobSystems
    --------------------------------------------------------------------}
  
  TSPLobSystemsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataLobSystem;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataLobSystemArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataLobSystemArray;
    function ListAll(const AQuery: String) : TSP_BusinessDataLobSystemArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataLobSystemArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LobSystemInstances
    --------------------------------------------------------------------}
  
  TSPLobSystemInstancesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataLobSystemInstance;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataLobSystemInstanceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataLobSystemInstanceArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessDataLobSystemInstanceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataLobSystemInstanceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MethodExecutionResults
    --------------------------------------------------------------------}
  
  TSPMethodExecutionResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_BusinessDataMethodExecutionResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataMethodExecutionResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataMethodExecutionResultArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessDataMethodExecutionResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataMethodExecutionResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityFieldValueDictionarys
    --------------------------------------------------------------------}
  
  TSPEntityFieldValueDictionarysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_BusinessData_RuntimeEntityFieldValueDictionary;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityIdentitys
    --------------------------------------------------------------------}
  
  TSPEntityIdentitysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const IdentifierCount: TInt32)
             : TSP_BusinessData_RuntimeEntityIdentity;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessData_RuntimeEntityIdentityArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessData_RuntimeEntityIdentityArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessData_RuntimeEntityIdentityArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessData_RuntimeEntityIdentityArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EntityInstances
    --------------------------------------------------------------------}
  
  TSPEntityInstancesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_BusinessData_RuntimeEntityInstance;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessData_RuntimeEntityInstanceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessData_RuntimeEntityInstanceArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessData_RuntimeEntityInstanceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessData_RuntimeEntityInstanceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NotificationCallbacks
    --------------------------------------------------------------------}
  
  TSPNotificationCallbacksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const NotificationContext: string)
             : TSP_BusinessData_RuntimeNotificationCallback;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessData_RuntimeNotificationCallbackArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessData_RuntimeNotificationCallbackArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessData_RuntimeNotificationCallbackArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessData_RuntimeNotificationCallbackArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Subscriptions
    --------------------------------------------------------------------}
  
  TSPSubscriptionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Hash: string) : TSP_BusinessData_RuntimeSubscription;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessData_RuntimeSubscriptionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessData_RuntimeSubscriptionArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessData_RuntimeSubscriptionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessData_RuntimeSubscriptionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TypeDescriptors
    --------------------------------------------------------------------}
  
  TSPTypeDescriptorsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_BusinessDataTypeDescriptor;
    function List(const AQuery: String; out NextLink: String)
              : TSP_BusinessDataTypeDescriptorArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_BusinessDataTypeDescriptorArray;
    function ListAll(const AQuery: String)
                 : TSP_BusinessDataTypeDescriptorArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_BusinessDataTypeDescriptorArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Changes
    --------------------------------------------------------------------}
  
  TSPChangesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ChangeType: TInt32) : TSPChange;
    function List(const AQuery: String; out NextLink: String)
              : TSPChangeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPChangeArray;
    function ListAll(const AQuery: String) : TSPChangeArray;
    function ListAll(const AQuery: TQueryParams) : TSPChangeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CompatibilityRanges
    --------------------------------------------------------------------}
  
  TSPCompatibilityRangesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPCompatibilityRange;
    function List(const AQuery: String; out NextLink: String)
              : TSPCompatibilityRangeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPCompatibilityRangeArray;
    function ListAll(const AQuery: String) : TSPCompatibilityRangeArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPCompatibilityRangeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PolicyEvaluationInfos
    --------------------------------------------------------------------}
  
  TSPPolicyEvaluationInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const DlpAccessScope: TInt32)
             : TSP_CompliancePolicyPolicyEvaluationInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_CompliancePolicyPolicyEvaluationInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_CompliancePolicyPolicyEvaluationInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_CompliancePolicyPolicyEvaluationInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_CompliancePolicyPolicyEvaluationInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPPolicyStoreProxys
    --------------------------------------------------------------------}
  
  TSPSPPolicyStoreProxysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const PolicyStoreUrl: string)
             : TSP_CompliancePolicySPPolicyStoreProxy;
    function List(const AQuery: String; out NextLink: String)
              : TSP_CompliancePolicySPPolicyStoreProxyArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_CompliancePolicySPPolicyStoreProxyArray;
    function ListAll(const AQuery: String)
                 : TSP_CompliancePolicySPPolicyStoreProxyArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_CompliancePolicySPPolicyStoreProxyArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ContentTypes
    --------------------------------------------------------------------}
  
  TSPContentTypesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const StringId: string) : TSPContentType;
    function List(const AQuery: String; out NextLink: String)
              : TSPContentTypeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPContentTypeArray;
    function ListAll(const AQuery: String) : TSPContentTypeArray;
    function ListAll(const AQuery: TQueryParams) : TSPContentTypeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CreatablesInfos
    --------------------------------------------------------------------}
  
  TSPCreatablesInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CanCreateFolders: boolean) : TSPCreatablesInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSPCreatablesInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPCreatablesInfoArray;
    function ListAll(const AQuery: String) : TSPCreatablesInfoArray;
    function ListAll(const AQuery: TQueryParams) : TSPCreatablesInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DirectorySessions
    --------------------------------------------------------------------}
  
  TSPDirectorySessionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const SessionOptions: TInt32)
             : TSP_DirectoryDirectorySession;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryDirectorySessionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryDirectorySessionArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryDirectorySessionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryDirectorySessionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Groups
    --------------------------------------------------------------------}
  
  TSPGroupsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSP_DirectoryGroup;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryGroupArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryGroupArray;
    function ListAll(const AQuery: String) : TSP_DirectoryGroupArray;
    function ListAll(const AQuery: TQueryParams) : TSP_DirectoryGroupArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: GroupAndUserStatuss
    --------------------------------------------------------------------}
  
  TSPGroupAndUserStatussEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Status: TInt32) : TSP_DirectoryGroupAndUserStatus;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryGroupAndUserStatusArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryGroupAndUserStatusArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryGroupAndUserStatusArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryGroupAndUserStatusArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LinkCollections
    --------------------------------------------------------------------}
  
  TSPLinkCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Count: TInt32) : TSP_DirectoryLinkCollection;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryLinkCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryLinkCollectionArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryLinkCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryLinkCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MembershipResults
    --------------------------------------------------------------------}
  
  TSPMembershipResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_DirectoryMembershipResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryMembershipResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryMembershipResultArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryMembershipResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryMembershipResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MembersInfos
    --------------------------------------------------------------------}
  
  TSPMembersInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const TotalCount: TInt32) : TSP_DirectoryMembersInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryMembersInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryMembersInfoArray;
    function ListAll(const AQuery: String) : TSP_DirectoryMembersInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryMembersInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MyGroupsResults
    --------------------------------------------------------------------}
  
  TSPMyGroupsResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasNext: boolean) : TSP_DirectoryMyGroupsResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryMyGroupsResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryMyGroupsResultArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryMyGroupsResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryMyGroupsResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Propertys
    --------------------------------------------------------------------}
  
  TSPPropertysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_Directory_Property;
    function List(const AQuery: String; out NextLink: String)
              : TSP_Directory_PropertyArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_Directory_PropertyArray;
    function ListAll(const AQuery: String) : TSP_Directory_PropertyArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_Directory_PropertyArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PropertyDictionarys
    --------------------------------------------------------------------}
  
  TSPPropertyDictionarysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_DirectoryPropertyDictionary;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryPropertyDictionaryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryPropertyDictionaryArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryPropertyDictionaryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryPropertyDictionaryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SharePointDirectoryProviders
    --------------------------------------------------------------------}
  
  TSPSharePointDirectoryProvidersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_Directory_ProviderSharePointDirectoryProvider;
    function List(const AQuery: String; out NextLink: String)
              : TSP_Directory_ProviderSharePointDirectoryProviderArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_Directory_ProviderSharePointDirectoryProviderArray;
    function ListAll(const AQuery: String)
                 : TSP_Directory_ProviderSharePointDirectoryProviderArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_Directory_ProviderSharePointDirectoryProviderArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPHelpers
    --------------------------------------------------------------------}
  
  TSPSPHelpersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_DirectorySPHelper;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectorySPHelperArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectorySPHelperArray;
    function ListAll(const AQuery: String) : TSP_DirectorySPHelperArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectorySPHelperArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Users
    --------------------------------------------------------------------}
  
  TSPUsersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSP_DirectoryUser;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryUserArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryUserArray;
    function ListAll(const AQuery: String) : TSP_DirectoryUserArray;
    function ListAll(const AQuery: TQueryParams) : TSP_DirectoryUserArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserRequestSchemas
    --------------------------------------------------------------------}
  
  TSPUserRequestSchemasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_DirectoryUserRequestSchema;
    function List(const AQuery: String; out NextLink: String)
              : TSP_DirectoryUserRequestSchemaArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_DirectoryUserRequestSchemaArray;
    function ListAll(const AQuery: String)
                 : TSP_DirectoryUserRequestSchemaArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_DirectoryUserRequestSchemaArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DlpPolicyTips
    --------------------------------------------------------------------}
  
  TSPDlpPolicyTipsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AppliedActionsText: string) : TSPDlpPolicyTip;
    function List(const AQuery: String; out NextLink: String)
              : TSPDlpPolicyTipArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPDlpPolicyTipArray;
    function ListAll(const AQuery: String) : TSPDlpPolicyTipArray;
    function ListAll(const AQuery: TQueryParams) : TSPDlpPolicyTipArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: EventReceiverDefinitions
    --------------------------------------------------------------------}
  
  TSPEventReceiverDefinitionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ReceiverId: TGUIDString) : TSPEventReceiverDefinition;
    function List(const AQuery: String; out NextLink: String)
              : TSPEventReceiverDefinitionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPEventReceiverDefinitionArray;
    function ListAll(const AQuery: String) : TSPEventReceiverDefinitionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPEventReceiverDefinitionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Features
    --------------------------------------------------------------------}
  
  TSPFeaturesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const DefinitionId: TGUIDString) : TSPFeature;
    function List(const AQuery: String; out NextLink: String)
              : TSPFeatureArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFeatureArray;
    function ListAll(const AQuery: String) : TSPFeatureArray;
    function ListAll(const AQuery: TQueryParams) : TSPFeatureArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Fields1
    --------------------------------------------------------------------}
  
  TSPFields1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPField;
    function List(const AQuery: String; out NextLink: String)
              : TSPFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFieldArray;
    function ListAll(const AQuery: String) : TSPFieldArray;
    function ListAll(const AQuery: TQueryParams) : TSPFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldLinks
    --------------------------------------------------------------------}
  
  TSPFieldLinksEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPFieldLink;
    function List(const AQuery: String; out NextLink: String)
              : TSPFieldLinkArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFieldLinkArray;
    function ListAll(const AQuery: String) : TSPFieldLinkArray;
    function ListAll(const AQuery: TQueryParams) : TSPFieldLinkArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FieldStringValuess
    --------------------------------------------------------------------}
  
  TSPFieldStringValuessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPFieldStringValues;
    function List(const AQuery: String; out NextLink: String)
              : TSPFieldStringValuesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFieldStringValuesArray;
    function ListAll(const AQuery: String) : TSPFieldStringValuesArray;
    function ListAll(const AQuery: TQueryParams) : TSPFieldStringValuesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Files12
    --------------------------------------------------------------------}
  
  TSPFiles12EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_File;
    function List(const AQuery: String; out NextLink: String)
              : TSP_FileArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_FileArray;
    function ListAll(const AQuery: String) : TSP_FileArray;
    function ListAll(const AQuery: TQueryParams) : TSP_FileArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FileVersions
    --------------------------------------------------------------------}
  
  TSPFileVersionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ID: TInt32) : TSPFileVersion;
    function List(const AQuery: String; out NextLink: String)
              : TSPFileVersionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFileVersionArray;
    function ListAll(const AQuery: String) : TSPFileVersionArray;
    function ListAll(const AQuery: TQueryParams) : TSPFileVersionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Folders1
    --------------------------------------------------------------------}
  
  TSPFolders1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ServerRelativeUrl: string) : TSPFolder;
    function List(const AQuery: String; out NextLink: String)
              : TSPFolderArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFolderArray;
    function ListAll(const AQuery: String) : TSPFolderArray;
    function ListAll(const AQuery: TQueryParams) : TSPFolderArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Forms
    --------------------------------------------------------------------}
  
  TSPFormsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPForm;
    function List(const AQuery: String; out NextLink: String) : TSPFormArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPFormArray;
    function ListAll(const AQuery: String) : TSPFormArray;
    function ListAll(const AQuery: TQueryParams) : TSPFormArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Groups1
    --------------------------------------------------------------------}
  
  TSPGroups1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPGroup;
    function List(const AQuery: String; out NextLink: String)
              : TSPGroupArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPGroupArray;
    function ListAll(const AQuery: String) : TSPGroupArray;
    function ListAll(const AQuery: TQueryParams) : TSPGroupArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: InformationRightsManagementSettingss
    --------------------------------------------------------------------}
  
  TSPInformationRightsManagementSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AllowPrint: boolean)
             : TSPInformationRightsManagementSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPInformationRightsManagementSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPInformationRightsManagementSettingsArray;
    function ListAll(const AQuery: String)
                 : TSPInformationRightsManagementSettingsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPInformationRightsManagementSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListItems
    --------------------------------------------------------------------}
  
  TSPListItemsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasUniqueRoleAssignments: boolean) : TSPListItem;
    function List(const AQuery: String; out NextLink: String)
              : TSPListItemArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPListItemArray;
    function ListAll(const AQuery: String) : TSPListItemArray;
    function ListAll(const AQuery: TQueryParams) : TSPListItemArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ListTemplates
    --------------------------------------------------------------------}
  
  TSPListTemplatesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSPListTemplate;
    function List(const AQuery: String; out NextLink: String)
              : TSPListTemplateArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPListTemplateArray;
    function ListAll(const AQuery: String) : TSPListTemplateArray;
    function ListAll(const AQuery: TQueryParams) : TSPListTemplateArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MicrofeedAttachmentStores
    --------------------------------------------------------------------}
  
  TSPMicrofeedAttachmentStoresEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_MicrofeedMicrofeedAttachmentStore;
    function List(const AQuery: String; out NextLink: String)
              : TSP_MicrofeedMicrofeedAttachmentStoreArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_MicrofeedMicrofeedAttachmentStoreArray;
    function ListAll(const AQuery: String)
                 : TSP_MicrofeedMicrofeedAttachmentStoreArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_MicrofeedMicrofeedAttachmentStoreArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MicrofeedDatas
    --------------------------------------------------------------------}
  
  TSPMicrofeedDatasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Created: TDateTime) : TSP_MicrofeedMicrofeedData;
    function List(const AQuery: String; out NextLink: String)
              : TSP_MicrofeedMicrofeedDataArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_MicrofeedMicrofeedDataArray;
    function ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedDataArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_MicrofeedMicrofeedDataArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MicrofeedManagers
    --------------------------------------------------------------------}
  
  TSPMicrofeedManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const IsFeedActivityPublic: boolean)
             : TSP_MicrofeedMicrofeedManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_MicrofeedMicrofeedManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_MicrofeedMicrofeedManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_MicrofeedMicrofeedManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_MicrofeedMicrofeedManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MicrofeedPostDefinitionManagers
    --------------------------------------------------------------------}
  
  TSPMicrofeedPostDefinitionManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_MicrofeedMicrofeedPostDefinitionManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_MicrofeedMicrofeedPostDefinitionManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_MicrofeedMicrofeedPostDefinitionManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_MicrofeedMicrofeedPostDefinitionManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_MicrofeedMicrofeedPostDefinitionManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MicrofeedPostOptionCollections
    --------------------------------------------------------------------}
  
  TSPMicrofeedPostOptionCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_MicrofeedMicrofeedPostOptionCollection;
    function List(const AQuery: String; out NextLink: String)
              : TSP_MicrofeedMicrofeedPostOptionCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_MicrofeedMicrofeedPostOptionCollectionArray;
    function ListAll(const AQuery: String)
                 : TSP_MicrofeedMicrofeedPostOptionCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_MicrofeedMicrofeedPostOptionCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MicrofeedStores
    --------------------------------------------------------------------}
  
  TSPMicrofeedStoresEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_MicrofeedMicrofeedStore;
    function List(const AQuery: String; out NextLink: String)
              : TSP_MicrofeedMicrofeedStoreArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_MicrofeedMicrofeedStoreArray;
    function ListAll(const AQuery: String)
                 : TSP_MicrofeedMicrofeedStoreArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_MicrofeedMicrofeedStoreArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MountedFolderInfos
    --------------------------------------------------------------------}
  
  TSPMountedFolderInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FolderUrl: string) : TSPMountedFolderInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSPMountedFolderInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPMountedFolderInfoArray;
    function ListAll(const AQuery: String) : TSPMountedFolderInfoArray;
    function ListAll(const AQuery: TQueryParams) : TSPMountedFolderInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MountPoints
    --------------------------------------------------------------------}
  
  TSPMountPointsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPMountPoint;
    function List(const AQuery: String; out NextLink: String)
              : TSPMountPointArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPMountPointArray;
    function ListAll(const AQuery: String) : TSPMountPointArray;
    function ListAll(const AQuery: TQueryParams) : TSPMountPointArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MountPointInfos
    --------------------------------------------------------------------}
  
  TSPMountPointInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSPMountPointInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSPMountPointInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPMountPointInfoArray;
    function ListAll(const AQuery: String) : TSPMountPointInfoArray;
    function ListAll(const AQuery: TQueryParams) : TSPMountPointInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MoveCopyUtils
    --------------------------------------------------------------------}
  
  TSPMoveCopyUtilsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPMoveCopyUtil;
    function List(const AQuery: String; out NextLink: String)
              : TSPMoveCopyUtilArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPMoveCopyUtilArray;
    function ListAll(const AQuery: String) : TSPMoveCopyUtilArray;
    function ListAll(const AQuery: TQueryParams) : TSPMoveCopyUtilArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Navigations
    --------------------------------------------------------------------}
  
  TSPNavigationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const UseShared: boolean) : TSPNavigation;
    function List(const AQuery: String; out NextLink: String)
              : TSPNavigationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPNavigationArray;
    function ListAll(const AQuery: String) : TSPNavigationArray;
    function ListAll(const AQuery: TQueryParams) : TSPNavigationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NavigationNodes
    --------------------------------------------------------------------}
  
  TSPNavigationNodesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPNavigationNode;
    function List(const AQuery: String; out NextLink: String)
              : TSPNavigationNodeArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPNavigationNodeArray;
    function ListAll(const AQuery: String) : TSPNavigationNodeArray;
    function ListAll(const AQuery: TQueryParams) : TSPNavigationNodeArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NativeClients
    --------------------------------------------------------------------}
  
  TSPNativeClientsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_OAuthNativeClient;
    function List(const AQuery: String; out NextLink: String)
              : TSP_OAuthNativeClientArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_OAuthNativeClientArray;
    function ListAll(const AQuery: String) : TSP_OAuthNativeClientArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_OAuthNativeClientArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ObjectSharingInformations
    --------------------------------------------------------------------}
  
  TSPObjectSharingInformationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AnonymousEditLink: string)
             : TSPObjectSharingInformation;
    function List(const AQuery: String; out NextLink: String)
              : TSPObjectSharingInformationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPObjectSharingInformationArray;
    function ListAll(const AQuery: String)
                 : TSPObjectSharingInformationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPObjectSharingInformationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ObjectSharingInformationUsers
    --------------------------------------------------------------------}
  
  TSPObjectSharingInformationUsersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPObjectSharingInformationUser;
    function List(const AQuery: String; out NextLink: String)
              : TSPObjectSharingInformationUserArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPObjectSharingInformationUserArray;
    function ListAll(const AQuery: String)
                 : TSPObjectSharingInformationUserArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPObjectSharingInformationUserArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ObjectSharingSettingss
    --------------------------------------------------------------------}
  
  TSPObjectSharingSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AccessRequestMode: boolean)
             : TSPObjectSharingSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPObjectSharingSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPObjectSharingSettingsArray;
    function ListAll(const AQuery: String) : TSPObjectSharingSettingsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPObjectSharingSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ClickManagers
    --------------------------------------------------------------------}
  
  TSPClickManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_PageInstrumentationClickManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PageInstrumentationClickManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PageInstrumentationClickManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_PageInstrumentationClickManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PageInstrumentationClickManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PickerSettingss
    --------------------------------------------------------------------}
  
  TSPPickerSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AllowEmailAddresses: boolean) : TSPPickerSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPPickerSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPPickerSettingsArray;
    function ListAll(const AQuery: String) : TSPPickerSettingsArray;
    function ListAll(const AQuery: TQueryParams) : TSPPickerSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Principals
    --------------------------------------------------------------------}
  
  TSPPrincipalsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPPrincipal;
    function List(const AQuery: String; out NextLink: String)
              : TSPPrincipalArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPPrincipalArray;
    function ListAll(const AQuery: String) : TSPPrincipalArray;
    function ListAll(const AQuery: TQueryParams) : TSPPrincipalArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PropertyValuess
    --------------------------------------------------------------------}
  
  TSPPropertyValuessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPPropertyValues;
    function List(const AQuery: String; out NextLink: String)
              : TSPPropertyValuesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPPropertyValuesArray;
    function ListAll(const AQuery: String) : TSPPropertyValuesArray;
    function ListAll(const AQuery: TQueryParams) : TSPPropertyValuesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PersonMagazines
    --------------------------------------------------------------------}
  
  TSPPersonMagazinesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_PublishingPersonMagazine;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPersonMagazineArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPersonMagazineArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPersonMagazineArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPersonMagazineArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingDocPropss
    --------------------------------------------------------------------}
  
  TSPPointPublishingDocPropssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Author: string)
             : TSP_PublishingPointPublishingDocProps;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingDocPropsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingDocPropsArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingDocPropsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingDocPropsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingMagazinePropss
    --------------------------------------------------------------------}
  
  TSPPointPublishingMagazinePropssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const BannerColor: string)
             : TSP_PublishingPointPublishingMagazineProps;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingMagazinePropsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingMagazinePropsArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingMagazinePropsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingMagazinePropsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingPosts
    --------------------------------------------------------------------}
  
  TSPPointPublishingPostsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_PublishingPointPublishingPost;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingPostArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingPostArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingPostArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingPostArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingPostServiceManagers
    --------------------------------------------------------------------}
  
  TSPPointPublishingPostServiceManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_PublishingPointPublishingPostServiceManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingPostServiceManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingPostServiceManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingPostServiceManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingPostServiceManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingSiteManagers
    --------------------------------------------------------------------}
  
  TSPPointPublishingSiteManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_PublishingPointPublishingSiteManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingSiteManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingSiteManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingSiteManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingSiteManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingSiteStatuss
    --------------------------------------------------------------------}
  
  TSPPointPublishingSiteStatussEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FriendlyUrl: string)
             : TSP_PublishingPointPublishingSiteStatus;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingSiteStatusArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingSiteStatusArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingSiteStatusArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingSiteStatusArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PointPublishingUsers
    --------------------------------------------------------------------}
  
  TSPPointPublishingUsersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_PublishingPointPublishingUser;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingPointPublishingUserArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingPointPublishingUserArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingPointPublishingUserArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingPointPublishingUserArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Searchs
    --------------------------------------------------------------------}
  
  TSPSearchsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_PublishingSearch;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingSearchArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingSearchArray;
    function ListAll(const AQuery: String) : TSP_PublishingSearchArray;
    function ListAll(const AQuery: TQueryParams) : TSP_PublishingSearchArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SpotlightChannels
    --------------------------------------------------------------------}
  
  TSPSpotlightChannelsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_PublishingSpotlightChannel;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingSpotlightChannelArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingSpotlightChannelArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingSpotlightChannelArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingSpotlightChannelArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SpotlightVideos
    --------------------------------------------------------------------}
  
  TSPSpotlightVideosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_PublishingSpotlightVideo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingSpotlightVideoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingSpotlightVideoArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingSpotlightVideoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingSpotlightVideoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: VideoChannels
    --------------------------------------------------------------------}
  
  TSPVideoChannelsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSP_PublishingVideoChannel;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingVideoChannelArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingVideoChannelArray;
    function ListAll(const AQuery: String) : TSP_PublishingVideoChannelArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingVideoChannelArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: VideoItems
    --------------------------------------------------------------------}
  
  TSPVideoItemsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ID: TGUIDString) : TSP_PublishingVideoItem;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingVideoItemArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingVideoItemArray;
    function ListAll(const AQuery: String) : TSP_PublishingVideoItemArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingVideoItemArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: VideoPermissionGroups
    --------------------------------------------------------------------}
  
  TSPVideoPermissionGroupsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_PublishingVideoPermissionGroup;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingVideoPermissionGroupArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingVideoPermissionGroupArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingVideoPermissionGroupArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingVideoPermissionGroupArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: VideoServiceDiscoverers
    --------------------------------------------------------------------}
  
  TSPVideoServiceDiscoverersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ChannelUrlTemplate: string)
             : TSP_PublishingVideoServiceDiscoverer;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingVideoServiceDiscovererArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingVideoServiceDiscovererArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingVideoServiceDiscovererArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingVideoServiceDiscovererArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: VideoServiceManagers
    --------------------------------------------------------------------}
  
  TSPVideoServiceManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_PublishingVideoServiceManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_PublishingVideoServiceManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_PublishingVideoServiceManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_PublishingVideoServiceManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_PublishingVideoServiceManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PushNotificationSubscribers
    --------------------------------------------------------------------}
  
  TSPPushNotificationSubscribersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CustomArgs: string) : TSPPushNotificationSubscriber;
    function List(const AQuery: String; out NextLink: String)
              : TSPPushNotificationSubscriberArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPPushNotificationSubscriberArray;
    function ListAll(const AQuery: String)
                 : TSPPushNotificationSubscriberArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPPushNotificationSubscriberArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RecycleBinItems
    --------------------------------------------------------------------}
  
  TSPRecycleBinItemsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPRecycleBinItem;
    function List(const AQuery: String; out NextLink: String)
              : TSPRecycleBinItemArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRecycleBinItemArray;
    function ListAll(const AQuery: String) : TSPRecycleBinItemArray;
    function ListAll(const AQuery: TQueryParams) : TSPRecycleBinItemArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RegionalSettingss
    --------------------------------------------------------------------}
  
  TSPRegionalSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AdjustHijriDays: TInt16) : TSPRegionalSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPRegionalSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRegionalSettingsArray;
    function ListAll(const AQuery: String) : TSPRegionalSettingsArray;
    function ListAll(const AQuery: TQueryParams) : TSPRegionalSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RelatedFields
    --------------------------------------------------------------------}
  
  TSPRelatedFieldsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FieldId: TGUIDString) : TSPRelatedField;
    function List(const AQuery: String; out NextLink: String)
              : TSPRelatedFieldArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRelatedFieldArray;
    function ListAll(const AQuery: String) : TSPRelatedFieldArray;
    function ListAll(const AQuery: TQueryParams) : TSPRelatedFieldArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RelatedItemManagers
    --------------------------------------------------------------------}
  
  TSPRelatedItemManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPRelatedItemManager;
    function List(const AQuery: String; out NextLink: String)
              : TSPRelatedItemManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRelatedItemManagerArray;
    function ListAll(const AQuery: String) : TSPRelatedItemManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPRelatedItemManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RemoteWebs
    --------------------------------------------------------------------}
  
  TSPRemoteWebsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CanSendEmail: boolean) : TSPRemoteWeb;
    function List(const AQuery: String; out NextLink: String)
              : TSPRemoteWebArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRemoteWebArray;
    function ListAll(const AQuery: String) : TSPRemoteWebArray;
    function ListAll(const AQuery: TQueryParams) : TSPRemoteWebArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RequestContexts1
    --------------------------------------------------------------------}
  
  TSPRequestContexts1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPRequestContext;
    function List(const AQuery: String; out NextLink: String)
              : TSPRequestContextArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRequestContextArray;
    function ListAll(const AQuery: String) : TSPRequestContextArray;
    function ListAll(const AQuery: TQueryParams) : TSPRequestContextArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RoleAssignments
    --------------------------------------------------------------------}
  
  TSPRoleAssignmentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const PrincipalId: TInt32) : TSPRoleAssignment;
    function List(const AQuery: String; out NextLink: String)
              : TSPRoleAssignmentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRoleAssignmentArray;
    function ListAll(const AQuery: String) : TSPRoleAssignmentArray;
    function ListAll(const AQuery: TQueryParams) : TSPRoleAssignmentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RoleDefinitions
    --------------------------------------------------------------------}
  
  TSPRoleDefinitionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPRoleDefinition;
    function List(const AQuery: String; out NextLink: String)
              : TSPRoleDefinitionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPRoleDefinitionArray;
    function ListAll(const AQuery: String) : TSPRoleDefinitionArray;
    function ListAll(const AQuery: TQueryParams) : TSPRoleDefinitionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SecurableObjects
    --------------------------------------------------------------------}
  
  TSPSecurableObjectsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasUniqueRoleAssignments: boolean)
             : TSPSecurableObject;
    function List(const AQuery: String; out NextLink: String)
              : TSPSecurableObjectArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSecurableObjectArray;
    function ListAll(const AQuery: String) : TSPSecurableObjectArray;
    function ListAll(const AQuery: TQueryParams) : TSPSecurableObjectArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ServerSettingss
    --------------------------------------------------------------------}
  
  TSPServerSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPServerSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPServerSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPServerSettingsArray;
    function ListAll(const AQuery: String) : TSPServerSettingsArray;
    function ListAll(const AQuery: TQueryParams) : TSPServerSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SharePointSharingSettingss
    --------------------------------------------------------------------}
  
  TSPSharePointSharingSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AddToGroupModeName: string)
             : TSPSharePointSharingSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPSharePointSharingSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSharePointSharingSettingsArray;
    function ListAll(const AQuery: String)
                 : TSPSharePointSharingSettingsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPSharePointSharingSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DocumentSharingManagers
    --------------------------------------------------------------------}
  
  TSPDocumentSharingManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_SharingDocumentSharingManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SharingDocumentSharingManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SharingDocumentSharingManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SharingDocumentSharingManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SharingDocumentSharingManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebSharingManagers
    --------------------------------------------------------------------}
  
  TSPWebSharingManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_SharingWebSharingManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SharingWebSharingManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SharingWebSharingManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SharingWebSharingManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SharingWebSharingManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SharingResults
    --------------------------------------------------------------------}
  
  TSPSharingResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSPSharingResult;
    function List(const AQuery: String; out NextLink: String)
              : TSPSharingResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSharingResultArray;
    function ListAll(const AQuery: String) : TSPSharingResultArray;
    function ListAll(const AQuery: TQueryParams) : TSPSharingResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SiteHealthSummarys
    --------------------------------------------------------------------}
  
  TSPSiteHealthSummarysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FailedErrorCount: TInt32)
             : TSP_SiteHealthSiteHealthSummary;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SiteHealthSiteHealthSummaryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SiteHealthSiteHealthSummaryArray;
    function ListAll(const AQuery: String)
                 : TSP_SiteHealthSiteHealthSummaryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SiteHealthSiteHealthSummaryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SiteUrls
    --------------------------------------------------------------------}
  
  TSPSiteUrlsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPSiteUrl;
    function List(const AQuery: String; out NextLink: String)
              : TSPSiteUrlArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSiteUrlArray;
    function ListAll(const AQuery: String) : TSPSiteUrlArray;
    function ListAll(const AQuery: TQueryParams) : TSPSiteUrlArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialAnnouncementManagers
    --------------------------------------------------------------------}
  
  TSPSocialAnnouncementManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_SocialSocialAnnouncementManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialAnnouncementManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialAnnouncementManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SocialSocialAnnouncementManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialAnnouncementManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialFeedManagers
    --------------------------------------------------------------------}
  
  TSPSocialFeedManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const PersonalSitePortalUri: string)
             : TSP_SocialSocialFeedManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialFeedManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialFeedManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SocialSocialFeedManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialFeedManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialFollowingManagers
    --------------------------------------------------------------------}
  
  TSPSocialFollowingManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FollowedDocumentsUri: string)
             : TSP_SocialSocialFollowingManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialFollowingManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialFollowingManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SocialSocialFollowingManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialFollowingManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialRestActors
    --------------------------------------------------------------------}
  
  TSPSocialRestActorsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FollowableItem: string) : TSP_SocialSocialRestActor;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialRestActorArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialRestActorArray;
    function ListAll(const AQuery: String) : TSP_SocialSocialRestActorArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialRestActorArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialRestFeeds
    --------------------------------------------------------------------}
  
  TSPSocialRestFeedsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_SocialSocialRestFeed;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialRestFeedArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialRestFeedArray;
    function ListAll(const AQuery: String) : TSP_SocialSocialRestFeedArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialRestFeedArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialRestFeedManagers
    --------------------------------------------------------------------}
  
  TSPSocialRestFeedManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_SocialSocialRestFeedManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialRestFeedManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialRestFeedManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SocialSocialRestFeedManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialRestFeedManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialRestFollowingManagers
    --------------------------------------------------------------------}
  
  TSPSocialRestFollowingManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FollowedDocumentsUri: string)
             : TSP_SocialSocialRestFollowingManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialRestFollowingManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialRestFollowingManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_SocialSocialRestFollowingManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialRestFollowingManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SocialRestThreads
    --------------------------------------------------------------------}
  
  TSPSocialRestThreadsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ID: string) : TSP_SocialSocialRestThread;
    function List(const AQuery: String; out NextLink: String)
              : TSP_SocialSocialRestThreadArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_SocialSocialRestThreadArray;
    function ListAll(const AQuery: String) : TSP_SocialSocialRestThreadArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_SocialSocialRestThreadArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SolutionExporters
    --------------------------------------------------------------------}
  
  TSPSolutionExportersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPSolutionExporter;
    function List(const AQuery: String; out NextLink: String)
              : TSPSolutionExporterArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSolutionExporterArray;
    function ListAll(const AQuery: String) : TSPSolutionExporterArray;
    function ListAll(const AQuery: TQueryParams) : TSPSolutionExporterArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPAppLicenseManagers
    --------------------------------------------------------------------}
  
  TSPSPAppLicenseManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPSPAppLicenseManager;
    function List(const AQuery: String; out NextLink: String)
              : TSPSPAppLicenseManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSPAppLicenseManagerArray;
    function ListAll(const AQuery: String) : TSPSPAppLicenseManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPSPAppLicenseManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPDataLeakagePreventionStatusInfos
    --------------------------------------------------------------------}
  
  TSPSPDataLeakagePreventionStatusInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ContainsConfidentialInfo: boolean)
             : TSPSPDataLeakagePreventionStatusInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSPSPDataLeakagePreventionStatusInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPSPDataLeakagePreventionStatusInfoArray;
    function ListAll(const AQuery: String)
                 : TSPSPDataLeakagePreventionStatusInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPSPDataLeakagePreventionStatusInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantAppInstances
    --------------------------------------------------------------------}
  
  TSPTenantAppInstancesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPTenantAppInstance;
    function List(const AQuery: String; out NextLink: String)
              : TSPTenantAppInstanceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPTenantAppInstanceArray;
    function ListAll(const AQuery: String) : TSPTenantAppInstanceArray;
    function ListAll(const AQuery: TQueryParams) : TSPTenantAppInstanceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantAppUtilitys
    --------------------------------------------------------------------}
  
  TSPTenantAppUtilitysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPTenantAppUtility;
    function List(const AQuery: String; out NextLink: String)
              : TSPTenantAppUtilityArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPTenantAppUtilityArray;
    function ListAll(const AQuery: String) : TSPTenantAppUtilityArray;
    function ListAll(const AQuery: TQueryParams) : TSPTenantAppUtilityArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TenantSettingss
    --------------------------------------------------------------------}
  
  TSPTenantSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CorporateCatalogUrl: string) : TSPTenantSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSPTenantSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPTenantSettingsArray;
    function ListAll(const AQuery: String) : TSPTenantSettingsArray;
    function ListAll(const AQuery: TQueryParams) : TSPTenantSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ThemeInfos
    --------------------------------------------------------------------}
  
  TSPThemeInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AccessibleDescription: string) : TSPThemeInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSPThemeInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPThemeInfoArray;
    function ListAll(const AQuery: String) : TSPThemeInfoArray;
    function ListAll(const AQuery: TQueryParams) : TSPThemeInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TimeZones
    --------------------------------------------------------------------}
  
  TSPTimeZonesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPTimeZone;
    function List(const AQuery: String; out NextLink: String)
              : TSPTimeZoneArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPTimeZoneArray;
    function ListAll(const AQuery: String) : TSPTimeZoneArray;
    function ListAll(const AQuery: TQueryParams) : TSPTimeZoneArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SyncTranslators
    --------------------------------------------------------------------}
  
  TSPSyncTranslatorsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const OutputSaveBehavior: TInt32)
             : TSP_TranslationSyncTranslator;
    function List(const AQuery: String; out NextLink: String)
              : TSP_TranslationSyncTranslatorArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_TranslationSyncTranslatorArray;
    function ListAll(const AQuery: String)
                 : TSP_TranslationSyncTranslatorArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_TranslationSyncTranslatorArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TranslationJobs
    --------------------------------------------------------------------}
  
  TSPTranslationJobsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_TranslationTranslationJob;
    function List(const AQuery: String; out NextLink: String)
              : TSP_TranslationTranslationJobArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_TranslationTranslationJobArray;
    function ListAll(const AQuery: String)
                 : TSP_TranslationTranslationJobArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_TranslationTranslationJobArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TranslationJobStatuss
    --------------------------------------------------------------------}
  
  TSPTranslationJobStatussEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const _Name: string) : TSP_TranslationTranslationJobStatus;
    function List(const AQuery: String; out NextLink: String)
              : TSP_TranslationTranslationJobStatusArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_TranslationTranslationJobStatusArray;
    function ListAll(const AQuery: String)
                 : TSP_TranslationTranslationJobStatusArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_TranslationTranslationJobStatusArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: VariationsTranslationTimerJobs
    --------------------------------------------------------------------}
  
  TSPVariationsTranslationTimerJobsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_TranslationVariationsTranslationTimerJob;
    function List(const AQuery: String; out NextLink: String)
              : TSP_TranslationVariationsTranslationTimerJobArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_TranslationVariationsTranslationTimerJobArray;
    function ListAll(const AQuery: String)
                 : TSP_TranslationVariationsTranslationTimerJobArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_TranslationVariationsTranslationTimerJobArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TypeInformations
    --------------------------------------------------------------------}
  
  TSPTypeInformationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const BaseTypeFullName: string) : TSPTypeInformation;
    function List(const AQuery: String; out NextLink: String)
              : TSPTypeInformationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPTypeInformationArray;
    function ListAll(const AQuery: String) : TSPTypeInformationArray;
    function ListAll(const AQuery: TQueryParams) : TSPTypeInformationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ClientPeoplePickerWebServiceInterfaces
    --------------------------------------------------------------------}
  
  TSPClientPeoplePickerWebServiceInterfacesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray;
    function ListAll(const AQuery: String)
                 : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Users1
    --------------------------------------------------------------------}
  
  TSPUsers1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPUser;
    function List(const AQuery: String; out NextLink: String) : TSPUserArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPUserArray;
    function ListAll(const AQuery: String) : TSPUserArray;
    function ListAll(const AQuery: TQueryParams) : TSPUserArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserCustomActions
    --------------------------------------------------------------------}
  
  TSPUserCustomActionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPUserCustomAction;
    function List(const AQuery: String; out NextLink: String)
              : TSPUserCustomActionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPUserCustomActionArray;
    function ListAll(const AQuery: String) : TSPUserCustomActionArray;
    function ListAll(const AQuery: TQueryParams) : TSPUserCustomActionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FollowedContents
    --------------------------------------------------------------------}
  
  TSPFollowedContentsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const FollowedDocumentsUrl: string)
             : TSP_UserProfilesFollowedContent;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesFollowedContentArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesFollowedContentArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesFollowedContentArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesFollowedContentArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: FollowedItemDatas
    --------------------------------------------------------------------}
  
  TSPFollowedItemDatasEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UserProfilesFollowedItemData;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesFollowedItemDataArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesFollowedItemDataArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesFollowedItemDataArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesFollowedItemDataArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: HashTagCollections
    --------------------------------------------------------------------}
  
  TSPHashTagCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UserProfilesHashTagCollection;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesHashTagCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesHashTagCollectionArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesHashTagCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesHashTagCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PeopleManagers
    --------------------------------------------------------------------}
  
  TSPPeopleManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const EditProfileLink: string)
             : TSP_UserProfilesPeopleManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesPeopleManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesPeopleManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesPeopleManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesPeopleManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PersonPropertiess
    --------------------------------------------------------------------}
  
  TSPPersonPropertiessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AccountName: string)
             : TSP_UserProfilesPersonProperties;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesPersonPropertiesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesPersonPropertiesArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesPersonPropertiesArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesPersonPropertiesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProfileImageStores
    --------------------------------------------------------------------}
  
  TSPProfileImageStoresEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UserProfilesProfileImageStore;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesProfileImageStoreArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesProfileImageStoreArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesProfileImageStoreArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesProfileImageStoreArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProfileLoaders
    --------------------------------------------------------------------}
  
  TSPProfileLoadersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UserProfilesProfileLoader;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesProfileLoaderArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesProfileLoaderArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesProfileLoaderArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesProfileLoaderArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserProfiles
    --------------------------------------------------------------------}
  
  TSPUserProfilesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AccountName: string) : TSP_UserProfilesUserProfile;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesUserProfileArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesUserProfileArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesUserProfileArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesUserProfileArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserProfilePropertiesForUsers
    --------------------------------------------------------------------}
  
  TSPUserProfilePropertiesForUsersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AccountName: string)
             : TSP_UserProfilesUserProfilePropertiesForUser;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UserProfilesUserProfilePropertiesForUserArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UserProfilesUserProfilePropertiesForUserArray;
    function ListAll(const AQuery: String)
                 : TSP_UserProfilesUserProfilePropertiesForUserArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UserProfilesUserProfilePropertiesForUserArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserResources
    --------------------------------------------------------------------}
  
  TSPUserResourcesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPUserResource;
    function List(const AQuery: String; out NextLink: String)
              : TSPUserResourceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPUserResourceArray;
    function ListAll(const AQuery: String) : TSPUserResourceArray;
    function ListAll(const AQuery: TQueryParams) : TSPUserResourceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserSolutions
    --------------------------------------------------------------------}
  
  TSPUserSolutionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPUserSolution;
    function List(const AQuery: String; out NextLink: String)
              : TSPUserSolutionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPUserSolutionArray;
    function ListAll(const AQuery: String) : TSPUserSolutionArray;
    function ListAll(const AQuery: TQueryParams) : TSPUserSolutionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: MarketplaceUtilitiess
    --------------------------------------------------------------------}
  
  TSPMarketplaceUtilitiessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UtilitiesMarketplaceUtilities;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UtilitiesMarketplaceUtilitiesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UtilitiesMarketplaceUtilitiesArray;
    function ListAll(const AQuery: String)
                 : TSP_UtilitiesMarketplaceUtilitiesArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_UtilitiesMarketplaceUtilitiesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Utilitys
    --------------------------------------------------------------------}
  
  TSPUtilitysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_UtilitiesUtility;
    function List(const AQuery: String; out NextLink: String)
              : TSP_UtilitiesUtilityArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_UtilitiesUtilityArray;
    function ListAll(const AQuery: String) : TSP_UtilitiesUtilityArray;
    function ListAll(const AQuery: TQueryParams) : TSP_UtilitiesUtilityArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Views
    --------------------------------------------------------------------}
  
  TSPViewsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPView;
    function List(const AQuery: String; out NextLink: String) : TSPViewArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPViewArray;
    function ListAll(const AQuery: String) : TSPViewArray;
    function ListAll(const AQuery: TQueryParams) : TSPViewArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ViewFieldCollections
    --------------------------------------------------------------------}
  
  TSPViewFieldCollectionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const SchemaXml: string) : TSPViewFieldCollection;
    function List(const AQuery: String; out NextLink: String)
              : TSPViewFieldCollectionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPViewFieldCollectionArray;
    function ListAll(const AQuery: String) : TSPViewFieldCollectionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPViewFieldCollectionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebInformations
    --------------------------------------------------------------------}
  
  TSPWebInformationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSPWebInformation;
    function List(const AQuery: String; out NextLink: String)
              : TSPWebInformationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPWebInformationArray;
    function ListAll(const AQuery: String) : TSPWebInformationArray;
    function ListAll(const AQuery: TQueryParams) : TSPWebInformationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LimitedWebPartManagers
    --------------------------------------------------------------------}
  
  TSPLimitedWebPartManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasPersonalizedParts: boolean)
             : TSP_WebPartsLimitedWebPartManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WebPartsLimitedWebPartManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WebPartsLimitedWebPartManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_WebPartsLimitedWebPartManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WebPartsLimitedWebPartManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebParts
    --------------------------------------------------------------------}
  
  TSPWebPartsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Hidden: boolean) : TSP_WebPartsWebPart;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WebPartsWebPartArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WebPartsWebPartArray;
    function ListAll(const AQuery: String) : TSP_WebPartsWebPartArray;
    function ListAll(const AQuery: TQueryParams) : TSP_WebPartsWebPartArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebPartDefinitions
    --------------------------------------------------------------------}
  
  TSPWebPartDefinitionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSP_WebPartsWebPartDefinition;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WebPartsWebPartDefinitionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WebPartsWebPartDefinitionArray;
    function ListAll(const AQuery: String)
                 : TSP_WebPartsWebPartDefinitionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WebPartsWebPartDefinitionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebProxys
    --------------------------------------------------------------------}
  
  TSPWebProxysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPWebProxy;
    function List(const AQuery: String; out NextLink: String)
              : TSPWebProxyArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPWebProxyArray;
    function ListAll(const AQuery: String) : TSPWebProxyArray;
    function ListAll(const AQuery: TQueryParams) : TSPWebProxyArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WebTemplates
    --------------------------------------------------------------------}
  
  TSPWebTemplatesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSPWebTemplate;
    function List(const AQuery: String; out NextLink: String)
              : TSPWebTemplateArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPWebTemplateArray;
    function ListAll(const AQuery: String) : TSPWebTemplateArray;
    function ListAll(const AQuery: TQueryParams) : TSPWebTemplateArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPWorkflows
    --------------------------------------------------------------------}
  
  TSPSPWorkflowsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AssociationId: TGUIDString) : TSP_WorkflowSPWorkflow;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowSPWorkflowArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowSPWorkflowArray;
    function ListAll(const AQuery: String) : TSP_WorkflowSPWorkflowArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowSPWorkflowArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPWorkflowManagers
    --------------------------------------------------------------------}
  
  TSPSPWorkflowManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkflowSPWorkflowManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowSPWorkflowManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowSPWorkflowManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowSPWorkflowManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowSPWorkflowManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowAssociations
    --------------------------------------------------------------------}
  
  TSPWorkflowAssociationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSP_WorkflowWorkflowAssociation;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowWorkflowAssociationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowWorkflowAssociationArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowWorkflowAssociationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowWorkflowAssociationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowTemplates
    --------------------------------------------------------------------}
  
  TSPWorkflowTemplatesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TSP_WorkflowWorkflowTemplate;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowWorkflowTemplateArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowWorkflowTemplateArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowWorkflowTemplateArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowWorkflowTemplateArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: InteropServices
    --------------------------------------------------------------------}
  
  TSPInteropServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkflowServicesInteropService;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesInteropServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesInteropServiceArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesInteropServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesInteropServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowDefinitions
    --------------------------------------------------------------------}
  
  TSPWorkflowDefinitionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString)
             : TSP_WorkflowServicesWorkflowDefinition;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowDefinitionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowDefinitionArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowDefinitionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowDefinitionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowDeploymentServices
    --------------------------------------------------------------------}
  
  TSPWorkflowDeploymentServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkflowServicesWorkflowDeploymentService;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowDeploymentServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowDeploymentServiceArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowDeploymentServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowDeploymentServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowInstances
    --------------------------------------------------------------------}
  
  TSPWorkflowInstancesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString)
             : TSP_WorkflowServicesWorkflowInstance;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowInstanceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowInstanceArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowInstanceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowInstanceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowInstanceServices
    --------------------------------------------------------------------}
  
  TSPWorkflowInstanceServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkflowServicesWorkflowInstanceService;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowInstanceServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowInstanceServiceArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowInstanceServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowInstanceServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowMessagingServices
    --------------------------------------------------------------------}
  
  TSPWorkflowMessagingServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkflowServicesWorkflowMessagingService;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowMessagingServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowMessagingServiceArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowMessagingServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowMessagingServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowServicesManagers
    --------------------------------------------------------------------}
  
  TSPWorkflowServicesManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AppId: string)
             : TSP_WorkflowServicesWorkflowServicesManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowServicesManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowServicesManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowServicesManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowServicesManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowSubscriptions
    --------------------------------------------------------------------}
  
  TSPWorkflowSubscriptionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString)
             : TSP_WorkflowServicesWorkflowSubscription;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowSubscriptionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowSubscriptionArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowSubscriptionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowSubscriptionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: WorkflowSubscriptionServices
    --------------------------------------------------------------------}
  
  TSPWorkflowSubscriptionServicesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkflowServicesWorkflowSubscriptionService;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkflowServicesWorkflowSubscriptionServiceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkflowServicesWorkflowSubscriptionServiceArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkflowServicesWorkflowSubscriptionServiceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkflowServicesWorkflowSubscriptionServiceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: BaseSessions
    --------------------------------------------------------------------}
  
  TSPBaseSessionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMBaseSession;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMBaseSessionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMBaseSessionArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMBaseSessionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMBaseSessionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: BooleanCriterions
    --------------------------------------------------------------------}
  
  TSPBooleanCriterionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CompareType: TInt32)
             : TSP_WorkManagement_OMBooleanCriterion;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMBooleanCriterionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMBooleanCriterionArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMBooleanCriterionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMBooleanCriterionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CalloutInfos
    --------------------------------------------------------------------}
  
  TSPCalloutInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const DirectLinkTitle: string)
             : TSP_WorkManagement_OMCalloutInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMCalloutInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMCalloutInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMCalloutInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMCalloutInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CreateRefreshJobResults
    --------------------------------------------------------------------}
  
  TSPCreateRefreshJobResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CreatedJob: boolean)
             : TSP_WorkManagement_OMCreateRefreshJobResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMCreateRefreshJobResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMCreateRefreshJobResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMCreateRefreshJobResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMCreateRefreshJobResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: CustomAttributeFilters
    --------------------------------------------------------------------}
  
  TSPCustomAttributeFiltersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ConcatType: TInt32)
             : TSP_WorkManagement_OMCustomAttributeFilter;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMCustomAttributeFilterArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMCustomAttributeFilterArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMCustomAttributeFilterArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMCustomAttributeFilterArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DashboardScriptExtensionInfos
    --------------------------------------------------------------------}
  
  TSPDashboardScriptExtensionInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ProviderKey: string)
             : TSP_WorkManagement_OMDashboardScriptExtensionInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DateRangeCriterions
    --------------------------------------------------------------------}
  
  TSPDateRangeCriterionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const RangeEndValue: TDateTime)
             : TSP_WorkManagement_OMDateRangeCriterion;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMDateRangeCriterionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMDateRangeCriterionArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMDateRangeCriterionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMDateRangeCriterionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ExchangeUserSyncStates
    --------------------------------------------------------------------}
  
  TSPExchangeUserSyncStatesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const IsOptedIn: boolean)
             : TSP_WorkManagement_OMExchangeUserSyncState;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMExchangeUserSyncStateArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMExchangeUserSyncStateArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMExchangeUserSyncStateArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMExchangeUserSyncStateArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Locations
    --------------------------------------------------------------------}
  
  TSPLocationsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_WorkManagement_OMLocation;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMLocationArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMLocationArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMLocationArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMLocationArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LocationDisplaySettings
    --------------------------------------------------------------------}
  
  TSPLocationDisplaySettingsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32)
             : TSP_WorkManagement_OMLocationDisplaySetting;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMLocationDisplaySettingArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMLocationDisplaySettingArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMLocationDisplaySettingArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMLocationDisplaySettingArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LocationFilters
    --------------------------------------------------------------------}
  
  TSPLocationFiltersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const IncludeUncategorizedTasks: boolean)
             : TSP_WorkManagement_OMLocationFilter;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMLocationFilterArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMLocationFilterArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMLocationFilterArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMLocationFilterArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: LocationUpdateResults
    --------------------------------------------------------------------}
  
  TSPLocationUpdateResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ActiveAddedCount: int64)
             : TSP_WorkManagement_OMLocationUpdateResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMLocationUpdateResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMLocationUpdateResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMLocationUpdateResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMLocationUpdateResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NameCriterions
    --------------------------------------------------------------------}
  
  TSPNameCriterionsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CompareType: TInt32)
             : TSP_WorkManagement_OMNameCriterion;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMNameCriterionArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMNameCriterionArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMNameCriterionArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMNameCriterionArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: NonTaskDataReadResults
    --------------------------------------------------------------------}
  
  TSPNonTaskDataReadResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMNonTaskDataReadResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMNonTaskDataReadResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMNonTaskDataReadResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMNonTaskDataReadResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMNonTaskDataReadResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: OrderInfos
    --------------------------------------------------------------------}
  
  TSPOrderInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Field: TInt32) : TSP_WorkManagement_OMOrderInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMOrderInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMOrderInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMOrderInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMOrderInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: PersistedPropertiess
    --------------------------------------------------------------------}
  
  TSPPersistedPropertiessEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const GroupByProjects: boolean)
             : TSP_WorkManagement_OMPersistedProperties;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMPersistedPropertiesArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMPersistedPropertiesArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMPersistedPropertiesArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMPersistedPropertiesArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProviderErrorInfos
    --------------------------------------------------------------------}
  
  TSPProviderErrorInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CorrelationId: string)
             : TSP_WorkManagement_OMProviderErrorInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMProviderErrorInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMProviderErrorInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMProviderErrorInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMProviderErrorInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ProviderRefreshStatuss
    --------------------------------------------------------------------}
  
  TSPProviderRefreshStatussEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ProviderKey: string)
             : TSP_WorkManagement_OMProviderRefreshStatus;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMProviderRefreshStatusArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMProviderRefreshStatusArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMProviderRefreshStatusArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMProviderRefreshStatusArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RefreshHealthInfos
    --------------------------------------------------------------------}
  
  TSPRefreshHealthInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const LatestRefreshTime: TDateTime)
             : TSP_WorkManagement_OMRefreshHealthInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMRefreshHealthInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMRefreshHealthInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMRefreshHealthInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMRefreshHealthInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RefreshHistorys
    --------------------------------------------------------------------}
  
  TSPRefreshHistorysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMRefreshHistory;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMRefreshHistoryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMRefreshHistoryArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMRefreshHistoryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMRefreshHistoryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: RefreshResults
    --------------------------------------------------------------------}
  
  TSPRefreshResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const AggregatorRefreshState: TInt32)
             : TSP_WorkManagement_OMRefreshResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMRefreshResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMRefreshResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMRefreshResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMRefreshResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SortableSessionManagers
    --------------------------------------------------------------------}
  
  TSPSortableSessionManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMSortableSessionManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMSortableSessionManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMSortableSessionManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMSortableSessionManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMSortableSessionManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SortableTaskQuerys
    --------------------------------------------------------------------}
  
  TSPSortableTaskQuerysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMSortableTaskQuery;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMSortableTaskQueryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMSortableTaskQueryArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMSortableTaskQueryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMSortableTaskQueryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: Tasks1
    --------------------------------------------------------------------}
  
  TSPTasks1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_WorkManagement_OMTask;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskArray;
    function ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskFilters
    --------------------------------------------------------------------}
  
  TSPTaskFiltersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const CriterionConcatType: TInt32)
             : TSP_WorkManagement_OMTaskFilter;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskFilterArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskFilterArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMTaskFilterArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskFilterArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskQuerys
    --------------------------------------------------------------------}
  
  TSPTaskQuerysEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const KeywordFilter: string)
             : TSP_WorkManagement_OMTaskQuery;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskQueryArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskQueryArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMTaskQueryArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskQueryArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskQueryByLocationResults
    --------------------------------------------------------------------}
  
  TSPTaskQueryByLocationResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Error: TInt32)
             : TSP_WorkManagement_OMTaskQueryByLocationResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskQueryByLocationResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskQueryByLocationResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMTaskQueryByLocationResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskQueryByLocationResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskQueryResults
    --------------------------------------------------------------------}
  
  TSPTaskQueryResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Error: TInt32) : TSP_WorkManagement_OMTaskQueryResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskQueryResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskQueryResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMTaskQueryResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskQueryResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskRefreshResults
    --------------------------------------------------------------------}
  
  TSPTaskRefreshResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const ErrorCorrelationId: string)
             : TSP_WorkManagement_OMTaskRefreshResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskRefreshResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskRefreshResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMTaskRefreshResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskRefreshResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: TaskWriteResults
    --------------------------------------------------------------------}
  
  TSPTaskWriteResultsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Error: TInt32) : TSP_WorkManagement_OMTaskWriteResult;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMTaskWriteResultArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMTaskWriteResultArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMTaskWriteResultArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMTaskWriteResultArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserOrderedSessionManagers
    --------------------------------------------------------------------}
  
  TSPUserOrderedSessionManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMUserOrderedSessionManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMUserOrderedSessionManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMUserOrderedSessionManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMUserOrderedSessionManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMUserOrderedSessionManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserSettingss
    --------------------------------------------------------------------}
  
  TSPUserSettingssEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const DaysAfterCurrentDateTimelineEnds: TInt32)
             : TSP_WorkManagement_OMUserSettings;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMUserSettingsArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMUserSettingsArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMUserSettingsArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMUserSettingsArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: UserSettingsManagers
    --------------------------------------------------------------------}
  
  TSPUserSettingsManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSP_WorkManagement_OMUserSettingsManager;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMUserSettingsManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMUserSettingsManagerArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMUserSettingsManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMUserSettingsManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: ViewSelectionInfos
    --------------------------------------------------------------------}
  
  TSPViewSelectionInfosEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TInt32) : TSP_WorkManagement_OMViewSelectionInfo;
    function List(const AQuery: String; out NextLink: String)
              : TSP_WorkManagement_OMViewSelectionInfoArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSP_WorkManagement_OMViewSelectionInfoArray;
    function ListAll(const AQuery: String)
                 : TSP_WorkManagement_OMViewSelectionInfoArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSP_WorkManagement_OMViewSelectionInfoArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SPOIdentityHelpers
    --------------------------------------------------------------------}
  
  TSPSPOIdentityHelpersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPO_IdentitySPOIdentityHelper;
    function List(const AQuery: String; out NextLink: String)
              : TSPO_IdentitySPOIdentityHelperArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPO_IdentitySPOIdentityHelperArray;
    function ListAll(const AQuery: String)
                 : TSPO_IdentitySPOIdentityHelperArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPO_IdentitySPOIdentityHelperArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalIdentityProviders
    --------------------------------------------------------------------}
  
  TSPAppPrincipalIdentityProvidersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAppPrincipalIdentityProvider;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppPrincipalIdentityProviderArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppPrincipalIdentityProviderArray;
    function ListAll(const AQuery: String)
                 : TSPAppPrincipalIdentityProviderArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPAppPrincipalIdentityProviderArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalManagers
    --------------------------------------------------------------------}
  
  TSPAppPrincipalManagersEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAppPrincipalManager;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppPrincipalManagerArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppPrincipalManagerArray;
    function ListAll(const AQuery: String) : TSPAppPrincipalManagerArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPAppPrincipalManagerArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalCredentials
    --------------------------------------------------------------------}
  
  TSPAppPrincipalCredentialsEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAppPrincipalCredential;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppPrincipalCredentialArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppPrincipalCredentialArray;
    function ListAll(const AQuery: String) : TSPAppPrincipalCredentialArray;
    function ListAll(const AQuery: TQueryParams)
                 : TSPAppPrincipalCredentialArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: AppPrincipalNames
    --------------------------------------------------------------------}
  
  TSPAppPrincipalNamesEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string)
             : TSPAppPrincipalName;
    function List(const AQuery: String; out NextLink: String)
              : TSPAppPrincipalNameArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TSPAppPrincipalNameArray;
    function ListAll(const AQuery: String) : TSPAppPrincipalNameArray;
    function ListAll(const AQuery: TQueryParams) : TSPAppPrincipalNameArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP: DraftProjectResources1
    --------------------------------------------------------------------}
  
  TSPDraftProjectResources1EntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const Id: TGUIDString) : TPSDraftProjectResource;
    function List(const AQuery: String; out NextLink: String)
              : TPSDraftProjectResourceArray;
    function List(const AQuery: TQueryParams; out NextLink: String)
              : TPSDraftProjectResourceArray;
    function ListAll(const AQuery: String) : TPSDraftProjectResourceArray;
    function ListAll(const AQuery: TQueryParams)
                 : TPSDraftProjectResourceArray;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: UserInfoItemImplicitEntitySet
    --------------------------------------------------------------------}
  
  TSP_DataUserInfoItemImplicitEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasUniqueRoleAssignments: boolean)
             : TSP_DataUserInfoItem;
  end;
  
  
  { --------------------------------------------------------------------
    SP.Data: TaxonomyHiddenListListItemImplicitEntitySet
    --------------------------------------------------------------------}
  
  TSP_DataTaxonomyHiddenListListItemImplicitEntitySet = Class(TODataEntitySet)
  public
    class function ObjectRestKind : String;  Override;
    class function EntityClass : TODataEntityClass;  Override;
    function Get(const HasUniqueRoleAssignments: boolean)
             : TSP_DataTaxonomyHiddenListListItem;
  end;
  
  
  { --------------------------------------------------------------------
    SP: SP
    --------------------------------------------------------------------}
  
  TSPService = Class(TODataService)
  private
    FApiData : TSPApiData;
    function GetApiData : TSPApiData;
  public
    class function ObjectRestKind : String;  Override;
    function CreateNewApiData : TSPApiData;
  published
    Property ApiData : TSPApiData read GetApiData;
  end;
  

implementation


{ --------------------------------------------------------------------
  TSPKeyValue
  --------------------------------------------------------------------}


Class Function TSPKeyValue.ObjectRestKind : String; 

begin
  Result:='KeyValue';
end;


Procedure TSPKeyValue.SetKey(AIndex: Integer; const AValue: string); 


begin
  If (FKey=AValue) then exit;
  FKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPKeyValue.SetValue(AIndex: Integer; const AValue: string); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPKeyValue.SetValueType(AIndex: Integer; const AValue: string); 


begin
  If (FValueType=AValue) then exit;
  FValueType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPSimpleDataRow
  --------------------------------------------------------------------}


Class Function TSPSimpleDataRow.ObjectRestKind : String; 

begin
  Result:='SimpleDataRow';
end;


Procedure TSPSimpleDataRow.SetCells(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FCells=AValue) then exit;
  FCells:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPSimpleDataRow.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'cells' : SetLength(FCells,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPSimpleDataTable
  --------------------------------------------------------------------}


Class Function TSPSimpleDataTable.ObjectRestKind : String; 

begin
  Result:='SimpleDataTable';
end;


Procedure TSPSimpleDataTable.SetRows(AIndex: Integer; const AValue: TSPSimpleDataRowArray); 


begin
  If (FRows=AValue) then exit;
  FRows:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPSimpleDataTable.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'rows' : SetLength(FRows,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPMethodInformation
  --------------------------------------------------------------------}


Class Function TSPMethodInformation.ObjectRestKind : String; 

begin
  Result:='MethodInformation';
end;


Procedure TSPMethodInformation.SetIsBeta(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsBeta=AValue) then exit;
  FIsBeta:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMethodInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMethodInformation.SetParameters(AIndex: Integer; const AValue: TSPParameterInformationArray); 


begin
  If (FParameters=AValue) then exit;
  FParameters:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMethodInformation.SetReturnTypeFullName(AIndex: Integer; const AValue: string); 


begin
  If (FReturnTypeFullName=AValue) then exit;
  FReturnTypeFullName:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPMethodInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'parameters' : SetLength(FParameters,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPParameterInformation
  --------------------------------------------------------------------}


Class Function TSPParameterInformation.ObjectRestKind : String; 

begin
  Result:='ParameterInformation';
end;


Procedure TSPParameterInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPParameterInformation.SetParameterTypeFullName(AIndex: Integer; const AValue: string); 


begin
  If (FParameterTypeFullName=AValue) then exit;
  FParameterTypeFullName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPPropertyInformation
  --------------------------------------------------------------------}


Class Function TSPPropertyInformation.ObjectRestKind : String; 

begin
  Result:='PropertyInformation';
end;


Procedure TSPPropertyInformation.SetExcludeFromDefaultRetrieval(AIndex: Integer; const AValue: boolean); 


begin
  If (FExcludeFromDefaultRetrieval=AValue) then exit;
  FExcludeFromDefaultRetrieval:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPropertyInformation.SetIsBeta(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsBeta=AValue) then exit;
  FIsBeta:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPropertyInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPropertyInformation.SetPropertyTypeFullName(AIndex: Integer; const AValue: string); 


begin
  If (FPropertyTypeFullName=AValue) then exit;
  FPropertyTypeFullName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPropertyInformation.SetReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnly=AValue) then exit;
  FReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPContentTypeId
  --------------------------------------------------------------------}


Class Function TSPContentTypeId.ObjectRestKind : String; 

begin
  Result:='ContentTypeId';
end;


Procedure TSPContentTypeId.SetStringValue(AIndex: Integer; const AValue: string); 


begin
  If (FStringValue=AValue) then exit;
  FStringValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldLookupValue
  --------------------------------------------------------------------}


Class Function TSPFieldLookupValue.ObjectRestKind : String; 

begin
  Result:='FieldLookupValue';
end;


Procedure TSPFieldLookupValue.SetLookupId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLookupId=AValue) then exit;
  FLookupId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookupValue.SetLookupValue(AIndex: Integer; const AValue: string); 


begin
  If (FLookupValue=AValue) then exit;
  FLookupValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldUserValue
  --------------------------------------------------------------------}


Class Function TSPFieldUserValue.ObjectRestKind : String; 

begin
  Result:='FieldUserValue';
end;


Procedure TSPFieldUserValue.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPCreatableItemInfoCollection
  --------------------------------------------------------------------}


Class Function TSPCreatableItemInfoCollection.ObjectRestKind : String; 

begin
  Result:='CreatableItemInfoCollection';
end;


Procedure TSPCreatableItemInfoCollection.SetItems(AIndex: Integer; const AValue: TSPCreatableItemInfoArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPCreatableItemInfoCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPCreatableItemInfo
  --------------------------------------------------------------------}


Class Function TSPCreatableItemInfo.ObjectRestKind : String; 

begin
  Result:='CreatableItemInfo';
end;


Procedure TSPCreatableItemInfo.SetDocumentTemplate(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDocumentTemplate=AValue) then exit;
  FDocumentTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCreatableItemInfo.SetFileExtension(AIndex: Integer; const AValue: string); 


begin
  If (FFileExtension=AValue) then exit;
  FFileExtension:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCreatableItemInfo.SetItemType(AIndex: Integer; const AValue: string); 


begin
  If (FItemType=AValue) then exit;
  FItemType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPMenuNode
  --------------------------------------------------------------------}


Class Function TSPMenuNode.ObjectRestKind : String; 

begin
  Result:='MenuNode';
end;


Procedure TSPMenuNode.SetCustomProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FCustomProperties=AValue) then exit;
  FCustomProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetFriendlyUrlSegment(AIndex: Integer; const AValue: string); 


begin
  If (FFriendlyUrlSegment=AValue) then exit;
  FFriendlyUrlSegment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetIsHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsHidden=AValue) then exit;
  FIsHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetKey(AIndex: Integer; const AValue: string); 


begin
  If (FKey=AValue) then exit;
  FKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetNodes(AIndex: Integer; const AValue: TSPMenuNodeArray); 


begin
  If (FNodes=AValue) then exit;
  FNodes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetNodeType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNodeType=AValue) then exit;
  FNodeType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetSimpleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSimpleUrl=AValue) then exit;
  FSimpleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuNode.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPMenuNode.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'customproperties' : SetLength(FCustomProperties,aLength);
  'nodes' : SetLength(FNodes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPMenuState
  --------------------------------------------------------------------}


Class Function TSPMenuState.ObjectRestKind : String; 

begin
  Result:='MenuState';
end;


Procedure TSPMenuState.SetFriendlyUrlPrefix(AIndex: Integer; const AValue: string); 


begin
  If (FFriendlyUrlPrefix=AValue) then exit;
  FFriendlyUrlPrefix:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetNodes(AIndex: Integer; const AValue: TSPMenuNodeArray); 


begin
  If (FNodes=AValue) then exit;
  FNodes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetSimpleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSimpleUrl=AValue) then exit;
  FSimpleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetSPSitePrefix(AIndex: Integer; const AValue: string); 


begin
  If (FSPSitePrefix=AValue) then exit;
  FSPSitePrefix:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetSPWebPrefix(AIndex: Integer; const AValue: string); 


begin
  If (FSPWebPrefix=AValue) then exit;
  FSPWebPrefix:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetStartingNodeKey(AIndex: Integer; const AValue: string); 


begin
  If (FStartingNodeKey=AValue) then exit;
  FStartingNodeKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetStartingNodeTitle(AIndex: Integer; const AValue: string); 


begin
  If (FStartingNodeTitle=AValue) then exit;
  FStartingNodeTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMenuState.SetVersion(AIndex: Integer; const AValue: string); 


begin
  If (FVersion=AValue) then exit;
  FVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPMenuState.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'nodes' : SetLength(FNodes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPNavigationNodeCreationInformation
  --------------------------------------------------------------------}


Class Function TSPNavigationNodeCreationInformation.ObjectRestKind : String; 

begin
  Result:='NavigationNodeCreationInformation';
end;


Procedure TSPNavigationNodeCreationInformation.SetAsLastNode(AIndex: Integer; const AValue: boolean); 


begin
  If (FAsLastNode=AValue) then exit;
  FAsLastNode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNodeCreationInformation.SetIsExternal(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsExternal=AValue) then exit;
  FIsExternal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNodeCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNodeCreationInformation.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPRelatedItem
  --------------------------------------------------------------------}


Class Function TSPRelatedItem.ObjectRestKind : String; 

begin
  Result:='RelatedItem';
end;


Procedure TSPRelatedItem.SetIconUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconUrl=AValue) then exit;
  FIconUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedItem.SetItemId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedItem.SetListId(AIndex: Integer; const AValue: string); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedItem.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedItem.SetWebId(AIndex: Integer; const AValue: string); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPAppLicenseCollection
  --------------------------------------------------------------------}


Class Function TSPAppLicenseCollection.ObjectRestKind : String; 

begin
  Result:='AppLicenseCollection';
end;


Procedure TSPAppLicenseCollection.SetItems(AIndex: Integer; const AValue: TSPAppLicenseArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPAppLicenseCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPAppLicense
  --------------------------------------------------------------------}


Class Function TSPAppLicense.ObjectRestKind : String; 

begin
  Result:='AppLicense';
end;


Procedure TSPAppLicense.SetRawXMLLicenseToken(AIndex: Integer; const AValue: string); 


begin
  If (FRawXMLLicenseToken=AValue) then exit;
  FRawXMLLicenseToken:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPAttachmentCreationInformation
  --------------------------------------------------------------------}


Class Function TSPAttachmentCreationInformation.ObjectRestKind : String; 

begin
  Result:='AttachmentCreationInformation';
end;


Procedure TSPAttachmentCreationInformation.SetFileName(AIndex: Integer; const AValue: string); 


begin
  If (FFileName=AValue) then exit;
  FFileName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPBasePermissions
  --------------------------------------------------------------------}


Class Function TSPBasePermissions.ObjectRestKind : String; 

begin
  Result:='BasePermissions';
end;


Procedure TSPBasePermissions.SetHigh(AIndex: Integer; const AValue: int64); 


begin
  If (FHigh=AValue) then exit;
  FHigh:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPBasePermissions.SetLow(AIndex: Integer; const AValue: int64); 


begin
  If (FLow=AValue) then exit;
  FLow:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeLogItemQuery
  --------------------------------------------------------------------}


Class Function TSPChangeLogItemQuery.ObjectRestKind : String; 

begin
  Result:='ChangeLogItemQuery';
end;


Procedure TSPChangeLogItemQuery.SetChangeToken(AIndex: Integer; const AValue: string); 


begin
  If (FChangeToken=AValue) then exit;
  FChangeToken:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeLogItemQuery.SetContains(AIndex: Integer; const AValue: string); 


begin
  If (FContains=AValue) then exit;
  FContains:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeLogItemQuery.SetQuery(AIndex: Integer; const AValue: string); 


begin
  If (FQuery=AValue) then exit;
  FQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeLogItemQuery.SetQueryOptions(AIndex: Integer; const AValue: string); 


begin
  If (FQueryOptions=AValue) then exit;
  FQueryOptions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeLogItemQuery.SetRowLimit(AIndex: Integer; const AValue: string); 


begin
  If (FRowLimit=AValue) then exit;
  FRowLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeLogItemQuery.SetViewFields(AIndex: Integer; const AValue: string); 


begin
  If (FViewFields=AValue) then exit;
  FViewFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeLogItemQuery.SetViewName(AIndex: Integer; const AValue: string); 


begin
  If (FViewName=AValue) then exit;
  FViewName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeQuery
  --------------------------------------------------------------------}


Class Function TSPChangeQuery.ObjectRestKind : String; 

begin
  Result:='ChangeQuery';
end;


Procedure TSPChangeQuery.SetAdd(AIndex: Integer; const AValue: boolean); 


begin
  If (FAdd=AValue) then exit;
  FAdd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetAlert(AIndex: Integer; const AValue: boolean); 


begin
  If (FAlert=AValue) then exit;
  FAlert:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetChangeTokenEnd(AIndex: Integer; const AValue: TSPChangeToken); 


begin
  If (FChangeTokenEnd=AValue) then exit;
  FChangeTokenEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetChangeTokenStart(AIndex: Integer; const AValue: TSPChangeToken); 


begin
  If (FChangeTokenStart=AValue) then exit;
  FChangeTokenStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetContentType(AIndex: Integer; const AValue: boolean); 


begin
  If (FContentType=AValue) then exit;
  FContentType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetDeleteObject(AIndex: Integer; const AValue: boolean); 


begin
  If (FDeleteObject=AValue) then exit;
  FDeleteObject:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetField(AIndex: Integer; const AValue: boolean); 


begin
  If (FField=AValue) then exit;
  FField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.Set_File(AIndex: Integer; const AValue: boolean); 


begin
  If (F_File=AValue) then exit;
  F_File:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetFolder(AIndex: Integer; const AValue: boolean); 


begin
  If (FFolder=AValue) then exit;
  FFolder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetGroup(AIndex: Integer; const AValue: boolean); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetGroupMembershipAdd(AIndex: Integer; const AValue: boolean); 


begin
  If (FGroupMembershipAdd=AValue) then exit;
  FGroupMembershipAdd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetGroupMembershipDelete(AIndex: Integer; const AValue: boolean); 


begin
  If (FGroupMembershipDelete=AValue) then exit;
  FGroupMembershipDelete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetItem(AIndex: Integer; const AValue: boolean); 


begin
  If (FItem=AValue) then exit;
  FItem:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetList(AIndex: Integer; const AValue: boolean); 


begin
  If (FList=AValue) then exit;
  FList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetMove(AIndex: Integer; const AValue: boolean); 


begin
  If (FMove=AValue) then exit;
  FMove:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetNavigation(AIndex: Integer; const AValue: boolean); 


begin
  If (FNavigation=AValue) then exit;
  FNavigation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRename(AIndex: Integer; const AValue: boolean); 


begin
  If (FRename=AValue) then exit;
  FRename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRestore(AIndex: Integer; const AValue: boolean); 


begin
  If (FRestore=AValue) then exit;
  FRestore:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRoleAssignmentAdd(AIndex: Integer; const AValue: boolean); 


begin
  If (FRoleAssignmentAdd=AValue) then exit;
  FRoleAssignmentAdd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRoleAssignmentDelete(AIndex: Integer; const AValue: boolean); 


begin
  If (FRoleAssignmentDelete=AValue) then exit;
  FRoleAssignmentDelete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRoleDefinitionAdd(AIndex: Integer; const AValue: boolean); 


begin
  If (FRoleDefinitionAdd=AValue) then exit;
  FRoleDefinitionAdd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRoleDefinitionDelete(AIndex: Integer; const AValue: boolean); 


begin
  If (FRoleDefinitionDelete=AValue) then exit;
  FRoleDefinitionDelete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetRoleDefinitionUpdate(AIndex: Integer; const AValue: boolean); 


begin
  If (FRoleDefinitionUpdate=AValue) then exit;
  FRoleDefinitionUpdate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetSecurityPolicy(AIndex: Integer; const AValue: boolean); 


begin
  If (FSecurityPolicy=AValue) then exit;
  FSecurityPolicy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetSite(AIndex: Integer; const AValue: boolean); 


begin
  If (FSite=AValue) then exit;
  FSite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetSystemUpdate(AIndex: Integer; const AValue: boolean); 


begin
  If (FSystemUpdate=AValue) then exit;
  FSystemUpdate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetUpdate(AIndex: Integer; const AValue: boolean); 


begin
  If (FUpdate=AValue) then exit;
  FUpdate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FUser=AValue) then exit;
  FUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetView(AIndex: Integer; const AValue: boolean); 


begin
  If (FView=AValue) then exit;
  FView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeQuery.SetWeb(AIndex: Integer; const AValue: boolean); 


begin
  If (FWeb=AValue) then exit;
  FWeb:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSPChangeQuery.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_File' : Result:='File';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSPChangeToken
  --------------------------------------------------------------------}


Class Function TSPChangeToken.ObjectRestKind : String; 

begin
  Result:='ChangeToken';
end;


Procedure TSPChangeToken.SetStringValue(AIndex: Integer; const AValue: string); 


begin
  If (FStringValue=AValue) then exit;
  FStringValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPContentTypeCreationInformation
  --------------------------------------------------------------------}


Class Function TSPContentTypeCreationInformation.ObjectRestKind : String; 

begin
  Result:='ContentTypeCreationInformation';
end;


Procedure TSPContentTypeCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentTypeCreationInformation.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentTypeCreationInformation.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentTypeCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPContextWebInformation
  --------------------------------------------------------------------}


Class Function TSPContextWebInformation.ObjectRestKind : String; 

begin
  Result:='ContextWebInformation';
end;


Procedure TSPContextWebInformation.SetFormDigestTimeoutSeconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFormDigestTimeoutSeconds=AValue) then exit;
  FFormDigestTimeoutSeconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContextWebInformation.SetFormDigestValue(AIndex: Integer; const AValue: string); 


begin
  If (FFormDigestValue=AValue) then exit;
  FFormDigestValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContextWebInformation.SetLibraryVersion(AIndex: Integer; const AValue: string); 


begin
  If (FLibraryVersion=AValue) then exit;
  FLibraryVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContextWebInformation.SetSiteFullUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSiteFullUrl=AValue) then exit;
  FSiteFullUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContextWebInformation.SetSupportedSchemaVersions(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSupportedSchemaVersions=AValue) then exit;
  FSupportedSchemaVersions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContextWebInformation.SetWebFullUrl(AIndex: Integer; const AValue: string); 


begin
  If (FWebFullUrl=AValue) then exit;
  FWebFullUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPContextWebInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'supportedschemaversions' : SetLength(FSupportedSchemaVersions,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPDocumentLibraryInformation
  --------------------------------------------------------------------}


Class Function TSPDocumentLibraryInformation.ObjectRestKind : String; 

begin
  Result:='DocumentLibraryInformation';
end;


Procedure TSPDocumentLibraryInformation.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDocumentLibraryInformation.SetModifiedFriendlyDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FModifiedFriendlyDisplay=AValue) then exit;
  FModifiedFriendlyDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDocumentLibraryInformation.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDocumentLibraryInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPEventReceiverDefinitionCreationInformation
  --------------------------------------------------------------------}


Class Function TSPEventReceiverDefinitionCreationInformation.ObjectRestKind : String; 

begin
  Result:='EventReceiverDefinitionCreationInformation';
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetReceiverAssembly(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverAssembly=AValue) then exit;
  FReceiverAssembly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetReceiverClass(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverClass=AValue) then exit;
  FReceiverClass:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetReceiverName(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverName=AValue) then exit;
  FReceiverName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetSequenceNumber(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSequenceNumber=AValue) then exit;
  FSequenceNumber:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetSynchronization(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSynchronization=AValue) then exit;
  FSynchronization:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetEventType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEventType=AValue) then exit;
  FEventType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinitionCreationInformation.SetReceiverUrl(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverUrl=AValue) then exit;
  FReceiverUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPListDataValidationFailure
  --------------------------------------------------------------------}


Class Function TSPListDataValidationFailure.ObjectRestKind : String; 

begin
  Result:='ListDataValidationFailure';
end;


Procedure TSPListDataValidationFailure.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListDataValidationFailure.SetMessage(AIndex: Integer; const AValue: string); 


begin
  If (FMessage=AValue) then exit;
  FMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListDataValidationFailure.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListDataValidationFailure.SetReason(AIndex: Integer; const AValue: TInt32); 


begin
  If (FReason=AValue) then exit;
  FReason:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListDataValidationFailure.SetValidationType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FValidationType=AValue) then exit;
  FValidationType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldCalculatedErrorValue
  --------------------------------------------------------------------}


Class Function TSPFieldCalculatedErrorValue.ObjectRestKind : String; 

begin
  Result:='FieldCalculatedErrorValue';
end;


Procedure TSPFieldCalculatedErrorValue.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldCreationInformation
  --------------------------------------------------------------------}


Class Function TSPFieldCreationInformation.ObjectRestKind : String; 

begin
  Result:='FieldCreationInformation';
end;


Procedure TSPFieldCreationInformation.SetChoices(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FChoices=AValue) then exit;
  FChoices:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetIsCompactName(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCompactName=AValue) then exit;
  FIsCompactName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetLookupFieldName(AIndex: Integer; const AValue: string); 


begin
  If (FLookupFieldName=AValue) then exit;
  FLookupFieldName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetLookupListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupListId=AValue) then exit;
  FLookupListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetLookupWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupWebId=AValue) then exit;
  FLookupWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequired=AValue) then exit;
  FRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCreationInformation.SetFieldTypeKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldTypeKind=AValue) then exit;
  FFieldTypeKind:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPFieldCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'choices' : SetLength(FChoices,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPFieldGeolocationValue
  --------------------------------------------------------------------}


Class Function TSPFieldGeolocationValue.ObjectRestKind : String; 

begin
  Result:='FieldGeolocationValue';
end;


Procedure TSPFieldGeolocationValue.SetAltitude(AIndex: Integer; const AValue: Double); 


begin
  If (FAltitude=AValue) then exit;
  FAltitude:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldGeolocationValue.SetLatitude(AIndex: Integer; const AValue: Double); 


begin
  If (FLatitude=AValue) then exit;
  FLatitude:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldGeolocationValue.SetLongitude(AIndex: Integer; const AValue: Double); 


begin
  If (FLongitude=AValue) then exit;
  FLongitude:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldGeolocationValue.SetMeasure(AIndex: Integer; const AValue: Double); 


begin
  If (FMeasure=AValue) then exit;
  FMeasure:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldRatingScaleQuestionAnswer
  --------------------------------------------------------------------}


Class Function TSPFieldRatingScaleQuestionAnswer.ObjectRestKind : String; 

begin
  Result:='FieldRatingScaleQuestionAnswer';
end;


Procedure TSPFieldRatingScaleQuestionAnswer.SetAnswer(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAnswer=AValue) then exit;
  FAnswer:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScaleQuestionAnswer.SetQuestion(AIndex: Integer; const AValue: string); 


begin
  If (FQuestion=AValue) then exit;
  FQuestion:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldUrlValue
  --------------------------------------------------------------------}


Class Function TSPFieldUrlValue.ObjectRestKind : String; 

begin
  Result:='FieldUrlValue';
end;


Procedure TSPFieldUrlValue.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldUrlValue.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFileCreationInformation
  --------------------------------------------------------------------}


Class Function TSPFileCreationInformation.ObjectRestKind : String; 

begin
  Result:='FileCreationInformation';
end;


Procedure TSPFileCreationInformation.SetContent(AIndex: Integer; const AValue: TBinary); 


begin
  If (FContent=AValue) then exit;
  FContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileCreationInformation.SetOverwrite(AIndex: Integer; const AValue: boolean); 


begin
  If (FOverwrite=AValue) then exit;
  FOverwrite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileCreationInformation.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPGroupCreationInformation
  --------------------------------------------------------------------}


Class Function TSPGroupCreationInformation.ObjectRestKind : String; 

begin
  Result:='GroupCreationInformation';
end;


Procedure TSPGroupCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroupCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPSPInvitationCreationResult
  --------------------------------------------------------------------}


Class Function TSPSPInvitationCreationResult.ObjectRestKind : String; 

begin
  Result:='SPInvitationCreationResult';
end;


Procedure TSPSPInvitationCreationResult.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSPInvitationCreationResult.SetInvitationLink(AIndex: Integer; const AValue: string); 


begin
  If (FInvitationLink=AValue) then exit;
  FInvitationLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSPInvitationCreationResult.SetSucceeded(AIndex: Integer; const AValue: boolean); 


begin
  If (FSucceeded=AValue) then exit;
  FSucceeded:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPLanguage
  --------------------------------------------------------------------}


Class Function TSPLanguage.ObjectRestKind : String; 

begin
  Result:='Language';
end;


Procedure TSPLanguage.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPLanguage.SetLanguageTag(AIndex: Integer; const AValue: string); 


begin
  If (FLanguageTag=AValue) then exit;
  FLanguageTag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPLanguage.SetLcid(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLcid=AValue) then exit;
  FLcid:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPListCreationInformation
  --------------------------------------------------------------------}


Class Function TSPListCreationInformation.ObjectRestKind : String; 

begin
  Result:='ListCreationInformation';
end;


Procedure TSPListCreationInformation.SetCustomSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FCustomSchemaXml=AValue) then exit;
  FCustomSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetDataSourceProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FDataSourceProperties=AValue) then exit;
  FDataSourceProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetDocumentTemplateType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDocumentTemplateType=AValue) then exit;
  FDocumentTemplateType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetQuickLaunchOption(AIndex: Integer; const AValue: TInt32); 


begin
  If (FQuickLaunchOption=AValue) then exit;
  FQuickLaunchOption:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetTemplateFeatureId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTemplateFeatureId=AValue) then exit;
  FTemplateFeatureId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetTemplateType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTemplateType=AValue) then exit;
  FTemplateType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListCreationInformation.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPListCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'datasourceproperties' : SetLength(FDataSourceProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPListDataSource
  --------------------------------------------------------------------}


Class Function TSPListDataSource.ObjectRestKind : String; 

begin
  Result:='ListDataSource';
end;


Procedure TSPListDataSource.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPListDataSource.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPListDataValidationExceptionValue
  --------------------------------------------------------------------}


Class Function TSPListDataValidationExceptionValue.ObjectRestKind : String; 

begin
  Result:='ListDataValidationExceptionValue';
end;


Procedure TSPListDataValidationExceptionValue.SetFieldFailures(AIndex: Integer; const AValue: TSPListDataValidationFailureArray); 


begin
  If (FFieldFailures=AValue) then exit;
  FFieldFailures:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListDataValidationExceptionValue.SetItemFailure(AIndex: Integer; const AValue: TSPListDataValidationFailure); 


begin
  If (FItemFailure=AValue) then exit;
  FItemFailure:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPListDataValidationExceptionValue.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'fieldfailures' : SetLength(FFieldFailures,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPListItemCollectionPosition
  --------------------------------------------------------------------}


Class Function TSPListItemCollectionPosition.ObjectRestKind : String; 

begin
  Result:='ListItemCollectionPosition';
end;


Procedure TSPListItemCollectionPosition.SetPagingInfo(AIndex: Integer; const AValue: string); 


begin
  If (FPagingInfo=AValue) then exit;
  FPagingInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPListItemCreationInformation
  --------------------------------------------------------------------}


Class Function TSPListItemCreationInformation.ObjectRestKind : String; 

begin
  Result:='ListItemCreationInformation';
end;


Procedure TSPListItemCreationInformation.SetFolderUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFolderUrl=AValue) then exit;
  FFolderUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItemCreationInformation.SetLeafName(AIndex: Integer; const AValue: string); 


begin
  If (FLeafName=AValue) then exit;
  FLeafName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItemCreationInformation.SetUnderlyingObjectType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUnderlyingObjectType=AValue) then exit;
  FUnderlyingObjectType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPListItemFormUpdateValue
  --------------------------------------------------------------------}


Class Function TSPListItemFormUpdateValue.ObjectRestKind : String; 

begin
  Result:='ListItemFormUpdateValue';
end;


Procedure TSPListItemFormUpdateValue.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItemFormUpdateValue.SetFieldName(AIndex: Integer; const AValue: string); 


begin
  If (FFieldName=AValue) then exit;
  FFieldName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItemFormUpdateValue.SetFieldValue(AIndex: Integer; const AValue: string); 


begin
  If (FFieldValue=AValue) then exit;
  FFieldValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItemFormUpdateValue.SetHasException(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasException=AValue) then exit;
  FHasException:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPCamlQuery
  --------------------------------------------------------------------}


Class Function TSPCamlQuery.ObjectRestKind : String; 

begin
  Result:='CamlQuery';
end;


Procedure TSPCamlQuery.SetDatesInUtc(AIndex: Integer; const AValue: boolean); 


begin
  If (FDatesInUtc=AValue) then exit;
  FDatesInUtc:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCamlQuery.SetFolderServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFolderServerRelativeUrl=AValue) then exit;
  FFolderServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCamlQuery.SetListItemCollectionPosition(AIndex: Integer; const AValue: TSPListItemCollectionPosition); 


begin
  If (FListItemCollectionPosition=AValue) then exit;
  FListItemCollectionPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCamlQuery.SetViewXml(AIndex: Integer; const AValue: string); 


begin
  If (FViewXml=AValue) then exit;
  FViewXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPRenderListContextMenuDataParameters
  --------------------------------------------------------------------}


Class Function TSPRenderListContextMenuDataParameters.ObjectRestKind : String; 

begin
  Result:='RenderListContextMenuDataParameters';
end;


Procedure TSPRenderListContextMenuDataParameters.SetCascDelWarnMessage(AIndex: Integer; const AValue: string); 


begin
  If (FCascDelWarnMessage=AValue) then exit;
  FCascDelWarnMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetCustomAction(AIndex: Integer; const AValue: string); 


begin
  If (FCustomAction=AValue) then exit;
  FCustomAction:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetField(AIndex: Integer; const AValue: string); 


begin
  If (FField=AValue) then exit;
  FField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetID(AIndex: Integer; const AValue: string); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetInplaceFullListSearch(AIndex: Integer; const AValue: string); 


begin
  If (FInplaceFullListSearch=AValue) then exit;
  FInplaceFullListSearch:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetInplaceSearchQuery(AIndex: Integer; const AValue: string); 


begin
  If (FInplaceSearchQuery=AValue) then exit;
  FInplaceSearchQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetIsCSR(AIndex: Integer; const AValue: string); 


begin
  If (FIsCSR=AValue) then exit;
  FIsCSR:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetIsXslView(AIndex: Integer; const AValue: string); 


begin
  If (FIsXslView=AValue) then exit;
  FIsXslView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetItemId(AIndex: Integer; const AValue: string); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetListViewPageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FListViewPageUrl=AValue) then exit;
  FListViewPageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetOverrideScope(AIndex: Integer; const AValue: string); 


begin
  If (FOverrideScope=AValue) then exit;
  FOverrideScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetRootFolder(AIndex: Integer; const AValue: string); 


begin
  If (FRootFolder=AValue) then exit;
  FRootFolder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetView(AIndex: Integer; const AValue: string); 


begin
  If (FView=AValue) then exit;
  FView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListContextMenuDataParameters.SetViewCount(AIndex: Integer; const AValue: string); 


begin
  If (FViewCount=AValue) then exit;
  FViewCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPRenderListDataOverrideParameters
  --------------------------------------------------------------------}


Class Function TSPRenderListDataOverrideParameters.ObjectRestKind : String; 

begin
  Result:='RenderListDataOverrideParameters';
end;


Procedure TSPRenderListDataOverrideParameters.SetCascDelWarnMessage(AIndex: Integer; const AValue: string); 


begin
  If (FCascDelWarnMessage=AValue) then exit;
  FCascDelWarnMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetCustomAction(AIndex: Integer; const AValue: string); 


begin
  If (FCustomAction=AValue) then exit;
  FCustomAction:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetDrillDown(AIndex: Integer; const AValue: string); 


begin
  If (FDrillDown=AValue) then exit;
  FDrillDown:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetField(AIndex: Integer; const AValue: string); 


begin
  If (FField=AValue) then exit;
  FField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFieldInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FFieldInternalName=AValue) then exit;
  FFieldInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilter(AIndex: Integer; const AValue: string); 


begin
  If (FFilter=AValue) then exit;
  FFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData=AValue) then exit;
  FFilterData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData1=AValue) then exit;
  FFilterData1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData10=AValue) then exit;
  FFilterData10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData2=AValue) then exit;
  FFilterData2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData3=AValue) then exit;
  FFilterData3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData4=AValue) then exit;
  FFilterData4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData5=AValue) then exit;
  FFilterData5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData6=AValue) then exit;
  FFilterData6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData7=AValue) then exit;
  FFilterData7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData8=AValue) then exit;
  FFilterData8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterData9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterData9=AValue) then exit;
  FFilterData9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField=AValue) then exit;
  FFilterField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField1=AValue) then exit;
  FFilterField1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField10=AValue) then exit;
  FFilterField10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField2=AValue) then exit;
  FFilterField2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField3=AValue) then exit;
  FFilterField3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField4=AValue) then exit;
  FFilterField4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField5=AValue) then exit;
  FFilterField5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField6=AValue) then exit;
  FFilterField6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField7=AValue) then exit;
  FFilterField7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField8=AValue) then exit;
  FFilterField8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterField9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField9=AValue) then exit;
  FFilterField9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields=AValue) then exit;
  FFilterFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields1=AValue) then exit;
  FFilterFields1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields10=AValue) then exit;
  FFilterFields10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields2=AValue) then exit;
  FFilterFields2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields3=AValue) then exit;
  FFilterFields3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields4=AValue) then exit;
  FFilterFields4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields5=AValue) then exit;
  FFilterFields5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields6=AValue) then exit;
  FFilterFields6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields7=AValue) then exit;
  FFilterFields7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields8=AValue) then exit;
  FFilterFields8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterFields9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterFields9=AValue) then exit;
  FFilterFields9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId=AValue) then exit;
  FFilterLookupId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId1=AValue) then exit;
  FFilterLookupId1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId10=AValue) then exit;
  FFilterLookupId10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId2=AValue) then exit;
  FFilterLookupId2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId3=AValue) then exit;
  FFilterLookupId3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId4=AValue) then exit;
  FFilterLookupId4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId5=AValue) then exit;
  FFilterLookupId5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId6=AValue) then exit;
  FFilterLookupId6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId7=AValue) then exit;
  FFilterLookupId7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId8=AValue) then exit;
  FFilterLookupId8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterLookupId9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterLookupId9=AValue) then exit;
  FFilterLookupId9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp=AValue) then exit;
  FFilterOp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp1=AValue) then exit;
  FFilterOp1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp10=AValue) then exit;
  FFilterOp10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp2=AValue) then exit;
  FFilterOp2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp3=AValue) then exit;
  FFilterOp3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp4=AValue) then exit;
  FFilterOp4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp5=AValue) then exit;
  FFilterOp5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp6=AValue) then exit;
  FFilterOp6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp7=AValue) then exit;
  FFilterOp7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp8=AValue) then exit;
  FFilterOp8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterOp9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterOp9=AValue) then exit;
  FFilterOp9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue=AValue) then exit;
  FFilterValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue1=AValue) then exit;
  FFilterValue1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue10=AValue) then exit;
  FFilterValue10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue2=AValue) then exit;
  FFilterValue2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue3=AValue) then exit;
  FFilterValue3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue4=AValue) then exit;
  FFilterValue4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue5=AValue) then exit;
  FFilterValue5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue6=AValue) then exit;
  FFilterValue6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue7=AValue) then exit;
  FFilterValue7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue8=AValue) then exit;
  FFilterValue8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValue9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValue9=AValue) then exit;
  FFilterValue9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues=AValue) then exit;
  FFilterValues:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues1(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues1=AValue) then exit;
  FFilterValues1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues10(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues10=AValue) then exit;
  FFilterValues10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues2(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues2=AValue) then exit;
  FFilterValues2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues3(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues3=AValue) then exit;
  FFilterValues3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues4(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues4=AValue) then exit;
  FFilterValues4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues5(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues5=AValue) then exit;
  FFilterValues5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues6(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues6=AValue) then exit;
  FFilterValues6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues7(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues7=AValue) then exit;
  FFilterValues7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues8(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues8=AValue) then exit;
  FFilterValues8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetFilterValues9(AIndex: Integer; const AValue: string); 


begin
  If (FFilterValues9=AValue) then exit;
  FFilterValues9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetGroupString(AIndex: Integer; const AValue: string); 


begin
  If (FGroupString=AValue) then exit;
  FGroupString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetHasOverrideSelectCommand(AIndex: Integer; const AValue: string); 


begin
  If (FHasOverrideSelectCommand=AValue) then exit;
  FHasOverrideSelectCommand:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetID(AIndex: Integer; const AValue: string); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetInplaceFullListSearch(AIndex: Integer; const AValue: string); 


begin
  If (FInplaceFullListSearch=AValue) then exit;
  FInplaceFullListSearch:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetInplaceSearchQuery(AIndex: Integer; const AValue: string); 


begin
  If (FInplaceSearchQuery=AValue) then exit;
  FInplaceSearchQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetIsCSR(AIndex: Integer; const AValue: string); 


begin
  If (FIsCSR=AValue) then exit;
  FIsCSR:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetIsGroupRender(AIndex: Integer; const AValue: string); 


begin
  If (FIsGroupRender=AValue) then exit;
  FIsGroupRender:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetIsXslView(AIndex: Integer; const AValue: string); 


begin
  If (FIsXslView=AValue) then exit;
  FIsXslView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetListViewPageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FListViewPageUrl=AValue) then exit;
  FListViewPageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetOverrideScope(AIndex: Integer; const AValue: string); 


begin
  If (FOverrideScope=AValue) then exit;
  FOverrideScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetOverrideSelectCommand(AIndex: Integer; const AValue: string); 


begin
  If (FOverrideSelectCommand=AValue) then exit;
  FOverrideSelectCommand:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetPageFirstRow(AIndex: Integer; const AValue: string); 


begin
  If (FPageFirstRow=AValue) then exit;
  FPageFirstRow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetPageLastRow(AIndex: Integer; const AValue: string); 


begin
  If (FPageLastRow=AValue) then exit;
  FPageLastRow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetRootFolder(AIndex: Integer; const AValue: string); 


begin
  If (FRootFolder=AValue) then exit;
  FRootFolder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir=AValue) then exit;
  FSortDir:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir1(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir1=AValue) then exit;
  FSortDir1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir10(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir10=AValue) then exit;
  FSortDir10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir2(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir2=AValue) then exit;
  FSortDir2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir3(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir3=AValue) then exit;
  FSortDir3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir4(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir4=AValue) then exit;
  FSortDir4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir5(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir5=AValue) then exit;
  FSortDir5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir6(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir6=AValue) then exit;
  FSortDir6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir7(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir7=AValue) then exit;
  FSortDir7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir8(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir8=AValue) then exit;
  FSortDir8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortDir9(AIndex: Integer; const AValue: string); 


begin
  If (FSortDir9=AValue) then exit;
  FSortDir9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField(AIndex: Integer; const AValue: string); 


begin
  If (FSortField=AValue) then exit;
  FSortField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField1(AIndex: Integer; const AValue: string); 


begin
  If (FSortField1=AValue) then exit;
  FSortField1:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField10(AIndex: Integer; const AValue: string); 


begin
  If (FSortField10=AValue) then exit;
  FSortField10:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField2(AIndex: Integer; const AValue: string); 


begin
  If (FSortField2=AValue) then exit;
  FSortField2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField3(AIndex: Integer; const AValue: string); 


begin
  If (FSortField3=AValue) then exit;
  FSortField3:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField4(AIndex: Integer; const AValue: string); 


begin
  If (FSortField4=AValue) then exit;
  FSortField4:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField5(AIndex: Integer; const AValue: string); 


begin
  If (FSortField5=AValue) then exit;
  FSortField5:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField6(AIndex: Integer; const AValue: string); 


begin
  If (FSortField6=AValue) then exit;
  FSortField6:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField7(AIndex: Integer; const AValue: string); 


begin
  If (FSortField7=AValue) then exit;
  FSortField7:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField8(AIndex: Integer; const AValue: string); 


begin
  If (FSortField8=AValue) then exit;
  FSortField8:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortField9(AIndex: Integer; const AValue: string); 


begin
  If (FSortField9=AValue) then exit;
  FSortField9:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortFields(AIndex: Integer; const AValue: string); 


begin
  If (FSortFields=AValue) then exit;
  FSortFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetSortFieldValues(AIndex: Integer; const AValue: string); 


begin
  If (FSortFieldValues=AValue) then exit;
  FSortFieldValues:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetView(AIndex: Integer; const AValue: string); 


begin
  If (FView=AValue) then exit;
  FView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetViewCount(AIndex: Integer; const AValue: string); 


begin
  If (FViewCount=AValue) then exit;
  FViewCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetViewId(AIndex: Integer; const AValue: string); 


begin
  If (FViewId=AValue) then exit;
  FViewId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataOverrideParameters.SetWebPartId(AIndex: Integer; const AValue: string); 


begin
  If (FWebPartId=AValue) then exit;
  FWebPartId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPRenderListDataParameters
  --------------------------------------------------------------------}


Class Function TSPRenderListDataParameters.ObjectRestKind : String; 

begin
  Result:='RenderListDataParameters';
end;


Procedure TSPRenderListDataParameters.SetFolderServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFolderServerRelativeUrl=AValue) then exit;
  FFolderServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataParameters.SetPaging(AIndex: Integer; const AValue: string); 


begin
  If (FPaging=AValue) then exit;
  FPaging:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataParameters.SetRenderOptions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRenderOptions=AValue) then exit;
  FRenderOptions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListDataParameters.SetViewXml(AIndex: Integer; const AValue: string); 


begin
  If (FViewXml=AValue) then exit;
  FViewXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPRenderListFilterDataParameters
  --------------------------------------------------------------------}


Class Function TSPRenderListFilterDataParameters.ObjectRestKind : String; 

begin
  Result:='RenderListFilterDataParameters';
end;


Procedure TSPRenderListFilterDataParameters.SetFieldInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FFieldInternalName=AValue) then exit;
  FFieldInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListFilterDataParameters.SetOverrideScope(AIndex: Integer; const AValue: string); 


begin
  If (FOverrideScope=AValue) then exit;
  FOverrideScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListFilterDataParameters.SetProcessQStringToCAML(AIndex: Integer; const AValue: string); 


begin
  If (FProcessQStringToCAML=AValue) then exit;
  FProcessQStringToCAML:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRenderListFilterDataParameters.SetViewId(AIndex: Integer; const AValue: string); 


begin
  If (FViewId=AValue) then exit;
  FViewId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPRoleDefinitionCreationInformation
  --------------------------------------------------------------------}


Class Function TSPRoleDefinitionCreationInformation.ObjectRestKind : String; 

begin
  Result:='RoleDefinitionCreationInformation';
end;


Procedure TSPRoleDefinitionCreationInformation.SetBasePermissions(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FBasePermissions=AValue) then exit;
  FBasePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinitionCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinitionCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinitionCreationInformation.SetOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPUpgradeInfo
  --------------------------------------------------------------------}


Class Function TSPUpgradeInfo.ObjectRestKind : String; 

begin
  Result:='UpgradeInfo';
end;


Procedure TSPUpgradeInfo.SetErrorFile(AIndex: Integer; const AValue: string); 


begin
  If (FErrorFile=AValue) then exit;
  FErrorFile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetErrors(AIndex: Integer; const AValue: TInt32); 


begin
  If (FErrors=AValue) then exit;
  FErrors:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetLastUpdated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastUpdated=AValue) then exit;
  FLastUpdated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetLogFile(AIndex: Integer; const AValue: string); 


begin
  If (FLogFile=AValue) then exit;
  FLogFile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetRequestDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRequestDate=AValue) then exit;
  FRequestDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetRetryCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRetryCount=AValue) then exit;
  FRetryCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetStartTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStartTime=AValue) then exit;
  FStartTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetUpgradeType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUpgradeType=AValue) then exit;
  FUpgradeType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUpgradeInfo.SetWarnings(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWarnings=AValue) then exit;
  FWarnings:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPSubwebQuery
  --------------------------------------------------------------------}


Class Function TSPSubwebQuery.ObjectRestKind : String; 

begin
  Result:='SubwebQuery';
end;


Procedure TSPSubwebQuery.SetConfigurationFilter(AIndex: Integer; const AValue: TInt32); 


begin
  If (FConfigurationFilter=AValue) then exit;
  FConfigurationFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSubwebQuery.SetWebTemplateFilter(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWebTemplateFilter=AValue) then exit;
  FWebTemplateFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPTenantAppInformation
  --------------------------------------------------------------------}


Class Function TSPTenantAppInformation.ObjectRestKind : String; 

begin
  Result:='TenantAppInformation';
end;


Procedure TSPTenantAppInformation.SetAppPrincipalId(AIndex: Integer; const AValue: string); 


begin
  If (FAppPrincipalId=AValue) then exit;
  FAppPrincipalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetAppWebFullUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAppWebFullUrl=AValue) then exit;
  FAppWebFullUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetCreationTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreationTime=AValue) then exit;
  FCreationTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetIconAbsoluteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconAbsoluteUrl=AValue) then exit;
  FIconAbsoluteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetIconFallbackAbsoluteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconFallbackAbsoluteUrl=AValue) then exit;
  FIconFallbackAbsoluteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetLaunchUrl(AIndex: Integer; const AValue: string); 


begin
  If (FLaunchUrl=AValue) then exit;
  FLaunchUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetPackageFingerprint(AIndex: Integer; const AValue: TBinary); 


begin
  If (FPackageFingerprint=AValue) then exit;
  FPackageFingerprint:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetProductId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FProductId=AValue) then exit;
  FProductId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetRemoteAppUrl(AIndex: Integer; const AValue: string); 


begin
  If (FRemoteAppUrl=AValue) then exit;
  FRemoteAppUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPTimeZoneInformation
  --------------------------------------------------------------------}


Class Function TSPTimeZoneInformation.ObjectRestKind : String; 

begin
  Result:='TimeZoneInformation';
end;


Procedure TSPTimeZoneInformation.SetBias(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBias=AValue) then exit;
  FBias:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTimeZoneInformation.SetDaylightBias(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDaylightBias=AValue) then exit;
  FDaylightBias:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTimeZoneInformation.SetStandardBias(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStandardBias=AValue) then exit;
  FStandardBias:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPUsageInfo
  --------------------------------------------------------------------}


Class Function TSPUsageInfo.ObjectRestKind : String; 

begin
  Result:='UsageInfo';
end;


Procedure TSPUsageInfo.SetBandwidth(AIndex: Integer; const AValue: int64); 


begin
  If (FBandwidth=AValue) then exit;
  FBandwidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUsageInfo.SetDiscussionStorage(AIndex: Integer; const AValue: int64); 


begin
  If (FDiscussionStorage=AValue) then exit;
  FDiscussionStorage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUsageInfo.SetHits(AIndex: Integer; const AValue: int64); 


begin
  If (FHits=AValue) then exit;
  FHits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUsageInfo.SetStorage(AIndex: Integer; const AValue: int64); 


begin
  If (FStorage=AValue) then exit;
  FStorage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUsageInfo.SetStoragePercentageUsed(AIndex: Integer; const AValue: Double); 


begin
  If (FStoragePercentageUsed=AValue) then exit;
  FStoragePercentageUsed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUsageInfo.SetVisits(AIndex: Integer; const AValue: int64); 


begin
  If (FVisits=AValue) then exit;
  FVisits:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPUserCreationInformation
  --------------------------------------------------------------------}


Class Function TSPUserCreationInformation.ObjectRestKind : String; 

begin
  Result:='UserCreationInformation';
end;


Procedure TSPUserCreationInformation.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCreationInformation.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPUserIdInfo
  --------------------------------------------------------------------}


Class Function TSPUserIdInfo.ObjectRestKind : String; 

begin
  Result:='UserIdInfo';
end;


Procedure TSPUserIdInfo.SetNameId(AIndex: Integer; const AValue: string); 


begin
  If (FNameId=AValue) then exit;
  FNameId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserIdInfo.SetNameIdIssuer(AIndex: Integer; const AValue: string); 


begin
  If (FNameIdIssuer=AValue) then exit;
  FNameIdIssuer:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPViewCreationInformation
  --------------------------------------------------------------------}


Class Function TSPViewCreationInformation.ObjectRestKind : String; 

begin
  Result:='ViewCreationInformation';
end;


Procedure TSPViewCreationInformation.SetPaged(AIndex: Integer; const AValue: boolean); 


begin
  If (FPaged=AValue) then exit;
  FPaged:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetPersonalView(AIndex: Integer; const AValue: boolean); 


begin
  If (FPersonalView=AValue) then exit;
  FPersonalView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetQuery(AIndex: Integer; const AValue: string); 


begin
  If (FQuery=AValue) then exit;
  FQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetRowLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRowLimit=AValue) then exit;
  FRowLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetSetAsDefaultView(AIndex: Integer; const AValue: boolean); 


begin
  If (FSetAsDefaultView=AValue) then exit;
  FSetAsDefaultView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetViewFields(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FViewFields=AValue) then exit;
  FViewFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewCreationInformation.SetViewTypeKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FViewTypeKind=AValue) then exit;
  FViewTypeKind:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPViewCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'viewfields' : SetLength(FViewFields,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPWebCreationInformation
  --------------------------------------------------------------------}


Class Function TSPWebCreationInformation.ObjectRestKind : String; 

begin
  Result:='WebCreationInformation';
end;


Procedure TSPWebCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebCreationInformation.SetLanguage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLanguage=AValue) then exit;
  FLanguage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebCreationInformation.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebCreationInformation.SetUseSamePermissionsAsParentSite(AIndex: Integer; const AValue: boolean); 


begin
  If (FUseSamePermissionsAsParentSite=AValue) then exit;
  FUseSamePermissionsAsParentSite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebCreationInformation.SetWebTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FWebTemplate=AValue) then exit;
  FWebTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPWebInfoCreationInformation
  --------------------------------------------------------------------}


Class Function TSPWebInfoCreationInformation.ObjectRestKind : String; 

begin
  Result:='WebInfoCreationInformation';
end;


Procedure TSPWebInfoCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInfoCreationInformation.SetLanguage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLanguage=AValue) then exit;
  FLanguage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInfoCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInfoCreationInformation.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInfoCreationInformation.SetUseUniquePermissions(AIndex: Integer; const AValue: boolean); 


begin
  If (FUseUniquePermissions=AValue) then exit;
  FUseUniquePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInfoCreationInformation.SetWebTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FWebTemplate=AValue) then exit;
  FWebTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPWebRequestInfo
  --------------------------------------------------------------------}


Class Function TSPWebRequestInfo.ObjectRestKind : String; 

begin
  Result:='WebRequestInfo';
end;


Procedure TSPWebRequestInfo.SetBody(AIndex: Integer; const AValue: string); 


begin
  If (FBody=AValue) then exit;
  FBody:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebRequestInfo.SetHeaders(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FHeaders=AValue) then exit;
  FHeaders:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebRequestInfo.SetMethod(AIndex: Integer; const AValue: string); 


begin
  If (FMethod=AValue) then exit;
  FMethod:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebRequestInfo.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPWebRequestInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'headers' : SetLength(FHeaders,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPWebResponseInfo
  --------------------------------------------------------------------}


Class Function TSPWebResponseInfo.ObjectRestKind : String; 

begin
  Result:='WebResponseInfo';
end;


Procedure TSPWebResponseInfo.SetBody(AIndex: Integer; const AValue: string); 


begin
  If (FBody=AValue) then exit;
  FBody:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebResponseInfo.SetHeaders(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FHeaders=AValue) then exit;
  FHeaders:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebResponseInfo.SetStatusCode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatusCode=AValue) then exit;
  FStatusCode:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPWebResponseInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'headers' : SetLength(FHeaders,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPXmlSchemaFieldCreationInformation
  --------------------------------------------------------------------}


Class Function TSPXmlSchemaFieldCreationInformation.ObjectRestKind : String; 

begin
  Result:='XmlSchemaFieldCreationInformation';
end;


Procedure TSPXmlSchemaFieldCreationInformation.SetOptions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOptions=AValue) then exit;
  FOptions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPXmlSchemaFieldCreationInformation.SetSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXml=AValue) then exit;
  FSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPApiMetadata
  --------------------------------------------------------------------}


Class Function TSPApiMetadata.ObjectRestKind : String; 

begin
  Result:='ApiMetadata';
end;


Procedure TSPApiMetadata.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPApiMetadata.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSPApiMetadata.Current(AService: TODataService) : TSPApiMetadata; 


begin
  Result:=TSPApiMetadata(GetContainedSingleTon(AService,'Current', TSPApiMetadata));
end;


Function TSPApiMetadata.Types(AService: TODataService) : TSPTypeInformation; 


begin
  Result:=TSPTypeInformation(GetContainedSingleTon(AService,'Types', TSPTypeInformation));
end;


{ --------------------------------------------------------------------
  TSPTypeInformation
  --------------------------------------------------------------------}


Class Function TSPTypeInformation.ObjectRestKind : String; 

begin
  Result:='TypeInformation';
end;


Procedure TSPTypeInformation.SetBaseTypeFullName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseTypeFullName=AValue) then exit;
  FBaseTypeFullName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTypeInformation.SetFullName(AIndex: Integer; const AValue: string); 


begin
  If (FFullName=AValue) then exit;
  FFullName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTypeInformation.SetIsValueObject(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsValueObject=AValue) then exit;
  FIsValueObject:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTypeInformation.SetMethods(AIndex: Integer; const AValue: TSPMethodInformationArray); 


begin
  If (FMethods=AValue) then exit;
  FMethods:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTypeInformation.SetProperties(AIndex: Integer; const AValue: TSPPropertyInformationArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPTypeInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'methods' : SetLength(FMethods,aLength);
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPTypeInformation.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(BaseTypeFullName);
end;


{ --------------------------------------------------------------------
  TSPSite
  --------------------------------------------------------------------}


Class Function TSPSite.ObjectRestKind : String; 

begin
  Result:='Site';
end;


Procedure TSPSite.SetAllowCreateDeclarativeWorkflow(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowCreateDeclarativeWorkflow=AValue) then exit;
  FAllowCreateDeclarativeWorkflow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowDesigner(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowDesigner=AValue) then exit;
  FAllowDesigner:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowMasterPageEditing(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowMasterPageEditing=AValue) then exit;
  FAllowMasterPageEditing:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowRevertFromTemplate(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowRevertFromTemplate=AValue) then exit;
  FAllowRevertFromTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowSaveDeclarativeWorkflowAsTemplate(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowSaveDeclarativeWorkflowAsTemplate=AValue) then exit;
  FAllowSaveDeclarativeWorkflowAsTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowSavePublishDeclarativeWorkflow(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowSavePublishDeclarativeWorkflow=AValue) then exit;
  FAllowSavePublishDeclarativeWorkflow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowSelfServiceUpgrade(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowSelfServiceUpgrade=AValue) then exit;
  FAllowSelfServiceUpgrade:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAllowSelfServiceUpgradeEvaluation(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowSelfServiceUpgradeEvaluation=AValue) then exit;
  FAllowSelfServiceUpgradeEvaluation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetAuditLogTrimmingRetention(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuditLogTrimmingRetention=AValue) then exit;
  FAuditLogTrimmingRetention:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetCanUpgrade(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanUpgrade=AValue) then exit;
  FCanUpgrade:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetCompatibilityLevel(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCompatibilityLevel=AValue) then exit;
  FCompatibilityLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetExternalSharingTipsEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FExternalSharingTipsEnabled=AValue) then exit;
  FExternalSharingTipsEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetLockIssue(AIndex: Integer; const AValue: string); 


begin
  If (FLockIssue=AValue) then exit;
  FLockIssue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetMaxItemsPerThrottledOperation(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMaxItemsPerThrottledOperation=AValue) then exit;
  FMaxItemsPerThrottledOperation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetNeedsB2BUpgrade(AIndex: Integer; const AValue: boolean); 


begin
  If (FNeedsB2BUpgrade=AValue) then exit;
  FNeedsB2BUpgrade:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetPrimaryUri(AIndex: Integer; const AValue: string); 


begin
  If (FPrimaryUri=AValue) then exit;
  FPrimaryUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnly=AValue) then exit;
  FReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetRequiredDesignerVersion(AIndex: Integer; const AValue: string); 


begin
  If (FRequiredDesignerVersion=AValue) then exit;
  FRequiredDesignerVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetSandboxedCodeActivationCapability(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSandboxedCodeActivationCapability=AValue) then exit;
  FSandboxedCodeActivationCapability:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetShareByEmailEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FShareByEmailEnabled=AValue) then exit;
  FShareByEmailEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetShareByLinkEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FShareByLinkEnabled=AValue) then exit;
  FShareByLinkEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetShowUrlStructure(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowUrlStructure=AValue) then exit;
  FShowUrlStructure:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetTrimAuditLog(AIndex: Integer; const AValue: boolean); 


begin
  If (FTrimAuditLog=AValue) then exit;
  FTrimAuditLog:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUIVersionConfigurationEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FUIVersionConfigurationEnabled=AValue) then exit;
  FUIVersionConfigurationEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUpgradeInfo(AIndex: Integer; const AValue: TSPUpgradeInfo); 


begin
  If (FUpgradeInfo=AValue) then exit;
  FUpgradeInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUpgradeReminderDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FUpgradeReminderDate=AValue) then exit;
  FUpgradeReminderDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUpgradeScheduled(AIndex: Integer; const AValue: boolean); 


begin
  If (FUpgradeScheduled=AValue) then exit;
  FUpgradeScheduled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUpgradeScheduledDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FUpgradeScheduledDate=AValue) then exit;
  FUpgradeScheduledDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUpgrading(AIndex: Integer; const AValue: boolean); 


begin
  If (FUpgrading=AValue) then exit;
  FUpgrading:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSite.SetUsage(AIndex: Integer; const AValue: TSPUsageInfo); 


begin
  If (FUsage=AValue) then exit;
  FUsage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPSite.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSPSite.Audit(AService: TODataService) : TSPAudit; 


begin
  Result:=TSPAudit(GetContainedSingleTon(AService,'Audit', TSPAudit));
end;


Function TSPSite.EventReceivers(AService: TODataService) : TSPEventReceiverDefinition; 


begin
  Result:=TSPEventReceiverDefinition(GetContainedSingleTon(AService,'EventReceivers', TSPEventReceiverDefinition));
end;


Function TSPSite.Features(AService: TODataService) : TSPFeature; 


begin
  Result:=TSPFeature(GetContainedSingleTon(AService,'Features', TSPFeature));
end;


Function TSPSite.Owner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Owner', TSPUser));
end;


Function TSPSite.RecycleBin(AService: TODataService) : TSPRecycleBinItem; 


begin
  Result:=TSPRecycleBinItem(GetContainedSingleTon(AService,'RecycleBin', TSPRecycleBinItem));
end;


Function TSPSite.RootWeb(AService: TODataService) : TSPWeb; 


begin
  Result:=TSPWeb(GetContainedSingleTon(AService,'RootWeb', TSPWeb));
end;


Function TSPSite.SecondaryContact(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'SecondaryContact', TSPUser));
end;


Function TSPSite.UserCustomActions(AService: TODataService) : TSPUserCustomAction; 


begin
  Result:=TSPUserCustomAction(GetContainedSingleTon(AService,'UserCustomActions', TSPUserCustomAction));
end;


{ --------------------------------------------------------------------
  TSPAudit
  --------------------------------------------------------------------}


Class Function TSPAudit.ObjectRestKind : String; 

begin
  Result:='Audit';
end;


Procedure TSPAudit.SetAuditFlags(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuditFlags=AValue) then exit;
  FAuditFlags:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAudit.KeyAsURLPart : string;

begin
  Result:=IntToStr(AuditFlags);
end;


{ --------------------------------------------------------------------
  TSPEventReceiverDefinition
  --------------------------------------------------------------------}


Class Function TSPEventReceiverDefinition.ObjectRestKind : String; 

begin
  Result:='EventReceiverDefinition';
end;


Procedure TSPEventReceiverDefinition.SetReceiverAssembly(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverAssembly=AValue) then exit;
  FReceiverAssembly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetReceiverClass(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverClass=AValue) then exit;
  FReceiverClass:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetReceiverId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FReceiverId=AValue) then exit;
  FReceiverId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetReceiverName(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverName=AValue) then exit;
  FReceiverName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetSequenceNumber(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSequenceNumber=AValue) then exit;
  FSequenceNumber:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetSynchronization(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSynchronization=AValue) then exit;
  FSynchronization:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetEventType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEventType=AValue) then exit;
  FEventType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPEventReceiverDefinition.SetReceiverUrl(AIndex: Integer; const AValue: string); 


begin
  If (FReceiverUrl=AValue) then exit;
  FReceiverUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPEventReceiverDefinition.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ReceiverId);
end;


{ --------------------------------------------------------------------
  TSPFeature
  --------------------------------------------------------------------}


Class Function TSPFeature.ObjectRestKind : String; 

begin
  Result:='Feature';
end;


Procedure TSPFeature.SetDefinitionId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FDefinitionId=AValue) then exit;
  FDefinitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFeature.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPFeature.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(DefinitionId);
end;


{ --------------------------------------------------------------------
  TSPPrincipal
  --------------------------------------------------------------------}


Class Function TSPPrincipal.ObjectRestKind : String; 

begin
  Result:='Principal';
end;


Procedure TSPPrincipal.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPrincipal.SetIsHiddenInUI(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsHiddenInUI=AValue) then exit;
  FIsHiddenInUI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPrincipal.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPrincipal.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPrincipal.SetPrincipalType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalType=AValue) then exit;
  FPrincipalType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPPrincipal.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSPUser
  --------------------------------------------------------------------}


Class Function TSPUser.ObjectRestKind : String; 

begin
  Result:='User';
end;


Procedure TSPUser.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUser.SetIsShareByEmailGuestUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsShareByEmailGuestUser=AValue) then exit;
  FIsShareByEmailGuestUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUser.SetIsSiteAdmin(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSiteAdmin=AValue) then exit;
  FIsSiteAdmin:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUser.SetUserId(AIndex: Integer; const AValue: TSPUserIdInfo); 


begin
  If (FUserId=AValue) then exit;
  FUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPUser.Groups(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'Groups', TSPGroup));
end;


{ --------------------------------------------------------------------
  TSPGroup
  --------------------------------------------------------------------}


Class Function TSPGroup.ObjectRestKind : String; 

begin
  Result:='Group';
end;


Procedure TSPGroup.SetAllowMembersEditMembership(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowMembersEditMembership=AValue) then exit;
  FAllowMembersEditMembership:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetAllowRequestToJoinLeave(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowRequestToJoinLeave=AValue) then exit;
  FAllowRequestToJoinLeave:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetAutoAcceptRequestToJoinLeave(AIndex: Integer; const AValue: boolean); 


begin
  If (FAutoAcceptRequestToJoinLeave=AValue) then exit;
  FAutoAcceptRequestToJoinLeave:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetCanCurrentUserEditMembership(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserEditMembership=AValue) then exit;
  FCanCurrentUserEditMembership:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetCanCurrentUserManageGroup(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserManageGroup=AValue) then exit;
  FCanCurrentUserManageGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetCanCurrentUserViewMembership(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserViewMembership=AValue) then exit;
  FCanCurrentUserViewMembership:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetOnlyAllowMembersViewMembership(AIndex: Integer; const AValue: boolean); 


begin
  If (FOnlyAllowMembersViewMembership=AValue) then exit;
  FOnlyAllowMembersViewMembership:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetOwnerTitle(AIndex: Integer; const AValue: string); 


begin
  If (FOwnerTitle=AValue) then exit;
  FOwnerTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPGroup.SetRequestToJoinLeaveEmailSetting(AIndex: Integer; const AValue: string); 


begin
  If (FRequestToJoinLeaveEmailSetting=AValue) then exit;
  FRequestToJoinLeaveEmailSetting:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPGroup.Owner(AService: TODataService) : TSPPrincipal; 


begin
  Result:=TSPPrincipal(GetContainedSingleTon(AService,'Owner', TSPPrincipal));
end;


Function TSPGroup.Users(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Users', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPRecycleBinItem
  --------------------------------------------------------------------}


Class Function TSPRecycleBinItem.ObjectRestKind : String; 

begin
  Result:='RecycleBinItem';
end;


Procedure TSPRecycleBinItem.SetDeletedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDeletedDate=AValue) then exit;
  FDeletedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetDirName(AIndex: Integer; const AValue: string); 


begin
  If (FDirName=AValue) then exit;
  FDirName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetItemState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemState=AValue) then exit;
  FItemState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetItemType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemType=AValue) then exit;
  FItemType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetLeafName(AIndex: Integer; const AValue: string); 


begin
  If (FLeafName=AValue) then exit;
  FLeafName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetSize(AIndex: Integer; const AValue: int64); 


begin
  If (FSize=AValue) then exit;
  FSize:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRecycleBinItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRecycleBinItem.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSPRecycleBinItem.Author(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Author', TSPUser));
end;


Function TSPRecycleBinItem.DeletedBy(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'DeletedBy', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPSecurableObject
  --------------------------------------------------------------------}


Class Function TSPSecurableObject.ObjectRestKind : String; 

begin
  Result:='SecurableObject';
end;


Procedure TSPSecurableObject.SetHasUniqueRoleAssignments(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasUniqueRoleAssignments=AValue) then exit;
  FHasUniqueRoleAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPSecurableObject.KeyAsURLPart : string;

begin
  Result:=BoolToStr(HasUniqueRoleAssignments,'true','false');
end;


Function TSPSecurableObject.FirstUniqueAncestorSecurableObject(AService: TODataService) : TSPSecurableObject; 


begin
  Result:=TSPSecurableObject(GetContainedSingleTon(AService,'FirstUniqueAncestorSecurableObject', TSPSecurableObject));
end;


Function TSPSecurableObject.RoleAssignments(AService: TODataService) : TSPRoleAssignment; 


begin
  Result:=TSPRoleAssignment(GetContainedSingleTon(AService,'RoleAssignments', TSPRoleAssignment));
end;


{ --------------------------------------------------------------------
  TSPRoleAssignment
  --------------------------------------------------------------------}


Class Function TSPRoleAssignment.ObjectRestKind : String; 

begin
  Result:='RoleAssignment';
end;


Procedure TSPRoleAssignment.SetPrincipalId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalId=AValue) then exit;
  FPrincipalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRoleAssignment.KeyAsURLPart : string;

begin
  Result:=IntToStr(PrincipalId);
end;


Function TSPRoleAssignment.Member(AService: TODataService) : TSPPrincipal; 


begin
  Result:=TSPPrincipal(GetContainedSingleTon(AService,'Member', TSPPrincipal));
end;


Function TSPRoleAssignment.RoleDefinitionBindings(AService: TODataService) : TSPRoleDefinition; 


begin
  Result:=TSPRoleDefinition(GetContainedSingleTon(AService,'RoleDefinitionBindings', TSPRoleDefinition));
end;


{ --------------------------------------------------------------------
  TSPRoleDefinition
  --------------------------------------------------------------------}


Class Function TSPRoleDefinition.ObjectRestKind : String; 

begin
  Result:='RoleDefinition';
end;


Procedure TSPRoleDefinition.SetBasePermissions(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FBasePermissions=AValue) then exit;
  FBasePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinition.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinition.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinition.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinition.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinition.SetOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRoleDefinition.SetRoleTypeKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRoleTypeKind=AValue) then exit;
  FRoleTypeKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRoleDefinition.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSPWeb
  --------------------------------------------------------------------}


Class Function TSPWeb.ObjectRestKind : String; 

begin
  Result:='Web';
end;


Procedure TSPWeb.SetAllowCreateDeclarativeWorkflowForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowCreateDeclarativeWorkflowForCurrentUser=AValue) then exit;
  FAllowCreateDeclarativeWorkflowForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAllowDesignerForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowDesignerForCurrentUser=AValue) then exit;
  FAllowDesignerForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAllowMasterPageEditingForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowMasterPageEditingForCurrentUser=AValue) then exit;
  FAllowMasterPageEditingForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAllowRevertFromTemplateForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowRevertFromTemplateForCurrentUser=AValue) then exit;
  FAllowRevertFromTemplateForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAllowRssFeeds(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowRssFeeds=AValue) then exit;
  FAllowRssFeeds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser=AValue) then exit;
  FAllowSaveDeclarativeWorkflowAsTemplateForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAllowSavePublishDeclarativeWorkflowForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowSavePublishDeclarativeWorkflowForCurrentUser=AValue) then exit;
  FAllowSavePublishDeclarativeWorkflowForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAlternateCssUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAlternateCssUrl=AValue) then exit;
  FAlternateCssUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetAppInstanceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAppInstanceId=AValue) then exit;
  FAppInstanceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetConfiguration(AIndex: Integer; const AValue: TInt16); 


begin
  If (FConfiguration=AValue) then exit;
  FConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetContainsConfidentialInfo(AIndex: Integer; const AValue: boolean); 


begin
  If (FContainsConfidentialInfo=AValue) then exit;
  FContainsConfidentialInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetCustomMasterUrl(AIndex: Integer; const AValue: string); 


begin
  If (FCustomMasterUrl=AValue) then exit;
  FCustomMasterUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetDesignerDownloadUrlForCurrentUser(AIndex: Integer; const AValue: string); 


begin
  If (FDesignerDownloadUrlForCurrentUser=AValue) then exit;
  FDesignerDownloadUrlForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetDocumentLibraryCalloutOfficeWebAppPreviewersDisabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FDocumentLibraryCalloutOfficeWebAppPreviewersDisabled=AValue) then exit;
  FDocumentLibraryCalloutOfficeWebAppPreviewersDisabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetEffectiveBasePermissions(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FEffectiveBasePermissions=AValue) then exit;
  FEffectiveBasePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetEnableMinimalDownload(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableMinimalDownload=AValue) then exit;
  FEnableMinimalDownload:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetIsMultilingual(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMultilingual=AValue) then exit;
  FIsMultilingual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetLanguage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLanguage=AValue) then exit;
  FLanguage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetLastItemModifiedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastItemModifiedDate=AValue) then exit;
  FLastItemModifiedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetMasterUrl(AIndex: Integer; const AValue: string); 


begin
  If (FMasterUrl=AValue) then exit;
  FMasterUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetMembersCanShare(AIndex: Integer; const AValue: boolean); 


begin
  If (FMembersCanShare=AValue) then exit;
  FMembersCanShare:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetOverwriteTranslationsOnChange(AIndex: Integer; const AValue: boolean); 


begin
  If (FOverwriteTranslationsOnChange=AValue) then exit;
  FOverwriteTranslationsOnChange:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetQuickLaunchEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FQuickLaunchEnabled=AValue) then exit;
  FQuickLaunchEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetRecycleBinEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FRecycleBinEnabled=AValue) then exit;
  FRecycleBinEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetSaveSiteAsTemplateEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FSaveSiteAsTemplateEnabled=AValue) then exit;
  FSaveSiteAsTemplateEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetShowUrlStructureForCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowUrlStructureForCurrentUser=AValue) then exit;
  FShowUrlStructureForCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetSiteLogoUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSiteLogoUrl=AValue) then exit;
  FSiteLogoUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetSupportedUILanguageIds(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FSupportedUILanguageIds=AValue) then exit;
  FSupportedUILanguageIds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetSyndicationEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FSyndicationEnabled=AValue) then exit;
  FSyndicationEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetThemeData(AIndex: Integer; const AValue: string); 


begin
  If (FThemeData=AValue) then exit;
  FThemeData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetThirdPartyMdmEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FThirdPartyMdmEnabled=AValue) then exit;
  FThirdPartyMdmEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetTreeViewEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FTreeViewEnabled=AValue) then exit;
  FTreeViewEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetUIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUIVersion=AValue) then exit;
  FUIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetUIVersionConfigurationEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FUIVersionConfigurationEnabled=AValue) then exit;
  FUIVersionConfigurationEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWeb.SetWebTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FWebTemplate=AValue) then exit;
  FWebTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPWeb.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'supporteduilanguageids' : SetLength(FSupportedUILanguageIds,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPWeb.AllProperties(AService: TODataService) : TSPPropertyValues; 


begin
  Result:=TSPPropertyValues(GetContainedSingleTon(AService,'AllProperties', TSPPropertyValues));
end;


Function TSPWeb.AppTiles(AService: TODataService) : TSPAppTile; 


begin
  Result:=TSPAppTile(GetContainedSingleTon(AService,'AppTiles', TSPAppTile));
end;


Function TSPWeb.AssociatedMemberGroup(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'AssociatedMemberGroup', TSPGroup));
end;


Function TSPWeb.AssociatedOwnerGroup(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'AssociatedOwnerGroup', TSPGroup));
end;


Function TSPWeb.AssociatedVisitorGroup(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'AssociatedVisitorGroup', TSPGroup));
end;


Function TSPWeb.AvailableContentTypes(AService: TODataService) : TSPContentType; 


begin
  Result:=TSPContentType(GetContainedSingleTon(AService,'AvailableContentTypes', TSPContentType));
end;


Function TSPWeb.AvailableFields(AService: TODataService) : TSPField; 


begin
  Result:=TSPField(GetContainedSingleTon(AService,'AvailableFields', TSPField));
end;


Function TSPWeb.ContentTypes(AService: TODataService) : TSPContentType; 


begin
  Result:=TSPContentType(GetContainedSingleTon(AService,'ContentTypes', TSPContentType));
end;


Function TSPWeb.CurrentUser(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'CurrentUser', TSPUser));
end;


Function TSPWeb.DataLeakagePreventionStatusInfo(AService: TODataService) : TSPSPDataLeakagePreventionStatusInfo; 


begin
  Result:=TSPSPDataLeakagePreventionStatusInfo(GetContainedSingleTon(AService,'DataLeakagePreventionStatusInfo', TSPSPDataLeakagePreventionStatusInfo));
end;


Function TSPWeb.DescriptionResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'DescriptionResource', TSPUserResource));
end;


Function TSPWeb.EventReceivers(AService: TODataService) : TSPEventReceiverDefinition; 


begin
  Result:=TSPEventReceiverDefinition(GetContainedSingleTon(AService,'EventReceivers', TSPEventReceiverDefinition));
end;


Function TSPWeb.Features(AService: TODataService) : TSPFeature; 


begin
  Result:=TSPFeature(GetContainedSingleTon(AService,'Features', TSPFeature));
end;


Function TSPWeb.Fields(AService: TODataService) : TSPField; 


begin
  Result:=TSPField(GetContainedSingleTon(AService,'Fields', TSPField));
end;


Function TSPWeb.Folders(AService: TODataService) : TSPFolder; 


begin
  Result:=TSPFolder(GetContainedSingleTon(AService,'Folders', TSPFolder));
end;


Function TSPWeb.Lists(AService: TODataService) : TSPList; 


begin
  Result:=TSPList(GetContainedSingleTon(AService,'Lists', TSPList));
end;


Function TSPWeb.ListTemplates(AService: TODataService) : TSPListTemplate; 


begin
  Result:=TSPListTemplate(GetContainedSingleTon(AService,'ListTemplates', TSPListTemplate));
end;


Function TSPWeb.Navigation(AService: TODataService) : TSPNavigation; 


begin
  Result:=TSPNavigation(GetContainedSingleTon(AService,'Navigation', TSPNavigation));
end;


Function TSPWeb.ParentWeb(AService: TODataService) : TSPWebInformation; 


begin
  Result:=TSPWebInformation(GetContainedSingleTon(AService,'ParentWeb', TSPWebInformation));
end;


Function TSPWeb.PushNotificationSubscribers(AService: TODataService) : TSPPushNotificationSubscriber; 


begin
  Result:=TSPPushNotificationSubscriber(GetContainedSingleTon(AService,'PushNotificationSubscribers', TSPPushNotificationSubscriber));
end;


Function TSPWeb.RecycleBin(AService: TODataService) : TSPRecycleBinItem; 


begin
  Result:=TSPRecycleBinItem(GetContainedSingleTon(AService,'RecycleBin', TSPRecycleBinItem));
end;


Function TSPWeb.RegionalSettings(AService: TODataService) : TSPRegionalSettings; 


begin
  Result:=TSPRegionalSettings(GetContainedSingleTon(AService,'RegionalSettings', TSPRegionalSettings));
end;


Function TSPWeb.RoleDefinitions(AService: TODataService) : TSPRoleDefinition; 


begin
  Result:=TSPRoleDefinition(GetContainedSingleTon(AService,'RoleDefinitions', TSPRoleDefinition));
end;


Function TSPWeb.RootFolder(AService: TODataService) : TSPFolder; 


begin
  Result:=TSPFolder(GetContainedSingleTon(AService,'RootFolder', TSPFolder));
end;


Function TSPWeb.SiteGroups(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'SiteGroups', TSPGroup));
end;


Function TSPWeb.SiteUserInfoList(AService: TODataService) : TSPList; 


begin
  Result:=TSPList(GetContainedSingleTon(AService,'SiteUserInfoList', TSPList));
end;


Function TSPWeb.SiteUsers(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'SiteUsers', TSPUser));
end;


Function TSPWeb.ThemeInfo(AService: TODataService) : TSPThemeInfo; 


begin
  Result:=TSPThemeInfo(GetContainedSingleTon(AService,'ThemeInfo', TSPThemeInfo));
end;


Function TSPWeb.TitleResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'TitleResource', TSPUserResource));
end;


Function TSPWeb.UserCustomActions(AService: TODataService) : TSPUserCustomAction; 


begin
  Result:=TSPUserCustomAction(GetContainedSingleTon(AService,'UserCustomActions', TSPUserCustomAction));
end;


Function TSPWeb.Webs(AService: TODataService) : TSPWeb; 


begin
  Result:=TSPWeb(GetContainedSingleTon(AService,'Webs', TSPWeb));
end;


Function TSPWeb.WebInfos(AService: TODataService) : TSPWebInformation; 


begin
  Result:=TSPWebInformation(GetContainedSingleTon(AService,'WebInfos', TSPWebInformation));
end;


Function TSPWeb.WorkflowAssociations(AService: TODataService) : TSP_WorkflowWorkflowAssociation; 


begin
  Result:=TSP_WorkflowWorkflowAssociation(GetContainedSingleTon(AService,'WorkflowAssociations', TSP_WorkflowWorkflowAssociation));
end;


Function TSPWeb.WorkflowTemplates(AService: TODataService) : TSP_WorkflowWorkflowTemplate; 


begin
  Result:=TSP_WorkflowWorkflowTemplate(GetContainedSingleTon(AService,'WorkflowTemplates', TSP_WorkflowWorkflowTemplate));
end;


{ --------------------------------------------------------------------
  TSPPropertyValues
  --------------------------------------------------------------------}


Class Function TSPPropertyValues.ObjectRestKind : String; 

begin
  Result:='PropertyValues';
end;


Procedure TSPPropertyValues.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPPropertyValues.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPAppTile
  --------------------------------------------------------------------}


Class Function TSPAppTile.ObjectRestKind : String; 

begin
  Result:='AppTile';
end;


Procedure TSPAppTile.SetAppType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppType=AValue) then exit;
  FAppType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppTile.SetChildCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FChildCount=AValue) then exit;
  FChildCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppTile.SetLastModified(AIndex: Integer; const AValue: string); 


begin
  If (FLastModified=AValue) then exit;
  FLastModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppTile.SetTarget(AIndex: Integer; const AValue: string); 


begin
  If (FTarget=AValue) then exit;
  FTarget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppTile.SetThumbnail(AIndex: Integer; const AValue: string); 


begin
  If (FThumbnail=AValue) then exit;
  FThumbnail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppTile.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppTile.KeyAsURLPart : string;

begin
  Result:=IntToStr(AppType);
end;


{ --------------------------------------------------------------------
  TSPContentType
  --------------------------------------------------------------------}


Class Function TSPContentType.ObjectRestKind : String; 

begin
  Result:='ContentType';
end;


Procedure TSPContentType.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetDisplayFormTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayFormTemplateName=AValue) then exit;
  FDisplayFormTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetDisplayFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayFormUrl=AValue) then exit;
  FDisplayFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetDocumentTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FDocumentTemplate=AValue) then exit;
  FDocumentTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetDocumentTemplateUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDocumentTemplateUrl=AValue) then exit;
  FDocumentTemplateUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetEditFormTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FEditFormTemplateName=AValue) then exit;
  FEditFormTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetEditFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEditFormUrl=AValue) then exit;
  FEditFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetId(AIndex: Integer; const AValue: TSPContentTypeId); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetJSLink(AIndex: Integer; const AValue: string); 


begin
  If (FJSLink=AValue) then exit;
  FJSLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetMobileDisplayFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FMobileDisplayFormUrl=AValue) then exit;
  FMobileDisplayFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetMobileEditFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FMobileEditFormUrl=AValue) then exit;
  FMobileEditFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetMobileNewFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FMobileNewFormUrl=AValue) then exit;
  FMobileNewFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetNewFormTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FNewFormTemplateName=AValue) then exit;
  FNewFormTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetNewFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FNewFormUrl=AValue) then exit;
  FNewFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnly=AValue) then exit;
  FReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXml=AValue) then exit;
  FSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetSchemaXmlWithResourceTokens(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXmlWithResourceTokens=AValue) then exit;
  FSchemaXmlWithResourceTokens:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetScope(AIndex: Integer; const AValue: string); 


begin
  If (FScope=AValue) then exit;
  FScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetSealed(AIndex: Integer; const AValue: boolean); 


begin
  If (FSealed=AValue) then exit;
  FSealed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPContentType.SetStringId(AIndex: Integer; const AValue: string); 


begin
  If (FStringId=AValue) then exit;
  FStringId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPContentType.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(StringId);
end;


Function TSPContentType.DescriptionResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'DescriptionResource', TSPUserResource));
end;


Function TSPContentType.FieldLinks(AService: TODataService) : TSPFieldLink; 


begin
  Result:=TSPFieldLink(GetContainedSingleTon(AService,'FieldLinks', TSPFieldLink));
end;


Function TSPContentType.Fields(AService: TODataService) : TSPField; 


begin
  Result:=TSPField(GetContainedSingleTon(AService,'Fields', TSPField));
end;


Function TSPContentType.NameResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'NameResource', TSPUserResource));
end;


Function TSPContentType.Parent(AService: TODataService) : TSPContentType; 


begin
  Result:=TSPContentType(GetContainedSingleTon(AService,'Parent', TSPContentType));
end;


Function TSPContentType.WorkflowAssociations(AService: TODataService) : TSP_WorkflowWorkflowAssociation; 


begin
  Result:=TSP_WorkflowWorkflowAssociation(GetContainedSingleTon(AService,'WorkflowAssociations', TSP_WorkflowWorkflowAssociation));
end;


{ --------------------------------------------------------------------
  TSPUserResource
  --------------------------------------------------------------------}


Class Function TSPUserResource.ObjectRestKind : String; 

begin
  Result:='UserResource';
end;


Procedure TSPUserResource.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPUserResource.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPFieldLink
  --------------------------------------------------------------------}


Class Function TSPFieldLink.ObjectRestKind : String; 

begin
  Result:='FieldLink';
end;


Procedure TSPFieldLink.SetFieldInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FFieldInternalName=AValue) then exit;
  FFieldInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLink.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLink.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLink.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLink.SetRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequired=AValue) then exit;
  FRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPFieldLink.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSPField
  --------------------------------------------------------------------}


Class Function TSPField.ObjectRestKind : String; 

begin
  Result:='Field';
end;


Procedure TSPField.SetAutoIndexed(AIndex: Integer; const AValue: boolean); 


begin
  If (FAutoIndexed=AValue) then exit;
  FAutoIndexed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetCanBeDeleted(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanBeDeleted=AValue) then exit;
  FCanBeDeleted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetDefaultValue(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultValue=AValue) then exit;
  FDefaultValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetDirection(AIndex: Integer; const AValue: string); 


begin
  If (FDirection=AValue) then exit;
  FDirection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetEnforceUniqueValues(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnforceUniqueValues=AValue) then exit;
  FEnforceUniqueValues:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetEntityPropertyName(AIndex: Integer; const AValue: string); 


begin
  If (FEntityPropertyName=AValue) then exit;
  FEntityPropertyName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetFilterable(AIndex: Integer; const AValue: boolean); 


begin
  If (FFilterable=AValue) then exit;
  FFilterable:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetFromBaseType(AIndex: Integer; const AValue: boolean); 


begin
  If (FFromBaseType=AValue) then exit;
  FFromBaseType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetIndexed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIndexed=AValue) then exit;
  FIndexed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FInternalName=AValue) then exit;
  FInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetJSLink(AIndex: Integer; const AValue: string); 


begin
  If (FJSLink=AValue) then exit;
  FJSLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetReadOnlyField(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnlyField=AValue) then exit;
  FReadOnlyField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequired=AValue) then exit;
  FRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXml=AValue) then exit;
  FSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetSchemaXmlWithResourceTokens(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXmlWithResourceTokens=AValue) then exit;
  FSchemaXmlWithResourceTokens:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetScope(AIndex: Integer; const AValue: string); 


begin
  If (FScope=AValue) then exit;
  FScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetSealed(AIndex: Integer; const AValue: boolean); 


begin
  If (FSealed=AValue) then exit;
  FSealed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetSortable(AIndex: Integer; const AValue: boolean); 


begin
  If (FSortable=AValue) then exit;
  FSortable:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetStaticName(AIndex: Integer; const AValue: string); 


begin
  If (FStaticName=AValue) then exit;
  FStaticName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetFieldTypeKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldTypeKind=AValue) then exit;
  FFieldTypeKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetTypeAsString(AIndex: Integer; const AValue: string); 


begin
  If (FTypeAsString=AValue) then exit;
  FTypeAsString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetTypeDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FTypeDisplayName=AValue) then exit;
  FTypeDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetTypeShortDescription(AIndex: Integer; const AValue: string); 


begin
  If (FTypeShortDescription=AValue) then exit;
  FTypeShortDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetValidationFormula(AIndex: Integer; const AValue: string); 


begin
  If (FValidationFormula=AValue) then exit;
  FValidationFormula:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPField.SetValidationMessage(AIndex: Integer; const AValue: string); 


begin
  If (FValidationMessage=AValue) then exit;
  FValidationMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSPField.DescriptionResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'DescriptionResource', TSPUserResource));
end;


Function TSPField.TitleResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'TitleResource', TSPUserResource));
end;


{ --------------------------------------------------------------------
  TSPSPDataLeakagePreventionStatusInfo
  --------------------------------------------------------------------}


Class Function TSPSPDataLeakagePreventionStatusInfo.ObjectRestKind : String; 

begin
  Result:='SPDataLeakagePreventionStatusInfo';
end;


Procedure TSPSPDataLeakagePreventionStatusInfo.SetContainsConfidentialInfo(AIndex: Integer; const AValue: boolean); 


begin
  If (FContainsConfidentialInfo=AValue) then exit;
  FContainsConfidentialInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSPDataLeakagePreventionStatusInfo.SetContainsConfidentialInfoLearnMoreUrl(AIndex: Integer; const AValue: string); 


begin
  If (FContainsConfidentialInfoLearnMoreUrl=AValue) then exit;
  FContainsConfidentialInfoLearnMoreUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSPDataLeakagePreventionStatusInfo.SetExternalSharingTipsEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FExternalSharingTipsEnabled=AValue) then exit;
  FExternalSharingTipsEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSPDataLeakagePreventionStatusInfo.SetExternalSharingTipsLearnMoreUrl(AIndex: Integer; const AValue: string); 


begin
  If (FExternalSharingTipsLearnMoreUrl=AValue) then exit;
  FExternalSharingTipsLearnMoreUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPSPDataLeakagePreventionStatusInfo.KeyAsURLPart : string;

begin
  Result:=BoolToStr(ContainsConfidentialInfo,'true','false');
end;


{ --------------------------------------------------------------------
  TSPFolder
  --------------------------------------------------------------------}


Class Function TSPFolder.ObjectRestKind : String; 

begin
  Result:='Folder';
end;


Procedure TSPFolder.SetContentTypeOrder(AIndex: Integer; const AValue: TSPContentTypeIdArray); 


begin
  If (FContentTypeOrder=AValue) then exit;
  FContentTypeOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetExists(AIndex: Integer; const AValue: boolean); 


begin
  If (FExists=AValue) then exit;
  FExists:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetItemCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemCount=AValue) then exit;
  FItemCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetProgID(AIndex: Integer; const AValue: string); 


begin
  If (FProgID=AValue) then exit;
  FProgID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetTimeCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeCreated=AValue) then exit;
  FTimeCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetTimeLastModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeLastModified=AValue) then exit;
  FTimeLastModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetUniqueContentTypeOrder(AIndex: Integer; const AValue: TSPContentTypeIdArray); 


begin
  If (FUniqueContentTypeOrder=AValue) then exit;
  FUniqueContentTypeOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFolder.SetWelcomePage(AIndex: Integer; const AValue: string); 


begin
  If (FWelcomePage=AValue) then exit;
  FWelcomePage:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPFolder.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'contenttypeorder' : SetLength(FContentTypeOrder,aLength);
  'uniquecontenttypeorder' : SetLength(FUniqueContentTypeOrder,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPFolder.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ServerRelativeUrl);
end;


Function TSPFolder.Files(AService: TODataService) : TSP_File; 


begin
  Result:=TSP_File(GetContainedSingleTon(AService,'Files', TSP_File));
end;


Function TSPFolder.ListItemAllFields(AService: TODataService) : TSPListItem; 


begin
  Result:=TSPListItem(GetContainedSingleTon(AService,'ListItemAllFields', TSPListItem));
end;


Function TSPFolder.ParentFolder(AService: TODataService) : TSPFolder; 


begin
  Result:=TSPFolder(GetContainedSingleTon(AService,'ParentFolder', TSPFolder));
end;


Function TSPFolder.Properties(AService: TODataService) : TSPPropertyValues; 


begin
  Result:=TSPPropertyValues(GetContainedSingleTon(AService,'Properties', TSPPropertyValues));
end;


Function TSPFolder.Folders(AService: TODataService) : TSPFolder; 


begin
  Result:=TSPFolder(GetContainedSingleTon(AService,'Folders', TSPFolder));
end;


{ --------------------------------------------------------------------
  TSP_File
  --------------------------------------------------------------------}


Class Function TSP_File.ObjectRestKind : String; 

begin
  Result:='File';
end;


Procedure TSP_File.SetCheckInComment(AIndex: Integer; const AValue: string); 


begin
  If (FCheckInComment=AValue) then exit;
  FCheckInComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetCheckOutType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckOutType=AValue) then exit;
  FCheckOutType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetContentTag(AIndex: Integer; const AValue: string); 


begin
  If (FContentTag=AValue) then exit;
  FContentTag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetCustomizedPageStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCustomizedPageStatus=AValue) then exit;
  FCustomizedPageStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetETag(AIndex: Integer; const AValue: string); 


begin
  If (FETag=AValue) then exit;
  FETag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetExists(AIndex: Integer; const AValue: boolean); 


begin
  If (FExists=AValue) then exit;
  FExists:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.Set_Length(AIndex: Integer; const AValue: int64); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetLevel(AIndex: Integer; const AValue: Byte); 


begin
  If (FLevel=AValue) then exit;
  FLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetLinkingUrl(AIndex: Integer; const AValue: string); 


begin
  If (FLinkingUrl=AValue) then exit;
  FLinkingUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetMajorVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMajorVersion=AValue) then exit;
  FMajorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetMinorVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMinorVersion=AValue) then exit;
  FMinorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetTimeCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeCreated=AValue) then exit;
  FTimeCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetTimeLastModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeLastModified=AValue) then exit;
  FTimeLastModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetUIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUIVersion=AValue) then exit;
  FUIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetUIVersionLabel(AIndex: Integer; const AValue: string); 


begin
  If (FUIVersionLabel=AValue) then exit;
  FUIVersionLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_File.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSP_File.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TSP_File.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


Function TSP_File.Author(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Author', TSPUser));
end;


Function TSP_File.CheckedOutByUser(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'CheckedOutByUser', TSPUser));
end;


Function TSP_File.ListItemAllFields(AService: TODataService) : TSPListItem; 


begin
  Result:=TSPListItem(GetContainedSingleTon(AService,'ListItemAllFields', TSPListItem));
end;


Function TSP_File.LockedByUser(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'LockedByUser', TSPUser));
end;


Function TSP_File.ModifiedBy(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'ModifiedBy', TSPUser));
end;


Function TSP_File.Versions(AService: TODataService) : TSPFileVersion; 


begin
  Result:=TSPFileVersion(GetContainedSingleTon(AService,'Versions', TSPFileVersion));
end;


{ --------------------------------------------------------------------
  TSPListItem
  --------------------------------------------------------------------}


Class Function TSPListItem.ObjectRestKind : String; 

begin
  Result:='ListItem';
end;


Procedure TSPListItem.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItem.SetEffectiveBasePermissions(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FEffectiveBasePermissions=AValue) then exit;
  FEffectiveBasePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItem.SetEffectiveBasePermissionsForUI(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FEffectiveBasePermissionsForUI=AValue) then exit;
  FEffectiveBasePermissionsForUI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItem.SetFileSystemObjectType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFileSystemObjectType=AValue) then exit;
  FFileSystemObjectType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItem.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListItem.SetClient_Title(AIndex: Integer; const AValue: string); 


begin
  If (FClient_Title=AValue) then exit;
  FClient_Title:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPListItem.AttachmentFiles(AService: TODataService) : TSPAttachment; 


begin
  Result:=TSPAttachment(GetContainedSingleTon(AService,'AttachmentFiles', TSPAttachment));
end;


Function TSPListItem.ContentType(AService: TODataService) : TSPContentType; 


begin
  Result:=TSPContentType(GetContainedSingleTon(AService,'ContentType', TSPContentType));
end;


Function TSPListItem.GetDlpPolicyTip(AService: TODataService) : TSPDlpPolicyTip; 


begin
  Result:=TSPDlpPolicyTip(GetContainedSingleTon(AService,'GetDlpPolicyTip', TSPDlpPolicyTip));
end;


Function TSPListItem.FieldValuesAsHtml(AService: TODataService) : TSPFieldStringValues; 


begin
  Result:=TSPFieldStringValues(GetContainedSingleTon(AService,'FieldValuesAsHtml', TSPFieldStringValues));
end;


Function TSPListItem.FieldValuesAsText(AService: TODataService) : TSPFieldStringValues; 


begin
  Result:=TSPFieldStringValues(GetContainedSingleTon(AService,'FieldValuesAsText', TSPFieldStringValues));
end;


Function TSPListItem.FieldValuesForEdit(AService: TODataService) : TSPFieldStringValues; 


begin
  Result:=TSPFieldStringValues(GetContainedSingleTon(AService,'FieldValuesForEdit', TSPFieldStringValues));
end;


Function TSPListItem._File(AService: TODataService) : TSP_File; 


begin
  Result:=TSP_File(GetContainedSingleTon(AService,'File', TSP_File));
end;


Function TSPListItem.Folder(AService: TODataService) : TSPFolder; 


begin
  Result:=TSPFolder(GetContainedSingleTon(AService,'Folder', TSPFolder));
end;


Function TSPListItem.ParentList(AService: TODataService) : TSPList; 


begin
  Result:=TSPList(GetContainedSingleTon(AService,'ParentList', TSPList));
end;


{ --------------------------------------------------------------------
  TSPAttachment
  --------------------------------------------------------------------}


Class Function TSPAttachment.ObjectRestKind : String; 

begin
  Result:='Attachment';
end;


Procedure TSPAttachment.SetFileName(AIndex: Integer; const AValue: string); 


begin
  If (FFileName=AValue) then exit;
  FFileName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAttachment.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAttachment.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FileName);
end;


{ --------------------------------------------------------------------
  TSPDlpPolicyTip
  --------------------------------------------------------------------}


Class Function TSPDlpPolicyTip.ObjectRestKind : String; 

begin
  Result:='DlpPolicyTip';
end;


Procedure TSPDlpPolicyTip.SetAppliedActionsText(AIndex: Integer; const AValue: string); 


begin
  If (FAppliedActionsText=AValue) then exit;
  FAppliedActionsText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDlpPolicyTip.SetComplianceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FComplianceUrl=AValue) then exit;
  FComplianceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDlpPolicyTip.SetGeneralText(AIndex: Integer; const AValue: string); 


begin
  If (FGeneralText=AValue) then exit;
  FGeneralText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDlpPolicyTip.SetLastProcessedTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastProcessedTime=AValue) then exit;
  FLastProcessedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDlpPolicyTip.SetMatchedConditionDescriptions(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FMatchedConditionDescriptions=AValue) then exit;
  FMatchedConditionDescriptions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPDlpPolicyTip.SetOverrideOptions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOverrideOptions=AValue) then exit;
  FOverrideOptions:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPDlpPolicyTip.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'matchedconditiondescriptions' : SetLength(FMatchedConditionDescriptions,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPDlpPolicyTip.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AppliedActionsText);
end;


{ --------------------------------------------------------------------
  TSPFieldStringValues
  --------------------------------------------------------------------}


Class Function TSPFieldStringValues.ObjectRestKind : String; 

begin
  Result:='FieldStringValues';
end;


Procedure TSPFieldStringValues.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPFieldStringValues.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPList
  --------------------------------------------------------------------}


Class Function TSPList.ObjectRestKind : String; 

begin
  Result:='List';
end;


Procedure TSPList.SetAllowContentTypes(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowContentTypes=AValue) then exit;
  FAllowContentTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetBaseTemplate(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaseTemplate=AValue) then exit;
  FBaseTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetBaseType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaseType=AValue) then exit;
  FBaseType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetBrowserFileHandling(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBrowserFileHandling=AValue) then exit;
  FBrowserFileHandling:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetContentTypesEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FContentTypesEnabled=AValue) then exit;
  FContentTypesEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetCrawlNonDefaultViews(AIndex: Integer; const AValue: boolean); 


begin
  If (FCrawlNonDefaultViews=AValue) then exit;
  FCrawlNonDefaultViews:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDataSource(AIndex: Integer; const AValue: TSPListDataSource); 


begin
  If (FDataSource=AValue) then exit;
  FDataSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDefaultContentApprovalWorkflowId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FDefaultContentApprovalWorkflowId=AValue) then exit;
  FDefaultContentApprovalWorkflowId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDefaultDisplayFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultDisplayFormUrl=AValue) then exit;
  FDefaultDisplayFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDefaultEditFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultEditFormUrl=AValue) then exit;
  FDefaultEditFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDefaultNewFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultNewFormUrl=AValue) then exit;
  FDefaultNewFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDefaultViewUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultViewUrl=AValue) then exit;
  FDefaultViewUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDirection(AIndex: Integer; const AValue: string); 


begin
  If (FDirection=AValue) then exit;
  FDirection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDocumentTemplateUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDocumentTemplateUrl=AValue) then exit;
  FDocumentTemplateUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetDraftVersionVisibility(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDraftVersionVisibility=AValue) then exit;
  FDraftVersionVisibility:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEffectiveBasePermissions(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FEffectiveBasePermissions=AValue) then exit;
  FEffectiveBasePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEffectiveBasePermissionsForUI(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FEffectiveBasePermissionsForUI=AValue) then exit;
  FEffectiveBasePermissionsForUI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEnableAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableAttachments=AValue) then exit;
  FEnableAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEnableFolderCreation(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableFolderCreation=AValue) then exit;
  FEnableFolderCreation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEnableMinorVersions(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableMinorVersions=AValue) then exit;
  FEnableMinorVersions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEnableModeration(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableModeration=AValue) then exit;
  FEnableModeration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEnableVersioning(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableVersioning=AValue) then exit;
  FEnableVersioning:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetEntityTypeName(AIndex: Integer; const AValue: string); 


begin
  If (FEntityTypeName=AValue) then exit;
  FEntityTypeName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetFileSavePostProcessingEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FFileSavePostProcessingEnabled=AValue) then exit;
  FFileSavePostProcessingEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetForceCheckout(AIndex: Integer; const AValue: boolean); 


begin
  If (FForceCheckout=AValue) then exit;
  FForceCheckout:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetHasExternalDataSource(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasExternalDataSource=AValue) then exit;
  FHasExternalDataSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIrmEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FIrmEnabled=AValue) then exit;
  FIrmEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIrmExpire(AIndex: Integer; const AValue: boolean); 


begin
  If (FIrmExpire=AValue) then exit;
  FIrmExpire:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIrmReject(AIndex: Integer; const AValue: boolean); 


begin
  If (FIrmReject=AValue) then exit;
  FIrmReject:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIsApplicationList(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsApplicationList=AValue) then exit;
  FIsApplicationList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIsCatalog(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCatalog=AValue) then exit;
  FIsCatalog:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIsPrivate(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPrivate=AValue) then exit;
  FIsPrivate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetIsSiteAssetsLibrary(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSiteAssetsLibrary=AValue) then exit;
  FIsSiteAssetsLibrary:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetItemCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemCount=AValue) then exit;
  FItemCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetLastItemDeletedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastItemDeletedDate=AValue) then exit;
  FLastItemDeletedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetLastItemModifiedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastItemModifiedDate=AValue) then exit;
  FLastItemModifiedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetListItemEntityTypeFullName(AIndex: Integer; const AValue: string); 


begin
  If (FListItemEntityTypeFullName=AValue) then exit;
  FListItemEntityTypeFullName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetMajorVersionLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMajorVersionLimit=AValue) then exit;
  FMajorVersionLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetMajorWithMinorVersionsLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMajorWithMinorVersionsLimit=AValue) then exit;
  FMajorWithMinorVersionsLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetMultipleDataList(AIndex: Integer; const AValue: boolean); 


begin
  If (FMultipleDataList=AValue) then exit;
  FMultipleDataList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetNoCrawl(AIndex: Integer; const AValue: boolean); 


begin
  If (FNoCrawl=AValue) then exit;
  FNoCrawl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetOnQuickLaunch(AIndex: Integer; const AValue: boolean); 


begin
  If (FOnQuickLaunch=AValue) then exit;
  FOnQuickLaunch:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetParentWebUrl(AIndex: Integer; const AValue: string); 


begin
  If (FParentWebUrl=AValue) then exit;
  FParentWebUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetParserDisabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FParserDisabled=AValue) then exit;
  FParserDisabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXml=AValue) then exit;
  FSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetServerTemplateCanCreateFolders(AIndex: Integer; const AValue: boolean); 


begin
  If (FServerTemplateCanCreateFolders=AValue) then exit;
  FServerTemplateCanCreateFolders:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetTemplateFeatureId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTemplateFeatureId=AValue) then exit;
  FTemplateFeatureId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetValidationFormula(AIndex: Integer; const AValue: string); 


begin
  If (FValidationFormula=AValue) then exit;
  FValidationFormula:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPList.SetValidationMessage(AIndex: Integer; const AValue: string); 


begin
  If (FValidationMessage=AValue) then exit;
  FValidationMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPList.ContentTypes(AService: TODataService) : TSPContentType; 


begin
  Result:=TSPContentType(GetContainedSingleTon(AService,'ContentTypes', TSPContentType));
end;


Function TSPList.CreatablesInfo(AService: TODataService) : TSPCreatablesInfo; 


begin
  Result:=TSPCreatablesInfo(GetContainedSingleTon(AService,'CreatablesInfo', TSPCreatablesInfo));
end;


Function TSPList.DefaultView(AService: TODataService) : TSPView; 


begin
  Result:=TSPView(GetContainedSingleTon(AService,'DefaultView', TSPView));
end;


Function TSPList.DescriptionResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'DescriptionResource', TSPUserResource));
end;


Function TSPList.EventReceivers(AService: TODataService) : TSPEventReceiverDefinition; 


begin
  Result:=TSPEventReceiverDefinition(GetContainedSingleTon(AService,'EventReceivers', TSPEventReceiverDefinition));
end;


Function TSPList.Fields(AService: TODataService) : TSPField; 


begin
  Result:=TSPField(GetContainedSingleTon(AService,'Fields', TSPField));
end;


Function TSPList.Forms(AService: TODataService) : TSPForm; 


begin
  Result:=TSPForm(GetContainedSingleTon(AService,'Forms', TSPForm));
end;


Function TSPList.InformationRightsManagementSettings(AService: TODataService) : TSPInformationRightsManagementSettings; 


begin
  Result:=TSPInformationRightsManagementSettings(GetContainedSingleTon(AService,'InformationRightsManagementSettings', TSPInformationRightsManagementSettings));
end;


Function TSPList.Items(AService: TODataService) : TSPListItem; 


begin
  Result:=TSPListItem(GetContainedSingleTon(AService,'Items', TSPListItem));
end;


Function TSPList.ParentWeb(AService: TODataService) : TSPWeb; 


begin
  Result:=TSPWeb(GetContainedSingleTon(AService,'ParentWeb', TSPWeb));
end;


Function TSPList.RootFolder(AService: TODataService) : TSPFolder; 


begin
  Result:=TSPFolder(GetContainedSingleTon(AService,'RootFolder', TSPFolder));
end;


Function TSPList.TitleResource(AService: TODataService) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetContainedSingleTon(AService,'TitleResource', TSPUserResource));
end;


Function TSPList.UserCustomActions(AService: TODataService) : TSPUserCustomAction; 


begin
  Result:=TSPUserCustomAction(GetContainedSingleTon(AService,'UserCustomActions', TSPUserCustomAction));
end;


Function TSPList.Views(AService: TODataService) : TSPView; 


begin
  Result:=TSPView(GetContainedSingleTon(AService,'Views', TSPView));
end;


Function TSPList.WorkflowAssociations(AService: TODataService) : TSP_WorkflowWorkflowAssociation; 


begin
  Result:=TSP_WorkflowWorkflowAssociation(GetContainedSingleTon(AService,'WorkflowAssociations', TSP_WorkflowWorkflowAssociation));
end;


{ --------------------------------------------------------------------
  TSPCreatablesInfo
  --------------------------------------------------------------------}


Class Function TSPCreatablesInfo.ObjectRestKind : String; 

begin
  Result:='CreatablesInfo';
end;


Procedure TSPCreatablesInfo.SetCanCreateFolders(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCreateFolders=AValue) then exit;
  FCanCreateFolders:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCreatablesInfo.SetCanCreateItems(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCreateItems=AValue) then exit;
  FCanCreateItems:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCreatablesInfo.SetCanUploadFiles(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanUploadFiles=AValue) then exit;
  FCanUploadFiles:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPCreatablesInfo.SetCreatablesCollection(AIndex: Integer; const AValue: TSPCreatableItemInfoCollection); 


begin
  If (FCreatablesCollection=AValue) then exit;
  FCreatablesCollection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPCreatablesInfo.KeyAsURLPart : string;

begin
  Result:=BoolToStr(CanCreateFolders,'true','false');
end;


{ --------------------------------------------------------------------
  TSPView
  --------------------------------------------------------------------}


Class Function TSPView.ObjectRestKind : String; 

begin
  Result:='View';
end;


Procedure TSPView.SetAggregations(AIndex: Integer; const AValue: string); 


begin
  If (FAggregations=AValue) then exit;
  FAggregations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetAggregationsStatus(AIndex: Integer; const AValue: string); 


begin
  If (FAggregationsStatus=AValue) then exit;
  FAggregationsStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetBaseViewId(AIndex: Integer; const AValue: string); 


begin
  If (FBaseViewId=AValue) then exit;
  FBaseViewId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetContentTypeId(AIndex: Integer; const AValue: TSPContentTypeId); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetDefaultView(AIndex: Integer; const AValue: boolean); 


begin
  If (FDefaultView=AValue) then exit;
  FDefaultView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetDefaultViewForContentType(AIndex: Integer; const AValue: boolean); 


begin
  If (FDefaultViewForContentType=AValue) then exit;
  FDefaultViewForContentType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetEditorModified(AIndex: Integer; const AValue: boolean); 


begin
  If (FEditorModified=AValue) then exit;
  FEditorModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetFormats(AIndex: Integer; const AValue: string); 


begin
  If (FFormats=AValue) then exit;
  FFormats:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetHtmlSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FHtmlSchemaXml=AValue) then exit;
  FHtmlSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetIncludeRootFolder(AIndex: Integer; const AValue: boolean); 


begin
  If (FIncludeRootFolder=AValue) then exit;
  FIncludeRootFolder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetViewJoins(AIndex: Integer; const AValue: string); 


begin
  If (FViewJoins=AValue) then exit;
  FViewJoins:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetJSLink(AIndex: Integer; const AValue: string); 


begin
  If (FJSLink=AValue) then exit;
  FJSLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetListViewXml(AIndex: Integer; const AValue: string); 


begin
  If (FListViewXml=AValue) then exit;
  FListViewXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetMethod(AIndex: Integer; const AValue: string); 


begin
  If (FMethod=AValue) then exit;
  FMethod:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetMobileDefaultView(AIndex: Integer; const AValue: boolean); 


begin
  If (FMobileDefaultView=AValue) then exit;
  FMobileDefaultView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetMobileView(AIndex: Integer; const AValue: boolean); 


begin
  If (FMobileView=AValue) then exit;
  FMobileView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetModerationType(AIndex: Integer; const AValue: string); 


begin
  If (FModerationType=AValue) then exit;
  FModerationType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetOrderedView(AIndex: Integer; const AValue: boolean); 


begin
  If (FOrderedView=AValue) then exit;
  FOrderedView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetPaged(AIndex: Integer; const AValue: boolean); 


begin
  If (FPaged=AValue) then exit;
  FPaged:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetPersonalView(AIndex: Integer; const AValue: boolean); 


begin
  If (FPersonalView=AValue) then exit;
  FPersonalView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetViewProjectedFields(AIndex: Integer; const AValue: string); 


begin
  If (FViewProjectedFields=AValue) then exit;
  FViewProjectedFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetViewQuery(AIndex: Integer; const AValue: string); 


begin
  If (FViewQuery=AValue) then exit;
  FViewQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetReadOnlyView(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnlyView=AValue) then exit;
  FReadOnlyView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetRequiresClientIntegration(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequiresClientIntegration=AValue) then exit;
  FRequiresClientIntegration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetRowLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRowLimit=AValue) then exit;
  FRowLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetScope(AIndex: Integer; const AValue: TInt32); 


begin
  If (FScope=AValue) then exit;
  FScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetStyleId(AIndex: Integer; const AValue: string); 


begin
  If (FStyleId=AValue) then exit;
  FStyleId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetThreaded(AIndex: Integer; const AValue: boolean); 


begin
  If (FThreaded=AValue) then exit;
  FThreaded:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetToolbar(AIndex: Integer; const AValue: string); 


begin
  If (FToolbar=AValue) then exit;
  FToolbar:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetToolbarTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FToolbarTemplateName=AValue) then exit;
  FToolbarTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetViewType(AIndex: Integer; const AValue: string); 


begin
  If (FViewType=AValue) then exit;
  FViewType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPView.SetViewData(AIndex: Integer; const AValue: string); 


begin
  If (FViewData=AValue) then exit;
  FViewData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPView.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSPView.ViewFields(AService: TODataService) : TSPViewFieldCollection; 


begin
  Result:=TSPViewFieldCollection(GetContainedSingleTon(AService,'ViewFields', TSPViewFieldCollection));
end;


{ --------------------------------------------------------------------
  TSPViewFieldCollection
  --------------------------------------------------------------------}


Class Function TSPViewFieldCollection.ObjectRestKind : String; 

begin
  Result:='ViewFieldCollection';
end;


Procedure TSPViewFieldCollection.SetSchemaXml(AIndex: Integer; const AValue: string); 


begin
  If (FSchemaXml=AValue) then exit;
  FSchemaXml:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPViewFieldCollection.SetItems(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPViewFieldCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPViewFieldCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(SchemaXml);
end;


{ --------------------------------------------------------------------
  TSPForm
  --------------------------------------------------------------------}


Class Function TSPForm.ObjectRestKind : String; 

begin
  Result:='Form';
end;


Procedure TSPForm.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPForm.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPForm.SetFormType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFormType=AValue) then exit;
  FFormType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPForm.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSPInformationRightsManagementSettings
  --------------------------------------------------------------------}


Class Function TSPInformationRightsManagementSettings.ObjectRestKind : String; 

begin
  Result:='InformationRightsManagementSettings';
end;


Procedure TSPInformationRightsManagementSettings.SetAllowPrint(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowPrint=AValue) then exit;
  FAllowPrint:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetAllowScript(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowScript=AValue) then exit;
  FAllowScript:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetAllowWriteCopy(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowWriteCopy=AValue) then exit;
  FAllowWriteCopy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetDisableDocumentBrowserView(AIndex: Integer; const AValue: boolean); 


begin
  If (FDisableDocumentBrowserView=AValue) then exit;
  FDisableDocumentBrowserView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetDocumentAccessExpireDays(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDocumentAccessExpireDays=AValue) then exit;
  FDocumentAccessExpireDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetDocumentLibraryProtectionExpireDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDocumentLibraryProtectionExpireDate=AValue) then exit;
  FDocumentLibraryProtectionExpireDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetEnableDocumentAccessExpire(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableDocumentAccessExpire=AValue) then exit;
  FEnableDocumentAccessExpire:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetEnableDocumentBrowserPublishingView(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableDocumentBrowserPublishingView=AValue) then exit;
  FEnableDocumentBrowserPublishingView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetEnableGroupProtection(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableGroupProtection=AValue) then exit;
  FEnableGroupProtection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetEnableLicenseCacheExpire(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableLicenseCacheExpire=AValue) then exit;
  FEnableLicenseCacheExpire:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetGroupName(AIndex: Integer; const AValue: string); 


begin
  If (FGroupName=AValue) then exit;
  FGroupName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetLicenseCacheExpireDays(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLicenseCacheExpireDays=AValue) then exit;
  FLicenseCacheExpireDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetPolicyDescription(AIndex: Integer; const AValue: string); 


begin
  If (FPolicyDescription=AValue) then exit;
  FPolicyDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPInformationRightsManagementSettings.SetPolicyTitle(AIndex: Integer; const AValue: string); 


begin
  If (FPolicyTitle=AValue) then exit;
  FPolicyTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPInformationRightsManagementSettings.KeyAsURLPart : string;

begin
  Result:=BoolToStr(AllowPrint,'true','false');
end;


{ --------------------------------------------------------------------
  TSPUserCustomAction
  --------------------------------------------------------------------}


Class Function TSPUserCustomAction.ObjectRestKind : String; 

begin
  Result:='UserCustomAction';
end;


Procedure TSPUserCustomAction.SetCommandUIExtension(AIndex: Integer; const AValue: string); 


begin
  If (FCommandUIExtension=AValue) then exit;
  FCommandUIExtension:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetLocation(AIndex: Integer; const AValue: string); 


begin
  If (FLocation=AValue) then exit;
  FLocation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetRegistrationId(AIndex: Integer; const AValue: string); 


begin
  If (FRegistrationId=AValue) then exit;
  FRegistrationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetRegistrationType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegistrationType=AValue) then exit;
  FRegistrationType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetRights(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FRights=AValue) then exit;
  FRights:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetScope(AIndex: Integer; const AValue: TInt32); 


begin
  If (FScope=AValue) then exit;
  FScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetScriptBlock(AIndex: Integer; const AValue: string); 


begin
  If (FScriptBlock=AValue) then exit;
  FScriptBlock:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetScriptSrc(AIndex: Integer; const AValue: string); 


begin
  If (FScriptSrc=AValue) then exit;
  FScriptSrc:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetSequence(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSequence=AValue) then exit;
  FSequence:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPUserCustomAction.SetVersionOfUserCustomAction(AIndex: Integer; const AValue: string); 


begin
  If (FVersionOfUserCustomAction=AValue) then exit;
  FVersionOfUserCustomAction:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPUserCustomAction.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSPFileVersion
  --------------------------------------------------------------------}


Class Function TSPFileVersion.ObjectRestKind : String; 

begin
  Result:='FileVersion';
end;


Procedure TSPFileVersion.SetCheckInComment(AIndex: Integer; const AValue: string); 


begin
  If (FCheckInComment=AValue) then exit;
  FCheckInComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.SetID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.SetIsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCurrentVersion=AValue) then exit;
  FIsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.Set_Length(AIndex: Integer; const AValue: int64); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.SetSize(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSize=AValue) then exit;
  FSize:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFileVersion.SetVersionLabel(AIndex: Integer; const AValue: string); 


begin
  If (FVersionLabel=AValue) then exit;
  FVersionLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSPFileVersion.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TSPFileVersion.KeyAsURLPart : string;

begin
  Result:=IntToStr(ID);
end;


Function TSPFileVersion.CreatedBy(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'CreatedBy', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPListTemplate
  --------------------------------------------------------------------}


Class Function TSPListTemplate.ObjectRestKind : String; 

begin
  Result:='ListTemplate';
end;


Procedure TSPListTemplate.SetAllowsFolderCreation(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowsFolderCreation=AValue) then exit;
  FAllowsFolderCreation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetBaseType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaseType=AValue) then exit;
  FBaseType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetFeatureId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FFeatureId=AValue) then exit;
  FFeatureId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FInternalName=AValue) then exit;
  FInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetIsCustomTemplate(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCustomTemplate=AValue) then exit;
  FIsCustomTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetOnQuickLaunch(AIndex: Integer; const AValue: boolean); 


begin
  If (FOnQuickLaunch=AValue) then exit;
  FOnQuickLaunch:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetListTemplateTypeKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FListTemplateTypeKind=AValue) then exit;
  FListTemplateTypeKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPListTemplate.SetUnique(AIndex: Integer; const AValue: boolean); 


begin
  If (FUnique=AValue) then exit;
  FUnique:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPListTemplate.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSPNavigation
  --------------------------------------------------------------------}


Class Function TSPNavigation.ObjectRestKind : String; 

begin
  Result:='Navigation';
end;


Procedure TSPNavigation.SetUseShared(AIndex: Integer; const AValue: boolean); 


begin
  If (FUseShared=AValue) then exit;
  FUseShared:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPNavigation.KeyAsURLPart : string;

begin
  Result:=BoolToStr(UseShared,'true','false');
end;


Function TSPNavigation.QuickLaunch(AService: TODataService) : TSPNavigationNode; 


begin
  Result:=TSPNavigationNode(GetContainedSingleTon(AService,'QuickLaunch', TSPNavigationNode));
end;


Function TSPNavigation.TopNavigationBar(AService: TODataService) : TSPNavigationNode; 


begin
  Result:=TSPNavigationNode(GetContainedSingleTon(AService,'TopNavigationBar', TSPNavigationNode));
end;


{ --------------------------------------------------------------------
  TSPNavigationNode
  --------------------------------------------------------------------}


Class Function TSPNavigationNode.ObjectRestKind : String; 

begin
  Result:='NavigationNode';
end;


Procedure TSPNavigationNode.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNode.SetIsDocLib(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDocLib=AValue) then exit;
  FIsDocLib:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNode.SetIsExternal(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsExternal=AValue) then exit;
  FIsExternal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNode.SetIsVisible(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsVisible=AValue) then exit;
  FIsVisible:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNode.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPNavigationNode.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPNavigationNode.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TSPNavigationNode.Children(AService: TODataService) : TSPNavigationNode; 


begin
  Result:=TSPNavigationNode(GetContainedSingleTon(AService,'Children', TSPNavigationNode));
end;


{ --------------------------------------------------------------------
  TSPWebInformation
  --------------------------------------------------------------------}


Class Function TSPWebInformation.ObjectRestKind : String; 

begin
  Result:='WebInformation';
end;


Procedure TSPWebInformation.SetConfiguration(AIndex: Integer; const AValue: TInt16); 


begin
  If (FConfiguration=AValue) then exit;
  FConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetLanguage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLanguage=AValue) then exit;
  FLanguage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetLastItemModifiedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastItemModifiedDate=AValue) then exit;
  FLastItemModifiedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetWebTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FWebTemplate=AValue) then exit;
  FWebTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebInformation.SetWebTemplateId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWebTemplateId=AValue) then exit;
  FWebTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPWebInformation.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSPPushNotificationSubscriber
  --------------------------------------------------------------------}


Class Function TSPPushNotificationSubscriber.ObjectRestKind : String; 

begin
  Result:='PushNotificationSubscriber';
end;


Procedure TSPPushNotificationSubscriber.SetCustomArgs(AIndex: Integer; const AValue: string); 


begin
  If (FCustomArgs=AValue) then exit;
  FCustomArgs:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPushNotificationSubscriber.SetDeviceAppInstanceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FDeviceAppInstanceId=AValue) then exit;
  FDeviceAppInstanceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPushNotificationSubscriber.SetLastModifiedTimeStamp(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastModifiedTimeStamp=AValue) then exit;
  FLastModifiedTimeStamp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPushNotificationSubscriber.SetRegistrationTimeStamp(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRegistrationTimeStamp=AValue) then exit;
  FRegistrationTimeStamp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPushNotificationSubscriber.SetServiceToken(AIndex: Integer; const AValue: string); 


begin
  If (FServiceToken=AValue) then exit;
  FServiceToken:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPushNotificationSubscriber.SetSubscriberType(AIndex: Integer; const AValue: string); 


begin
  If (FSubscriberType=AValue) then exit;
  FSubscriberType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPPushNotificationSubscriber.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(CustomArgs);
end;


Function TSPPushNotificationSubscriber.User(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'User', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPRegionalSettings
  --------------------------------------------------------------------}


Class Function TSPRegionalSettings.ObjectRestKind : String; 

begin
  Result:='RegionalSettings';
end;


Procedure TSPRegionalSettings.SetAdjustHijriDays(AIndex: Integer; const AValue: TInt16); 


begin
  If (FAdjustHijriDays=AValue) then exit;
  FAdjustHijriDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetAlternateCalendarType(AIndex: Integer; const AValue: TInt16); 


begin
  If (FAlternateCalendarType=AValue) then exit;
  FAlternateCalendarType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetAM(AIndex: Integer; const AValue: string); 


begin
  If (FAM=AValue) then exit;
  FAM:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetCalendarType(AIndex: Integer; const AValue: TInt16); 


begin
  If (FCalendarType=AValue) then exit;
  FCalendarType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetCollation(AIndex: Integer; const AValue: TInt16); 


begin
  If (FCollation=AValue) then exit;
  FCollation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetCollationLCID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCollationLCID=AValue) then exit;
  FCollationLCID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetDateFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDateFormat=AValue) then exit;
  FDateFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetDateSeparator(AIndex: Integer; const AValue: string); 


begin
  If (FDateSeparator=AValue) then exit;
  FDateSeparator:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetDecimalSeparator(AIndex: Integer; const AValue: string); 


begin
  If (FDecimalSeparator=AValue) then exit;
  FDecimalSeparator:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetDigitGrouping(AIndex: Integer; const AValue: string); 


begin
  If (FDigitGrouping=AValue) then exit;
  FDigitGrouping:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetFirstDayOfWeek(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFirstDayOfWeek=AValue) then exit;
  FFirstDayOfWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetFirstWeekOfYear(AIndex: Integer; const AValue: TInt16); 


begin
  If (FFirstWeekOfYear=AValue) then exit;
  FFirstWeekOfYear:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetIsEastAsia(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEastAsia=AValue) then exit;
  FIsEastAsia:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetIsRightToLeft(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRightToLeft=AValue) then exit;
  FIsRightToLeft:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetIsUIRightToLeft(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUIRightToLeft=AValue) then exit;
  FIsUIRightToLeft:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetListSeparator(AIndex: Integer; const AValue: string); 


begin
  If (FListSeparator=AValue) then exit;
  FListSeparator:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetLocaleId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLocaleId=AValue) then exit;
  FLocaleId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetNegativeSign(AIndex: Integer; const AValue: string); 


begin
  If (FNegativeSign=AValue) then exit;
  FNegativeSign:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetNegNumberMode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNegNumberMode=AValue) then exit;
  FNegNumberMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetPM(AIndex: Integer; const AValue: string); 


begin
  If (FPM=AValue) then exit;
  FPM:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetPositiveSign(AIndex: Integer; const AValue: string); 


begin
  If (FPositiveSign=AValue) then exit;
  FPositiveSign:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetShowWeeks(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowWeeks=AValue) then exit;
  FShowWeeks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetThousandSeparator(AIndex: Integer; const AValue: string); 


begin
  If (FThousandSeparator=AValue) then exit;
  FThousandSeparator:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetTime24(AIndex: Integer; const AValue: boolean); 


begin
  If (FTime24=AValue) then exit;
  FTime24:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetTimeMarkerPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTimeMarkerPosition=AValue) then exit;
  FTimeMarkerPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetTimeSeparator(AIndex: Integer; const AValue: string); 


begin
  If (FTimeSeparator=AValue) then exit;
  FTimeSeparator:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetWorkDayEndHour(AIndex: Integer; const AValue: TInt16); 


begin
  If (FWorkDayEndHour=AValue) then exit;
  FWorkDayEndHour:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetWorkDays(AIndex: Integer; const AValue: TInt16); 


begin
  If (FWorkDays=AValue) then exit;
  FWorkDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRegionalSettings.SetWorkDayStartHour(AIndex: Integer; const AValue: TInt16); 


begin
  If (FWorkDayStartHour=AValue) then exit;
  FWorkDayStartHour:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRegionalSettings.KeyAsURLPart : string;

begin
  Result:=IntToStr(AdjustHijriDays);
end;


Function TSPRegionalSettings.GlobalTimeZones(AService: TODataService) : TSPTimeZone; 


begin
  Result:=TSPTimeZone(GetContainedSingleTon(AService,'GlobalTimeZones', TSPTimeZone));
end;


Function TSPRegionalSettings.TimeZone(AService: TODataService) : TSPTimeZone; 


begin
  Result:=TSPTimeZone(GetContainedSingleTon(AService,'TimeZone', TSPTimeZone));
end;


Function TSPRegionalSettings.TimeZones(AService: TODataService) : TSPTimeZone; 


begin
  Result:=TSPTimeZone(GetContainedSingleTon(AService,'TimeZones', TSPTimeZone));
end;


{ --------------------------------------------------------------------
  TSPTimeZone
  --------------------------------------------------------------------}


Class Function TSPTimeZone.ObjectRestKind : String; 

begin
  Result:='TimeZone';
end;


Procedure TSPTimeZone.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTimeZone.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTimeZone.SetInformation(AIndex: Integer; const AValue: TSPTimeZoneInformation); 


begin
  If (FInformation=AValue) then exit;
  FInformation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPTimeZone.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSPThemeInfo
  --------------------------------------------------------------------}


Class Function TSPThemeInfo.ObjectRestKind : String; 

begin
  Result:='ThemeInfo';
end;


Procedure TSPThemeInfo.SetAccessibleDescription(AIndex: Integer; const AValue: string); 


begin
  If (FAccessibleDescription=AValue) then exit;
  FAccessibleDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPThemeInfo.SetThemeBackgroundImageUri(AIndex: Integer; const AValue: string); 


begin
  If (FThemeBackgroundImageUri=AValue) then exit;
  FThemeBackgroundImageUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPThemeInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AccessibleDescription);
end;


{ --------------------------------------------------------------------
  TSPSPAppLicenseManager
  --------------------------------------------------------------------}


Class Function TSPSPAppLicenseManager.ObjectRestKind : String; 

begin
  Result:='SPAppLicenseManager';
end;


Procedure TSPSPAppLicenseManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPSPAppLicenseManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPSolutionExporter
  --------------------------------------------------------------------}


Class Function TSPSolutionExporter.ObjectRestKind : String; 

begin
  Result:='SolutionExporter';
end;


Procedure TSPSolutionExporter.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPSolutionExporter.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPUserSolution
  --------------------------------------------------------------------}


Class Function TSPUserSolution.ObjectRestKind : String; 

begin
  Result:='UserSolution';
end;


Procedure TSPUserSolution.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPUserSolution.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPAppCatalog
  --------------------------------------------------------------------}


Class Function TSPAppCatalog.ObjectRestKind : String; 

begin
  Result:='AppCatalog';
end;


Procedure TSPAppCatalog.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppCatalog.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPAppInstanceErrorDetails
  --------------------------------------------------------------------}


Class Function TSPAppInstanceErrorDetails.ObjectRestKind : String; 

begin
  Result:='AppInstanceErrorDetails';
end;


Procedure TSPAppInstanceErrorDetails.SetCorrelationId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FCorrelationId=AValue) then exit;
  FCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstanceErrorDetails.SetErrorDetail(AIndex: Integer; const AValue: string); 


begin
  If (FErrorDetail=AValue) then exit;
  FErrorDetail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstanceErrorDetails.SetErrorType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FErrorType=AValue) then exit;
  FErrorType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstanceErrorDetails.SetErrorTypeName(AIndex: Integer; const AValue: string); 


begin
  If (FErrorTypeName=AValue) then exit;
  FErrorTypeName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstanceErrorDetails.SetExceptionMessage(AIndex: Integer; const AValue: string); 


begin
  If (FExceptionMessage=AValue) then exit;
  FExceptionMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstanceErrorDetails.SetSource(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSource=AValue) then exit;
  FSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstanceErrorDetails.SetSourceName(AIndex: Integer; const AValue: string); 


begin
  If (FSourceName=AValue) then exit;
  FSourceName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppInstanceErrorDetails.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(CorrelationId);
end;


{ --------------------------------------------------------------------
  TSPAppInstance
  --------------------------------------------------------------------}


Class Function TSPAppInstance.ObjectRestKind : String; 

begin
  Result:='AppInstance';
end;


Procedure TSPAppInstance.SetAppPrincipalId(AIndex: Integer; const AValue: string); 


begin
  If (FAppPrincipalId=AValue) then exit;
  FAppPrincipalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetAppWebFullUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAppWebFullUrl=AValue) then exit;
  FAppWebFullUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetImageFallbackUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageFallbackUrl=AValue) then exit;
  FImageFallbackUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetInError(AIndex: Integer; const AValue: boolean); 


begin
  If (FInError=AValue) then exit;
  FInError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetStartPage(AIndex: Integer; const AValue: string); 


begin
  If (FStartPage=AValue) then exit;
  FStartPage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetPackageFingerprint(AIndex: Integer; const AValue: TBinary); 


begin
  If (FPackageFingerprint=AValue) then exit;
  FPackageFingerprint:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetProductId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FProductId=AValue) then exit;
  FProductId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetRemoteAppUrl(AIndex: Integer; const AValue: string); 


begin
  If (FRemoteAppUrl=AValue) then exit;
  FRemoteAppUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetSettingsPageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSettingsPageUrl=AValue) then exit;
  FSettingsPageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetSiteId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAppInstance.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppInstance.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSPApp
  --------------------------------------------------------------------}


Class Function TSPApp.ObjectRestKind : String; 

begin
  Result:='App';
end;


Procedure TSPApp.SetAssetId(AIndex: Integer; const AValue: string); 


begin
  If (FAssetId=AValue) then exit;
  FAssetId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPApp.SetContentMarket(AIndex: Integer; const AValue: string); 


begin
  If (FContentMarket=AValue) then exit;
  FContentMarket:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPApp.SetVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FVersionString=AValue) then exit;
  FVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPApp.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AssetId);
end;


{ --------------------------------------------------------------------
  TSPAlternateUrl
  --------------------------------------------------------------------}


Class Function TSPAlternateUrl.ObjectRestKind : String; 

begin
  Result:='AlternateUrl';
end;


Procedure TSPAlternateUrl.SetUri(AIndex: Integer; const AValue: string); 


begin
  If (FUri=AValue) then exit;
  FUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPAlternateUrl.SetUrlZone(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUrlZone=AValue) then exit;
  FUrlZone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAlternateUrl.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Uri);
end;


{ --------------------------------------------------------------------
  TSPObjectSharingSettings
  --------------------------------------------------------------------}


Class Function TSPObjectSharingSettings.ObjectRestKind : String; 

begin
  Result:='ObjectSharingSettings';
end;


Procedure TSPObjectSharingSettings.SetAccessRequestMode(AIndex: Integer; const AValue: boolean); 


begin
  If (FAccessRequestMode=AValue) then exit;
  FAccessRequestMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanCurrentUserManageReadonlyLink(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserManageReadonlyLink=AValue) then exit;
  FCanCurrentUserManageReadonlyLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanCurrentUserManageReadWriteLink(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserManageReadWriteLink=AValue) then exit;
  FCanCurrentUserManageReadWriteLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanCurrentUserRetrieveReadonlyLink(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserRetrieveReadonlyLink=AValue) then exit;
  FCanCurrentUserRetrieveReadonlyLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanCurrentUserRetrieveReadWriteLink(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserRetrieveReadWriteLink=AValue) then exit;
  FCanCurrentUserRetrieveReadWriteLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanCurrentUserShareExternally(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserShareExternally=AValue) then exit;
  FCanCurrentUserShareExternally:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanCurrentUserShareInternally(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanCurrentUserShareInternally=AValue) then exit;
  FCanCurrentUserShareInternally:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanSendEmail(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanSendEmail=AValue) then exit;
  FCanSendEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanSendLink(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanSendLink=AValue) then exit;
  FCanSendLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetCanShareFolder(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanShareFolder=AValue) then exit;
  FCanShareFolder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetGroupsList(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FGroupsList=AValue) then exit;
  FGroupsList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetHasEditRole(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasEditRole=AValue) then exit;
  FHasEditRole:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetHasReadRole(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasReadRole=AValue) then exit;
  FHasReadRole:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetInheritingWebLink(AIndex: Integer; const AValue: string); 


begin
  If (FInheritingWebLink=AValue) then exit;
  FInheritingWebLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetIsGuestUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsGuestUser=AValue) then exit;
  FIsGuestUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetIsPictureLibrary(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPictureLibrary=AValue) then exit;
  FIsPictureLibrary:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetIsUserSiteAdmin(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUserSiteAdmin=AValue) then exit;
  FIsUserSiteAdmin:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetItemId(AIndex: Integer; const AValue: string); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetItemName(AIndex: Integer; const AValue: string); 


begin
  If (FItemName=AValue) then exit;
  FItemName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetItemUrl(AIndex: Integer; const AValue: string); 


begin
  If (FItemUrl=AValue) then exit;
  FItemUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetPermissionsOnlyMode(AIndex: Integer; const AValue: boolean); 


begin
  If (FPermissionsOnlyMode=AValue) then exit;
  FPermissionsOnlyMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetRoles(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FRoles=AValue) then exit;
  FRoles:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetShareByEmailEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FShareByEmailEnabled=AValue) then exit;
  FShareByEmailEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetShowExternalSharingWarning(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowExternalSharingWarning=AValue) then exit;
  FShowExternalSharingWarning:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetSimplifiedRoles(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FSimplifiedRoles=AValue) then exit;
  FSimplifiedRoles:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetSupportsAclPropagation(AIndex: Integer; const AValue: boolean); 


begin
  If (FSupportsAclPropagation=AValue) then exit;
  FSupportsAclPropagation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingSettings.SetWebUrl(AIndex: Integer; const AValue: string); 


begin
  If (FWebUrl=AValue) then exit;
  FWebUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPObjectSharingSettings.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'groupslist' : SetLength(FGroupsList,aLength);
  'roles' : SetLength(FRoles,aLength);
  'simplifiedroles' : SetLength(FSimplifiedRoles,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPObjectSharingSettings.KeyAsURLPart : string;

begin
  Result:=BoolToStr(AccessRequestMode,'true','false');
end;


Function TSPObjectSharingSettings.ObjectSharingInformation(AService: TODataService) : TSPObjectSharingInformation; 


begin
  Result:=TSPObjectSharingInformation(GetContainedSingleTon(AService,'ObjectSharingInformation', TSPObjectSharingInformation));
end;


Function TSPObjectSharingSettings.SharePointSettings(AService: TODataService) : TSPSharePointSharingSettings; 


begin
  Result:=TSPSharePointSharingSettings(GetContainedSingleTon(AService,'SharePointSettings', TSPSharePointSharingSettings));
end;


{ --------------------------------------------------------------------
  TSPObjectSharingInformation
  --------------------------------------------------------------------}


Class Function TSPObjectSharingInformation.ObjectRestKind : String; 

begin
  Result:='ObjectSharingInformation';
end;


Procedure TSPObjectSharingInformation.SetAnonymousEditLink(AIndex: Integer; const AValue: string); 


begin
  If (FAnonymousEditLink=AValue) then exit;
  FAnonymousEditLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetAnonymousViewLink(AIndex: Integer; const AValue: string); 


begin
  If (FAnonymousViewLink=AValue) then exit;
  FAnonymousViewLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetCanBeShared(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanBeShared=AValue) then exit;
  FCanBeShared:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetCanBeUnshared(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanBeUnshared=AValue) then exit;
  FCanBeUnshared:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetCanManagePermissions(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanManagePermissions=AValue) then exit;
  FCanManagePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetHasPendingAccessRequests(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasPendingAccessRequests=AValue) then exit;
  FHasPendingAccessRequests:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetHasPermissionLevels(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasPermissionLevels=AValue) then exit;
  FHasPermissionLevels:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetIsSharedWithCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSharedWithCurrentUser=AValue) then exit;
  FIsSharedWithCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetIsSharedWithGuest(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSharedWithGuest=AValue) then exit;
  FIsSharedWithGuest:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetIsSharedWithMany(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSharedWithMany=AValue) then exit;
  FIsSharedWithMany:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetIsSharedWithSecurityGroup(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSharedWithSecurityGroup=AValue) then exit;
  FIsSharedWithSecurityGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformation.SetPendingAccessRequestsLink(AIndex: Integer; const AValue: string); 


begin
  If (FPendingAccessRequestsLink=AValue) then exit;
  FPendingAccessRequestsLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPObjectSharingInformation.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AnonymousEditLink);
end;


Function TSPObjectSharingInformation.SharedWithUsersCollection(AService: TODataService) : TSPObjectSharingInformationUser; 


begin
  Result:=TSPObjectSharingInformationUser(GetContainedSingleTon(AService,'SharedWithUsersCollection', TSPObjectSharingInformationUser));
end;


{ --------------------------------------------------------------------
  TSPObjectSharingInformationUser
  --------------------------------------------------------------------}


Class Function TSPObjectSharingInformationUser.ObjectRestKind : String; 

begin
  Result:='ObjectSharingInformationUser';
end;


Procedure TSPObjectSharingInformationUser.SetCustomRoleNames(AIndex: Integer; const AValue: string); 


begin
  If (FCustomRoleNames=AValue) then exit;
  FCustomRoleNames:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetDepartment(AIndex: Integer; const AValue: string); 


begin
  If (FDepartment=AValue) then exit;
  FDepartment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetHasEditPermission(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasEditPermission=AValue) then exit;
  FHasEditPermission:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetHasViewPermission(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasViewPermission=AValue) then exit;
  FHasViewPermission:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetIsDomainGroup(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDomainGroup=AValue) then exit;
  FIsDomainGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetIsSiteAdmin(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSiteAdmin=AValue) then exit;
  FIsSiteAdmin:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetJobTitle(AIndex: Integer; const AValue: string); 


begin
  If (FJobTitle=AValue) then exit;
  FJobTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetPicture(AIndex: Integer; const AValue: string); 


begin
  If (FPicture=AValue) then exit;
  FPicture:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPObjectSharingInformationUser.SetSipAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSipAddress=AValue) then exit;
  FSipAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPObjectSharingInformationUser.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TSPObjectSharingInformationUser.Principal(AService: TODataService) : TSPPrincipal; 


begin
  Result:=TSPPrincipal(GetContainedSingleTon(AService,'Principal', TSPPrincipal));
end;


Function TSPObjectSharingInformationUser.User(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'User', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPSharePointSharingSettings
  --------------------------------------------------------------------}


Class Function TSPSharePointSharingSettings.ObjectRestKind : String; 

begin
  Result:='SharePointSharingSettings';
end;


Procedure TSPSharePointSharingSettings.SetAddToGroupModeName(AIndex: Integer; const AValue: string); 


begin
  If (FAddToGroupModeName=AValue) then exit;
  FAddToGroupModeName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetGroupNameLines(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FGroupNameLines=AValue) then exit;
  FGroupNameLines:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetGroupRoleDefinitionNamesLines(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FGroupRoleDefinitionNamesLines=AValue) then exit;
  FGroupRoleDefinitionNamesLines:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetIsMobileView(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMobileView=AValue) then exit;
  FIsMobileView:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetPanelGivePermissionsVisible(AIndex: Integer; const AValue: boolean); 


begin
  If (FPanelGivePermissionsVisible=AValue) then exit;
  FPanelGivePermissionsVisible:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetPanelShowHideMoreOptionsVisible(AIndex: Integer; const AValue: boolean); 


begin
  If (FPanelShowHideMoreOptionsVisible=AValue) then exit;
  FPanelShowHideMoreOptionsVisible:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetPanelSimplifiedRoleSelectorVisible(AIndex: Integer; const AValue: boolean); 


begin
  If (FPanelSimplifiedRoleSelectorVisible=AValue) then exit;
  FPanelSimplifiedRoleSelectorVisible:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetRequiredScriptFileLinks(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FRequiredScriptFileLinks=AValue) then exit;
  FRequiredScriptFileLinks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetRoleDefinitionNameLines(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FRoleDefinitionNameLines=AValue) then exit;
  FRoleDefinitionNameLines:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetSelectedGroup(AIndex: Integer; const AValue: string); 


begin
  If (FSelectedGroup=AValue) then exit;
  FSelectedGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetSharedWithEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FSharedWithEnabled=AValue) then exit;
  FSharedWithEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetSharingCssLink(AIndex: Integer; const AValue: string); 


begin
  If (FSharingCssLink=AValue) then exit;
  FSharingCssLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetTabbedDialogEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FTabbedDialogEnabled=AValue) then exit;
  FTabbedDialogEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetTabToShow(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTabToShow=AValue) then exit;
  FTabToShow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SettxtEmailSubjectText(AIndex: Integer; const AValue: string); 


begin
  If (FtxtEmailSubjectText=AValue) then exit;
  FtxtEmailSubjectText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharePointSharingSettings.SetUserDisplayUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUserDisplayUrl=AValue) then exit;
  FUserDisplayUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPSharePointSharingSettings.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'groupnamelines' : SetLength(FGroupNameLines,aLength);
  'grouproledefinitionnameslines' : SetLength(FGroupRoleDefinitionNamesLines,aLength);
  'requiredscriptfilelinks' : SetLength(FRequiredScriptFileLinks,aLength);
  'roledefinitionnamelines' : SetLength(FRoleDefinitionNameLines,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPSharePointSharingSettings.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AddToGroupModeName);
end;


Function TSPSharePointSharingSettings.PickerProperties(AService: TODataService) : TSPPickerSettings; 


begin
  Result:=TSPPickerSettings(GetContainedSingleTon(AService,'PickerProperties', TSPPickerSettings));
end;


{ --------------------------------------------------------------------
  TSPPickerSettings
  --------------------------------------------------------------------}


Class Function TSPPickerSettings.ObjectRestKind : String; 

begin
  Result:='PickerSettings';
end;


Procedure TSPPickerSettings.SetAllowEmailAddresses(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowEmailAddresses=AValue) then exit;
  FAllowEmailAddresses:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPickerSettings.SetPrincipalAccountType(AIndex: Integer; const AValue: string); 


begin
  If (FPrincipalAccountType=AValue) then exit;
  FPrincipalAccountType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPickerSettings.SetPrincipalSource(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalSource=AValue) then exit;
  FPrincipalSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPPickerSettings.SetVisibleSuggestions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FVisibleSuggestions=AValue) then exit;
  FVisibleSuggestions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPPickerSettings.KeyAsURLPart : string;

begin
  Result:=BoolToStr(AllowEmailAddresses,'true','false');
end;


{ --------------------------------------------------------------------
  TSPRelatedItemManager
  --------------------------------------------------------------------}


Class Function TSPRelatedItemManager.ObjectRestKind : String; 

begin
  Result:='RelatedItemManager';
end;


Procedure TSPRelatedItemManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRelatedItemManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPServerSettings
  --------------------------------------------------------------------}


Class Function TSPServerSettings.ObjectRestKind : String; 

begin
  Result:='ServerSettings';
end;


Procedure TSPServerSettings.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPServerSettings.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPSharingResult
  --------------------------------------------------------------------}


Class Function TSPSharingResult.ObjectRestKind : String; 

begin
  Result:='SharingResult';
end;


Procedure TSPSharingResult.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetIconUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconUrl=AValue) then exit;
  FIconUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetInvitedUsers(AIndex: Integer; const AValue: TSPSPInvitationCreationResultArray); 


begin
  If (FInvitedUsers=AValue) then exit;
  FInvitedUsers:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetPermissionsPageRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPermissionsPageRelativeUrl=AValue) then exit;
  FPermissionsPageRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetStatusCode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatusCode=AValue) then exit;
  FStatusCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetUniquelyPermissionedUsers(AIndex: Integer; const AValue: TSP_SharingUserSharingResultArray); 


begin
  If (FUniquelyPermissionedUsers=AValue) then exit;
  FUniquelyPermissionedUsers:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPSharingResult.SetUsersAddedToGroup(AIndex: Integer; const AValue: TSP_SharingUserSharingResultArray); 


begin
  If (FUsersAddedToGroup=AValue) then exit;
  FUsersAddedToGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPSharingResult.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'invitedusers' : SetLength(FInvitedUsers,aLength);
  'uniquelypermissionedusers' : SetLength(FUniquelyPermissionedUsers,aLength);
  'usersaddedtogroup' : SetLength(FUsersAddedToGroup,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSPSharingResult.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


Function TSPSharingResult.GroupsSharedWith(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'GroupsSharedWith', TSPGroup));
end;


Function TSPSharingResult.GroupUsersAddedTo(AService: TODataService) : TSPGroup; 


begin
  Result:=TSPGroup(GetContainedSingleTon(AService,'GroupUsersAddedTo', TSPGroup));
end;


Function TSPSharingResult.UsersWithAccessRequests(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'UsersWithAccessRequests', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPAccessRequests
  --------------------------------------------------------------------}


Class Function TSPAccessRequests.ObjectRestKind : String; 

begin
  Result:='AccessRequests';
end;


Procedure TSPAccessRequests.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAccessRequests.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPAppContextSite
  --------------------------------------------------------------------}


Class Function TSPAppContextSite.ObjectRestKind : String; 

begin
  Result:='AppContextSite';
end;


Procedure TSPAppContextSite.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppContextSite.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSPAppContextSite.Site(AService: TODataService) : TSPSite; 


begin
  Result:=TSPSite(GetContainedSingleTon(AService,'Site', TSPSite));
end;


Function TSPAppContextSite.Web(AService: TODataService) : TSPWeb; 


begin
  Result:=TSPWeb(GetContainedSingleTon(AService,'Web', TSPWeb));
end;


{ --------------------------------------------------------------------
  TSPChange
  --------------------------------------------------------------------}


Class Function TSPChange.ObjectRestKind : String; 

begin
  Result:='Change';
end;


Procedure TSPChange.SetChangeToken(AIndex: Integer; const AValue: TSPChangeToken); 


begin
  If (FChangeToken=AValue) then exit;
  FChangeToken:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChange.SetChangeType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FChangeType=AValue) then exit;
  FChangeType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChange.SetSiteId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChange.SetTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTime=AValue) then exit;
  FTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPChange.KeyAsURLPart : string;

begin
  Result:=IntToStr(ChangeType);
end;


{ --------------------------------------------------------------------
  TSPChangeAlert
  --------------------------------------------------------------------}


Class Function TSPChangeAlert.ObjectRestKind : String; 

begin
  Result:='ChangeAlert';
end;


Procedure TSPChangeAlert.SetAlertId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAlertId=AValue) then exit;
  FAlertId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeAlert.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeContentType
  --------------------------------------------------------------------}


Class Function TSPChangeContentType.ObjectRestKind : String; 

begin
  Result:='ChangeContentType';
end;


Procedure TSPChangeContentType.SetContentTypeId(AIndex: Integer; const AValue: TSPContentTypeId); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeContentType.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeField
  --------------------------------------------------------------------}


Class Function TSPChangeField.ObjectRestKind : String; 

begin
  Result:='ChangeField';
end;


Procedure TSPChangeField.SetFieldId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FFieldId=AValue) then exit;
  FFieldId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeField.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeFile
  --------------------------------------------------------------------}


Class Function TSPChangeFile.ObjectRestKind : String; 

begin
  Result:='ChangeFile';
end;


Procedure TSPChangeFile.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeFile.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeFolder
  --------------------------------------------------------------------}


Class Function TSPChangeFolder.ObjectRestKind : String; 

begin
  Result:='ChangeFolder';
end;


Procedure TSPChangeFolder.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeFolder.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeGroup
  --------------------------------------------------------------------}


Class Function TSPChangeGroup.ObjectRestKind : String; 

begin
  Result:='ChangeGroup';
end;


Procedure TSPChangeGroup.SetGroupId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FGroupId=AValue) then exit;
  FGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeItem
  --------------------------------------------------------------------}


Class Function TSPChangeItem.ObjectRestKind : String; 

begin
  Result:='ChangeItem';
end;


Procedure TSPChangeItem.SetItemId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeItem.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeItem.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeList
  --------------------------------------------------------------------}


Class Function TSPChangeList.ObjectRestKind : String; 

begin
  Result:='ChangeList';
end;


Procedure TSPChangeList.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeList.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeSite
  --------------------------------------------------------------------}


Class Function TSPChangeSite.ObjectRestKind : String; 

begin
  Result:='ChangeSite';
end;


{ --------------------------------------------------------------------
  TSPChangeUser
  --------------------------------------------------------------------}


Class Function TSPChangeUser.ObjectRestKind : String; 

begin
  Result:='ChangeUser';
end;


Procedure TSPChangeUser.SetActivate(AIndex: Integer; const AValue: boolean); 


begin
  If (FActivate=AValue) then exit;
  FActivate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeUser.SetUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUserId=AValue) then exit;
  FUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeView
  --------------------------------------------------------------------}


Class Function TSPChangeView.ObjectRestKind : String; 

begin
  Result:='ChangeView';
end;


Procedure TSPChangeView.SetViewId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FViewId=AValue) then exit;
  FViewId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeView.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPChangeView.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPChangeWeb
  --------------------------------------------------------------------}


Class Function TSPChangeWeb.ObjectRestKind : String; 

begin
  Result:='ChangeWeb';
end;


Procedure TSPChangeWeb.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPCompatibilityRange
  --------------------------------------------------------------------}


Class Function TSPCompatibilityRange.ObjectRestKind : String; 

begin
  Result:='CompatibilityRange';
end;


Procedure TSPCompatibilityRange.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPCompatibilityRange.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPRequestContext
  --------------------------------------------------------------------}


Class Function TSPRequestContext.ObjectRestKind : String; 

begin
  Result:='RequestContext';
end;


Procedure TSPRequestContext.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRequestContext.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSPRequestContext.Current(AService: TODataService) : TSPRequestContext; 


begin
  Result:=TSPRequestContext(GetContainedSingleTon(AService,'Current', TSPRequestContext));
end;


Function TSPRequestContext.List(AService: TODataService) : TSPList; 


begin
  Result:=TSPList(GetContainedSingleTon(AService,'List', TSPList));
end;


Function TSPRequestContext.Site(AService: TODataService) : TSPSite; 


begin
  Result:=TSPSite(GetContainedSingleTon(AService,'Site', TSPSite));
end;


Function TSPRequestContext.Web(AService: TODataService) : TSPWeb; 


begin
  Result:=TSPWeb(GetContainedSingleTon(AService,'Web', TSPWeb));
end;


{ --------------------------------------------------------------------
  TSPFieldCalculated
  --------------------------------------------------------------------}


Class Function TSPFieldCalculated.ObjectRestKind : String; 

begin
  Result:='FieldCalculated';
end;


Procedure TSPFieldCalculated.SetDateFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDateFormat=AValue) then exit;
  FDateFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCalculated.SetFormula(AIndex: Integer; const AValue: string); 


begin
  If (FFormula=AValue) then exit;
  FFormula:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldCalculated.SetOutputType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOutputType=AValue) then exit;
  FOutputType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldMultiChoice
  --------------------------------------------------------------------}


Class Function TSPFieldMultiChoice.ObjectRestKind : String; 

begin
  Result:='FieldMultiChoice';
end;


Procedure TSPFieldMultiChoice.SetFillInChoice(AIndex: Integer; const AValue: boolean); 


begin
  If (FFillInChoice=AValue) then exit;
  FFillInChoice:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiChoice.SetMappings(AIndex: Integer; const AValue: string); 


begin
  If (FMappings=AValue) then exit;
  FMappings:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiChoice.SetChoices(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FChoices=AValue) then exit;
  FChoices:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSPFieldMultiChoice.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'choices' : SetLength(FChoices,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSPFieldChoice
  --------------------------------------------------------------------}


Class Function TSPFieldChoice.ObjectRestKind : String; 

begin
  Result:='FieldChoice';
end;


Procedure TSPFieldChoice.SetEditFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditFormat=AValue) then exit;
  FEditFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldComputed
  --------------------------------------------------------------------}


Class Function TSPFieldComputed.ObjectRestKind : String; 

begin
  Result:='FieldComputed';
end;


Procedure TSPFieldComputed.SetEnableLookup(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableLookup=AValue) then exit;
  FEnableLookup:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldNumber
  --------------------------------------------------------------------}


Class Function TSPFieldNumber.ObjectRestKind : String; 

begin
  Result:='FieldNumber';
end;


Procedure TSPFieldNumber.SetMaximumValue(AIndex: Integer; const AValue: Double); 


begin
  If (FMaximumValue=AValue) then exit;
  FMaximumValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldNumber.SetMinimumValue(AIndex: Integer; const AValue: Double); 


begin
  If (FMinimumValue=AValue) then exit;
  FMinimumValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldCurrency
  --------------------------------------------------------------------}


Class Function TSPFieldCurrency.ObjectRestKind : String; 

begin
  Result:='FieldCurrency';
end;


Procedure TSPFieldCurrency.SetCurrencyLocaleId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrencyLocaleId=AValue) then exit;
  FCurrencyLocaleId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldDateTime
  --------------------------------------------------------------------}


Class Function TSPFieldDateTime.ObjectRestKind : String; 

begin
  Result:='FieldDateTime';
end;


Procedure TSPFieldDateTime.SetDateTimeCalendarType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDateTimeCalendarType=AValue) then exit;
  FDateTimeCalendarType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldDateTime.SetDisplayFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDisplayFormat=AValue) then exit;
  FDisplayFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldDateTime.SetFriendlyDisplayFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFriendlyDisplayFormat=AValue) then exit;
  FFriendlyDisplayFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldGeolocation
  --------------------------------------------------------------------}


Class Function TSPFieldGeolocation.ObjectRestKind : String; 

begin
  Result:='FieldGeolocation';
end;


{ --------------------------------------------------------------------
  TSPFieldGuid
  --------------------------------------------------------------------}


Class Function TSPFieldGuid.ObjectRestKind : String; 

begin
  Result:='FieldGuid';
end;


{ --------------------------------------------------------------------
  TSPFieldLookup
  --------------------------------------------------------------------}


Class Function TSPFieldLookup.ObjectRestKind : String; 

begin
  Result:='FieldLookup';
end;


Procedure TSPFieldLookup.SetAllowMultipleValues(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowMultipleValues=AValue) then exit;
  FAllowMultipleValues:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookup.SetIsRelationship(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRelationship=AValue) then exit;
  FIsRelationship:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookup.SetLookupField(AIndex: Integer; const AValue: string); 


begin
  If (FLookupField=AValue) then exit;
  FLookupField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookup.SetLookupList(AIndex: Integer; const AValue: string); 


begin
  If (FLookupList=AValue) then exit;
  FLookupList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookup.SetLookupWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupWebId=AValue) then exit;
  FLookupWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookup.SetPrimaryFieldId(AIndex: Integer; const AValue: string); 


begin
  If (FPrimaryFieldId=AValue) then exit;
  FPrimaryFieldId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldLookup.SetRelationshipDeleteBehavior(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRelationshipDeleteBehavior=AValue) then exit;
  FRelationshipDeleteBehavior:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldMultiLineText
  --------------------------------------------------------------------}


Class Function TSPFieldMultiLineText.ObjectRestKind : String; 

begin
  Result:='FieldMultiLineText';
end;


Procedure TSPFieldMultiLineText.SetAllowHyperlink(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowHyperlink=AValue) then exit;
  FAllowHyperlink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiLineText.SetAppendOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FAppendOnly=AValue) then exit;
  FAppendOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiLineText.SetNumberOfLines(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNumberOfLines=AValue) then exit;
  FNumberOfLines:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiLineText.SetRestrictedMode(AIndex: Integer; const AValue: boolean); 


begin
  If (FRestrictedMode=AValue) then exit;
  FRestrictedMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiLineText.SetRichText(AIndex: Integer; const AValue: boolean); 


begin
  If (FRichText=AValue) then exit;
  FRichText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldMultiLineText.SetWikiLinking(AIndex: Integer; const AValue: boolean); 


begin
  If (FWikiLinking=AValue) then exit;
  FWikiLinking:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldRatingScale
  --------------------------------------------------------------------}


Class Function TSPFieldRatingScale.ObjectRestKind : String; 

begin
  Result:='FieldRatingScale';
end;


Procedure TSPFieldRatingScale.SetGridEndNumber(AIndex: Integer; const AValue: TInt32); 


begin
  If (FGridEndNumber=AValue) then exit;
  FGridEndNumber:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScale.SetGridNAOptionText(AIndex: Integer; const AValue: string); 


begin
  If (FGridNAOptionText=AValue) then exit;
  FGridNAOptionText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScale.SetGridStartNumber(AIndex: Integer; const AValue: TInt32); 


begin
  If (FGridStartNumber=AValue) then exit;
  FGridStartNumber:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScale.SetGridTextRangeAverage(AIndex: Integer; const AValue: string); 


begin
  If (FGridTextRangeAverage=AValue) then exit;
  FGridTextRangeAverage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScale.SetGridTextRangeHigh(AIndex: Integer; const AValue: string); 


begin
  If (FGridTextRangeHigh=AValue) then exit;
  FGridTextRangeHigh:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScale.SetGridTextRangeLow(AIndex: Integer; const AValue: string); 


begin
  If (FGridTextRangeLow=AValue) then exit;
  FGridTextRangeLow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldRatingScale.SetRangeCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRangeCount=AValue) then exit;
  FRangeCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldText
  --------------------------------------------------------------------}


Class Function TSPFieldText.ObjectRestKind : String; 

begin
  Result:='FieldText';
end;


Procedure TSPFieldText.SetMaxLength(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMaxLength=AValue) then exit;
  FMaxLength:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldUrl
  --------------------------------------------------------------------}


Class Function TSPFieldUrl.ObjectRestKind : String; 

begin
  Result:='FieldUrl';
end;


Procedure TSPFieldUrl.SetDisplayFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDisplayFormat=AValue) then exit;
  FDisplayFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPFieldUser
  --------------------------------------------------------------------}


Class Function TSPFieldUser.ObjectRestKind : String; 

begin
  Result:='FieldUser';
end;


Procedure TSPFieldUser.SetAllowDisplay(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowDisplay=AValue) then exit;
  FAllowDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldUser.SetPresence(AIndex: Integer; const AValue: boolean); 


begin
  If (FPresence=AValue) then exit;
  FPresence:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldUser.SetSelectionGroup(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSelectionGroup=AValue) then exit;
  FSelectionGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPFieldUser.SetSelectionMode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSelectionMode=AValue) then exit;
  FSelectionMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSPMountedFolderInfo
  --------------------------------------------------------------------}


Class Function TSPMountedFolderInfo.ObjectRestKind : String; 

begin
  Result:='MountedFolderInfo';
end;


Procedure TSPMountedFolderInfo.SetFolderUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFolderUrl=AValue) then exit;
  FFolderUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMountedFolderInfo.SetHasEditPermission(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasEditPermission=AValue) then exit;
  FHasEditPermission:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMountedFolderInfo.SetItemId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMountedFolderInfo.SetListTemplateType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FListTemplateType=AValue) then exit;
  FListTemplateType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMountedFolderInfo.SetListViewUrl(AIndex: Integer; const AValue: string); 


begin
  If (FListViewUrl=AValue) then exit;
  FListViewUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMountedFolderInfo.SetWebUrl(AIndex: Integer; const AValue: string); 


begin
  If (FWebUrl=AValue) then exit;
  FWebUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPMountedFolderInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FolderUrl);
end;


{ --------------------------------------------------------------------
  TSPMountPoint
  --------------------------------------------------------------------}


Class Function TSPMountPoint.ObjectRestKind : String; 

begin
  Result:='MountPoint';
end;


Procedure TSPMountPoint.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPMountPoint.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPMountPointInfo
  --------------------------------------------------------------------}


Class Function TSPMountPointInfo.ObjectRestKind : String; 

begin
  Result:='MountPointInfo';
end;


Procedure TSPMountPointInfo.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPMountPointInfo.SetRedirectUrl(AIndex: Integer; const AValue: string); 


begin
  If (FRedirectUrl=AValue) then exit;
  FRedirectUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPMountPointInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSPMoveCopyUtil
  --------------------------------------------------------------------}


Class Function TSPMoveCopyUtil.ObjectRestKind : String; 

begin
  Result:='MoveCopyUtil';
end;


Procedure TSPMoveCopyUtil.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPMoveCopyUtil.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPRelatedField
  --------------------------------------------------------------------}


Class Function TSPRelatedField.ObjectRestKind : String; 

begin
  Result:='RelatedField';
end;


Procedure TSPRelatedField.SetFieldId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FFieldId=AValue) then exit;
  FFieldId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedField.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedField.SetRelationshipDeleteBehavior(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRelationshipDeleteBehavior=AValue) then exit;
  FRelationshipDeleteBehavior:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRelatedField.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRelatedField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FieldId);
end;


Function TSPRelatedField.LookupList(AService: TODataService) : TSPList; 


begin
  Result:=TSPList(GetContainedSingleTon(AService,'LookupList', TSPList));
end;


{ --------------------------------------------------------------------
  TSPRemoteWeb
  --------------------------------------------------------------------}


Class Function TSPRemoteWeb.ObjectRestKind : String; 

begin
  Result:='RemoteWeb';
end;


Procedure TSPRemoteWeb.SetCanSendEmail(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanSendEmail=AValue) then exit;
  FCanSendEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRemoteWeb.SetShareByEmailEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FShareByEmailEnabled=AValue) then exit;
  FShareByEmailEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPRemoteWeb.SetShareByLinkEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FShareByLinkEnabled=AValue) then exit;
  FShareByLinkEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRemoteWeb.KeyAsURLPart : string;

begin
  Result:=BoolToStr(CanSendEmail,'true','false');
end;


{ --------------------------------------------------------------------
  TSPRequestUserContext
  --------------------------------------------------------------------}


Class Function TSPRequestUserContext.ObjectRestKind : String; 

begin
  Result:='RequestUserContext';
end;


Procedure TSPRequestUserContext.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPRequestUserContext.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSPRequestUserContext.Current(AService: TODataService) : TSPRequestUserContext; 


begin
  Result:=TSPRequestUserContext(GetContainedSingleTon(AService,'Current', TSPRequestUserContext));
end;


Function TSPRequestUserContext.User(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'User', TSPUser));
end;


{ --------------------------------------------------------------------
  TSPSiteUrl
  --------------------------------------------------------------------}


Class Function TSPSiteUrl.ObjectRestKind : String; 

begin
  Result:='SiteUrl';
end;


Procedure TSPSiteUrl.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPSiteUrl.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPTenantAppInstance
  --------------------------------------------------------------------}


Class Function TSPTenantAppInstance.ObjectRestKind : String; 

begin
  Result:='TenantAppInstance';
end;


Procedure TSPTenantAppInstance.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInstance.SetSiteId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPTenantAppInstance.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPTenantAppInstance.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSPWebProxy
  --------------------------------------------------------------------}


Class Function TSPWebProxy.ObjectRestKind : String; 

begin
  Result:='WebProxy';
end;


Procedure TSPWebProxy.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPWebProxy.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPWebTemplate
  --------------------------------------------------------------------}


Class Function TSPWebTemplate.ObjectRestKind : String; 

begin
  Result:='WebTemplate';
end;


Procedure TSPWebTemplate.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetDisplayCategory(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayCategory=AValue) then exit;
  FDisplayCategory:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetIsHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsHidden=AValue) then exit;
  FIsHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetIsRootWebOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRootWebOnly=AValue) then exit;
  FIsRootWebOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetIsSubWebOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSubWebOnly=AValue) then exit;
  FIsSubWebOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetLcid(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLcid=AValue) then exit;
  FLcid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSPWebTemplate.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPWebTemplate.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSPTenantAppUtility
  --------------------------------------------------------------------}


Class Function TSPTenantAppUtility.ObjectRestKind : String; 

begin
  Result:='TenantAppUtility';
end;


Procedure TSPTenantAppUtility.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPTenantAppUtility.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPTenantSettings
  --------------------------------------------------------------------}


Class Function TSPTenantSettings.ObjectRestKind : String; 

begin
  Result:='TenantSettings';
end;


Procedure TSPTenantSettings.SetCorporateCatalogUrl(AIndex: Integer; const AValue: string); 


begin
  If (FCorporateCatalogUrl=AValue) then exit;
  FCorporateCatalogUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPTenantSettings.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(CorporateCatalogUrl);
end;


Function TSPTenantSettings.Current(AService: TODataService) : TSPTenantSettings; 


begin
  Result:=TSPTenantSettings(GetContainedSingleTon(AService,'Current', TSPTenantSettings));
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalIdentityProvider
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalIdentityProvider.ObjectRestKind : String; 

begin
  Result:='AppPrincipalIdentityProvider';
end;


Procedure TSPAppPrincipalIdentityProvider.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppPrincipalIdentityProvider.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSPAppPrincipalIdentityProvider.External(AService: TODataService) : TSPAppPrincipalIdentityProvider; 


begin
  Result:=TSPAppPrincipalIdentityProvider(GetContainedSingleTon(AService,'External', TSPAppPrincipalIdentityProvider));
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalManager
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalManager.ObjectRestKind : String; 

begin
  Result:='AppPrincipalManager';
end;


Procedure TSPAppPrincipalManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppPrincipalManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalCredential
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalCredential.ObjectRestKind : String; 

begin
  Result:='AppPrincipalCredential';
end;


Procedure TSPAppPrincipalCredential.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppPrincipalCredential.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalName
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalName.ObjectRestKind : String; 

begin
  Result:='AppPrincipalName';
end;


Procedure TSPAppPrincipalName.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPAppPrincipalName.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMS_AppDataExternalEntityItemValue
  --------------------------------------------------------------------}


Class Function TMS_AppDataExternalEntityItemValue.ObjectRestKind : String; 

begin
  Result:='ExternalEntityItemValue';
end;


Procedure TMS_AppDataExternalEntityItemValue.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataDocumentEntityItemValue
  --------------------------------------------------------------------}


Class Function TMS_AppDataDocumentEntityItemValue.ObjectRestKind : String; 

begin
  Result:='DocumentEntityItemValue';
end;


Procedure TMS_AppDataDocumentEntityItemValue.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataDocumentEntityItemValue.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataDocumentEntityItemValue.SetPreviewFrameUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPreviewFrameUrl=AValue) then exit;
  FPreviewFrameUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataDocumentEntityItemValue.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataEntityItemValue
  --------------------------------------------------------------------}


Class Function TMS_AppDataEntityItemValue.ObjectRestKind : String; 

begin
  Result:='EntityItemValue';
end;


Procedure TMS_AppDataEntityItemValue.SetFieldValues(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FFieldValues=AValue) then exit;
  FFieldValues:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataEntityItemValue.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMS_AppDataEntityItemValue.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'fieldvalues' : SetLength(FFieldValues,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMS_AppDataEntityTypeCreationInformation
  --------------------------------------------------------------------}


Class Function TMS_AppDataEntityTypeCreationInformation.ObjectRestKind : String; 

begin
  Result:='EntityTypeCreationInformation';
end;


Procedure TMS_AppDataEntityTypeCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataEntityTypeCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataExternalEntityTypeCreationInformation
  --------------------------------------------------------------------}


Class Function TMS_AppDataExternalEntityTypeCreationInformation.ObjectRestKind : String; 

begin
  Result:='ExternalEntityTypeCreationInformation';
end;


Procedure TMS_AppDataExternalEntityTypeCreationInformation.SetKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FKind=AValue) then exit;
  FKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataExternalEntityTypeCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataExternalEntityTypeCreationInformation.SetProperties(AIndex: Integer; const AValue: string); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataExternalEntityTypeCreationInformation.SetServiceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServiceUrl=AValue) then exit;
  FServiceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataExternalEntityTypeCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataFieldCreationInformation
  --------------------------------------------------------------------}


Class Function TMS_AppDataFieldCreationInformation.ObjectRestKind : String; 

begin
  Result:='FieldCreationInformation';
end;


Procedure TMS_AppDataFieldCreationInformation.SetExternalServiceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FExternalServiceUrl=AValue) then exit;
  FExternalServiceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataFieldCreationInformation.SetFieldType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldType=AValue) then exit;
  FFieldType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataFieldCreationInformation.SetLookupTargetEntityTypeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupTargetEntityTypeId=AValue) then exit;
  FLookupTargetEntityTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataFieldCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataFieldCreationInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataItemQuery
  --------------------------------------------------------------------}


Class Function TMS_AppDataItemQuery.ObjectRestKind : String; 

begin
  Result:='ItemQuery';
end;


Procedure TMS_AppDataItemQuery.SetExpand(AIndex: Integer; const AValue: string); 


begin
  If (FExpand=AValue) then exit;
  FExpand:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataItemQuery.SetSelect(AIndex: Integer; const AValue: string); 


begin
  If (FSelect=AValue) then exit;
  FSelect:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataItemCollectionQuery
  --------------------------------------------------------------------}


Class Function TMS_AppDataItemCollectionQuery.ObjectRestKind : String; 

begin
  Result:='ItemCollectionQuery';
end;


Procedure TMS_AppDataItemCollectionQuery.SetFilter(AIndex: Integer; const AValue: string); 


begin
  If (FFilter=AValue) then exit;
  FFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataItemCollectionQuery.SetIncludeAllItemsCount(AIndex: Integer; const AValue: boolean); 


begin
  If (FIncludeAllItemsCount=AValue) then exit;
  FIncludeAllItemsCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataItemCollectionQuery.SetOrderBy(AIndex: Integer; const AValue: string); 


begin
  If (FOrderBy=AValue) then exit;
  FOrderBy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataItemCollectionQuery.SetSkip(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSkip=AValue) then exit;
  FSkip:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataItemCollectionQuery.SetTop(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTop=AValue) then exit;
  FTop:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataUrlFieldValue
  --------------------------------------------------------------------}


Class Function TMS_AppDataUrlFieldValue.ObjectRestKind : String; 

begin
  Result:='UrlFieldValue';
end;


Procedure TMS_AppDataUrlFieldValue.SetText(AIndex: Integer; const AValue: string); 


begin
  If (FText=AValue) then exit;
  FText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUrlFieldValue.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataUserEntityItemValue
  --------------------------------------------------------------------}


Class Function TMS_AppDataUserEntityItemValue.ObjectRestKind : String; 

begin
  Result:='UserEntityItemValue';
end;


Procedure TMS_AppDataUserEntityItemValue.SetDepartment(AIndex: Integer; const AValue: string); 


begin
  If (FDepartment=AValue) then exit;
  FDepartment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetJobTitle(AIndex: Integer; const AValue: string); 


begin
  If (FJobTitle=AValue) then exit;
  FJobTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetMobilePhone(AIndex: Integer; const AValue: string); 


begin
  If (FMobilePhone=AValue) then exit;
  FMobilePhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetPhone(AIndex: Integer; const AValue: string); 


begin
  If (FPhone=AValue) then exit;
  FPhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetPrincipleType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipleType=AValue) then exit;
  FPrincipleType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataUserEntityItemValue.SetSipAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSipAddress=AValue) then exit;
  FSipAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataApp
  --------------------------------------------------------------------}


Class Function TMS_AppDataApp.ObjectRestKind : String; 

begin
  Result:='App';
end;


Procedure TMS_AppDataApp.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataApp.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_AppDataApp.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TMS_AppDataApp.EntityTypes(AService: TODataService) : TMS_AppDataEntityType; 


begin
  Result:=TMS_AppDataEntityType(GetContainedSingleTon(AService,'EntityTypes', TMS_AppDataEntityType));
end;


Function TMS_AppDataApp.ExternalEntityTypes(AService: TODataService) : TMS_AppDataExternalEntityType; 


begin
  Result:=TMS_AppDataExternalEntityType(GetContainedSingleTon(AService,'ExternalEntityTypes', TMS_AppDataExternalEntityType));
end;


{ --------------------------------------------------------------------
  TMS_AppDataEntityTypeBase
  --------------------------------------------------------------------}


Class Function TMS_AppDataEntityTypeBase.ObjectRestKind : String; 

begin
  Result:='EntityTypeBase';
end;


Procedure TMS_AppDataEntityTypeBase.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataEntityTypeBase.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_AppDataEntityTypeBase.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TMS_AppDataEntityTypeBase.Fields(AService: TODataService) : TMS_AppDataField; 


begin
  Result:=TMS_AppDataField(GetContainedSingleTon(AService,'Fields', TMS_AppDataField));
end;


{ --------------------------------------------------------------------
  TMS_AppDataField
  --------------------------------------------------------------------}


Class Function TMS_AppDataField.ObjectRestKind : String; 

begin
  Result:='Field';
end;


Procedure TMS_AppDataField.SetExternalServiceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FExternalServiceUrl=AValue) then exit;
  FExternalServiceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetFieldType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldType=AValue) then exit;
  FFieldType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetLookupTargetAppId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupTargetAppId=AValue) then exit;
  FLookupTargetAppId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetLookupTargetEntityTypeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupTargetEntityTypeId=AValue) then exit;
  FLookupTargetEntityTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetSystemField(AIndex: Integer; const AValue: boolean); 


begin
  If (FSystemField=AValue) then exit;
  FSystemField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataField.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMS_AppDataField.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMS_AppDataField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TMS_AppDataEntityType
  --------------------------------------------------------------------}


Class Function TMS_AppDataEntityType.ObjectRestKind : String; 

begin
  Result:='EntityType';
end;


Procedure TMS_AppDataEntityType.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_AppDataEntityType.Items(AService: TODataService) : TMS_AppDataEntityItem; 


begin
  Result:=TMS_AppDataEntityItem(GetContainedSingleTon(AService,'Items', TMS_AppDataEntityItem));
end;


{ --------------------------------------------------------------------
  TMS_AppDataEntityItem
  --------------------------------------------------------------------}


Class Function TMS_AppDataEntityItem.ObjectRestKind : String; 

begin
  Result:='EntityItem';
end;


Procedure TMS_AppDataEntityItem.SetETag(AIndex: Integer; const AValue: string); 


begin
  If (FETag=AValue) then exit;
  FETag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataEntityItem.SetFieldValues(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FFieldValues=AValue) then exit;
  FFieldValues:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataEntityItem.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMS_AppDataEntityItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'fieldvalues' : SetLength(FFieldValues,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMS_AppDataEntityItem.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TMS_AppDataExternalEntityType
  --------------------------------------------------------------------}


Class Function TMS_AppDataExternalEntityType.ObjectRestKind : String; 

begin
  Result:='ExternalEntityType';
end;


Procedure TMS_AppDataExternalEntityType.SetKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FKind=AValue) then exit;
  FKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_AppDataExternalEntityType.SetServiceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServiceUrl=AValue) then exit;
  FServiceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_AppDataStoreContextBase
  --------------------------------------------------------------------}


Class Function TMS_AppDataStoreContextBase.ObjectRestKind : String; 

begin
  Result:='StoreContextBase';
end;


Procedure TMS_AppDataStoreContextBase.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_AppDataStoreContextBase.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMS_AppDataODataStoreContext
  --------------------------------------------------------------------}


Class Function TMS_AppDataODataStoreContext.ObjectRestKind : String; 

begin
  Result:='ODataStoreContext';
end;


{ --------------------------------------------------------------------
  TMS_AppDataRequestContext
  --------------------------------------------------------------------}


Class Function TMS_AppDataRequestContext.ObjectRestKind : String; 

begin
  Result:='RequestContext';
end;


Procedure TMS_AppDataRequestContext.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_AppDataRequestContext.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TMS_AppDataRequestContext.App(AService: TODataService) : TMS_AppDataApp; 


begin
  Result:=TMS_AppDataApp(GetContainedSingleTon(AService,'App', TMS_AppDataApp));
end;


Function TMS_AppDataRequestContext.Current(AService: TODataService) : TMS_AppDataRequestContext; 


begin
  Result:=TMS_AppDataRequestContext(GetContainedSingleTon(AService,'Current', TMS_AppDataRequestContext));
end;


{ --------------------------------------------------------------------
  TMS_AppDataSqlStoreContext
  --------------------------------------------------------------------}


Class Function TMS_AppDataSqlStoreContext.ObjectRestKind : String; 

begin
  Result:='SqlStoreContext';
end;


{ --------------------------------------------------------------------
  TSP_DirectoryLinkRequestSchema
  --------------------------------------------------------------------}


Class Function TSP_DirectoryLinkRequestSchema.ObjectRestKind : String; 

begin
  Result:='LinkRequestSchema';
end;


Procedure TSP_DirectoryLinkRequestSchema.SetCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCount=AValue) then exit;
  FCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryLinkRequestSchema.SetIncludeTotalCount(AIndex: Integer; const AValue: boolean); 


begin
  If (FIncludeTotalCount=AValue) then exit;
  FIncludeTotalCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryLinkRequestSchema.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryLinkRequestSchema.SetOffset(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOffset=AValue) then exit;
  FOffset:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryDirectorySession
  --------------------------------------------------------------------}


Class Function TSP_DirectoryDirectorySession.ObjectRestKind : String; 

begin
  Result:='DirectorySession';
end;


Procedure TSP_DirectoryDirectorySession.SetSessionOptions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSessionOptions=AValue) then exit;
  FSessionOptions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectoryDirectorySession.KeyAsURLPart : string;

begin
  Result:=IntToStr(SessionOptions);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryGroupAndUserStatus
  --------------------------------------------------------------------}


Class Function TSP_DirectoryGroupAndUserStatus.ObjectRestKind : String; 

begin
  Result:='GroupAndUserStatus';
end;


Procedure TSP_DirectoryGroupAndUserStatus.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectoryGroupAndUserStatus.KeyAsURLPart : string;

begin
  Result:=IntToStr(Status);
end;


Function TSP_DirectoryGroupAndUserStatus.Group(AService: TODataService) : TSP_DirectoryGroup; 


begin
  Result:=TSP_DirectoryGroup(GetContainedSingleTon(AService,'Group', TSP_DirectoryGroup));
end;


{ --------------------------------------------------------------------
  TSP_DirectoryGroup
  --------------------------------------------------------------------}


Class Function TSP_DirectoryGroup.ObjectRestKind : String; 

begin
  Result:='Group';
end;


Procedure TSP_DirectoryGroup.SetAlias(AIndex: Integer; const AValue: string); 


begin
  If (FAlias=AValue) then exit;
  FAlias:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetCalendarUrl(AIndex: Integer; const AValue: string); 


begin
  If (FCalendarUrl=AValue) then exit;
  FCalendarUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetDirectoryObjectType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDirectoryObjectType=AValue) then exit;
  FDirectoryObjectType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetDocumentsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDocumentsUrl=AValue) then exit;
  FDocumentsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetEditGroupUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEditGroupUrl=AValue) then exit;
  FEditGroupUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetInboxUrl(AIndex: Integer; const AValue: string); 


begin
  If (FInboxUrl=AValue) then exit;
  FInboxUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetIsPublic(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPublic=AValue) then exit;
  FIsPublic:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetPeopleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPeopleUrl=AValue) then exit;
  FPeopleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetPrincipalName(AIndex: Integer; const AValue: string); 


begin
  If (FPrincipalName=AValue) then exit;
  FPrincipalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryGroup.SetSiteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSiteUrl=AValue) then exit;
  FSiteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectoryGroup.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSP_DirectoryGroup.Members(AService: TODataService) : TSP_DirectoryLinkCollection; 


begin
  Result:=TSP_DirectoryLinkCollection(GetContainedSingleTon(AService,'Members', TSP_DirectoryLinkCollection));
end;


Function TSP_DirectoryGroup.Owners(AService: TODataService) : TSP_DirectoryLinkCollection; 


begin
  Result:=TSP_DirectoryLinkCollection(GetContainedSingleTon(AService,'Owners', TSP_DirectoryLinkCollection));
end;


{ --------------------------------------------------------------------
  TSP_DirectoryLinkCollection
  --------------------------------------------------------------------}


Class Function TSP_DirectoryLinkCollection.ObjectRestKind : String; 

begin
  Result:='LinkCollection';
end;


Procedure TSP_DirectoryLinkCollection.SetCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCount=AValue) then exit;
  FCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryLinkCollection.SetOffset(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOffset=AValue) then exit;
  FOffset:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryLinkCollection.SetTotalCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalCount=AValue) then exit;
  FTotalCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectoryLinkCollection.KeyAsURLPart : string;

begin
  Result:=IntToStr(Count);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryMembershipResult
  --------------------------------------------------------------------}


Class Function TSP_DirectoryMembershipResult.ObjectRestKind : String; 

begin
  Result:='MembershipResult';
end;


Procedure TSP_DirectoryMembershipResult.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryMembershipResult.SetGroupsList(AIndex: Integer; const AValue: TGuidStringArray); 


begin
  If (FGroupsList=AValue) then exit;
  FGroupsList:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DirectoryMembershipResult.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'groupslist' : SetLength(FGroupsList,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DirectoryMembershipResult.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryMembersInfo
  --------------------------------------------------------------------}


Class Function TSP_DirectoryMembersInfo.ObjectRestKind : String; 

begin
  Result:='MembersInfo';
end;


Procedure TSP_DirectoryMembersInfo.SetMemberNames(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FMemberNames=AValue) then exit;
  FMemberNames:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryMembersInfo.SetTotalCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalCount=AValue) then exit;
  FTotalCount:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DirectoryMembersInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'membernames' : SetLength(FMemberNames,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DirectoryMembersInfo.KeyAsURLPart : string;

begin
  Result:=IntToStr(TotalCount);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryMyGroupsResult
  --------------------------------------------------------------------}


Class Function TSP_DirectoryMyGroupsResult.ObjectRestKind : String; 

begin
  Result:='MyGroupsResult';
end;


Procedure TSP_DirectoryMyGroupsResult.SetHasNext(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasNext=AValue) then exit;
  FHasNext:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryMyGroupsResult.SetHasPrev(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasPrev=AValue) then exit;
  FHasPrev:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectoryMyGroupsResult.KeyAsURLPart : string;

begin
  Result:=BoolToStr(HasNext,'true','false');
end;


{ --------------------------------------------------------------------
  TSP_DirectoryPropertyDictionary
  --------------------------------------------------------------------}


Class Function TSP_DirectoryPropertyDictionary.ObjectRestKind : String; 

begin
  Result:='PropertyDictionary';
end;


Procedure TSP_DirectoryPropertyDictionary.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectoryPropertyDictionary.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_Directory_Property
  --------------------------------------------------------------------}


Class Function TSP_Directory_Property.ObjectRestKind : String; 

begin
  Result:='Property';
end;


Procedure TSP_Directory_Property.SetIsInitialized(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsInitialized=AValue) then exit;
  FIsInitialized:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_Property.SetIsModified(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsModified=AValue) then exit;
  FIsModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_Property.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_Property.SetValue(AIndex: Integer; const AValue: string); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_Directory_Property.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_DirectorySPHelper
  --------------------------------------------------------------------}


Class Function TSP_DirectorySPHelper.ObjectRestKind : String; 

begin
  Result:='SPHelper';
end;


Procedure TSP_DirectorySPHelper.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DirectorySPHelper.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryUserRequestSchema
  --------------------------------------------------------------------}


Class Function TSP_DirectoryUserRequestSchema.ObjectRestKind : String; 

begin
  Result:='UserRequestSchema';
end;


Procedure TSP_DirectoryUserRequestSchema.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUserRequestSchema.SetLinks(AIndex: Integer; const AValue: TSP_DirectoryLinkRequestSchemaArray); 


begin
  If (FLinks=AValue) then exit;
  FLinks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUserRequestSchema.SetProperties(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUserRequestSchema.SetResources(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FResources=AValue) then exit;
  FResources:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DirectoryUserRequestSchema.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'links' : SetLength(FLinks,aLength);
  'properties' : SetLength(FProperties,aLength);
  'resources' : SetLength(FResources,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DirectoryUserRequestSchema.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_DirectoryUser
  --------------------------------------------------------------------}


Class Function TSP_DirectoryUser.ObjectRestKind : String; 

begin
  Result:='User';
end;


Procedure TSP_DirectoryUser.SetAboutMe(AIndex: Integer; const AValue: string); 


begin
  If (FAboutMe=AValue) then exit;
  FAboutMe:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetAlias(AIndex: Integer; const AValue: string); 


begin
  If (FAlias=AValue) then exit;
  FAlias:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetBirthday(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FBirthday=AValue) then exit;
  FBirthday:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetHireDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FHireDate=AValue) then exit;
  FHireDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetInterests(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FInterests=AValue) then exit;
  FInterests:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetMail(AIndex: Integer; const AValue: string); 


begin
  If (FMail=AValue) then exit;
  FMail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetMySite(AIndex: Integer; const AValue: string); 


begin
  If (FMySite=AValue) then exit;
  FMySite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetPastProjects(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FPastProjects=AValue) then exit;
  FPastProjects:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetPreferredName(AIndex: Integer; const AValue: string); 


begin
  If (FPreferredName=AValue) then exit;
  FPreferredName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetPrincipalName(AIndex: Integer; const AValue: string); 


begin
  If (FPrincipalName=AValue) then exit;
  FPrincipalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetResponsibilities(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FResponsibilities=AValue) then exit;
  FResponsibilities:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetSchools(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSchools=AValue) then exit;
  FSchools:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetSkills(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSkills=AValue) then exit;
  FSkills:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DirectoryUser.SetTags(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FTags=AValue) then exit;
  FTags:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DirectoryUser.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'interests' : SetLength(FInterests,aLength);
  'pastprojects' : SetLength(FPastProjects,aLength);
  'responsibilities' : SetLength(FResponsibilities,aLength);
  'schools' : SetLength(FSchools,aLength);
  'skills' : SetLength(FSkills,aLength);
  'tags' : SetLength(FTags,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DirectoryUser.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSP_DirectoryUser.Properties(AService: TODataService) : TSP_DirectoryPropertyDictionary; 


begin
  Result:=TSP_DirectoryPropertyDictionary(GetContainedSingleTon(AService,'Properties', TSP_DirectoryPropertyDictionary));
end;


{ --------------------------------------------------------------------
  TMS_FileServicesUserInformation
  --------------------------------------------------------------------}


Class Function TMS_FileServicesUserInformation.ObjectRestKind : String; 

begin
  Result:='UserInformation';
end;


Procedure TMS_FileServicesUserInformation.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesUserInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesUserInformation.SetPuid(AIndex: Integer; const AValue: string); 


begin
  If (FPuid=AValue) then exit;
  FPuid:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMS_FileServicesFileSystemItem
  --------------------------------------------------------------------}


Class Function TMS_FileServicesFileSystemItem.ObjectRestKind : String; 

begin
  Result:='FileSystemItem';
end;


Procedure TMS_FileServicesFileSystemItem.SetCreatedBy(AIndex: Integer; const AValue: TMS_FileServicesUserInformation); 


begin
  If (FCreatedBy=AValue) then exit;
  FCreatedBy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetETag(AIndex: Integer; const AValue: string); 


begin
  If (FETag=AValue) then exit;
  FETag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetLastModifiedBy(AIndex: Integer; const AValue: TMS_FileServicesUserInformation); 


begin
  If (FLastModifiedBy=AValue) then exit;
  FLastModifiedBy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetSize(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSize=AValue) then exit;
  FSize:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetTimeCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeCreated=AValue) then exit;
  FTimeCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetTimeLastModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeLastModified=AValue) then exit;
  FTimeLastModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMS_FileServicesFileSystemItem.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_FileServicesFileSystemItem.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TMS_FileServices_File
  --------------------------------------------------------------------}


Class Function TMS_FileServices_File.ObjectRestKind : String; 

begin
  Result:='File';
end;


{ --------------------------------------------------------------------
  TMS_FileServicesFileService
  --------------------------------------------------------------------}


Class Function TMS_FileServicesFileService.ObjectRestKind : String; 

begin
  Result:='FileService';
end;


Procedure TMS_FileServicesFileService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_FileServicesFileService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMS_FileServicesFolder
  --------------------------------------------------------------------}


Class Function TMS_FileServicesFolder.ObjectRestKind : String; 

begin
  Result:='Folder';
end;


Procedure TMS_FileServicesFolder.SetChildrenCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FChildrenCount=AValue) then exit;
  FChildrenCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_FileServicesFolder.Children(AService: TODataService) : TMS_FileServicesFileSystemItem; 


begin
  Result:=TMS_FileServicesFileSystemItem(GetContainedSingleTon(AService,'Children', TMS_FileServicesFileSystemItem));
end;


{ --------------------------------------------------------------------
  TMS_FileServicesMeFileService
  --------------------------------------------------------------------}


Class Function TMS_FileServicesMeFileService.ObjectRestKind : String; 

begin
  Result:='MeFileService';
end;


Procedure TMS_FileServicesMeFileService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMS_FileServicesMeFileService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderDirectoryObjectData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderDirectoryObjectData.ObjectRestKind : String; 

begin
  Result:='DirectoryObjectData';
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetChangeMarker(AIndex: Integer; const AValue: string); 


begin
  If (FChangeMarker=AValue) then exit;
  FChangeMarker:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetDirectoryObjectSubType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDirectoryObjectSubType=AValue) then exit;
  FDirectoryObjectSubType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetDirectoryObjectType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDirectoryObjectType=AValue) then exit;
  FDirectoryObjectType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetIsNew(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsNew=AValue) then exit;
  FIsNew:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetLastModifiedTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastModifiedTime=AValue) then exit;
  FLastModifiedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetTenantContextId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTenantContextId=AValue) then exit;
  FTenantContextId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderDirectoryObjectData.SetVersion(AIndex: Integer; const AValue: int64); 


begin
  If (FVersion=AValue) then exit;
  FVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderSchemaData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderSchemaData.ObjectRestKind : String; 

begin
  Result:='SchemaData';
end;


Procedure TSP_Directory_ProviderSchemaData.SetDelayLoad(AIndex: Integer; const AValue: boolean); 


begin
  If (FDelayLoad=AValue) then exit;
  FDelayLoad:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderSchemaData.SetIsInitialized(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsInitialized=AValue) then exit;
  FIsInitialized:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderSchemaData.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderSchemaData.SetPrivacy(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrivacy=AValue) then exit;
  FPrivacy:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderPropertyData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderPropertyData.ObjectRestKind : String; 

begin
  Result:='PropertyData';
end;


Procedure TSP_Directory_ProviderPropertyData.SetValue(AIndex: Integer; const AValue: TBinary); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderRelationData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderRelationData.ObjectRestKind : String; 

begin
  Result:='RelationData';
end;


Procedure TSP_Directory_ProviderRelationData.SetValue(AIndex: Integer; const AValue: TBinary); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderRelationSetData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderRelationSetData.ObjectRestKind : String; 

begin
  Result:='RelationSetData';
end;


Procedure TSP_Directory_ProviderRelationSetData.SetTotalCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalCount=AValue) then exit;
  FTotalCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderResourceData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderResourceData.ObjectRestKind : String; 

begin
  Result:='ResourceData';
end;


Procedure TSP_Directory_ProviderResourceData.SetErrorCode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FErrorCode=AValue) then exit;
  FErrorCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderResourceData.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderResourceData.SetState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FState=AValue) then exit;
  FState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderResourceData.SetValue(AIndex: Integer; const AValue: TBinary); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderStateData
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderStateData.ObjectRestKind : String; 

begin
  Result:='StateData';
end;


Procedure TSP_Directory_ProviderStateData.SetAdapterName(AIndex: Integer; const AValue: string); 


begin
  If (FAdapterName=AValue) then exit;
  FAdapterName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_Directory_ProviderStateData.SetValue(AIndex: Integer; const AValue: TBinary); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_Directory_ProviderSharePointDirectoryProvider
  --------------------------------------------------------------------}


Class Function TSP_Directory_ProviderSharePointDirectoryProvider.ObjectRestKind : String; 

begin
  Result:='SharePointDirectoryProvider';
end;


Procedure TSP_Directory_ProviderSharePointDirectoryProvider.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_Directory_ProviderSharePointDirectoryProvider.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicroBlogEntityCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicroBlogEntityCollection.ObjectRestKind : String; 

begin
  Result:='MicroBlogEntityCollection';
end;


Procedure TSP_MicrofeedMicroBlogEntityCollection.SetItems(AIndex: Integer; const AValue: TSP_MicrofeedMicroBlogEntityArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicroBlogEntityCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicroBlogEntity
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicroBlogEntity.ObjectRestKind : String; 

begin
  Result:='MicroBlogEntity';
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetCanFollow(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanFollow=AValue) then exit;
  FCanFollow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetEntityType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEntityType=AValue) then exit;
  FEntityType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetEntityURI(AIndex: Integer; const AValue: string); 


begin
  If (FEntityURI=AValue) then exit;
  FEntityURI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetFollowedContentURI(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedContentURI=AValue) then exit;
  FFollowedContentURI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetIdentifier(AIndex: Integer; const AValue: string); 


begin
  If (FIdentifier=AValue) then exit;
  FIdentifier:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetIsFollowedByMe(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsFollowedByMe=AValue) then exit;
  FIsFollowedByMe:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetLatestPost(AIndex: Integer; const AValue: string); 


begin
  If (FLatestPost=AValue) then exit;
  FLatestPost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetLibraryName(AIndex: Integer; const AValue: string); 


begin
  If (FLibraryName=AValue) then exit;
  FLibraryName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetLibraryUri(AIndex: Integer; const AValue: string); 


begin
  If (FLibraryUri=AValue) then exit;
  FLibraryUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetPersonalURI(AIndex: Integer; const AValue: string); 


begin
  If (FPersonalURI=AValue) then exit;
  FPersonalURI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetPictureURI(AIndex: Integer; const AValue: string); 


begin
  If (FPictureURI=AValue) then exit;
  FPictureURI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicroBlogEntity.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostDefinition
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostDefinition.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostDefinition';
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCanDelete(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanDelete=AValue) then exit;
  FCanDelete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCanFollowUp(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanFollowUp=AValue) then exit;
  FCanFollowUp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCanHaveAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanHaveAttachments=AValue) then exit;
  FCanHaveAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCanLike(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLike=AValue) then exit;
  FCanLike:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCanLock(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLock=AValue) then exit;
  FCanLock:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCanReply(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanReply=AValue) then exit;
  FCanReply:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetCreationTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreationTime=AValue) then exit;
  FCreationTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetDefinitionId(AIndex: Integer; const AValue: int64); 


begin
  If (FDefinitionId=AValue) then exit;
  FDefinitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetDefinitionName(AIndex: Integer; const AValue: string); 


begin
  If (FDefinitionName=AValue) then exit;
  FDefinitionName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetDefinitionVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefinitionVersion=AValue) then exit;
  FDefinitionVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetEnablePeopleList(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnablePeopleList=AValue) then exit;
  FEnablePeopleList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetIsDefault(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDefault=AValue) then exit;
  FIsDefault:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetIsEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEnabled=AValue) then exit;
  FIsEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetIsNotification(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsNotification=AValue) then exit;
  FIsNotification:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetIsPrivate(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPrivate=AValue) then exit;
  FIsPrivate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetIsUserPost(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUserPost=AValue) then exit;
  FIsUserPost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetLastUpdateTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastUpdateTime=AValue) then exit;
  FLastUpdateTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetPartitionId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FPartitionId=AValue) then exit;
  FPartitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetPersistToCache(AIndex: Integer; const AValue: boolean); 


begin
  If (FPersistToCache=AValue) then exit;
  FPersistToCache:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetPersistToPrivateFolder(AIndex: Integer; const AValue: boolean); 


begin
  If (FPersistToPrivateFolder=AValue) then exit;
  FPersistToPrivateFolder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetPersistToPublishedFeed(AIndex: Integer; const AValue: boolean); 


begin
  If (FPersistToPublishedFeed=AValue) then exit;
  FPersistToPublishedFeed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetReferenceLikePostName(AIndex: Integer; const AValue: string); 


begin
  If (FReferenceLikePostName=AValue) then exit;
  FReferenceLikePostName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetReferenceMentionPostName(AIndex: Integer; const AValue: string); 


begin
  If (FReferenceMentionPostName=AValue) then exit;
  FReferenceMentionPostName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetReferenceReplyPostName(AIndex: Integer; const AValue: string); 


begin
  If (FReferenceReplyPostName=AValue) then exit;
  FReferenceReplyPostName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetRenderPostAuthorImage(AIndex: Integer; const AValue: boolean); 


begin
  If (FRenderPostAuthorImage=AValue) then exit;
  FRenderPostAuthorImage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetResourceFileName(AIndex: Integer; const AValue: string); 


begin
  If (FResourceFileName=AValue) then exit;
  FResourceFileName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetSecurityTrimContentUrl(AIndex: Integer; const AValue: boolean); 


begin
  If (FSecurityTrimContentUrl=AValue) then exit;
  FSecurityTrimContentUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostDefinition.SetSmallImageSizePreferred(AIndex: Integer; const AValue: boolean); 


begin
  If (FSmallImageSizePreferred=AValue) then exit;
  FSmallImageSizePreferred:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedDataLinkCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedDataLinkCollection.ObjectRestKind : String; 

begin
  Result:='MicrofeedDataLinkCollection';
end;


Procedure TSP_MicrofeedMicrofeedDataLinkCollection.SetItems(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedDataLinkArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedDataLinkCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedDataLink
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedDataLink.ObjectRestKind : String; 

begin
  Result:='MicrofeedDataLink';
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetDataLinkType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDataLinkType=AValue) then exit;
  FDataLinkType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetDateTimeValue(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDateTimeValue=AValue) then exit;
  FDateTimeValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetPlaceHolderName(AIndex: Integer; const AValue: string); 


begin
  If (FPlaceHolderName=AValue) then exit;
  FPlaceHolderName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetStringValue(AIndex: Integer; const AValue: string); 


begin
  If (FStringValue=AValue) then exit;
  FStringValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataLink.SetUriValue(AIndex: Integer; const AValue: string); 


begin
  If (FUriValue=AValue) then exit;
  FUriValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedDataQuery
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedDataQuery.ObjectRestKind : String; 

begin
  Result:='MicrofeedDataQuery';
end;


Procedure TSP_MicrofeedMicrofeedDataQuery.SetItemLimit(AIndex: Integer; const AValue: int64); 


begin
  If (FItemLimit=AValue) then exit;
  FItemLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataQuery.SetQuery(AIndex: Integer; const AValue: string); 


begin
  If (FQuery=AValue) then exit;
  FQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataQuery.SetViewFields(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FViewFields=AValue) then exit;
  FViewFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedDataQuery.SetViewFieldsOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FViewFieldsOnly=AValue) then exit;
  FViewFieldsOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedDataQuery.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'viewfields' : SetLength(FViewFields,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedLinkAction
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedLinkAction.ObjectRestKind : String; 

begin
  Result:='MicrofeedLinkAction';
end;


Procedure TSP_MicrofeedMicrofeedLinkAction.SetActionUri(AIndex: Integer; const AValue: string); 


begin
  If (FActionUri=AValue) then exit;
  FActionUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLinkAction.SetHeight(AIndex: Integer; const AValue: int64); 


begin
  If (FHeight=AValue) then exit;
  FHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLinkAction.SetKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FKind=AValue) then exit;
  FKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLinkAction.SetWidth(AIndex: Integer; const AValue: int64); 


begin
  If (FWidth=AValue) then exit;
  FWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedLink
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedLink.ObjectRestKind : String; 

begin
  Result:='MicrofeedLink';
end;


Procedure TSP_MicrofeedMicrofeedLink.SetClickAction(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedLinkAction); 


begin
  If (FClickAction=AValue) then exit;
  FClickAction:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetContentUri(AIndex: Integer; const AValue: string); 


begin
  If (FContentUri=AValue) then exit;
  FContentUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetHeight(AIndex: Integer; const AValue: int64); 


begin
  If (FHeight=AValue) then exit;
  FHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetHref(AIndex: Integer; const AValue: string); 


begin
  If (FHref=AValue) then exit;
  FHref:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.Set_Length(AIndex: Integer; const AValue: int64); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetLinkType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLinkType=AValue) then exit;
  FLinkType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetPreviewHeight(AIndex: Integer; const AValue: int64); 


begin
  If (FPreviewHeight=AValue) then exit;
  FPreviewHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetPreviewPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPreviewPictureUrl=AValue) then exit;
  FPreviewPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetPreviewWidth(AIndex: Integer; const AValue: int64); 


begin
  If (FPreviewWidth=AValue) then exit;
  FPreviewWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedLink.SetWidth(AIndex: Integer; const AValue: int64); 


begin
  If (FWidth=AValue) then exit;
  FWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSP_MicrofeedMicrofeedLink.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostCollection.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostCollection';
end;


Procedure TSP_MicrofeedMicrofeedPostCollection.SetItems(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedPostArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedPostCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPost
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPost.ObjectRestKind : String; 

begin
  Result:='MicrofeedPost';
end;


Procedure TSP_MicrofeedMicrofeedPost.SetAuthorIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorIndex=AValue) then exit;
  FAuthorIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetBreadCrumb(AIndex: Integer; const AValue: string); 


begin
  If (FBreadCrumb=AValue) then exit;
  FBreadCrumb:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCanDelete(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanDelete=AValue) then exit;
  FCanDelete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCanFollowUp(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanFollowUp=AValue) then exit;
  FCanFollowUp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCanHaveAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanHaveAttachments=AValue) then exit;
  FCanHaveAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCanLike(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLike=AValue) then exit;
  FCanLike:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCanLock(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLock=AValue) then exit;
  FCanLock:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCanReply(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanReply=AValue) then exit;
  FCanReply:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetContent(AIndex: Integer; const AValue: string); 


begin
  If (FContent=AValue) then exit;
  FContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetFooter(AIndex: Integer; const AValue: string); 


begin
  If (FFooter=AValue) then exit;
  FFooter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetID(AIndex: Integer; const AValue: string); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetILikeIt(AIndex: Integer; const AValue: boolean); 


begin
  If (FILikeIt=AValue) then exit;
  FILikeIt:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetLikersList(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FLikersList=AValue) then exit;
  FLikersList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetLocked(AIndex: Integer; const AValue: boolean); 


begin
  If (FLocked=AValue) then exit;
  FLocked:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetMediaLink(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedLink); 


begin
  If (FMediaLink=AValue) then exit;
  FMediaLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetMicroBlogType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMicroBlogType=AValue) then exit;
  FMicroBlogType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetPeopleCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPeopleCount=AValue) then exit;
  FPeopleCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetPostImageUri(AIndex: Integer; const AValue: string); 


begin
  If (FPostImageUri=AValue) then exit;
  FPostImageUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetPostSource(AIndex: Integer; const AValue: string); 


begin
  If (FPostSource=AValue) then exit;
  FPostSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetPostSourceUri(AIndex: Integer; const AValue: string); 


begin
  If (FPostSourceUri=AValue) then exit;
  FPostSourceUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetReferenceID(AIndex: Integer; const AValue: string); 


begin
  If (FReferenceID=AValue) then exit;
  FReferenceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetRenderPostAuthorImage(AIndex: Integer; const AValue: boolean); 


begin
  If (FRenderPostAuthorImage=AValue) then exit;
  FRenderPostAuthorImage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetReplyCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FReplyCount=AValue) then exit;
  FReplyCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetSmallImageSizePreferred(AIndex: Integer; const AValue: boolean); 


begin
  If (FSmallImageSizePreferred=AValue) then exit;
  FSmallImageSizePreferred:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPost.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedPost.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'likerslist' : SetLength(FLikersList,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostDefinitionNames
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostDefinitionNames.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostDefinitionNames';
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostDefinitionNameCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostDefinitionNameCollection.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostDefinitionNameCollection';
end;


Procedure TSP_MicrofeedMicrofeedPostDefinitionNameCollection.SetItems(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedPostDefinitionNameCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostOptions
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostOptions.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostOptions';
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetContent(AIndex: Integer; const AValue: string); 


begin
  If (FContent=AValue) then exit;
  FContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetContentFormattingOption(AIndex: Integer; const AValue: TInt32); 


begin
  If (FContentFormattingOption=AValue) then exit;
  FContentFormattingOption:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetDataLinks(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedDataLinkCollection); 


begin
  If (FDataLinks=AValue) then exit;
  FDataLinks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetDefinitionName(AIndex: Integer; const AValue: string); 


begin
  If (FDefinitionName=AValue) then exit;
  FDefinitionName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetMediaLink(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedLink); 


begin
  If (FMediaLink=AValue) then exit;
  FMediaLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetPeopleList(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FPeopleList=AValue) then exit;
  FPeopleList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetPostSource(AIndex: Integer; const AValue: string); 


begin
  If (FPostSource=AValue) then exit;
  FPostSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetPostSourceUri(AIndex: Integer; const AValue: string); 


begin
  If (FPostSourceUri=AValue) then exit;
  FPostSourceUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetRefThread_ReferenceID(AIndex: Integer; const AValue: string); 


begin
  If (FRefThread_ReferenceID=AValue) then exit;
  FRefThread_ReferenceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetRefThread_RefReply(AIndex: Integer; const AValue: string); 


begin
  If (FRefThread_RefReply=AValue) then exit;
  FRefThread_RefReply:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetRefThread_RefRoot(AIndex: Integer; const AValue: string); 


begin
  If (FRefThread_RefRoot=AValue) then exit;
  FRefThread_RefRoot:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetTargetActor(AIndex: Integer; const AValue: string); 


begin
  If (FTargetActor=AValue) then exit;
  FTargetActor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptions.SetUpdateStatusText(AIndex: Integer; const AValue: boolean); 


begin
  If (FUpdateStatusText=AValue) then exit;
  FUpdateStatusText:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedPostOptions.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'peoplelist' : SetLength(FPeopleList,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedRetrievalOptions
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedRetrievalOptions.ObjectRestKind : String; 

begin
  Result:='MicrofeedRetrievalOptions';
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetContentFormattingOption(AIndex: Integer; const AValue: TInt32); 


begin
  If (FContentFormattingOption=AValue) then exit;
  FContentFormattingOption:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetContentOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FContentOnly=AValue) then exit;
  FContentOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetDropAllSecurityTrimmablePosts(AIndex: Integer; const AValue: boolean); 


begin
  If (FDropAllSecurityTrimmablePosts=AValue) then exit;
  FDropAllSecurityTrimmablePosts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetGatherUnreadMentionCountForUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FGatherUnreadMentionCountForUser=AValue) then exit;
  FGatherUnreadMentionCountForUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetIncludedTypes(AIndex: Integer; const AValue: TInt32); 


begin
  If (FIncludedTypes=AValue) then exit;
  FIncludedTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetNewerThan(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FNewerThan=AValue) then exit;
  FNewerThan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetOlderThan(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FOlderThan=AValue) then exit;
  FOlderThan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetPostDefinitionFilter(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FPostDefinitionFilter=AValue) then exit;
  FPostDefinitionFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetResultSortOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FResultSortOrder=AValue) then exit;
  FResultSortOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetThreadCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FThreadCount=AValue) then exit;
  FThreadCount:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedRetrievalOptions.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'postdefinitionfilter' : SetLength(FPostDefinitionFilter,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedThreadCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedThreadCollection.ObjectRestKind : String; 

begin
  Result:='MicrofeedThreadCollection';
end;


Procedure TSP_MicrofeedMicrofeedThreadCollection.SetCurrentUserUnreadMentionCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrentUserUnreadMentionCount=AValue) then exit;
  FCurrentUserUnreadMentionCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThreadCollection.SetNewestProcessed(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FNewestProcessed=AValue) then exit;
  FNewestProcessed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThreadCollection.SetOldestProcessed(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FOldestProcessed=AValue) then exit;
  FOldestProcessed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThreadCollection.SetItems(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedThreadArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedThreadCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedThread
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedThread.ObjectRestKind : String; 

begin
  Result:='MicrofeedThread';
end;


Procedure TSP_MicrofeedMicrofeedThread.SetCanFollowUp(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanFollowUp=AValue) then exit;
  FCanFollowUp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetCanHaveAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanHaveAttachments=AValue) then exit;
  FCanHaveAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetCanLike(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLike=AValue) then exit;
  FCanLike:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetCanReply(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanReply=AValue) then exit;
  FCanReply:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetDataLinks(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedDataLinkArray); 


begin
  If (FDataLinks=AValue) then exit;
  FDataLinks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetDefinitionId(AIndex: Integer; const AValue: int64); 


begin
  If (FDefinitionId=AValue) then exit;
  FDefinitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetDefinitionName(AIndex: Integer; const AValue: string); 


begin
  If (FDefinitionName=AValue) then exit;
  FDefinitionName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetIdentifier(AIndex: Integer; const AValue: string); 


begin
  If (FIdentifier=AValue) then exit;
  FIdentifier:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetLocked(AIndex: Integer; const AValue: boolean); 


begin
  If (FLocked=AValue) then exit;
  FLocked:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetMicrofeedEntities(AIndex: Integer; const AValue: TSP_MicrofeedMicroBlogEntityArray); 


begin
  If (FMicrofeedEntities=AValue) then exit;
  FMicrofeedEntities:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetOwnerIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOwnerIndex=AValue) then exit;
  FOwnerIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetRefReply(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedPost); 


begin
  If (FRefReply=AValue) then exit;
  FRefReply:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetRefRoot(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedPost); 


begin
  If (FRefRoot=AValue) then exit;
  FRefRoot:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetRenderPostAuthorImage(AIndex: Integer; const AValue: boolean); 


begin
  If (FRenderPostAuthorImage=AValue) then exit;
  FRenderPostAuthorImage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetReplies(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedPostCollection); 


begin
  If (FReplies=AValue) then exit;
  FReplies:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetReplyCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FReplyCount=AValue) then exit;
  FReplyCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetRootPost(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedPost); 


begin
  If (FRootPost=AValue) then exit;
  FRootPost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetSmallImageSizePreferred(AIndex: Integer; const AValue: boolean); 


begin
  If (FSmallImageSizePreferred=AValue) then exit;
  FSmallImageSizePreferred:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedThread.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedThread.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'datalinks' : SetLength(FDataLinks,aLength);
  'microfeedentities' : SetLength(FMicrofeedEntities,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedUserPostCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedUserPostCollection.ObjectRestKind : String; 

begin
  Result:='MicrofeedUserPostCollection';
end;


Procedure TSP_MicrofeedMicrofeedUserPostCollection.SetItems(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedUserPostsArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedUserPostCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedUserPosts
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedUserPosts.ObjectRestKind : String; 

begin
  Result:='MicrofeedUserPosts';
end;


Procedure TSP_MicrofeedMicrofeedUserPosts.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostDefinitionManager
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostDefinitionManager.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostDefinitionManager';
end;


Procedure TSP_MicrofeedMicrofeedPostDefinitionManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_MicrofeedMicrofeedPostDefinitionManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedAttachmentStore
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedAttachmentStore.ObjectRestKind : String; 

begin
  Result:='MicrofeedAttachmentStore';
end;


Procedure TSP_MicrofeedMicrofeedAttachmentStore.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_MicrofeedMicrofeedAttachmentStore.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedData
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedData.ObjectRestKind : String; 

begin
  Result:='MicrofeedData';
end;


Procedure TSP_MicrofeedMicrofeedData.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedData.SetData(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FData=AValue) then exit;
  FData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedData.SetDefinitionId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefinitionId=AValue) then exit;
  FDefinitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedData.SetItemType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemType=AValue) then exit;
  FItemType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedData.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedData.SetTargetIdentifier(AIndex: Integer; const AValue: string); 


begin
  If (FTargetIdentifier=AValue) then exit;
  FTargetIdentifier:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedData.SetVersion(AIndex: Integer; const AValue: string); 


begin
  If (FVersion=AValue) then exit;
  FVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'data' : SetLength(FData,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_MicrofeedMicrofeedData.KeyAsURLPart : string;

begin
  Result:=FormatDateTime('yyyy-mm-dd"T"hhmmss',Created);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedManager
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedManager.ObjectRestKind : String; 

begin
  Result:='MicrofeedManager';
end;


Procedure TSP_MicrofeedMicrofeedManager.SetCurrentUser(AIndex: Integer; const AValue: TSP_MicrofeedMicroBlogEntity); 


begin
  If (FCurrentUser=AValue) then exit;
  FCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedManager.SetIsFeedActivityPublic(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsFeedActivityPublic=AValue) then exit;
  FIsFeedActivityPublic:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedManager.SetStaticThreadLink(AIndex: Integer; const AValue: string); 


begin
  If (FStaticThreadLink=AValue) then exit;
  FStaticThreadLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_MicrofeedMicrofeedManager.KeyAsURLPart : string;

begin
  Result:=BoolToStr(IsFeedActivityPublic,'true','false');
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedPostOptionCollection
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedPostOptionCollection.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostOptionCollection';
end;


Procedure TSP_MicrofeedMicrofeedPostOptionCollection.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_MicrofeedMicrofeedPostOptionCollection.SetItems(AIndex: Integer; const AValue: TSP_MicrofeedMicrofeedPostOptionsArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_MicrofeedMicrofeedPostOptionCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_MicrofeedMicrofeedPostOptionCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_MicrofeedMicrofeedStore
  --------------------------------------------------------------------}


Class Function TSP_MicrofeedMicrofeedStore.ObjectRestKind : String; 

begin
  Result:='MicrofeedStore';
end;


Procedure TSP_MicrofeedMicrofeedStore.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_MicrofeedMicrofeedStore.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialActorInfo
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialActorInfo.ObjectRestKind : String; 

begin
  Result:='SocialActorInfo';
end;


Procedure TSP_SocialSocialActorInfo.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActorInfo.SetActorType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActorType=AValue) then exit;
  FActorType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActorInfo.SetContentUri(AIndex: Integer; const AValue: string); 


begin
  If (FContentUri=AValue) then exit;
  FContentUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActorInfo.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActorInfo.SetTagGuid(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTagGuid=AValue) then exit;
  FTagGuid:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialActor
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialActor.ObjectRestKind : String; 

begin
  Result:='SocialActor';
end;


Procedure TSP_SocialSocialActor.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetActorType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActorType=AValue) then exit;
  FActorType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetCanFollow(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanFollow=AValue) then exit;
  FCanFollow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetContentUri(AIndex: Integer; const AValue: string); 


begin
  If (FContentUri=AValue) then exit;
  FContentUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetEmailAddress(AIndex: Integer; const AValue: string); 


begin
  If (FEmailAddress=AValue) then exit;
  FEmailAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetFollowedContentUri(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedContentUri=AValue) then exit;
  FFollowedContentUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetImageUri(AIndex: Integer; const AValue: string); 


begin
  If (FImageUri=AValue) then exit;
  FImageUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetIsFollowed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsFollowed=AValue) then exit;
  FIsFollowed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetLibraryUri(AIndex: Integer; const AValue: string); 


begin
  If (FLibraryUri=AValue) then exit;
  FLibraryUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetPersonalSiteUri(AIndex: Integer; const AValue: string); 


begin
  If (FPersonalSiteUri=AValue) then exit;
  FPersonalSiteUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetStatusText(AIndex: Integer; const AValue: string); 


begin
  If (FStatusText=AValue) then exit;
  FStatusText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetTagGuid(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTagGuid=AValue) then exit;
  FTagGuid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialActor.SetUri(AIndex: Integer; const AValue: string); 


begin
  If (FUri=AValue) then exit;
  FUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialAttachmentAction
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialAttachmentAction.ObjectRestKind : String; 

begin
  Result:='SocialAttachmentAction';
end;


Procedure TSP_SocialSocialAttachmentAction.SetActionKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActionKind=AValue) then exit;
  FActionKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachmentAction.SetActionUri(AIndex: Integer; const AValue: string); 


begin
  If (FActionUri=AValue) then exit;
  FActionUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachmentAction.SetHeight(AIndex: Integer; const AValue: int64); 


begin
  If (FHeight=AValue) then exit;
  FHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachmentAction.SetWidth(AIndex: Integer; const AValue: int64); 


begin
  If (FWidth=AValue) then exit;
  FWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialAttachment
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialAttachment.ObjectRestKind : String; 

begin
  Result:='SocialAttachment';
end;


Procedure TSP_SocialSocialAttachment.SetAttachmentKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAttachmentKind=AValue) then exit;
  FAttachmentKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetClickAction(AIndex: Integer; const AValue: TSP_SocialSocialAttachmentAction); 


begin
  If (FClickAction=AValue) then exit;
  FClickAction:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetContentUri(AIndex: Integer; const AValue: string); 


begin
  If (FContentUri=AValue) then exit;
  FContentUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetHeight(AIndex: Integer; const AValue: int64); 


begin
  If (FHeight=AValue) then exit;
  FHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.Set_Length(AIndex: Integer; const AValue: int64); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetPreviewHeight(AIndex: Integer; const AValue: int64); 


begin
  If (FPreviewHeight=AValue) then exit;
  FPreviewHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetPreviewUri(AIndex: Integer; const AValue: string); 


begin
  If (FPreviewUri=AValue) then exit;
  FPreviewUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetPreviewWidth(AIndex: Integer; const AValue: int64); 


begin
  If (FPreviewWidth=AValue) then exit;
  FPreviewWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetUri(AIndex: Integer; const AValue: string); 


begin
  If (FUri=AValue) then exit;
  FUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialAttachment.SetWidth(AIndex: Integer; const AValue: int64); 


begin
  If (FWidth=AValue) then exit;
  FWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSP_SocialSocialAttachment.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialDataItem
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialDataItem.ObjectRestKind : String; 

begin
  Result:='SocialDataItem';
end;


Procedure TSP_SocialSocialDataItem.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataItem.SetItemType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemType=AValue) then exit;
  FItemType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataItem.SetTagGuid(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTagGuid=AValue) then exit;
  FTagGuid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataItem.SetText(AIndex: Integer; const AValue: string); 


begin
  If (FText=AValue) then exit;
  FText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataItem.SetUri(AIndex: Integer; const AValue: string); 


begin
  If (FUri=AValue) then exit;
  FUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialDataOverlay
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialDataOverlay.ObjectRestKind : String; 

begin
  Result:='SocialDataOverlay';
end;


Procedure TSP_SocialSocialDataOverlay.SetActorIndexes(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FActorIndexes=AValue) then exit;
  FActorIndexes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataOverlay.SetIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FIndex=AValue) then exit;
  FIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataOverlay.Set_Length(AIndex: Integer; const AValue: TInt32); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataOverlay.SetLinkUri(AIndex: Integer; const AValue: string); 


begin
  If (FLinkUri=AValue) then exit;
  FLinkUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialDataOverlay.SetOverlayType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOverlayType=AValue) then exit;
  FOverlayType:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialDataOverlay.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'actorindexes' : SetLength(FActorIndexes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Class Function TSP_SocialSocialDataOverlay.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialExceptionDetails
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialExceptionDetails.ObjectRestKind : String; 

begin
  Result:='SocialExceptionDetails';
end;


Procedure TSP_SocialSocialExceptionDetails.SetInternalErrorCode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInternalErrorCode=AValue) then exit;
  FInternalErrorCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialExceptionDetails.SetInternalMessage(AIndex: Integer; const AValue: string); 


begin
  If (FInternalMessage=AValue) then exit;
  FInternalMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialExceptionDetails.SetInternalStackTrace(AIndex: Integer; const AValue: string); 


begin
  If (FInternalStackTrace=AValue) then exit;
  FInternalStackTrace:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialExceptionDetails.SetInternalTypeName(AIndex: Integer; const AValue: string); 


begin
  If (FInternalTypeName=AValue) then exit;
  FInternalTypeName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialExceptionDetails.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialFeedOptions
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialFeedOptions.ObjectRestKind : String; 

begin
  Result:='SocialFeedOptions';
end;


Procedure TSP_SocialSocialFeedOptions.SetMaxThreadCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMaxThreadCount=AValue) then exit;
  FMaxThreadCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeedOptions.SetNewerThan(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FNewerThan=AValue) then exit;
  FNewerThan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeedOptions.SetOlderThan(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FOlderThan=AValue) then exit;
  FOlderThan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeedOptions.SetSortOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSortOrder=AValue) then exit;
  FSortOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialFeed
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialFeed.ObjectRestKind : String; 

begin
  Result:='SocialFeed';
end;


Procedure TSP_SocialSocialFeed.SetAttributes(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAttributes=AValue) then exit;
  FAttributes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeed.SetNewestProcessed(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FNewestProcessed=AValue) then exit;
  FNewestProcessed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeed.SetOldestProcessed(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FOldestProcessed=AValue) then exit;
  FOldestProcessed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeed.SetThreads(AIndex: Integer; const AValue: TSP_SocialSocialThreadArray); 


begin
  If (FThreads=AValue) then exit;
  FThreads:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeed.SetUnreadMentionCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUnreadMentionCount=AValue) then exit;
  FUnreadMentionCount:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialFeed.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'threads' : SetLength(FThreads,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SocialSocialThread
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialThread.ObjectRestKind : String; 

begin
  Result:='SocialThread';
end;


Procedure TSP_SocialSocialThread.SetActors(AIndex: Integer; const AValue: TSP_SocialSocialActorArray); 


begin
  If (FActors=AValue) then exit;
  FActors:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetAttributes(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAttributes=AValue) then exit;
  FAttributes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetOwnerIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOwnerIndex=AValue) then exit;
  FOwnerIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetPermalink(AIndex: Integer; const AValue: string); 


begin
  If (FPermalink=AValue) then exit;
  FPermalink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetPostReference(AIndex: Integer; const AValue: TSP_SocialSocialPostReference); 


begin
  If (FPostReference=AValue) then exit;
  FPostReference:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetReplies(AIndex: Integer; const AValue: TSP_SocialSocialPostArray); 


begin
  If (FReplies=AValue) then exit;
  FReplies:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetRootPost(AIndex: Integer; const AValue: TSP_SocialSocialPost); 


begin
  If (FRootPost=AValue) then exit;
  FRootPost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetThreadType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FThreadType=AValue) then exit;
  FThreadType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialThread.SetTotalReplyCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalReplyCount=AValue) then exit;
  FTotalReplyCount:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialThread.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'actors' : SetLength(FActors,aLength);
  'replies' : SetLength(FReplies,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SocialSocialPostReference
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialPostReference.ObjectRestKind : String; 

begin
  Result:='SocialPostReference';
end;


Procedure TSP_SocialSocialPostReference.SetDigest(AIndex: Integer; const AValue: TSP_SocialSocialThread); 


begin
  If (FDigest=AValue) then exit;
  FDigest:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostReference.SetPost(AIndex: Integer; const AValue: TSP_SocialSocialPost); 


begin
  If (FPost=AValue) then exit;
  FPost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostReference.SetThreadId(AIndex: Integer; const AValue: string); 


begin
  If (FThreadId=AValue) then exit;
  FThreadId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostReference.SetThreadOwnerIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FThreadOwnerIndex=AValue) then exit;
  FThreadOwnerIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialPost
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialPost.ObjectRestKind : String; 

begin
  Result:='SocialPost';
end;


Procedure TSP_SocialSocialPost.SetAttachment(AIndex: Integer; const AValue: TSP_SocialSocialAttachment); 


begin
  If (FAttachment=AValue) then exit;
  FAttachment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetAttributes(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAttributes=AValue) then exit;
  FAttributes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetAuthorIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorIndex=AValue) then exit;
  FAuthorIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetCreatedTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreatedTime=AValue) then exit;
  FCreatedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetLikerInfo(AIndex: Integer; const AValue: TSP_SocialSocialPostActorInfo); 


begin
  If (FLikerInfo=AValue) then exit;
  FLikerInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetModifiedTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModifiedTime=AValue) then exit;
  FModifiedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetOverlays(AIndex: Integer; const AValue: TSP_SocialSocialDataOverlayArray); 


begin
  If (FOverlays=AValue) then exit;
  FOverlays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetPostType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPostType=AValue) then exit;
  FPostType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetPreferredImageUri(AIndex: Integer; const AValue: string); 


begin
  If (FPreferredImageUri=AValue) then exit;
  FPreferredImageUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetSource(AIndex: Integer; const AValue: TSP_SocialSocialLink); 


begin
  If (FSource=AValue) then exit;
  FSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPost.SetText(AIndex: Integer; const AValue: string); 


begin
  If (FText=AValue) then exit;
  FText:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialPost.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'overlays' : SetLength(FOverlays,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SocialSocialPostActorInfo
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialPostActorInfo.ObjectRestKind : String; 

begin
  Result:='SocialPostActorInfo';
end;


Procedure TSP_SocialSocialPostActorInfo.SetIncludesCurrentUser(AIndex: Integer; const AValue: boolean); 


begin
  If (FIncludesCurrentUser=AValue) then exit;
  FIncludesCurrentUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostActorInfo.SetIndexes(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FIndexes=AValue) then exit;
  FIndexes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostActorInfo.SetTotalCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalCount=AValue) then exit;
  FTotalCount:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialPostActorInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'indexes' : SetLength(FIndexes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SocialSocialLink
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialLink.ObjectRestKind : String; 

begin
  Result:='SocialLink';
end;


Procedure TSP_SocialSocialLink.SetText(AIndex: Integer; const AValue: string); 


begin
  If (FText=AValue) then exit;
  FText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialLink.SetUri(AIndex: Integer; const AValue: string); 


begin
  If (FUri=AValue) then exit;
  FUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialPostCreationData
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialPostCreationData.ObjectRestKind : String; 

begin
  Result:='SocialPostCreationData';
end;


Procedure TSP_SocialSocialPostCreationData.SetAttachment(AIndex: Integer; const AValue: TSP_SocialSocialAttachment); 


begin
  If (FAttachment=AValue) then exit;
  FAttachment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostCreationData.SetContentItems(AIndex: Integer; const AValue: TSP_SocialSocialDataItemArray); 


begin
  If (FContentItems=AValue) then exit;
  FContentItems:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostCreationData.SetContentText(AIndex: Integer; const AValue: string); 


begin
  If (FContentText=AValue) then exit;
  FContentText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostCreationData.SetDefinitionData(AIndex: Integer; const AValue: TSP_SocialSocialPostDefinitionData); 


begin
  If (FDefinitionData=AValue) then exit;
  FDefinitionData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostCreationData.SetSecurityUris(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSecurityUris=AValue) then exit;
  FSecurityUris:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostCreationData.SetSource(AIndex: Integer; const AValue: TSP_SocialSocialLink); 


begin
  If (FSource=AValue) then exit;
  FSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostCreationData.SetUpdateStatusText(AIndex: Integer; const AValue: boolean); 


begin
  If (FUpdateStatusText=AValue) then exit;
  FUpdateStatusText:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialPostCreationData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'contentitems' : SetLength(FContentItems,aLength);
  'securityuris' : SetLength(FSecurityUris,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SocialSocialPostDefinitionData
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialPostDefinitionData.ObjectRestKind : String; 

begin
  Result:='SocialPostDefinitionData';
end;


Procedure TSP_SocialSocialPostDefinitionData.SetItems(AIndex: Integer; const AValue: TSP_SocialSocialPostDefinitionDataItemArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostDefinitionData.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SocialSocialPostDefinitionData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SocialSocialPostDefinitionDataItem
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialPostDefinitionDataItem.ObjectRestKind : String; 

begin
  Result:='SocialPostDefinitionDataItem';
end;


Procedure TSP_SocialSocialPostDefinitionDataItem.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostDefinitionDataItem.SetItemType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemType=AValue) then exit;
  FItemType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostDefinitionDataItem.SetPlaceholderName(AIndex: Integer; const AValue: string); 


begin
  If (FPlaceholderName=AValue) then exit;
  FPlaceholderName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostDefinitionDataItem.SetTagGuid(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTagGuid=AValue) then exit;
  FTagGuid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostDefinitionDataItem.SetText(AIndex: Integer; const AValue: string); 


begin
  If (FText=AValue) then exit;
  FText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialPostDefinitionDataItem.SetUri(AIndex: Integer; const AValue: string); 


begin
  If (FUri=AValue) then exit;
  FUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialRestPostCreationData
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialRestPostCreationData.ObjectRestKind : String; 

begin
  Result:='SocialRestPostCreationData';
end;


Procedure TSP_SocialSocialRestPostCreationData.SetID(AIndex: Integer; const AValue: string); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestPostCreationData.SetcreationData(AIndex: Integer; const AValue: TSP_SocialSocialPostCreationData); 


begin
  If (FcreationData=AValue) then exit;
  FcreationData:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialAnnouncementManager
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialAnnouncementManager.ObjectRestKind : String; 

begin
  Result:='SocialAnnouncementManager';
end;


Procedure TSP_SocialSocialAnnouncementManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialAnnouncementManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialFeedManager
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialFeedManager.ObjectRestKind : String; 

begin
  Result:='SocialFeedManager';
end;


Procedure TSP_SocialSocialFeedManager.SetOwner(AIndex: Integer; const AValue: TSP_SocialSocialActor); 


begin
  If (FOwner=AValue) then exit;
  FOwner:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFeedManager.SetPersonalSitePortalUri(AIndex: Integer; const AValue: string); 


begin
  If (FPersonalSitePortalUri=AValue) then exit;
  FPersonalSitePortalUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialFeedManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(PersonalSitePortalUri);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialFollowingManager
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialFollowingManager.ObjectRestKind : String; 

begin
  Result:='SocialFollowingManager';
end;


Procedure TSP_SocialSocialFollowingManager.SetFollowedDocumentsUri(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedDocumentsUri=AValue) then exit;
  FFollowedDocumentsUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialFollowingManager.SetFollowedSitesUri(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedSitesUri=AValue) then exit;
  FFollowedSitesUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialFollowingManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FollowedDocumentsUri);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialRestActor
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialRestActor.ObjectRestKind : String; 

begin
  Result:='SocialRestActor';
end;


Procedure TSP_SocialSocialRestActor.SetFollowableItem(AIndex: Integer; const AValue: string); 


begin
  If (FFollowableItem=AValue) then exit;
  FFollowableItem:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestActor.SetFollowableItemActor(AIndex: Integer; const AValue: TSP_SocialSocialActor); 


begin
  If (FFollowableItemActor=AValue) then exit;
  FFollowableItemActor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestActor.SetMe(AIndex: Integer; const AValue: TSP_SocialSocialActor); 


begin
  If (FMe=AValue) then exit;
  FMe:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialRestActor.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FollowableItem);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialRestFeedManager
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialRestFeedManager.ObjectRestKind : String; 

begin
  Result:='SocialRestFeedManager';
end;


Procedure TSP_SocialSocialRestFeedManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialRestFeedManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialRestFeed
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialRestFeed.ObjectRestKind : String; 

begin
  Result:='SocialRestFeed';
end;


Procedure TSP_SocialSocialRestFeed.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestFeed.SetSocialFeed(AIndex: Integer; const AValue: TSP_SocialSocialFeed); 


begin
  If (FSocialFeed=AValue) then exit;
  FSocialFeed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialRestFeed.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialRestFollowingManager
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialRestFollowingManager.ObjectRestKind : String; 

begin
  Result:='SocialRestFollowingManager';
end;


Procedure TSP_SocialSocialRestFollowingManager.SetFollowedDocumentsUri(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedDocumentsUri=AValue) then exit;
  FFollowedDocumentsUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestFollowingManager.SetFollowedSitesUri(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedSitesUri=AValue) then exit;
  FFollowedSitesUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestFollowingManager.SetMyFollowedDocumentsUri(AIndex: Integer; const AValue: string); 


begin
  If (FMyFollowedDocumentsUri=AValue) then exit;
  FMyFollowedDocumentsUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestFollowingManager.SetMyFollowedSitesUri(AIndex: Integer; const AValue: string); 


begin
  If (FMyFollowedSitesUri=AValue) then exit;
  FMyFollowedSitesUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestFollowingManager.SetSocialActor(AIndex: Integer; const AValue: TSP_SocialSocialActor); 


begin
  If (FSocialActor=AValue) then exit;
  FSocialActor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialRestFollowingManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FollowedDocumentsUri);
end;


{ --------------------------------------------------------------------
  TSP_SocialSocialRestThread
  --------------------------------------------------------------------}


Class Function TSP_SocialSocialRestThread.ObjectRestKind : String; 

begin
  Result:='SocialRestThread';
end;


Procedure TSP_SocialSocialRestThread.SetID(AIndex: Integer; const AValue: string); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SocialSocialRestThread.SetSocialThread(AIndex: Integer; const AValue: TSP_SocialSocialThread); 


begin
  If (FSocialThread=AValue) then exit;
  FSocialThread:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SocialSocialRestThread.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ID);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesFollowedItem
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesFollowedItem.ObjectRestKind : String; 

begin
  Result:='FollowedItem';
end;


Procedure TSP_UserProfilesFollowedItem.SetData(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FData=AValue) then exit;
  FData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetFileType(AIndex: Integer; const AValue: string); 


begin
  If (FFileType=AValue) then exit;
  FFileType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetFileTypeProgid(AIndex: Integer; const AValue: string); 


begin
  If (FFileTypeProgid=AValue) then exit;
  FFileTypeProgid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetFlags(AIndex: Integer; const AValue: string); 


begin
  If (FFlags=AValue) then exit;
  FFlags:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetGroupId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGroupId=AValue) then exit;
  FGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetHasFeed(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasFeed=AValue) then exit;
  FHasFeed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetIconUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconUrl=AValue) then exit;
  FIconUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetItemId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetItemType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemType=AValue) then exit;
  FItemType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetParentUrl(AIndex: Integer; const AValue: string); 


begin
  If (FParentUrl=AValue) then exit;
  FParentUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetPinned(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPinned=AValue) then exit;
  FPinned:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetServerUrlProgid(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrlProgid=AValue) then exit;
  FServerUrlProgid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetSiteId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetSubtype(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSubtype=AValue) then exit;
  FSubtype:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItem.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_UserProfilesFollowedItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'data' : SetLength(FData,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_UserProfilesFollowResult
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesFollowResult.ObjectRestKind : String; 

begin
  Result:='FollowResult';
end;


Procedure TSP_UserProfilesFollowResult.SetItem(AIndex: Integer; const AValue: TSP_UserProfilesFollowedItem); 


begin
  If (FItem=AValue) then exit;
  FItem:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowResult.SetResultType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FResultType=AValue) then exit;
  FResultType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesHashTag
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesHashTag.ObjectRestKind : String; 

begin
  Result:='HashTag';
end;


Procedure TSP_UserProfilesHashTag.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesHashTag.SetUseCount(AIndex: Integer; const AValue: int64); 


begin
  If (FUseCount=AValue) then exit;
  FUseCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesFollowedContent
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesFollowedContent.ObjectRestKind : String; 

begin
  Result:='FollowedContent';
end;


Procedure TSP_UserProfilesFollowedContent.SetFollowedDocumentsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedDocumentsUrl=AValue) then exit;
  FFollowedDocumentsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedContent.SetFollowedSitesUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFollowedSitesUrl=AValue) then exit;
  FFollowedSitesUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UserProfilesFollowedContent.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FollowedDocumentsUrl);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesFollowedItemData
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesFollowedItemData.ObjectRestKind : String; 

begin
  Result:='FollowedItemData';
end;


Procedure TSP_UserProfilesFollowedItemData.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesFollowedItemData.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_UserProfilesFollowedItemData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_UserProfilesFollowedItemData.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesHashTagCollection
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesHashTagCollection.ObjectRestKind : String; 

begin
  Result:='HashTagCollection';
end;


Procedure TSP_UserProfilesHashTagCollection.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesHashTagCollection.SetItems(AIndex: Integer; const AValue: TSP_UserProfilesHashTagArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_UserProfilesHashTagCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_UserProfilesHashTagCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesPeopleManager
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesPeopleManager.ObjectRestKind : String; 

begin
  Result:='PeopleManager';
end;


Procedure TSP_UserProfilesPeopleManager.SetEditProfileLink(AIndex: Integer; const AValue: string); 


begin
  If (FEditProfileLink=AValue) then exit;
  FEditProfileLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPeopleManager.SetIsMyPeopleListPublic(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMyPeopleListPublic=AValue) then exit;
  FIsMyPeopleListPublic:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UserProfilesPeopleManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(EditProfileLink);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesPersonProperties
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesPersonProperties.ObjectRestKind : String; 

begin
  Result:='PersonProperties';
end;


Procedure TSP_UserProfilesPersonProperties.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetDirectReports(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FDirectReports=AValue) then exit;
  FDirectReports:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetExtendedManagers(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FExtendedManagers=AValue) then exit;
  FExtendedManagers:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetExtendedReports(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FExtendedReports=AValue) then exit;
  FExtendedReports:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetIsFollowed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsFollowed=AValue) then exit;
  FIsFollowed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetLatestPost(AIndex: Integer; const AValue: string); 


begin
  If (FLatestPost=AValue) then exit;
  FLatestPost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetPeers(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FPeers=AValue) then exit;
  FPeers:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetPersonalUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPersonalUrl=AValue) then exit;
  FPersonalUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetUserProfileProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FUserProfileProperties=AValue) then exit;
  FUserProfileProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesPersonProperties.SetUserUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUserUrl=AValue) then exit;
  FUserUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_UserProfilesPersonProperties.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'directreports' : SetLength(FDirectReports,aLength);
  'extendedmanagers' : SetLength(FExtendedManagers,aLength);
  'extendedreports' : SetLength(FExtendedReports,aLength);
  'peers' : SetLength(FPeers,aLength);
  'userprofileproperties' : SetLength(FUserProfileProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_UserProfilesPersonProperties.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AccountName);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesProfileImageStore
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesProfileImageStore.ObjectRestKind : String; 

begin
  Result:='ProfileImageStore';
end;


Procedure TSP_UserProfilesProfileImageStore.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UserProfilesProfileImageStore.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesProfileLoader
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesProfileLoader.ObjectRestKind : String; 

begin
  Result:='ProfileLoader';
end;


Procedure TSP_UserProfilesProfileLoader.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UserProfilesProfileLoader.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesUserProfilePropertiesForUser
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesUserProfilePropertiesForUser.ObjectRestKind : String; 

begin
  Result:='UserProfilePropertiesForUser';
end;


Procedure TSP_UserProfilesUserProfilePropertiesForUser.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UserProfilesUserProfilePropertiesForUser.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AccountName);
end;


{ --------------------------------------------------------------------
  TSP_UserProfilesUserProfile
  --------------------------------------------------------------------}


Class Function TSP_UserProfilesUserProfile.ObjectRestKind : String; 

begin
  Result:='UserProfile';
end;


Procedure TSP_UserProfilesUserProfile.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetIsPeopleListPublic(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPeopleListPublic=AValue) then exit;
  FIsPeopleListPublic:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetIsPrivacySettingOn(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPrivacySettingOn=AValue) then exit;
  FIsPrivacySettingOn:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetIsSelf(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSelf=AValue) then exit;
  FIsSelf:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetJobTitle(AIndex: Integer; const AValue: string); 


begin
  If (FJobTitle=AValue) then exit;
  FJobTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetMySiteFirstRunExperience(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMySiteFirstRunExperience=AValue) then exit;
  FMySiteFirstRunExperience:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetMySiteHostUrl(AIndex: Integer; const AValue: string); 


begin
  If (FMySiteHostUrl=AValue) then exit;
  FMySiteHostUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetO15FirstRunExperience(AIndex: Integer; const AValue: TInt32); 


begin
  If (FO15FirstRunExperience=AValue) then exit;
  FO15FirstRunExperience:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPersonalSiteCapabilities(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPersonalSiteCapabilities=AValue) then exit;
  FPersonalSiteCapabilities:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPersonalSiteFirstCreationError(AIndex: Integer; const AValue: string); 


begin
  If (FPersonalSiteFirstCreationError=AValue) then exit;
  FPersonalSiteFirstCreationError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPersonalSiteFirstCreationTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FPersonalSiteFirstCreationTime=AValue) then exit;
  FPersonalSiteFirstCreationTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPersonalSiteInstantiationState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPersonalSiteInstantiationState=AValue) then exit;
  FPersonalSiteInstantiationState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPersonalSiteLastCreationTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FPersonalSiteLastCreationTime=AValue) then exit;
  FPersonalSiteLastCreationTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPersonalSiteNumberOfRetries(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPersonalSiteNumberOfRetries=AValue) then exit;
  FPersonalSiteNumberOfRetries:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPictureImportEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FPictureImportEnabled=AValue) then exit;
  FPictureImportEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetPublicUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPublicUrl=AValue) then exit;
  FPublicUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetSipAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSipAddress=AValue) then exit;
  FSipAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UserProfilesUserProfile.SetUrlToCreatePersonalSite(AIndex: Integer; const AValue: string); 


begin
  If (FUrlToCreatePersonalSite=AValue) then exit;
  FUrlToCreatePersonalSite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UserProfilesUserProfile.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AccountName);
end;


Function TSP_UserProfilesUserProfile.FollowedContent(AService: TODataService) : TSP_UserProfilesFollowedContent; 


begin
  Result:=TSP_UserProfilesFollowedContent(GetContainedSingleTon(AService,'FollowedContent', TSP_UserProfilesFollowedContent));
end;


Function TSP_UserProfilesUserProfile.PersonalSite(AService: TODataService) : TSPSite; 


begin
  Result:=TSPSite(GetContainedSingleTon(AService,'PersonalSite', TSPSite));
end;


{ --------------------------------------------------------------------
  TPSAssignmentCreationInformation
  --------------------------------------------------------------------}


Class Function TPSAssignmentCreationInformation.ObjectRestKind : String; 

begin
  Result:='AssignmentCreationInformation';
end;


Procedure TPSAssignmentCreationInformation.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignmentCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignmentCreationInformation.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignmentCreationInformation.SetResourceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FResourceId=AValue) then exit;
  FResourceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignmentCreationInformation.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignmentCreationInformation.SetTaskId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTaskId=AValue) then exit;
  FTaskId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSCalendarCreationInformation
  --------------------------------------------------------------------}


Class Function TPSCalendarCreationInformation.ObjectRestKind : String; 

begin
  Result:='CalendarCreationInformation';
end;


Procedure TPSCalendarCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarCreationInformation.SetOriginalId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FOriginalId=AValue) then exit;
  FOriginalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSCalendarExceptionCreationInformation
  --------------------------------------------------------------------}


Class Function TPSCalendarExceptionCreationInformation.ObjectRestKind : String; 

begin
  Result:='CalendarExceptionCreationInformation';
end;


Procedure TPSCalendarExceptionCreationInformation.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetRecurrenceDays(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceDays=AValue) then exit;
  FRecurrenceDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetRecurrenceFrequency(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceFrequency=AValue) then exit;
  FRecurrenceFrequency:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetRecurrenceMonth(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceMonth=AValue) then exit;
  FRecurrenceMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetRecurrenceMonthDay(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceMonthDay=AValue) then exit;
  FRecurrenceMonthDay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetRecurrenceType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceType=AValue) then exit;
  FRecurrenceType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetRecurrenceWeek(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceWeek=AValue) then exit;
  FRecurrenceWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift1Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift1Finish=AValue) then exit;
  FShift1Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift1Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift1Start=AValue) then exit;
  FShift1Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift2Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift2Finish=AValue) then exit;
  FShift2Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift2Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift2Start=AValue) then exit;
  FShift2Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift3Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift3Finish=AValue) then exit;
  FShift3Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift3Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift3Start=AValue) then exit;
  FShift3Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift4Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift4Finish=AValue) then exit;
  FShift4Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift4Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift4Start=AValue) then exit;
  FShift4Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift5Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift5Finish=AValue) then exit;
  FShift5Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetShift5Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift5Start=AValue) then exit;
  FShift5Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarExceptionCreationInformation.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSCustomFieldCreationInformation
  --------------------------------------------------------------------}


Class Function TPSCustomFieldCreationInformation.ObjectRestKind : String; 

begin
  Result:='CustomFieldCreationInformation';
end;


Procedure TPSCustomFieldCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetEntityTypeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEntityTypeId=AValue) then exit;
  FEntityTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetFieldType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldType=AValue) then exit;
  FFieldType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetFormula(AIndex: Integer; const AValue: string); 


begin
  If (FFormula=AValue) then exit;
  FFormula:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetIsEditableInVisibility(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEditableInVisibility=AValue) then exit;
  FIsEditableInVisibility:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetIsMultilineText(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMultilineText=AValue) then exit;
  FIsMultilineText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetIsRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRequired=AValue) then exit;
  FIsRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetIsWorkflowControlled(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsWorkflowControlled=AValue) then exit;
  FIsWorkflowControlled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetLookupAllowMultiSelect(AIndex: Integer; const AValue: boolean); 


begin
  If (FLookupAllowMultiSelect=AValue) then exit;
  FLookupAllowMultiSelect:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetLookupDefaultValue(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupDefaultValue=AValue) then exit;
  FLookupDefaultValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetLookupTableId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupTableId=AValue) then exit;
  FLookupTableId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomFieldCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSEnterpriseProjectTypeCreationInformation
  --------------------------------------------------------------------}


Class Function TPSEnterpriseProjectTypeCreationInformation.ObjectRestKind : String; 

begin
  Result:='EnterpriseProjectTypeCreationInformation';
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetIsDefault(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDefault=AValue) then exit;
  FIsDefault:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetIsManaged(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsManaged=AValue) then exit;
  FIsManaged:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetProjectDetailPages(AIndex: Integer; const AValue: TPSProjectDetailPageCreationInformationArray); 


begin
  If (FProjectDetailPages=AValue) then exit;
  FProjectDetailPages:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetProjectPlanTemplateId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FProjectPlanTemplateId=AValue) then exit;
  FProjectPlanTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetWorkflowAssociationId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowAssociationId=AValue) then exit;
  FWorkflowAssociationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetWorkflowAssociationName(AIndex: Integer; const AValue: string); 


begin
  If (FWorkflowAssociationName=AValue) then exit;
  FWorkflowAssociationName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectTypeCreationInformation.SetWorkspaceTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FWorkspaceTemplateName=AValue) then exit;
  FWorkspaceTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TPSEnterpriseProjectTypeCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'projectdetailpages' : SetLength(FProjectDetailPages,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TPSProjectDetailPageCreationInformation
  --------------------------------------------------------------------}


Class Function TPSProjectDetailPageCreationInformation.ObjectRestKind : String; 

begin
  Result:='ProjectDetailPageCreationInformation';
end;


Procedure TPSProjectDetailPageCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectDetailPageCreationInformation.SetIsCreate(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCreate=AValue) then exit;
  FIsCreate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectDetailPageCreationInformation.SetPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPosition=AValue) then exit;
  FPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSEnterpriseResourceCreationInformation
  --------------------------------------------------------------------}


Class Function TPSEnterpriseResourceCreationInformation.ObjectRestKind : String; 

begin
  Result:='EnterpriseResourceCreationInformation';
end;


Procedure TPSEnterpriseResourceCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResourceCreationInformation.SetIsBudget(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsBudget=AValue) then exit;
  FIsBudget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResourceCreationInformation.SetIsGeneric(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsGeneric=AValue) then exit;
  FIsGeneric:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResourceCreationInformation.SetIsInactive(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsInactive=AValue) then exit;
  FIsInactive:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResourceCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResourceCreationInformation.SetResourceType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FResourceType=AValue) then exit;
  FResourceType:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSEventHandlerCreationInformation
  --------------------------------------------------------------------}


Class Function TPSEventHandlerCreationInformation.ObjectRestKind : String; 

begin
  Result:='EventHandlerCreationInformation';
end;


Procedure TPSEventHandlerCreationInformation.SetAssemblyName(AIndex: Integer; const AValue: string); 


begin
  If (FAssemblyName=AValue) then exit;
  FAssemblyName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetCancelOnError(AIndex: Integer; const AValue: boolean); 


begin
  If (FCancelOnError=AValue) then exit;
  FCancelOnError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetClassName(AIndex: Integer; const AValue: string); 


begin
  If (FClassName=AValue) then exit;
  FClassName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetEndpointUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEndpointUrl=AValue) then exit;
  FEndpointUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetEventId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEventId=AValue) then exit;
  FEventId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandlerCreationInformation.SetOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupEntryCreationInformation
  --------------------------------------------------------------------}


Class Function TPSLookupEntryCreationInformation.ObjectRestKind : String; 

begin
  Result:='LookupEntryCreationInformation';
end;


Procedure TPSLookupEntryCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryCreationInformation.SetParentId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FParentId=AValue) then exit;
  FParentId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryCreationInformation.SetSortIndex(AIndex: Integer; const AValue: double); 


begin
  If (FSortIndex=AValue) then exit;
  FSortIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryCreationInformation.SetValue(AIndex: Integer; const AValue: TPSLookupEntryValue); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupEntryValue
  --------------------------------------------------------------------}


Class Function TPSLookupEntryValue.ObjectRestKind : String; 

begin
  Result:='LookupEntryValue';
end;


Procedure TPSLookupEntryValue.SetDateValue(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDateValue=AValue) then exit;
  FDateValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryValue.SetDurationValue(AIndex: Integer; const AValue: string); 


begin
  If (FDurationValue=AValue) then exit;
  FDurationValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryValue.SetNumberValue(AIndex: Integer; const AValue: double); 


begin
  If (FNumberValue=AValue) then exit;
  FNumberValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntryValue.SetTextValue(AIndex: Integer; const AValue: string); 


begin
  If (FTextValue=AValue) then exit;
  FTextValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupMask
  --------------------------------------------------------------------}


Class Function TPSLookupMask.ObjectRestKind : String; 

begin
  Result:='LookupMask';
end;


Procedure TPSLookupMask.Set_Length(AIndex: Integer; const AValue: TInt32); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupMask.SetMaskType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMaskType=AValue) then exit;
  FMaskType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupMask.SetSeparator(AIndex: Integer; const AValue: string); 


begin
  If (FSeparator=AValue) then exit;
  FSeparator:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TPSLookupMask.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TPSLookupTableCreationInformation
  --------------------------------------------------------------------}


Class Function TPSLookupTableCreationInformation.ObjectRestKind : String; 

begin
  Result:='LookupTableCreationInformation';
end;


Procedure TPSLookupTableCreationInformation.SetEntries(AIndex: Integer; const AValue: TPSLookupEntryCreationInformationArray); 


begin
  If (FEntries=AValue) then exit;
  FEntries:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTableCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTableCreationInformation.SetMasks(AIndex: Integer; const AValue: TPSLookupMaskArray); 


begin
  If (FMasks=AValue) then exit;
  FMasks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTableCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTableCreationInformation.SetSortOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSortOrder=AValue) then exit;
  FSortOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TPSLookupTableCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'entries' : SetLength(FEntries,aLength);
  'masks' : SetLength(FMasks,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TPSPhaseCreationInformation
  --------------------------------------------------------------------}


Class Function TPSPhaseCreationInformation.ObjectRestKind : String; 

begin
  Result:='PhaseCreationInformation';
end;


Procedure TPSPhaseCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPhaseCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPhaseCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSPlanAssignmentCreationInformation
  --------------------------------------------------------------------}


Class Function TPSPlanAssignmentCreationInformation.ObjectRestKind : String; 

begin
  Result:='PlanAssignmentCreationInformation';
end;


Procedure TPSPlanAssignmentCreationInformation.SetBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBookingType=AValue) then exit;
  FBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentCreationInformation.SetIntervals(AIndex: Integer; const AValue: TPSPlanAssignmentIntervalCreationInformationArray); 


begin
  If (FIntervals=AValue) then exit;
  FIntervals:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentCreationInformation.SetResourceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FResourceId=AValue) then exit;
  FResourceId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TPSPlanAssignmentCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'intervals' : SetLength(FIntervals,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TPSPlanAssignmentIntervalCreationInformation
  --------------------------------------------------------------------}


Class Function TPSPlanAssignmentIntervalCreationInformation.ObjectRestKind : String; 

begin
  Result:='PlanAssignmentIntervalCreationInformation';
end;


Procedure TPSPlanAssignmentIntervalCreationInformation.SetDuration(AIndex: Integer; const AValue: string); 


begin
  If (FDuration=AValue) then exit;
  FDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentIntervalCreationInformation.SetInterval(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FInterval=AValue) then exit;
  FInterval:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSProjectCreationInformation
  --------------------------------------------------------------------}


Class Function TPSProjectCreationInformation.ObjectRestKind : String; 

begin
  Result:='ProjectCreationInformation';
end;


Procedure TPSProjectCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectCreationInformation.SetEnterpriseProjectTypeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEnterpriseProjectTypeId=AValue) then exit;
  FEnterpriseProjectTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectCreationInformation.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectCreationInformation.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectCreationInformation.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSProjectResourceCreationInformation
  --------------------------------------------------------------------}


Class Function TPSProjectResourceCreationInformation.ObjectRestKind : String; 

begin
  Result:='ProjectResourceCreationInformation';
end;


Procedure TPSProjectResourceCreationInformation.SetAccount(AIndex: Integer; const AValue: string); 


begin
  If (FAccount=AValue) then exit;
  FAccount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResourceCreationInformation.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResourceCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResourceCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResourceCreationInformation.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSStageCreationInformation
  --------------------------------------------------------------------}


Class Function TPSStageCreationInformation.ObjectRestKind : String; 

begin
  Result:='StageCreationInformation';
end;


Procedure TPSStageCreationInformation.SetBehavior(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBehavior=AValue) then exit;
  FBehavior:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetCheckInRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FCheckInRequired=AValue) then exit;
  FCheckInRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetCustomFields(AIndex: Integer; const AValue: TPSStageCustomFieldCreationInformationArray); 


begin
  If (FCustomFields=AValue) then exit;
  FCustomFields:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetPhaseId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FPhaseId=AValue) then exit;
  FPhaseId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetProjectDetailPages(AIndex: Integer; const AValue: TPSStageDetailPageCreationInformationArray); 


begin
  If (FProjectDetailPages=AValue) then exit;
  FProjectDetailPages:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetSubmitDescription(AIndex: Integer; const AValue: string); 


begin
  If (FSubmitDescription=AValue) then exit;
  FSubmitDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCreationInformation.SetWorkflowStatusPageId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowStatusPageId=AValue) then exit;
  FWorkflowStatusPageId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TPSStageCreationInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'customfields' : SetLength(FCustomFields,aLength);
  'projectdetailpages' : SetLength(FProjectDetailPages,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TPSStageCustomFieldCreationInformation
  --------------------------------------------------------------------}


Class Function TPSStageCustomFieldCreationInformation.ObjectRestKind : String; 

begin
  Result:='StageCustomFieldCreationInformation';
end;


Procedure TPSStageCustomFieldCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCustomFieldCreationInformation.SetReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnly=AValue) then exit;
  FReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCustomFieldCreationInformation.SetRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequired=AValue) then exit;
  FRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSStageDetailPageCreationInformation
  --------------------------------------------------------------------}


Class Function TPSStageDetailPageCreationInformation.ObjectRestKind : String; 

begin
  Result:='StageDetailPageCreationInformation';
end;


Procedure TPSStageDetailPageCreationInformation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageDetailPageCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageDetailPageCreationInformation.SetPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPosition=AValue) then exit;
  FPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageDetailPageCreationInformation.SetRequiresAttention(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequiresAttention=AValue) then exit;
  FRequiresAttention:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSStatusAssignmentCreationInformation
  --------------------------------------------------------------------}


Class Function TPSStatusAssignmentCreationInformation.ObjectRestKind : String; 

begin
  Result:='StatusAssignmentCreationInformation';
end;


Procedure TPSStatusAssignmentCreationInformation.SetComment(AIndex: Integer; const AValue: string); 


begin
  If (FComment=AValue) then exit;
  FComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignmentCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignmentCreationInformation.SetProjectId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FProjectId=AValue) then exit;
  FProjectId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignmentCreationInformation.SetTask(AIndex: Integer; const AValue: TPSStatusTaskCreationInformation); 


begin
  If (FTask=AValue) then exit;
  FTask:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSStatusTaskCreationInformation
  --------------------------------------------------------------------}


Class Function TPSStatusTaskCreationInformation.ObjectRestKind : String; 

begin
  Result:='StatusTaskCreationInformation';
end;


Procedure TPSStatusTaskCreationInformation.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTaskCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTaskCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTaskCreationInformation.SetParentId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FParentId=AValue) then exit;
  FParentId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTaskCreationInformation.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTaskCreationInformation.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSTaskCreationInformation
  --------------------------------------------------------------------}


Class Function TPSTaskCreationInformation.ObjectRestKind : String; 

begin
  Result:='TaskCreationInformation';
end;


Procedure TPSTaskCreationInformation.SetAddAfterId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAddAfterId=AValue) then exit;
  FAddAfterId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetDuration(AIndex: Integer; const AValue: string); 


begin
  If (FDuration=AValue) then exit;
  FDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetIsManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsManual=AValue) then exit;
  FIsManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetParentId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FParentId=AValue) then exit;
  FParentId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskCreationInformation.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSTaskLinkCreationInformation
  --------------------------------------------------------------------}


Class Function TPSTaskLinkCreationInformation.ObjectRestKind : String; 

begin
  Result:='TaskLinkCreationInformation';
end;


Procedure TPSTaskLinkCreationInformation.SetDependencyType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDependencyType=AValue) then exit;
  FDependencyType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskLinkCreationInformation.SetEndId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEndId=AValue) then exit;
  FEndId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskLinkCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTaskLinkCreationInformation.SetStartId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FStartId=AValue) then exit;
  FStartId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSTimeSheetLineCreationInformation
  --------------------------------------------------------------------}


Class Function TPSTimeSheetLineCreationInformation.ObjectRestKind : String; 

begin
  Result:='TimeSheetLineCreationInformation';
end;


Procedure TPSTimeSheetLineCreationInformation.SetAssignmentId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAssignmentId=AValue) then exit;
  FAssignmentId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLineCreationInformation.SetComment(AIndex: Integer; const AValue: string); 


begin
  If (FComment=AValue) then exit;
  FComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLineCreationInformation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLineCreationInformation.SetLineClass(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLineClass=AValue) then exit;
  FLineClass:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLineCreationInformation.SetProjectId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FProjectId=AValue) then exit;
  FProjectId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLineCreationInformation.SetTaskName(AIndex: Integer; const AValue: string); 


begin
  If (FTaskName=AValue) then exit;
  FTaskName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSTimeSheetWorkCreationInformation
  --------------------------------------------------------------------}


Class Function TPSTimeSheetWorkCreationInformation.ObjectRestKind : String; 

begin
  Result:='TimeSheetWorkCreationInformation';
end;


Procedure TPSTimeSheetWorkCreationInformation.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.SetComment(AIndex: Integer; const AValue: string); 


begin
  If (FComment=AValue) then exit;
  FComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.Set_End(AIndex: Integer; const AValue: TDateTime); 


begin
  If (F_End=AValue) then exit;
  F_End:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.SetNonBillableOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FNonBillableOvertimeWork=AValue) then exit;
  FNonBillableOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.SetNonBillableWork(AIndex: Integer; const AValue: string); 


begin
  If (FNonBillableWork=AValue) then exit;
  FNonBillableWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.SetOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FOvertimeWork=AValue) then exit;
  FOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.SetPlannedWork(AIndex: Integer; const AValue: string); 


begin
  If (FPlannedWork=AValue) then exit;
  FPlannedWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWorkCreationInformation.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TPSTimeSheetWorkCreationInformation.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_End' : Result:='End';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TPSEntityType
  --------------------------------------------------------------------}


Class Function TPSEntityType.ObjectRestKind : String; 

begin
  Result:='EntityType';
end;


Procedure TPSEntityType.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEntityType.SetID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSEntityType.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TPSLookupTables
  --------------------------------------------------------------------}


Class Function TPSLookupTables.ObjectRestKind : String; 

begin
  Result:='LookupTables';
end;


Procedure TPSLookupTables.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSLookupTables.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TPSAssignment
  --------------------------------------------------------------------}


Class Function TPSAssignment.ObjectRestKind : String; 

begin
  Result:='Assignment';
end;


Procedure TPSAssignment.SetActualCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCostWorkPerformed=AValue) then exit;
  FActualCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetActualOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualOvertimeCost=AValue) then exit;
  FActualOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBaselineCost=AValue) then exit;
  FBaselineCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineCostPerUse(AIndex: Integer; const AValue: Double); 


begin
  If (FBaselineCostPerUse=AValue) then exit;
  FBaselineCostPerUse:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FBaselineFinish=AValue) then exit;
  FBaselineFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FBaselineStart=AValue) then exit;
  FBaselineStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineWork(AIndex: Integer; const AValue: string); 


begin
  If (FBaselineWork=AValue) then exit;
  FBaselineWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaselineWorkMilliseconds=AValue) then exit;
  FBaselineWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBaselineWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBaselineWorkTimeSpan=AValue) then exit;
  FBaselineWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBudgetedCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkPerformed=AValue) then exit;
  FBudgetedCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetBudgetedCostWorkScheduled(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkScheduled=AValue) then exit;
  FBudgetedCostWorkScheduled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FCostVariance=AValue) then exit;
  FCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetCostVarianceAtCompletion(AIndex: Integer; const AValue: Double); 


begin
  If (FCostVarianceAtCompletion=AValue) then exit;
  FCostVarianceAtCompletion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetCurrentCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FCurrentCostVariance=AValue) then exit;
  FCurrentCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetFinishVariance(AIndex: Integer; const AValue: string); 


begin
  If (FFinishVariance=AValue) then exit;
  FFinishVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetFinishVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFinishVarianceMilliseconds=AValue) then exit;
  FFinishVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetFinishVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FFinishVarianceTimeSpan=AValue) then exit;
  FFinishVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetIsConfirmed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsConfirmed=AValue) then exit;
  FIsConfirmed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetIsOverAllocated(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsOverAllocated=AValue) then exit;
  FIsOverAllocated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetIsPublished(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPublished=AValue) then exit;
  FIsPublished:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetIsResponsePending(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsResponsePending=AValue) then exit;
  FIsResponsePending:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetIsUpdateNeeded(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUpdateNeeded=AValue) then exit;
  FIsUpdateNeeded:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetLevelingDelay(AIndex: Integer; const AValue: string); 


begin
  If (FLevelingDelay=AValue) then exit;
  FLevelingDelay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetLevelingDelayMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLevelingDelayMilliseconds=AValue) then exit;
  FLevelingDelayMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetLevelingDelayTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FLevelingDelayTimeSpan=AValue) then exit;
  FLevelingDelayTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FOvertimeCost=AValue) then exit;
  FOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetRemainingCost(AIndex: Integer; const AValue: Double); 


begin
  If (FRemainingCost=AValue) then exit;
  FRemainingCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetRemainingOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FRemainingOvertimeCost=AValue) then exit;
  FRemainingOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetResume(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FResume=AValue) then exit;
  FResume:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetScheduleCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FScheduleCostVariance=AValue) then exit;
  FScheduleCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetStartVariance(AIndex: Integer; const AValue: string); 


begin
  If (FStartVariance=AValue) then exit;
  FStartVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetStartVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStartVarianceMilliseconds=AValue) then exit;
  FStartVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetStartVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FStartVarianceTimeSpan=AValue) then exit;
  FStartVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetStop(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStop=AValue) then exit;
  FStop:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetWorkVariance(AIndex: Integer; const AValue: string); 


begin
  If (FWorkVariance=AValue) then exit;
  FWorkVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetWorkVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkVarianceMilliseconds=AValue) then exit;
  FWorkVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSAssignment.SetWorkVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkVarianceTimeSpan=AValue) then exit;
  FWorkVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSAssignment.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSAssignment.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


{ --------------------------------------------------------------------
  TPSCustomField
  --------------------------------------------------------------------}


Class Function TPSCustomField.ObjectRestKind : String; 

begin
  Result:='CustomField';
end;


Procedure TPSCustomField.SetAppAlternateId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAppAlternateId=AValue) then exit;
  FAppAlternateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetEntityTypeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEntityTypeId=AValue) then exit;
  FEntityTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetFieldType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldType=AValue) then exit;
  FFieldType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetFormula(AIndex: Integer; const AValue: string); 


begin
  If (FFormula=AValue) then exit;
  FFormula:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FInternalName=AValue) then exit;
  FInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetIsEditableInVisibility(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEditableInVisibility=AValue) then exit;
  FIsEditableInVisibility:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetIsMultilineText(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMultilineText=AValue) then exit;
  FIsMultilineText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetIsRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRequired=AValue) then exit;
  FIsRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetIsWorkflowControlled(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsWorkflowControlled=AValue) then exit;
  FIsWorkflowControlled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetLookupAllowMultiSelect(AIndex: Integer; const AValue: boolean); 


begin
  If (FLookupAllowMultiSelect=AValue) then exit;
  FLookupAllowMultiSelect:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetLookupDefaultValue(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupDefaultValue=AValue) then exit;
  FLookupDefaultValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetLookupTableId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FLookupTableId=AValue) then exit;
  FLookupTableId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetRollsDownToAssignments(AIndex: Integer; const AValue: boolean); 


begin
  If (FRollsDownToAssignments=AValue) then exit;
  FRollsDownToAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCustomField.SetRollupType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRollupType=AValue) then exit;
  FRollupType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSCustomField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSCustomField.EntityType(AService: TODataService) : TPSEntityType; 


begin
  Result:=TPSEntityType(GetContainedSingleTon(AService,'EntityType', TPSEntityType));
end;


Function TPSCustomField.LookupEntries(AService: TODataService) : TPSLookupEntry; 


begin
  Result:=TPSLookupEntry(GetContainedSingleTon(AService,'LookupEntries', TPSLookupEntry));
end;


Function TPSCustomField.LookupTable(AService: TODataService) : TPSLookupTable; 


begin
  Result:=TPSLookupTable(GetContainedSingleTon(AService,'LookupTable', TPSLookupTable));
end;


{ --------------------------------------------------------------------
  TPSLookupEntry
  --------------------------------------------------------------------}


Class Function TPSLookupEntry.ObjectRestKind : String; 

begin
  Result:='LookupEntry';
end;


Procedure TPSLookupEntry.SetAppAlternateId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAppAlternateId=AValue) then exit;
  FAppAlternateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntry.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntry.SetFullValue(AIndex: Integer; const AValue: string); 


begin
  If (FFullValue=AValue) then exit;
  FFullValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntry.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntry.SetInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FInternalName=AValue) then exit;
  FInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupEntry.SetSortIndex(AIndex: Integer; const AValue: double); 


begin
  If (FSortIndex=AValue) then exit;
  FSortIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSLookupEntry.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TPSLookupTable
  --------------------------------------------------------------------}


Class Function TPSLookupTable.ObjectRestKind : String; 

begin
  Result:='LookupTable';
end;


Procedure TPSLookupTable.SetAppAlternateId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAppAlternateId=AValue) then exit;
  FAppAlternateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTable.SetFieldType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFieldType=AValue) then exit;
  FFieldType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTable.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTable.SetMasks(AIndex: Integer; const AValue: TPSLookupMaskArray); 


begin
  If (FMasks=AValue) then exit;
  FMasks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTable.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupTable.SetSortOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSortOrder=AValue) then exit;
  FSortOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TPSLookupTable.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'masks' : SetLength(FMasks,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TPSLookupTable.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSLookupTable.Entries(AService: TODataService) : TPSLookupEntry; 


begin
  Result:=TPSLookupEntry(GetContainedSingleTon(AService,'Entries', TPSLookupEntry));
end;


{ --------------------------------------------------------------------
  TPSCalendarException
  --------------------------------------------------------------------}


Class Function TPSCalendarException.ObjectRestKind : String; 

begin
  Result:='CalendarException';
end;


Procedure TPSCalendarException.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetRecurrenceDays(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceDays=AValue) then exit;
  FRecurrenceDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetRecurrenceFrequency(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceFrequency=AValue) then exit;
  FRecurrenceFrequency:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetRecurrenceMonth(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceMonth=AValue) then exit;
  FRecurrenceMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetRecurrenceMonthDay(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceMonthDay=AValue) then exit;
  FRecurrenceMonthDay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetRecurrenceType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceType=AValue) then exit;
  FRecurrenceType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetRecurrenceWeek(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRecurrenceWeek=AValue) then exit;
  FRecurrenceWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift1Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift1Finish=AValue) then exit;
  FShift1Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift1Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift1Start=AValue) then exit;
  FShift1Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift2Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift2Finish=AValue) then exit;
  FShift2Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift2Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift2Start=AValue) then exit;
  FShift2Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift3Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift3Finish=AValue) then exit;
  FShift3Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift3Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift3Start=AValue) then exit;
  FShift3Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift4Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift4Finish=AValue) then exit;
  FShift4Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift4Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift4Start=AValue) then exit;
  FShift4Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift5Finish(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift5Finish=AValue) then exit;
  FShift5Finish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetShift5Start(AIndex: Integer; const AValue: TInt32); 


begin
  If (FShift5Start=AValue) then exit;
  FShift5Start:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendarException.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSCalendarException.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TPSCalendarException.Calendar(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'Calendar', TPSCalendar));
end;


{ --------------------------------------------------------------------
  TPSCalendar
  --------------------------------------------------------------------}


Class Function TPSCalendar.ObjectRestKind : String; 

begin
  Result:='Calendar';
end;


Procedure TPSCalendar.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendar.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendar.SetIsStandardCalendar(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsStandardCalendar=AValue) then exit;
  FIsStandardCalendar:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendar.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendar.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSCalendar.SetOriginalId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FOriginalId=AValue) then exit;
  FOriginalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSCalendar.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSCalendar.BaseCalendarExceptions(AService: TODataService) : TPSCalendarException; 


begin
  Result:=TPSCalendarException(GetContainedSingleTon(AService,'BaseCalendarExceptions', TPSCalendarException));
end;


{ --------------------------------------------------------------------
  TPSBaseCalendarException
  --------------------------------------------------------------------}


Class Function TPSBaseCalendarException.ObjectRestKind : String; 

begin
  Result:='BaseCalendarException';
end;


{ --------------------------------------------------------------------
  TPSDraftAssignment
  --------------------------------------------------------------------}


Class Function TPSDraftAssignment.ObjectRestKind : String; 

begin
  Result:='DraftAssignment';
end;


Procedure TPSDraftAssignment.SetActualCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCost=AValue) then exit;
  FActualCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualFinish=AValue) then exit;
  FActualFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualOvertimeWork=AValue) then exit;
  FActualOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualOvertimeWorkMilliseconds=AValue) then exit;
  FActualOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualOvertimeWorkTimeSpan=AValue) then exit;
  FActualOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualStart=AValue) then exit;
  FActualStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetBudgetedCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCost=AValue) then exit;
  FBudgetedCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetBudgetedWork(AIndex: Integer; const AValue: string); 


begin
  If (FBudgetedWork=AValue) then exit;
  FBudgetedWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetBudgetedWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBudgetedWorkMilliseconds=AValue) then exit;
  FBudgetedWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetBudgetedWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBudgetedWorkTimeSpan=AValue) then exit;
  FBudgetedWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetCost(AIndex: Integer; const AValue: Double); 


begin
  If (FCost=AValue) then exit;
  FCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetDefaultBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultBookingType=AValue) then exit;
  FDefaultBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetDelay(AIndex: Integer; const AValue: string); 


begin
  If (FDelay=AValue) then exit;
  FDelay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetDelayMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDelayMilliseconds=AValue) then exit;
  FDelayMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetDelayTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDelayTimeSpan=AValue) then exit;
  FDelayTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetIsLockedByManager(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsLockedByManager=AValue) then exit;
  FIsLockedByManager:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetIsWorkResource(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsWorkResource=AValue) then exit;
  FIsWorkResource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FOvertimeWork=AValue) then exit;
  FOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeWorkMilliseconds=AValue) then exit;
  FOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeWorkTimeSpan=AValue) then exit;
  FOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentWorkComplete=AValue) then exit;
  FPercentWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRegularWork(AIndex: Integer; const AValue: string); 


begin
  If (FRegularWork=AValue) then exit;
  FRegularWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRegularWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegularWorkMilliseconds=AValue) then exit;
  FRegularWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRegularWorkTimeSpan=AValue) then exit;
  FRegularWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRemainingOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingOvertimeWork=AValue) then exit;
  FRemainingOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingOvertimeWorkMilliseconds=AValue) then exit;
  FRemainingOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingOvertimeWorkTimeSpan=AValue) then exit;
  FRemainingOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRemainingWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingWork=AValue) then exit;
  FRemainingWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRemainingWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingWorkMilliseconds=AValue) then exit;
  FRemainingWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingWorkTimeSpan=AValue) then exit;
  FRemainingWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetResourceCapacity(AIndex: Integer; const AValue: Double); 


begin
  If (FResourceCapacity=AValue) then exit;
  FResourceCapacity:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetResourceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FResourceId=AValue) then exit;
  FResourceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetTaskId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTaskId=AValue) then exit;
  FTaskId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftAssignment.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSDraftAssignment.Owner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Owner', TSPUser));
end;


Function TPSDraftAssignment.Parent(AService: TODataService) : TPSDraftAssignment; 


begin
  Result:=TPSDraftAssignment(GetContainedSingleTon(AService,'Parent', TPSDraftAssignment));
end;


Function TPSDraftAssignment.Resource(AService: TODataService) : TPSDraftProjectResource; 


begin
  Result:=TPSDraftProjectResource(GetContainedSingleTon(AService,'Resource', TPSDraftProjectResource));
end;


Function TPSDraftAssignment.Task(AService: TODataService) : TPSDraftTask; 


begin
  Result:=TPSDraftTask(GetContainedSingleTon(AService,'Task', TPSDraftTask));
end;


{ --------------------------------------------------------------------
  TPSProjectResource
  --------------------------------------------------------------------}


Class Function TPSProjectResource.ObjectRestKind : String; 

begin
  Result:='ProjectResource';
end;


Procedure TPSProjectResource.SetActualCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCost=AValue) then exit;
  FActualCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualCostWorkPerformed(AIndex: Integer; const AValue: string); 


begin
  If (FActualCostWorkPerformed=AValue) then exit;
  FActualCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualCostWorkPerformedMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualCostWorkPerformedMilliseconds=AValue) then exit;
  FActualCostWorkPerformedMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualCostWorkPerformedTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualCostWorkPerformedTimeSpan=AValue) then exit;
  FActualCostWorkPerformedTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualOvertimeCost=AValue) then exit;
  FActualOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualOvertimeWork=AValue) then exit;
  FActualOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualOvertimeWorkMilliseconds=AValue) then exit;
  FActualOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualOvertimeWorkTimeSpan=AValue) then exit;
  FActualOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetAvailableFrom(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FAvailableFrom=AValue) then exit;
  FAvailableFrom:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetAvailableTo(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FAvailableTo=AValue) then exit;
  FAvailableTo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBaselineCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBaselineCost=AValue) then exit;
  FBaselineCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBaselineWork(AIndex: Integer; const AValue: string); 


begin
  If (FBaselineWork=AValue) then exit;
  FBaselineWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBaselineWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaselineWorkMilliseconds=AValue) then exit;
  FBaselineWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBaselineWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBaselineWorkTimeSpan=AValue) then exit;
  FBaselineWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBudetCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FBudetCostWorkPerformed=AValue) then exit;
  FBudetCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBudgetedCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCost=AValue) then exit;
  FBudgetedCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBudgetedCostWorkScheduled(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkScheduled=AValue) then exit;
  FBudgetedCostWorkScheduled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBudgetedWork(AIndex: Integer; const AValue: string); 


begin
  If (FBudgetedWork=AValue) then exit;
  FBudgetedWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBudgetedWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBudgetedWorkMilliseconds=AValue) then exit;
  FBudgetedWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetBudgetedWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBudgetedWorkTimeSpan=AValue) then exit;
  FBudgetedWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetCost(AIndex: Integer; const AValue: Double); 


begin
  If (FCost=AValue) then exit;
  FCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FCostVariance=AValue) then exit;
  FCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetCostVarianceAtCompletion(AIndex: Integer; const AValue: Double); 


begin
  If (FCostVarianceAtCompletion=AValue) then exit;
  FCostVarianceAtCompletion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetCurrentCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FCurrentCostVariance=AValue) then exit;
  FCurrentCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetIsBudgeted(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsBudgeted=AValue) then exit;
  FIsBudgeted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetIsGenericResource(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsGenericResource=AValue) then exit;
  FIsGenericResource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetIsOverAllocated(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsOverAllocated=AValue) then exit;
  FIsOverAllocated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FOvertimeCost=AValue) then exit;
  FOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FOvertimeWork=AValue) then exit;
  FOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeWorkMilliseconds=AValue) then exit;
  FOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeWorkTimeSpan=AValue) then exit;
  FOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetPeakWork(AIndex: Integer; const AValue: string); 


begin
  If (FPeakWork=AValue) then exit;
  FPeakWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetPeakWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPeakWorkMilliseconds=AValue) then exit;
  FPeakWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetPeakWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FPeakWorkTimeSpan=AValue) then exit;
  FPeakWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentWorkComplete=AValue) then exit;
  FPercentWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRegularWork(AIndex: Integer; const AValue: string); 


begin
  If (FRegularWork=AValue) then exit;
  FRegularWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRegularWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegularWorkMilliseconds=AValue) then exit;
  FRegularWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRegularWorkTimeSpan=AValue) then exit;
  FRegularWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingCost(AIndex: Integer; const AValue: Double); 


begin
  If (FRemainingCost=AValue) then exit;
  FRemainingCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FRemainingOvertimeCost=AValue) then exit;
  FRemainingOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingOvertimeWork=AValue) then exit;
  FRemainingOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingOvertimeWorkMilliseconds=AValue) then exit;
  FRemainingOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingOvertimeWorkTimeSpan=AValue) then exit;
  FRemainingOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingWork=AValue) then exit;
  FRemainingWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingWorkMilliseconds=AValue) then exit;
  FRemainingWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingWorkTimeSpan=AValue) then exit;
  FRemainingWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetScheduleCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FScheduleCostVariance=AValue) then exit;
  FScheduleCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetWorkVariance(AIndex: Integer; const AValue: string); 


begin
  If (FWorkVariance=AValue) then exit;
  FWorkVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetWorkVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkVarianceMilliseconds=AValue) then exit;
  FWorkVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectResource.SetWorkVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkVarianceTimeSpan=AValue) then exit;
  FWorkVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSProjectResource.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSProjectResource.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSProjectResource.EnterpriseResource(AService: TODataService) : TPSEnterpriseResource; 


begin
  Result:=TPSEnterpriseResource(GetContainedSingleTon(AService,'EnterpriseResource', TPSEnterpriseResource));
end;


{ --------------------------------------------------------------------
  TPSEnterpriseResource
  --------------------------------------------------------------------}


Class Function TPSEnterpriseResource.ObjectRestKind : String; 

begin
  Result:='EnterpriseResource';
end;


Procedure TPSEnterpriseResource.SetCanLevel(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLevel=AValue) then exit;
  FCanLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetCode(AIndex: Integer; const AValue: string); 


begin
  If (FCode=AValue) then exit;
  FCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCostAccrual=AValue) then exit;
  FCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetCostCenter(AIndex: Integer; const AValue: string); 


begin
  If (FCostCenter=AValue) then exit;
  FCostCenter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetDefaultBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultBookingType=AValue) then exit;
  FDefaultBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetExternalId(AIndex: Integer; const AValue: string); 


begin
  If (FExternalId=AValue) then exit;
  FExternalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetHireDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FHireDate=AValue) then exit;
  FHireDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetInitials(AIndex: Integer; const AValue: string); 


begin
  If (FInitials=AValue) then exit;
  FInitials:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetIsActive(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsActive=AValue) then exit;
  FIsActive:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetIsBudget(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsBudget=AValue) then exit;
  FIsBudget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetIsCheckedOut(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCheckedOut=AValue) then exit;
  FIsCheckedOut:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetIsGeneric(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsGeneric=AValue) then exit;
  FIsGeneric:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetIsTeam(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsTeam=AValue) then exit;
  FIsTeam:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetMaterialLabel(AIndex: Integer; const AValue: string); 


begin
  If (FMaterialLabel=AValue) then exit;
  FMaterialLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetPhonetics(AIndex: Integer; const AValue: string); 


begin
  If (FPhonetics=AValue) then exit;
  FPhonetics:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetResourceType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FResourceType=AValue) then exit;
  FResourceType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseResource.SetTerminationDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTerminationDate=AValue) then exit;
  FTerminationDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSEnterpriseResource.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSEnterpriseResource.Assignments(AService: TODataService) : TPSStatusAssignment; 


begin
  Result:=TPSStatusAssignment(GetContainedSingleTon(AService,'Assignments', TPSStatusAssignment));
end;


Function TPSEnterpriseResource.BaseCalendar(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'BaseCalendar', TPSCalendar));
end;


Function TPSEnterpriseResource.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSEnterpriseResource.DefaultAssignmentOwner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'DefaultAssignmentOwner', TSPUser));
end;


Function TPSEnterpriseResource.ResourceCalendarExceptions(AService: TODataService) : TPSCalendarException; 


begin
  Result:=TPSCalendarException(GetContainedSingleTon(AService,'ResourceCalendarExceptions', TPSCalendarException));
end;


Function TPSEnterpriseResource._Self(AService: TODataService) : TPSEnterpriseResource; 


begin
  Result:=TPSEnterpriseResource(GetContainedSingleTon(AService,'Self', TPSEnterpriseResource));
end;


Function TPSEnterpriseResource.TimesheetManager(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'TimesheetManager', TSPUser));
end;


Function TPSEnterpriseResource.User(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'User', TSPUser));
end;


{ --------------------------------------------------------------------
  TPSStatusAssignment
  --------------------------------------------------------------------}


Class Function TPSStatusAssignment.ObjectRestKind : String; 

begin
  Result:='StatusAssignment';
end;


Procedure TPSStatusAssignment.SetActualFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualFinish=AValue) then exit;
  FActualFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualOvertime(AIndex: Integer; const AValue: string); 


begin
  If (FActualOvertime=AValue) then exit;
  FActualOvertime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualOvertimeMilliseconds=AValue) then exit;
  FActualOvertimeMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualOvertimeTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualOvertimeTimeSpan=AValue) then exit;
  FActualOvertimeTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualStart=AValue) then exit;
  FActualStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetComments(AIndex: Integer; const AValue: string); 


begin
  If (FComments=AValue) then exit;
  FComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetIsConfirmed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsConfirmed=AValue) then exit;
  FIsConfirmed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetOvertime(AIndex: Integer; const AValue: string); 


begin
  If (FOvertime=AValue) then exit;
  FOvertime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeMilliseconds=AValue) then exit;
  FOvertimeMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetOvertimeTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeTimeSpan=AValue) then exit;
  FOvertimeTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetPercentComplete(AIndex: Integer; const AValue: TInt16); 


begin
  If (FPercentComplete=AValue) then exit;
  FPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRegularWork(AIndex: Integer; const AValue: string); 


begin
  If (FRegularWork=AValue) then exit;
  FRegularWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRegularWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegularWorkMilliseconds=AValue) then exit;
  FRegularWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRegularWorkTimeSpan=AValue) then exit;
  FRegularWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRemainingOvertime(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingOvertime=AValue) then exit;
  FRemainingOvertime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRemainingOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingOvertimeMilliseconds=AValue) then exit;
  FRemainingOvertimeMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRemainingOvertimeTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingOvertimeTimeSpan=AValue) then exit;
  FRemainingOvertimeTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRemainingWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingWork=AValue) then exit;
  FRemainingWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRemainingWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingWorkMilliseconds=AValue) then exit;
  FRemainingWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingWorkTimeSpan=AValue) then exit;
  FRemainingWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusAssignment.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSStatusAssignment.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSStatusAssignment.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSStatusAssignment.Project(AService: TODataService) : TPSPublishedProject; 


begin
  Result:=TPSPublishedProject(GetContainedSingleTon(AService,'Project', TPSPublishedProject));
end;


Function TPSStatusAssignment.Resource(AService: TODataService) : TPSEnterpriseResource; 


begin
  Result:=TPSEnterpriseResource(GetContainedSingleTon(AService,'Resource', TPSEnterpriseResource));
end;


Function TPSStatusAssignment.Task(AService: TODataService) : TPSStatusTask; 


begin
  Result:=TPSStatusTask(GetContainedSingleTon(AService,'Task', TPSStatusTask));
end;


{ --------------------------------------------------------------------
  TPSProject
  --------------------------------------------------------------------}


Class Function TPSProject.ObjectRestKind : String; 

begin
  Result:='Project';
end;


Procedure TPSProject.SetApprovedEnd(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FApprovedEnd=AValue) then exit;
  FApprovedEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetApprovedStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FApprovedStart=AValue) then exit;
  FApprovedStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetCheckedOutDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCheckedOutDate=AValue) then exit;
  FCheckedOutDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetCheckOutDescription(AIndex: Integer; const AValue: string); 


begin
  If (FCheckOutDescription=AValue) then exit;
  FCheckOutDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetCheckOutId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FCheckOutId=AValue) then exit;
  FCheckOutId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetCreatedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreatedDate=AValue) then exit;
  FCreatedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetDefaultOvertimeRateUnits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultOvertimeRateUnits=AValue) then exit;
  FDefaultOvertimeRateUnits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetDefaultStandardRateUnits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultStandardRateUnits=AValue) then exit;
  FDefaultStandardRateUnits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetHasMppPendingImport(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasMppPendingImport=AValue) then exit;
  FHasMppPendingImport:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetIsCheckedOut(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCheckedOut=AValue) then exit;
  FIsCheckedOut:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetLastPublishedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastPublishedDate=AValue) then exit;
  FLastPublishedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetLastSavedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastSavedDate=AValue) then exit;
  FLastSavedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetOptimizerDecision(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOptimizerDecision=AValue) then exit;
  FOptimizerDecision:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetPercentComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentComplete=AValue) then exit;
  FPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetPlannerDecision(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPlannerDecision=AValue) then exit;
  FPlannerDecision:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetProjectSiteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FProjectSiteUrl=AValue) then exit;
  FProjectSiteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetProjectType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FProjectType=AValue) then exit;
  FProjectType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetSummaryTaskId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSummaryTaskId=AValue) then exit;
  FSummaryTaskId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetTaskListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTaskListId=AValue) then exit;
  FTaskListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProject.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSProject.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSProject.CheckedOutBy(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'CheckedOutBy', TSPUser));
end;


Function TPSProject.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSProject.EnterpriseProjectType(AService: TODataService) : TPSEnterpriseProjectType; 


begin
  Result:=TPSEnterpriseProjectType(GetContainedSingleTon(AService,'EnterpriseProjectType', TPSEnterpriseProjectType));
end;


Function TPSProject.Phase(AService: TODataService) : TPSPhase; 


begin
  Result:=TPSPhase(GetContainedSingleTon(AService,'Phase', TPSPhase));
end;


Function TPSProject.QueueJobs(AService: TODataService) : TPSQueueJob; 


begin
  Result:=TPSQueueJob(GetContainedSingleTon(AService,'QueueJobs', TPSQueueJob));
end;


Function TPSProject.Stage(AService: TODataService) : TPSStage; 


begin
  Result:=TPSStage(GetContainedSingleTon(AService,'Stage', TPSStage));
end;


{ --------------------------------------------------------------------
  TPSEnterpriseProjectType
  --------------------------------------------------------------------}


Class Function TPSEnterpriseProjectType.ObjectRestKind : String; 

begin
  Result:='EnterpriseProjectType';
end;


Procedure TPSEnterpriseProjectType.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetIsDefault(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDefault=AValue) then exit;
  FIsDefault:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetIsManaged(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsManaged=AValue) then exit;
  FIsManaged:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetProjectPlanTemplateId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FProjectPlanTemplateId=AValue) then exit;
  FProjectPlanTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetWorkflowAssociationId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowAssociationId=AValue) then exit;
  FWorkflowAssociationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetWorkflowAssociationName(AIndex: Integer; const AValue: string); 


begin
  If (FWorkflowAssociationName=AValue) then exit;
  FWorkflowAssociationName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEnterpriseProjectType.SetWorkspaceTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FWorkspaceTemplateName=AValue) then exit;
  FWorkspaceTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSEnterpriseProjectType.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSEnterpriseProjectType.ProjectDetailPages(AService: TODataService) : TPSProjectDetailPage; 


begin
  Result:=TPSProjectDetailPage(GetContainedSingleTon(AService,'ProjectDetailPages', TPSProjectDetailPage));
end;


{ --------------------------------------------------------------------
  TPSProjectDetailPage
  --------------------------------------------------------------------}


Class Function TPSProjectDetailPage.ObjectRestKind : String; 

begin
  Result:='ProjectDetailPage';
end;


Procedure TPSProjectDetailPage.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectDetailPage.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectDetailPage.SetPageType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPageType=AValue) then exit;
  FPageType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSProjectDetailPage.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSProjectDetailPage.Item(AService: TODataService) : TSPListItem; 


begin
  Result:=TSPListItem(GetContainedSingleTon(AService,'Item', TSPListItem));
end;


{ --------------------------------------------------------------------
  TPSPhase
  --------------------------------------------------------------------}


Class Function TPSPhase.ObjectRestKind : String; 

begin
  Result:='Phase';
end;


Procedure TPSPhase.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPhase.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPhase.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPhase.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSPhase.Stages(AService: TODataService) : TPSStage; 


begin
  Result:=TPSStage(GetContainedSingleTon(AService,'Stages', TPSStage));
end;


{ --------------------------------------------------------------------
  TPSStage
  --------------------------------------------------------------------}


Class Function TPSStage.ObjectRestKind : String; 

begin
  Result:='Stage';
end;


Procedure TPSStage.SetBehavior(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBehavior=AValue) then exit;
  FBehavior:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStage.SetCheckInRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FCheckInRequired=AValue) then exit;
  FCheckInRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStage.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStage.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStage.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStage.SetSubmitDescription(AIndex: Integer; const AValue: string); 


begin
  If (FSubmitDescription=AValue) then exit;
  FSubmitDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSStage.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSStage.CustomFields(AService: TODataService) : TPSStageCustomField; 


begin
  Result:=TPSStageCustomField(GetContainedSingleTon(AService,'CustomFields', TPSStageCustomField));
end;


Function TPSStage.Phase(AService: TODataService) : TPSPhase; 


begin
  Result:=TPSPhase(GetContainedSingleTon(AService,'Phase', TPSPhase));
end;


Function TPSStage.ProjectDetailPages(AService: TODataService) : TPSStageDetailPage; 


begin
  Result:=TPSStageDetailPage(GetContainedSingleTon(AService,'ProjectDetailPages', TPSStageDetailPage));
end;


Function TPSStage.WorkflowStatusPage(AService: TODataService) : TPSProjectDetailPage; 


begin
  Result:=TPSProjectDetailPage(GetContainedSingleTon(AService,'WorkflowStatusPage', TPSProjectDetailPage));
end;


{ --------------------------------------------------------------------
  TPSStageCustomField
  --------------------------------------------------------------------}


Class Function TPSStageCustomField.ObjectRestKind : String; 

begin
  Result:='StageCustomField';
end;


Procedure TPSStageCustomField.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCustomField.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCustomField.SetReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FReadOnly=AValue) then exit;
  FReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageCustomField.SetRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequired=AValue) then exit;
  FRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSStageCustomField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSStageCustomField.Stage(AService: TODataService) : TPSStage; 


begin
  Result:=TPSStage(GetContainedSingleTon(AService,'Stage', TPSStage));
end;


{ --------------------------------------------------------------------
  TPSStageDetailPage
  --------------------------------------------------------------------}


Class Function TPSStageDetailPage.ObjectRestKind : String; 

begin
  Result:='StageDetailPage';
end;


Procedure TPSStageDetailPage.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageDetailPage.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageDetailPage.SetPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPosition=AValue) then exit;
  FPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStageDetailPage.SetRequiresAttention(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequiresAttention=AValue) then exit;
  FRequiresAttention:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSStageDetailPage.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSStageDetailPage.Page(AService: TODataService) : TPSProjectDetailPage; 


begin
  Result:=TPSProjectDetailPage(GetContainedSingleTon(AService,'Page', TPSProjectDetailPage));
end;


Function TPSStageDetailPage.Stage(AService: TODataService) : TPSStage; 


begin
  Result:=TPSStage(GetContainedSingleTon(AService,'Stage', TPSStage));
end;


{ --------------------------------------------------------------------
  TPSQueueJob
  --------------------------------------------------------------------}


Class Function TPSQueueJob.ObjectRestKind : String; 

begin
  Result:='QueueJob';
end;


Procedure TPSQueueJob.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSQueueJob.SetJobState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FJobState=AValue) then exit;
  FJobState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSQueueJob.SetMessageType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMessageType=AValue) then exit;
  FMessageType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSQueueJob.SetPercentComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentComplete=AValue) then exit;
  FPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSQueueJob.SetWaitMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWaitMilliseconds=AValue) then exit;
  FWaitMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSQueueJob.SetWaitTime(AIndex: Integer; const AValue: TTime); 


begin
  If (FWaitTime=AValue) then exit;
  FWaitTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSQueueJob.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSQueueJob.Project(AService: TODataService) : TPSProject; 


begin
  Result:=TPSProject(GetContainedSingleTon(AService,'Project', TPSProject));
end;


Function TPSQueueJob.Submitter(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Submitter', TSPUser));
end;


{ --------------------------------------------------------------------
  TPSPublishedProject
  --------------------------------------------------------------------}


Class Function TPSPublishedProject.ObjectRestKind : String; 

begin
  Result:='PublishedProject';
end;


Procedure TPSPublishedProject.SetCalculateActualCosts(AIndex: Integer; const AValue: boolean); 


begin
  If (FCalculateActualCosts=AValue) then exit;
  FCalculateActualCosts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCalculatesActualCosts(AIndex: Integer; const AValue: boolean); 


begin
  If (FCalculatesActualCosts=AValue) then exit;
  FCalculatesActualCosts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCriticalSlackLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCriticalSlackLimit=AValue) then exit;
  FCriticalSlackLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCurrencyCode(AIndex: Integer; const AValue: string); 


begin
  If (FCurrencyCode=AValue) then exit;
  FCurrencyCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCurrencyDigits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrencyDigits=AValue) then exit;
  FCurrencyDigits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCurrencyPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrencyPosition=AValue) then exit;
  FCurrencyPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCurrencySymbol(AIndex: Integer; const AValue: string); 


begin
  If (FCurrencySymbol=AValue) then exit;
  FCurrencySymbol:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetCurrentDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCurrentDate=AValue) then exit;
  FCurrentDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDaysPerMonth(AIndex: Integer; const AValue: TInt16); 


begin
  If (FDaysPerMonth=AValue) then exit;
  FDaysPerMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultEffortDriven(AIndex: Integer; const AValue: boolean); 


begin
  If (FDefaultEffortDriven=AValue) then exit;
  FDefaultEffortDriven:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultEstimatedDuration(AIndex: Integer; const AValue: boolean); 


begin
  If (FDefaultEstimatedDuration=AValue) then exit;
  FDefaultEstimatedDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultFinishTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDefaultFinishTime=AValue) then exit;
  FDefaultFinishTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultFixedCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultFixedCostAccrual=AValue) then exit;
  FDefaultFixedCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultOvertimeRate(AIndex: Integer; const AValue: Double); 


begin
  If (FDefaultOvertimeRate=AValue) then exit;
  FDefaultOvertimeRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultStandardRate(AIndex: Integer; const AValue: Double); 


begin
  If (FDefaultStandardRate=AValue) then exit;
  FDefaultStandardRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultStartTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDefaultStartTime=AValue) then exit;
  FDefaultStartTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultTaskType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultTaskType=AValue) then exit;
  FDefaultTaskType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDefaultWorkFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultWorkFormat=AValue) then exit;
  FDefaultWorkFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetEnterpriseProjectTypeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEnterpriseProjectTypeId=AValue) then exit;
  FEnterpriseProjectTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetFinishDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinishDate=AValue) then exit;
  FFinishDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetFiscalYearStartMonth(AIndex: Integer; const AValue: TInt16); 


begin
  If (FFiscalYearStartMonth=AValue) then exit;
  FFiscalYearStartMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetHonorConstraints(AIndex: Integer; const AValue: boolean); 


begin
  If (FHonorConstraints=AValue) then exit;
  FHonorConstraints:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetIsEnterpriseProject(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEnterpriseProject=AValue) then exit;
  FIsEnterpriseProject:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMinutesPerDay(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMinutesPerDay=AValue) then exit;
  FMinutesPerDay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMinutesPerWeek(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMinutesPerWeek=AValue) then exit;
  FMinutesPerWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMoveActualIfLater(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveActualIfLater=AValue) then exit;
  FMoveActualIfLater:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMoveActualToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveActualToStatus=AValue) then exit;
  FMoveActualToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMoveRemainingIfEarlier(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveRemainingIfEarlier=AValue) then exit;
  FMoveRemainingIfEarlier:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMoveRemainingToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveRemainingToStatus=AValue) then exit;
  FMoveRemainingToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetMultipleCriticalPaths(AIndex: Integer; const AValue: boolean); 


begin
  If (FMultipleCriticalPaths=AValue) then exit;
  FMultipleCriticalPaths:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetNewTasksAreManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FNewTasksAreManual=AValue) then exit;
  FNewTasksAreManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetNumberFiscalYearFromStart(AIndex: Integer; const AValue: boolean); 


begin
  If (FNumberFiscalYearFromStart=AValue) then exit;
  FNumberFiscalYearFromStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetProtectedActualsSynch(AIndex: Integer; const AValue: boolean); 


begin
  If (FProtectedActualsSynch=AValue) then exit;
  FProtectedActualsSynch:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetScheduledFromStart(AIndex: Integer; const AValue: boolean); 


begin
  If (FScheduledFromStart=AValue) then exit;
  FScheduledFromStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetShowEstimatedDurations(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowEstimatedDurations=AValue) then exit;
  FShowEstimatedDurations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetSplitInProgress(AIndex: Integer; const AValue: boolean); 


begin
  If (FSplitInProgress=AValue) then exit;
  FSplitInProgress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetSpreadActualCostsToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FSpreadActualCostsToStatus=AValue) then exit;
  FSpreadActualCostsToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetSpreadPercentCompleteToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FSpreadPercentCompleteToStatus=AValue) then exit;
  FSpreadPercentCompleteToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetStartDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStartDate=AValue) then exit;
  FStartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetStatusDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStatusDate=AValue) then exit;
  FStatusDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetTrackingMode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTrackingMode=AValue) then exit;
  FTrackingMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetWeekStartDay(AIndex: Integer; const AValue: TInt16); 


begin
  If (FWeekStartDay=AValue) then exit;
  FWeekStartDay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProject.SetWinprojVersion(AIndex: Integer; const AValue: double); 


begin
  If (FWinprojVersion=AValue) then exit;
  FWinprojVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPublishedProject.Assignments(AService: TODataService) : TPSPublishedAssignment; 


begin
  Result:=TPSPublishedAssignment(GetContainedSingleTon(AService,'Assignments', TPSPublishedAssignment));
end;


Function TPSPublishedProject.Calendar(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'Calendar', TPSCalendar));
end;


Function TPSPublishedProject.Draft(AService: TODataService) : TPSDraftProject; 


begin
  Result:=TPSDraftProject(GetContainedSingleTon(AService,'Draft', TPSDraftProject));
end;


Function TPSPublishedProject.IncludeCustomFields(AService: TODataService) : TPSPublishedProject; 


begin
  Result:=TPSPublishedProject(GetContainedSingleTon(AService,'IncludeCustomFields', TPSPublishedProject));
end;


Function TPSPublishedProject.Owner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Owner', TSPUser));
end;


Function TPSPublishedProject.ProjectResources(AService: TODataService) : TPSPublishedProjectResource; 


begin
  Result:=TPSPublishedProjectResource(GetContainedSingleTon(AService,'ProjectResources', TPSPublishedProjectResource));
end;


Function TPSPublishedProject.TaskLinks(AService: TODataService) : TPSPublishedTaskLink; 


begin
  Result:=TPSPublishedTaskLink(GetContainedSingleTon(AService,'TaskLinks', TPSPublishedTaskLink));
end;


Function TPSPublishedProject.Tasks(AService: TODataService) : TPSPublishedTask; 


begin
  Result:=TPSPublishedTask(GetContainedSingleTon(AService,'Tasks', TPSPublishedTask));
end;


{ --------------------------------------------------------------------
  TPSPublishedAssignment
  --------------------------------------------------------------------}


Class Function TPSPublishedAssignment.ObjectRestKind : String; 

begin
  Result:='PublishedAssignment';
end;


Procedure TPSPublishedAssignment.SetActualCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCost=AValue) then exit;
  FActualCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualFinish=AValue) then exit;
  FActualFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualOvertimeWork=AValue) then exit;
  FActualOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualOvertimeWorkMilliseconds=AValue) then exit;
  FActualOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualOvertimeWorkTimeSpan=AValue) then exit;
  FActualOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualStart=AValue) then exit;
  FActualStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetBudgetedCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCost=AValue) then exit;
  FBudgetedCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetBudgetedWork(AIndex: Integer; const AValue: string); 


begin
  If (FBudgetedWork=AValue) then exit;
  FBudgetedWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetBudgetedWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBudgetedWorkMilliseconds=AValue) then exit;
  FBudgetedWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetBudgetedWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBudgetedWorkTimeSpan=AValue) then exit;
  FBudgetedWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetCost(AIndex: Integer; const AValue: Double); 


begin
  If (FCost=AValue) then exit;
  FCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetDefaultBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultBookingType=AValue) then exit;
  FDefaultBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetDelay(AIndex: Integer; const AValue: string); 


begin
  If (FDelay=AValue) then exit;
  FDelay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetDelayMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDelayMilliseconds=AValue) then exit;
  FDelayMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetDelayTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDelayTimeSpan=AValue) then exit;
  FDelayTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetIsLockedByManager(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsLockedByManager=AValue) then exit;
  FIsLockedByManager:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetIsWorkResource(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsWorkResource=AValue) then exit;
  FIsWorkResource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FOvertimeWork=AValue) then exit;
  FOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeWorkMilliseconds=AValue) then exit;
  FOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeWorkTimeSpan=AValue) then exit;
  FOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentWorkComplete=AValue) then exit;
  FPercentWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRegularWork(AIndex: Integer; const AValue: string); 


begin
  If (FRegularWork=AValue) then exit;
  FRegularWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRegularWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegularWorkMilliseconds=AValue) then exit;
  FRegularWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRegularWorkTimeSpan=AValue) then exit;
  FRegularWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRemainingOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingOvertimeWork=AValue) then exit;
  FRemainingOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingOvertimeWorkMilliseconds=AValue) then exit;
  FRemainingOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingOvertimeWorkTimeSpan=AValue) then exit;
  FRemainingOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRemainingWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingWork=AValue) then exit;
  FRemainingWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRemainingWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingWorkMilliseconds=AValue) then exit;
  FRemainingWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingWorkTimeSpan=AValue) then exit;
  FRemainingWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetResourceCapacity(AIndex: Integer; const AValue: Double); 


begin
  If (FResourceCapacity=AValue) then exit;
  FResourceCapacity:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedAssignment.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPublishedAssignment.Owner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Owner', TSPUser));
end;


Function TPSPublishedAssignment.Parent(AService: TODataService) : TPSPublishedAssignment; 


begin
  Result:=TPSPublishedAssignment(GetContainedSingleTon(AService,'Parent', TPSPublishedAssignment));
end;


Function TPSPublishedAssignment.Resource(AService: TODataService) : TPSPublishedProjectResource; 


begin
  Result:=TPSPublishedProjectResource(GetContainedSingleTon(AService,'Resource', TPSPublishedProjectResource));
end;


Function TPSPublishedAssignment.Task(AService: TODataService) : TPSPublishedTask; 


begin
  Result:=TPSPublishedTask(GetContainedSingleTon(AService,'Task', TPSPublishedTask));
end;


{ --------------------------------------------------------------------
  TPSPublishedProjectResource
  --------------------------------------------------------------------}


Class Function TPSPublishedProjectResource.ObjectRestKind : String; 

begin
  Result:='PublishedProjectResource';
end;


Procedure TPSPublishedProjectResource.SetCanLevel(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLevel=AValue) then exit;
  FCanLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetCode(AIndex: Integer; const AValue: string); 


begin
  If (FCode=AValue) then exit;
  FCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCostAccrual=AValue) then exit;
  FCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetCostCenter(AIndex: Integer; const AValue: string); 


begin
  If (FCostCenter=AValue) then exit;
  FCostCenter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetCostPerUse(AIndex: Integer; const AValue: Double); 


begin
  If (FCostPerUse=AValue) then exit;
  FCostPerUse:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetDefaultBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultBookingType=AValue) then exit;
  FDefaultBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetInitials(AIndex: Integer; const AValue: string); 


begin
  If (FInitials=AValue) then exit;
  FInitials:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetMaterialLabel(AIndex: Integer; const AValue: string); 


begin
  If (FMaterialLabel=AValue) then exit;
  FMaterialLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetMaximumCapacity(AIndex: Integer; const AValue: Double); 


begin
  If (FMaximumCapacity=AValue) then exit;
  FMaximumCapacity:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetOvertimeRate(AIndex: Integer; const AValue: Double); 


begin
  If (FOvertimeRate=AValue) then exit;
  FOvertimeRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetOvertimeRateUnits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeRateUnits=AValue) then exit;
  FOvertimeRateUnits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetPhonetics(AIndex: Integer; const AValue: string); 


begin
  If (FPhonetics=AValue) then exit;
  FPhonetics:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetStandardRate(AIndex: Integer; const AValue: Double); 


begin
  If (FStandardRate=AValue) then exit;
  FStandardRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedProjectResource.SetStandardRateUnits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStandardRateUnits=AValue) then exit;
  FStandardRateUnits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPublishedProjectResource.Assignments(AService: TODataService) : TPSPublishedAssignment; 


begin
  Result:=TPSPublishedAssignment(GetContainedSingleTon(AService,'Assignments', TPSPublishedAssignment));
end;


Function TPSPublishedProjectResource.DefaultAssignmentOwner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'DefaultAssignmentOwner', TSPUser));
end;


{ --------------------------------------------------------------------
  TPSTask
  --------------------------------------------------------------------}


Class Function TPSTask.ObjectRestKind : String; 

begin
  Result:='Task';
end;


Procedure TPSTask.SetActualDuration(AIndex: Integer; const AValue: string); 


begin
  If (FActualDuration=AValue) then exit;
  FActualDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetActualDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualDurationMilliseconds=AValue) then exit;
  FActualDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetActualDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualDurationTimeSpan=AValue) then exit;
  FActualDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBaselineCost=AValue) then exit;
  FBaselineCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineDuration(AIndex: Integer; const AValue: string); 


begin
  If (FBaselineDuration=AValue) then exit;
  FBaselineDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaselineDurationMilliseconds=AValue) then exit;
  FBaselineDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBaselineDurationTimeSpan=AValue) then exit;
  FBaselineDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FBaselineFinish=AValue) then exit;
  FBaselineFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FBaselineStart=AValue) then exit;
  FBaselineStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineWork(AIndex: Integer; const AValue: string); 


begin
  If (FBaselineWork=AValue) then exit;
  FBaselineWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaselineWorkMilliseconds=AValue) then exit;
  FBaselineWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBaselineWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBaselineWorkTimeSpan=AValue) then exit;
  FBaselineWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetBudgetCost(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetCost=AValue) then exit;
  FBudgetCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetCostPerformanceIndex(AIndex: Integer; const AValue: Double); 


begin
  If (FCostPerformanceIndex=AValue) then exit;
  FCostPerformanceIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FCostVariance=AValue) then exit;
  FCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetCostVarianceAtCompletion(AIndex: Integer; const AValue: Double); 


begin
  If (FCostVarianceAtCompletion=AValue) then exit;
  FCostVarianceAtCompletion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetCostVariancePercentage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCostVariancePercentage=AValue) then exit;
  FCostVariancePercentage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetDurationVariance(AIndex: Integer; const AValue: string); 


begin
  If (FDurationVariance=AValue) then exit;
  FDurationVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetDurationVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDurationVarianceMilliseconds=AValue) then exit;
  FDurationVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetDurationVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDurationVarianceTimeSpan=AValue) then exit;
  FDurationVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetEarliestFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FEarliestFinish=AValue) then exit;
  FEarliestFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetEarliestStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FEarliestStart=AValue) then exit;
  FEarliestStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetEstimateAtCompletion(AIndex: Integer; const AValue: Double); 


begin
  If (FEstimateAtCompletion=AValue) then exit;
  FEstimateAtCompletion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFinishSlack(AIndex: Integer; const AValue: string); 


begin
  If (FFinishSlack=AValue) then exit;
  FFinishSlack:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFinishSlackMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFinishSlackMilliseconds=AValue) then exit;
  FFinishSlackMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFinishSlackTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FFinishSlackTimeSpan=AValue) then exit;
  FFinishSlackTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFinishVariance(AIndex: Integer; const AValue: string); 


begin
  If (FFinishVariance=AValue) then exit;
  FFinishVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFinishVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFinishVarianceMilliseconds=AValue) then exit;
  FFinishVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFinishVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FFinishVarianceTimeSpan=AValue) then exit;
  FFinishVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFreeSlack(AIndex: Integer; const AValue: string); 


begin
  If (FFreeSlack=AValue) then exit;
  FFreeSlack:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFreeSlackMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFreeSlackMilliseconds=AValue) then exit;
  FFreeSlackMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetFreeSlackTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FFreeSlackTimeSpan=AValue) then exit;
  FFreeSlackTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsCritical(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCritical=AValue) then exit;
  FIsCritical:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsExternalTask(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsExternalTask=AValue) then exit;
  FIsExternalTask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsOverAllocated(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsOverAllocated=AValue) then exit;
  FIsOverAllocated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsRecurring(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRecurring=AValue) then exit;
  FIsRecurring:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsRecurringSummary(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRecurringSummary=AValue) then exit;
  FIsRecurringSummary:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsRolledUp(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsRolledUp=AValue) then exit;
  FIsRolledUp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsSubProject(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSubProject=AValue) then exit;
  FIsSubProject:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsSubProjectReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSubProjectReadOnly=AValue) then exit;
  FIsSubProjectReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsSubProjectScheduledFromFinish(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSubProjectScheduledFromFinish=AValue) then exit;
  FIsSubProjectScheduledFromFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetIsSummary(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSummary=AValue) then exit;
  FIsSummary:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetLatestFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLatestFinish=AValue) then exit;
  FLatestFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetLatestStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLatestStart=AValue) then exit;
  FLatestStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetOutlinePosition(AIndex: Integer; const AValue: string); 


begin
  If (FOutlinePosition=AValue) then exit;
  FOutlinePosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FOvertimeCost=AValue) then exit;
  FOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FOvertimeWork=AValue) then exit;
  FOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeWorkMilliseconds=AValue) then exit;
  FOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeWorkTimeSpan=AValue) then exit;
  FOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetPercentWorkComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentWorkComplete=AValue) then exit;
  FPercentWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetPreLevelingFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FPreLevelingFinish=AValue) then exit;
  FPreLevelingFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetPreLevelingStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FPreLevelingStart=AValue) then exit;
  FPreLevelingStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRegularWork(AIndex: Integer; const AValue: string); 


begin
  If (FRegularWork=AValue) then exit;
  FRegularWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRegularWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegularWorkMilliseconds=AValue) then exit;
  FRegularWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRegularWorkTimeSpan=AValue) then exit;
  FRegularWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingCost(AIndex: Integer; const AValue: Double); 


begin
  If (FRemainingCost=AValue) then exit;
  FRemainingCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FRemainingOvertimeCost=AValue) then exit;
  FRemainingOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingOvertimeWork=AValue) then exit;
  FRemainingOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingOvertimeWorkMilliseconds=AValue) then exit;
  FRemainingOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingOvertimeWorkTimeSpan=AValue) then exit;
  FRemainingOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingWork=AValue) then exit;
  FRemainingWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingWorkMilliseconds=AValue) then exit;
  FRemainingWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingWorkTimeSpan=AValue) then exit;
  FRemainingWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetResume(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FResume=AValue) then exit;
  FResume:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduleCostVariance(AIndex: Integer; const AValue: Double); 


begin
  If (FScheduleCostVariance=AValue) then exit;
  FScheduleCostVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduledDuration(AIndex: Integer; const AValue: string); 


begin
  If (FScheduledDuration=AValue) then exit;
  FScheduledDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduledDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FScheduledDurationMilliseconds=AValue) then exit;
  FScheduledDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduledDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FScheduledDurationTimeSpan=AValue) then exit;
  FScheduledDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduledFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FScheduledFinish=AValue) then exit;
  FScheduledFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduledStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FScheduledStart=AValue) then exit;
  FScheduledStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetSchedulePerformanceIndex(AIndex: Integer; const AValue: Double); 


begin
  If (FSchedulePerformanceIndex=AValue) then exit;
  FSchedulePerformanceIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetScheduleVariancePercentage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FScheduleVariancePercentage=AValue) then exit;
  FScheduleVariancePercentage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStartSlack(AIndex: Integer; const AValue: string); 


begin
  If (FStartSlack=AValue) then exit;
  FStartSlack:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStartSlackMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStartSlackMilliseconds=AValue) then exit;
  FStartSlackMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStartSlackTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FStartSlackTimeSpan=AValue) then exit;
  FStartSlackTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStartVariance(AIndex: Integer; const AValue: string); 


begin
  If (FStartVariance=AValue) then exit;
  FStartVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStartVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStartVarianceMilliseconds=AValue) then exit;
  FStartVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStartVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FStartVarianceTimeSpan=AValue) then exit;
  FStartVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetStop(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStop=AValue) then exit;
  FStop:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetToCompletePerformanceIndex(AIndex: Integer; const AValue: Double); 


begin
  If (FToCompletePerformanceIndex=AValue) then exit;
  FToCompletePerformanceIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetTotalSlack(AIndex: Integer; const AValue: string); 


begin
  If (FTotalSlack=AValue) then exit;
  FTotalSlack:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetTotalSlackMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalSlackMilliseconds=AValue) then exit;
  FTotalSlackMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetTotalSlackTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalSlackTimeSpan=AValue) then exit;
  FTotalSlackTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetWorkBreakdownStructure(AIndex: Integer; const AValue: string); 


begin
  If (FWorkBreakdownStructure=AValue) then exit;
  FWorkBreakdownStructure:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetWorkVariance(AIndex: Integer; const AValue: string); 


begin
  If (FWorkVariance=AValue) then exit;
  FWorkVariance:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetWorkVarianceMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkVarianceMilliseconds=AValue) then exit;
  FWorkVarianceMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTask.SetWorkVarianceTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkVarianceTimeSpan=AValue) then exit;
  FWorkVarianceTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSTask.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSTask.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSTask.SubProject(AService: TODataService) : TPSPublishedProject; 


begin
  Result:=TPSPublishedProject(GetContainedSingleTon(AService,'SubProject', TPSPublishedProject));
end;


{ --------------------------------------------------------------------
  TPSPublishedTask
  --------------------------------------------------------------------}


Class Function TPSPublishedTask.ObjectRestKind : String; 

begin
  Result:='PublishedTask';
end;


Procedure TPSPublishedTask.SetActualCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCost=AValue) then exit;
  FActualCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCostWorkPerformed=AValue) then exit;
  FActualCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualFinish=AValue) then exit;
  FActualFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualOvertimeCost=AValue) then exit;
  FActualOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualOvertimeWork=AValue) then exit;
  FActualOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualOvertimeWorkMilliseconds=AValue) then exit;
  FActualOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualOvertimeWorkTimeSpan=AValue) then exit;
  FActualOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualStart=AValue) then exit;
  FActualStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetBudgetedCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkPerformed=AValue) then exit;
  FBudgetedCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetBudgetedCostWorkScheduled(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkScheduled=AValue) then exit;
  FBudgetedCostWorkScheduled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetBudgetWork(AIndex: Integer; const AValue: string); 


begin
  If (FBudgetWork=AValue) then exit;
  FBudgetWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetBudgetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBudgetWorkMilliseconds=AValue) then exit;
  FBudgetWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetBudgetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBudgetWorkTimeSpan=AValue) then exit;
  FBudgetWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetCompletion(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCompletion=AValue) then exit;
  FCompletion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetConstraintStartEnd(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FConstraintStartEnd=AValue) then exit;
  FConstraintStartEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetConstraintType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FConstraintType=AValue) then exit;
  FConstraintType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetContact(AIndex: Integer; const AValue: string); 


begin
  If (FContact=AValue) then exit;
  FContact:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetCost(AIndex: Integer; const AValue: Double); 


begin
  If (FCost=AValue) then exit;
  FCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetDeadline(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDeadline=AValue) then exit;
  FDeadline:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetDuration(AIndex: Integer; const AValue: string); 


begin
  If (FDuration=AValue) then exit;
  FDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDurationMilliseconds=AValue) then exit;
  FDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDurationTimeSpan=AValue) then exit;
  FDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetFixedCost(AIndex: Integer; const AValue: Double); 


begin
  If (FFixedCost=AValue) then exit;
  FFixedCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetFixedCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFixedCostAccrual=AValue) then exit;
  FFixedCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetIsActive(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsActive=AValue) then exit;
  FIsActive:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetIsEffortDriven(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEffortDriven=AValue) then exit;
  FIsEffortDriven:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetIsLockedByManager(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsLockedByManager=AValue) then exit;
  FIsLockedByManager:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetIsManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsManual=AValue) then exit;
  FIsManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetIsMarked(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMarked=AValue) then exit;
  FIsMarked:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetIsMilestone(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMilestone=AValue) then exit;
  FIsMilestone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetLevelingAdjustsAssignments(AIndex: Integer; const AValue: boolean); 


begin
  If (FLevelingAdjustsAssignments=AValue) then exit;
  FLevelingAdjustsAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetLevelingCanSplit(AIndex: Integer; const AValue: boolean); 


begin
  If (FLevelingCanSplit=AValue) then exit;
  FLevelingCanSplit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetLevelingDelay(AIndex: Integer; const AValue: string); 


begin
  If (FLevelingDelay=AValue) then exit;
  FLevelingDelay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetLevelingDelayMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLevelingDelayMilliseconds=AValue) then exit;
  FLevelingDelayMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetLevelingDelayTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FLevelingDelayTimeSpan=AValue) then exit;
  FLevelingDelayTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetOutlineLevel(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOutlineLevel=AValue) then exit;
  FOutlineLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetPercentComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentComplete=AValue) then exit;
  FPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetPercentPhysicalWorkComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentPhysicalWorkComplete=AValue) then exit;
  FPercentPhysicalWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetPriority(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPriority=AValue) then exit;
  FPriority:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetRemainingDuration(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingDuration=AValue) then exit;
  FRemainingDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetRemainingDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingDurationMilliseconds=AValue) then exit;
  FRemainingDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetRemainingDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingDurationTimeSpan=AValue) then exit;
  FRemainingDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetTaskType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTaskType=AValue) then exit;
  FTaskType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetUsePercentPhysicalWorkComplete(AIndex: Integer; const AValue: boolean); 


begin
  If (FUsePercentPhysicalWorkComplete=AValue) then exit;
  FUsePercentPhysicalWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPublishedTask.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPublishedTask.Assignments(AService: TODataService) : TPSPublishedAssignment; 


begin
  Result:=TPSPublishedAssignment(GetContainedSingleTon(AService,'Assignments', TPSPublishedAssignment));
end;


Function TPSPublishedTask.Calendar(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'Calendar', TPSCalendar));
end;


Function TPSPublishedTask.Parent(AService: TODataService) : TPSPublishedTask; 


begin
  Result:=TPSPublishedTask(GetContainedSingleTon(AService,'Parent', TPSPublishedTask));
end;


Function TPSPublishedTask.Predecessors(AService: TODataService) : TPSPublishedTaskLink; 


begin
  Result:=TPSPublishedTaskLink(GetContainedSingleTon(AService,'Predecessors', TPSPublishedTaskLink));
end;


Function TPSPublishedTask.Successors(AService: TODataService) : TPSPublishedTaskLink; 


begin
  Result:=TPSPublishedTaskLink(GetContainedSingleTon(AService,'Successors', TPSPublishedTaskLink));
end;


{ --------------------------------------------------------------------
  TPSTaskLink
  --------------------------------------------------------------------}


Class Function TPSTaskLink.ObjectRestKind : String; 

begin
  Result:='TaskLink';
end;


Procedure TPSTaskLink.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSTaskLink.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TPSPublishedTaskLink
  --------------------------------------------------------------------}


Class Function TPSPublishedTaskLink.ObjectRestKind : String; 

begin
  Result:='PublishedTaskLink';
end;


Procedure TPSPublishedTaskLink.SetDependencyType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDependencyType=AValue) then exit;
  FDependencyType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPublishedTaskLink._End(AService: TODataService) : TPSPublishedTask; 


begin
  Result:=TPSPublishedTask(GetContainedSingleTon(AService,'End', TPSPublishedTask));
end;


Function TPSPublishedTaskLink.Start(AService: TODataService) : TPSPublishedTask; 


begin
  Result:=TPSPublishedTask(GetContainedSingleTon(AService,'Start', TPSPublishedTask));
end;


{ --------------------------------------------------------------------
  TPSDraftProject
  --------------------------------------------------------------------}


Class Function TPSDraftProject.ObjectRestKind : String; 

begin
  Result:='DraftProject';
end;


Procedure TPSDraftProject.SetCalculateActualCosts(AIndex: Integer; const AValue: boolean); 


begin
  If (FCalculateActualCosts=AValue) then exit;
  FCalculateActualCosts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCalculatesActualCosts(AIndex: Integer; const AValue: boolean); 


begin
  If (FCalculatesActualCosts=AValue) then exit;
  FCalculatesActualCosts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCriticalSlackLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCriticalSlackLimit=AValue) then exit;
  FCriticalSlackLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCurrencyCode(AIndex: Integer; const AValue: string); 


begin
  If (FCurrencyCode=AValue) then exit;
  FCurrencyCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCurrencyDigits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrencyDigits=AValue) then exit;
  FCurrencyDigits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCurrencyPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrencyPosition=AValue) then exit;
  FCurrencyPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCurrencySymbol(AIndex: Integer; const AValue: string); 


begin
  If (FCurrencySymbol=AValue) then exit;
  FCurrencySymbol:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetCurrentDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCurrentDate=AValue) then exit;
  FCurrentDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDaysPerMonth(AIndex: Integer; const AValue: TInt16); 


begin
  If (FDaysPerMonth=AValue) then exit;
  FDaysPerMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultEffortDriven(AIndex: Integer; const AValue: boolean); 


begin
  If (FDefaultEffortDriven=AValue) then exit;
  FDefaultEffortDriven:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultEstimatedDuration(AIndex: Integer; const AValue: boolean); 


begin
  If (FDefaultEstimatedDuration=AValue) then exit;
  FDefaultEstimatedDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultFinishTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDefaultFinishTime=AValue) then exit;
  FDefaultFinishTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultFixedCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultFixedCostAccrual=AValue) then exit;
  FDefaultFixedCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultOvertimeRate(AIndex: Integer; const AValue: Double); 


begin
  If (FDefaultOvertimeRate=AValue) then exit;
  FDefaultOvertimeRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultStandardRate(AIndex: Integer; const AValue: Double); 


begin
  If (FDefaultStandardRate=AValue) then exit;
  FDefaultStandardRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultStartTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDefaultStartTime=AValue) then exit;
  FDefaultStartTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultTaskType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultTaskType=AValue) then exit;
  FDefaultTaskType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDefaultWorkFormat(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultWorkFormat=AValue) then exit;
  FDefaultWorkFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetFinishDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinishDate=AValue) then exit;
  FFinishDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetFiscalYearStartMonth(AIndex: Integer; const AValue: TInt16); 


begin
  If (FFiscalYearStartMonth=AValue) then exit;
  FFiscalYearStartMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetHonorConstraints(AIndex: Integer; const AValue: boolean); 


begin
  If (FHonorConstraints=AValue) then exit;
  FHonorConstraints:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMinutesPerDay(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMinutesPerDay=AValue) then exit;
  FMinutesPerDay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMinutesPerWeek(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMinutesPerWeek=AValue) then exit;
  FMinutesPerWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMoveActualIfLater(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveActualIfLater=AValue) then exit;
  FMoveActualIfLater:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMoveActualToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveActualToStatus=AValue) then exit;
  FMoveActualToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMoveRemainingIfEarlier(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveRemainingIfEarlier=AValue) then exit;
  FMoveRemainingIfEarlier:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMoveRemainingToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FMoveRemainingToStatus=AValue) then exit;
  FMoveRemainingToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetMultipleCriticalPaths(AIndex: Integer; const AValue: boolean); 


begin
  If (FMultipleCriticalPaths=AValue) then exit;
  FMultipleCriticalPaths:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetNewTasksAreManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FNewTasksAreManual=AValue) then exit;
  FNewTasksAreManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetNumberFiscalYearFromStart(AIndex: Integer; const AValue: boolean); 


begin
  If (FNumberFiscalYearFromStart=AValue) then exit;
  FNumberFiscalYearFromStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetProtectedActualsSynch(AIndex: Integer; const AValue: boolean); 


begin
  If (FProtectedActualsSynch=AValue) then exit;
  FProtectedActualsSynch:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetScheduledFromStart(AIndex: Integer; const AValue: boolean); 


begin
  If (FScheduledFromStart=AValue) then exit;
  FScheduledFromStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetShowEstimatedDurations(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowEstimatedDurations=AValue) then exit;
  FShowEstimatedDurations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetSplitInProgress(AIndex: Integer; const AValue: boolean); 


begin
  If (FSplitInProgress=AValue) then exit;
  FSplitInProgress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetSpreadActualCostsToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FSpreadActualCostsToStatus=AValue) then exit;
  FSpreadActualCostsToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetSpreadPercentCompleteToStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FSpreadPercentCompleteToStatus=AValue) then exit;
  FSpreadPercentCompleteToStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetStartDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStartDate=AValue) then exit;
  FStartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetStatusDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStatusDate=AValue) then exit;
  FStatusDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetTrackingMode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTrackingMode=AValue) then exit;
  FTrackingMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetWeekStartDay(AIndex: Integer; const AValue: TInt16); 


begin
  If (FWeekStartDay=AValue) then exit;
  FWeekStartDay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProject.SetWinprojVersion(AIndex: Integer; const AValue: double); 


begin
  If (FWinprojVersion=AValue) then exit;
  FWinprojVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSDraftProject.Assignments(AService: TODataService) : TPSDraftAssignment; 


begin
  Result:=TPSDraftAssignment(GetContainedSingleTon(AService,'Assignments', TPSDraftAssignment));
end;


Function TPSDraftProject.Calendar(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'Calendar', TPSCalendar));
end;


Function TPSDraftProject.IncludeCustomFields(AService: TODataService) : TPSDraftProject; 


begin
  Result:=TPSDraftProject(GetContainedSingleTon(AService,'IncludeCustomFields', TPSDraftProject));
end;


Function TPSDraftProject.Owner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Owner', TSPUser));
end;


Function TPSDraftProject.ProjectResources(AService: TODataService) : TPSDraftProjectResource; 


begin
  Result:=TPSDraftProjectResource(GetContainedSingleTon(AService,'ProjectResources', TPSDraftProjectResource));
end;


Function TPSDraftProject.TaskLinks(AService: TODataService) : TPSDraftTaskLink; 


begin
  Result:=TPSDraftTaskLink(GetContainedSingleTon(AService,'TaskLinks', TPSDraftTaskLink));
end;


Function TPSDraftProject.Tasks(AService: TODataService) : TPSDraftTask; 


begin
  Result:=TPSDraftTask(GetContainedSingleTon(AService,'Tasks', TPSDraftTask));
end;


{ --------------------------------------------------------------------
  TPSDraftProjectResource
  --------------------------------------------------------------------}


Class Function TPSDraftProjectResource.ObjectRestKind : String; 

begin
  Result:='DraftProjectResource';
end;


Procedure TPSDraftProjectResource.SetCanLevel(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLevel=AValue) then exit;
  FCanLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetCode(AIndex: Integer; const AValue: string); 


begin
  If (FCode=AValue) then exit;
  FCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCostAccrual=AValue) then exit;
  FCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetCostCenter(AIndex: Integer; const AValue: string); 


begin
  If (FCostCenter=AValue) then exit;
  FCostCenter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetCostPerUse(AIndex: Integer; const AValue: Double); 


begin
  If (FCostPerUse=AValue) then exit;
  FCostPerUse:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetDefaultBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefaultBookingType=AValue) then exit;
  FDefaultBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetInitials(AIndex: Integer; const AValue: string); 


begin
  If (FInitials=AValue) then exit;
  FInitials:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetMaterialLabel(AIndex: Integer; const AValue: string); 


begin
  If (FMaterialLabel=AValue) then exit;
  FMaterialLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetMaximumCapacity(AIndex: Integer; const AValue: Double); 


begin
  If (FMaximumCapacity=AValue) then exit;
  FMaximumCapacity:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetOvertimeRate(AIndex: Integer; const AValue: Double); 


begin
  If (FOvertimeRate=AValue) then exit;
  FOvertimeRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetOvertimeRateUnits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeRateUnits=AValue) then exit;
  FOvertimeRateUnits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetPhonetics(AIndex: Integer; const AValue: string); 


begin
  If (FPhonetics=AValue) then exit;
  FPhonetics:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetStandardRate(AIndex: Integer; const AValue: Double); 


begin
  If (FStandardRate=AValue) then exit;
  FStandardRate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftProjectResource.SetStandardRateUnits(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStandardRateUnits=AValue) then exit;
  FStandardRateUnits:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSDraftProjectResource.Assignments(AService: TODataService) : TPSDraftAssignment; 


begin
  Result:=TPSDraftAssignment(GetContainedSingleTon(AService,'Assignments', TPSDraftAssignment));
end;


Function TPSDraftProjectResource.DefaultAssignmentOwner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'DefaultAssignmentOwner', TSPUser));
end;


{ --------------------------------------------------------------------
  TPSDraftTaskLink
  --------------------------------------------------------------------}


Class Function TPSDraftTaskLink.ObjectRestKind : String; 

begin
  Result:='DraftTaskLink';
end;


Procedure TPSDraftTaskLink.SetDependencyType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDependencyType=AValue) then exit;
  FDependencyType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTaskLink.SetEndId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEndId=AValue) then exit;
  FEndId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTaskLink.SetStartId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FStartId=AValue) then exit;
  FStartId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSDraftTaskLink._End(AService: TODataService) : TPSDraftTask; 


begin
  Result:=TPSDraftTask(GetContainedSingleTon(AService,'End', TPSDraftTask));
end;


Function TPSDraftTaskLink.Start(AService: TODataService) : TPSDraftTask; 


begin
  Result:=TPSDraftTask(GetContainedSingleTon(AService,'Start', TPSDraftTask));
end;


{ --------------------------------------------------------------------
  TPSDraftTask
  --------------------------------------------------------------------}


Class Function TPSDraftTask.ObjectRestKind : String; 

begin
  Result:='DraftTask';
end;


Procedure TPSDraftTask.SetActualCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCost=AValue) then exit;
  FActualCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FActualCostWorkPerformed=AValue) then exit;
  FActualCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualFinish=AValue) then exit;
  FActualFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualOvertimeCost(AIndex: Integer; const AValue: Double); 


begin
  If (FActualOvertimeCost=AValue) then exit;
  FActualOvertimeCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualOvertimeWork=AValue) then exit;
  FActualOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualOvertimeWorkMilliseconds=AValue) then exit;
  FActualOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualOvertimeWorkTimeSpan=AValue) then exit;
  FActualOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FActualStart=AValue) then exit;
  FActualStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetAddAfterId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAddAfterId=AValue) then exit;
  FAddAfterId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetBudgetedCostWorkPerformed(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkPerformed=AValue) then exit;
  FBudgetedCostWorkPerformed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetBudgetedCostWorkScheduled(AIndex: Integer; const AValue: Double); 


begin
  If (FBudgetedCostWorkScheduled=AValue) then exit;
  FBudgetedCostWorkScheduled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetBudgetWork(AIndex: Integer; const AValue: string); 


begin
  If (FBudgetWork=AValue) then exit;
  FBudgetWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetBudgetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBudgetWorkMilliseconds=AValue) then exit;
  FBudgetWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetBudgetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FBudgetWorkTimeSpan=AValue) then exit;
  FBudgetWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetCompletion(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCompletion=AValue) then exit;
  FCompletion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetConstraintStartEnd(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FConstraintStartEnd=AValue) then exit;
  FConstraintStartEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetConstraintType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FConstraintType=AValue) then exit;
  FConstraintType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetContact(AIndex: Integer; const AValue: string); 


begin
  If (FContact=AValue) then exit;
  FContact:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetCost(AIndex: Integer; const AValue: Double); 


begin
  If (FCost=AValue) then exit;
  FCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetDeadline(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDeadline=AValue) then exit;
  FDeadline:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetDuration(AIndex: Integer; const AValue: string); 


begin
  If (FDuration=AValue) then exit;
  FDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDurationMilliseconds=AValue) then exit;
  FDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDurationTimeSpan=AValue) then exit;
  FDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetFixedCost(AIndex: Integer; const AValue: Double); 


begin
  If (FFixedCost=AValue) then exit;
  FFixedCost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetFixedCostAccrual(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFixedCostAccrual=AValue) then exit;
  FFixedCostAccrual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetIsActive(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsActive=AValue) then exit;
  FIsActive:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetIsEffortDriven(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsEffortDriven=AValue) then exit;
  FIsEffortDriven:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetIsLockedByManager(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsLockedByManager=AValue) then exit;
  FIsLockedByManager:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetIsManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsManual=AValue) then exit;
  FIsManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetIsMarked(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMarked=AValue) then exit;
  FIsMarked:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetIsMilestone(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMilestone=AValue) then exit;
  FIsMilestone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetLevelingAdjustsAssignments(AIndex: Integer; const AValue: boolean); 


begin
  If (FLevelingAdjustsAssignments=AValue) then exit;
  FLevelingAdjustsAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetLevelingCanSplit(AIndex: Integer; const AValue: boolean); 


begin
  If (FLevelingCanSplit=AValue) then exit;
  FLevelingCanSplit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetLevelingDelay(AIndex: Integer; const AValue: string); 


begin
  If (FLevelingDelay=AValue) then exit;
  FLevelingDelay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetLevelingDelayMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLevelingDelayMilliseconds=AValue) then exit;
  FLevelingDelayMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetLevelingDelayTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FLevelingDelayTimeSpan=AValue) then exit;
  FLevelingDelayTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetOutlineLevel(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOutlineLevel=AValue) then exit;
  FOutlineLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetParentId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FParentId=AValue) then exit;
  FParentId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetPercentComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentComplete=AValue) then exit;
  FPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetPercentPhysicalWorkComplete(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPercentPhysicalWorkComplete=AValue) then exit;
  FPercentPhysicalWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetPriority(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPriority=AValue) then exit;
  FPriority:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetRemainingDuration(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingDuration=AValue) then exit;
  FRemainingDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetRemainingDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingDurationMilliseconds=AValue) then exit;
  FRemainingDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetRemainingDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingDurationTimeSpan=AValue) then exit;
  FRemainingDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetTaskType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTaskType=AValue) then exit;
  FTaskType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetUsePercentPhysicalWorkComplete(AIndex: Integer; const AValue: boolean); 


begin
  If (FUsePercentPhysicalWorkComplete=AValue) then exit;
  FUsePercentPhysicalWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSDraftTask.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSDraftTask.Assignments(AService: TODataService) : TPSDraftAssignment; 


begin
  Result:=TPSDraftAssignment(GetContainedSingleTon(AService,'Assignments', TPSDraftAssignment));
end;


Function TPSDraftTask.Calendar(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'Calendar', TPSCalendar));
end;


Function TPSDraftTask.Parent(AService: TODataService) : TPSDraftTask; 


begin
  Result:=TPSDraftTask(GetContainedSingleTon(AService,'Parent', TPSDraftTask));
end;


Function TPSDraftTask.Predecessors(AService: TODataService) : TPSDraftTaskLink; 


begin
  Result:=TPSDraftTaskLink(GetContainedSingleTon(AService,'Predecessors', TPSDraftTaskLink));
end;


Function TPSDraftTask.Successors(AService: TODataService) : TPSDraftTaskLink; 


begin
  Result:=TPSDraftTaskLink(GetContainedSingleTon(AService,'Successors', TPSDraftTaskLink));
end;


{ --------------------------------------------------------------------
  TPSStatusTask
  --------------------------------------------------------------------}


Class Function TPSStatusTask.ObjectRestKind : String; 

begin
  Result:='StatusTask';
end;


Procedure TPSStatusTask.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetDeadline(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDeadline=AValue) then exit;
  FDeadline:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetDuration(AIndex: Integer; const AValue: string); 


begin
  If (FDuration=AValue) then exit;
  FDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDurationMilliseconds=AValue) then exit;
  FDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDurationTimeSpan=AValue) then exit;
  FDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetOvertime(AIndex: Integer; const AValue: string); 


begin
  If (FOvertime=AValue) then exit;
  FOvertime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeMilliseconds=AValue) then exit;
  FOvertimeMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetOvertimeTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeTimeSpan=AValue) then exit;
  FOvertimeTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetPercentComplete(AIndex: Integer; const AValue: TInt16); 


begin
  If (FPercentComplete=AValue) then exit;
  FPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetPercentWorkComplete(AIndex: Integer; const AValue: TInt16); 


begin
  If (FPercentWorkComplete=AValue) then exit;
  FPercentWorkComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetPhysicalPercentComplete(AIndex: Integer; const AValue: TInt16); 


begin
  If (FPhysicalPercentComplete=AValue) then exit;
  FPhysicalPercentComplete:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRegularWork(AIndex: Integer; const AValue: string); 


begin
  If (FRegularWork=AValue) then exit;
  FRegularWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRegularWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRegularWorkMilliseconds=AValue) then exit;
  FRegularWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRegularWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRegularWorkTimeSpan=AValue) then exit;
  FRegularWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingDuration(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingDuration=AValue) then exit;
  FRemainingDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingDurationMilliseconds=AValue) then exit;
  FRemainingDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingDurationTimeSpan=AValue) then exit;
  FRemainingDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingOvertime(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingOvertime=AValue) then exit;
  FRemainingOvertime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingOvertimeMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingOvertimeMilliseconds=AValue) then exit;
  FRemainingOvertimeMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingOvertimeTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingOvertimeTimeSpan=AValue) then exit;
  FRemainingOvertimeTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingWork(AIndex: Integer; const AValue: string); 


begin
  If (FRemainingWork=AValue) then exit;
  FRemainingWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRemainingWorkMilliseconds=AValue) then exit;
  FRemainingWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetRemainingWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FRemainingWorkTimeSpan=AValue) then exit;
  FRemainingWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetResume(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FResume=AValue) then exit;
  FResume:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetWork(AIndex: Integer; const AValue: string); 


begin
  If (FWork=AValue) then exit;
  FWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkMilliseconds=AValue) then exit;
  FWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSStatusTask.SetWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FWorkTimeSpan=AValue) then exit;
  FWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSStatusTask.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TPSEntityTypes
  --------------------------------------------------------------------}


Class Function TPSEntityTypes.ObjectRestKind : String; 

begin
  Result:='EntityTypes';
end;


Procedure TPSEntityTypes.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSEntityTypes.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TPSEntityTypes.AssignmentEntity(AService: TODataService) : TPSEntityType; 


begin
  Result:=TPSEntityType(GetContainedSingleTon(AService,'AssignmentEntity', TPSEntityType));
end;


Function TPSEntityTypes.ProjectEntity(AService: TODataService) : TPSEntityType; 


begin
  Result:=TPSEntityType(GetContainedSingleTon(AService,'ProjectEntity', TPSEntityType));
end;


Function TPSEntityTypes.ResourceEntity(AService: TODataService) : TPSEntityType; 


begin
  Result:=TPSEntityType(GetContainedSingleTon(AService,'ResourceEntity', TPSEntityType));
end;


Function TPSEntityTypes.TaskEntity(AService: TODataService) : TPSEntityType; 


begin
  Result:=TPSEntityType(GetContainedSingleTon(AService,'TaskEntity', TPSEntityType));
end;


{ --------------------------------------------------------------------
  TPSEvent
  --------------------------------------------------------------------}


Class Function TPSEvent.ObjectRestKind : String; 

begin
  Result:='Event';
end;


Procedure TPSEvent.SetEventName(AIndex: Integer; const AValue: string); 


begin
  If (FEventName=AValue) then exit;
  FEventName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEvent.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEvent.SetSourceName(AIndex: Integer; const AValue: string); 


begin
  If (FSourceName=AValue) then exit;
  FSourceName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSEvent.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TPSEventHandler
  --------------------------------------------------------------------}


Class Function TPSEventHandler.ObjectRestKind : String; 

begin
  Result:='EventHandler';
end;


Procedure TPSEventHandler.SetAssemblyName(AIndex: Integer; const AValue: string); 


begin
  If (FAssemblyName=AValue) then exit;
  FAssemblyName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetCancelOnError(AIndex: Integer; const AValue: boolean); 


begin
  If (FCancelOnError=AValue) then exit;
  FCancelOnError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetClassName(AIndex: Integer; const AValue: string); 


begin
  If (FClassName=AValue) then exit;
  FClassName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetEndpointUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEndpointUrl=AValue) then exit;
  FEndpointUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetEventId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEventId=AValue) then exit;
  FEventId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSEventHandler.SetOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSEventHandler.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSEventHandler.Event(AService: TODataService) : TPSEvent; 


begin
  Result:=TPSEvent(GetContainedSingleTon(AService,'Event', TPSEvent));
end;


{ --------------------------------------------------------------------
  TPSLookupCost
  --------------------------------------------------------------------}


Class Function TPSLookupCost.ObjectRestKind : String; 

begin
  Result:='LookupCost';
end;


Procedure TPSLookupCost.SetValue(AIndex: Integer; const AValue: double); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupDate
  --------------------------------------------------------------------}


Class Function TPSLookupDate.ObjectRestKind : String; 

begin
  Result:='LookupDate';
end;


Procedure TPSLookupDate.SetValue(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupDuration
  --------------------------------------------------------------------}


Class Function TPSLookupDuration.ObjectRestKind : String; 

begin
  Result:='LookupDuration';
end;


Procedure TPSLookupDuration.SetValue(AIndex: Integer; const AValue: string); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupDuration.SetValueMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FValueMilliseconds=AValue) then exit;
  FValueMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupDuration.SetValueTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FValueTimeSpan=AValue) then exit;
  FValueTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupNumber
  --------------------------------------------------------------------}


Class Function TPSLookupNumber.ObjectRestKind : String; 

begin
  Result:='LookupNumber';
end;


Procedure TPSLookupNumber.SetValue(AIndex: Integer; const AValue: double); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TPSLookupText
  --------------------------------------------------------------------}


Class Function TPSLookupText.ObjectRestKind : String; 

begin
  Result:='LookupText';
end;


Procedure TPSLookupText.SetHasChildren(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasChildren=AValue) then exit;
  FHasChildren:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupText.SetMask(AIndex: Integer; const AValue: TPSLookupMask); 


begin
  If (FMask=AValue) then exit;
  FMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSLookupText.SetValue(AIndex: Integer; const AValue: string); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSLookupText.Parent(AService: TODataService) : TPSLookupText; 


begin
  Result:=TPSLookupText(GetContainedSingleTon(AService,'Parent', TPSLookupText));
end;


{ --------------------------------------------------------------------
  TPSPlanAssignment
  --------------------------------------------------------------------}


Class Function TPSPlanAssignment.ObjectRestKind : String; 

begin
  Result:='PlanAssignment';
end;


Procedure TPSPlanAssignment.SetBookingType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBookingType=AValue) then exit;
  FBookingType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetCanLevel(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanLevel=AValue) then exit;
  FCanLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetCode(AIndex: Integer; const AValue: string); 


begin
  If (FCode=AValue) then exit;
  FCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetCostCenter(AIndex: Integer; const AValue: string); 


begin
  If (FCostCenter=AValue) then exit;
  FCostCenter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetHireDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FHireDate=AValue) then exit;
  FHireDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetIsTeam(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsTeam=AValue) then exit;
  FIsTeam:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetPhonetics(AIndex: Integer; const AValue: string); 


begin
  If (FPhonetics=AValue) then exit;
  FPhonetics:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetResourceType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FResourceType=AValue) then exit;
  FResourceType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignment.SetTerminationDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTerminationDate=AValue) then exit;
  FTerminationDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSPlanAssignment.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSPlanAssignment.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSPlanAssignment.Intervals(AService: TODataService) : TPSPlanAssignmentInterval; 


begin
  Result:=TPSPlanAssignmentInterval(GetContainedSingleTon(AService,'Intervals', TPSPlanAssignmentInterval));
end;


Function TPSPlanAssignment.Resource(AService: TODataService) : TPSEnterpriseResource; 


begin
  Result:=TPSEnterpriseResource(GetContainedSingleTon(AService,'Resource', TPSEnterpriseResource));
end;


{ --------------------------------------------------------------------
  TPSPlanAssignmentInterval
  --------------------------------------------------------------------}


Class Function TPSPlanAssignmentInterval.ObjectRestKind : String; 

begin
  Result:='PlanAssignmentInterval';
end;


Procedure TPSPlanAssignmentInterval.SetDuration(AIndex: Integer; const AValue: string); 


begin
  If (FDuration=AValue) then exit;
  FDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentInterval.SetDurationMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDurationMilliseconds=AValue) then exit;
  FDurationMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentInterval.SetDurationTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FDurationTimeSpan=AValue) then exit;
  FDurationTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentInterval.Set_End(AIndex: Integer; const AValue: TDateTime); 


begin
  If (F_End=AValue) then exit;
  F_End:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentInterval.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSPlanAssignmentInterval.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TPSPlanAssignmentInterval.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_End' : Result:='End';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TPSPlanAssignmentInterval.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TPSProjectServerData
  --------------------------------------------------------------------}


Class Function TPSProjectServerData.ObjectRestKind : String; 

begin
  Result:='ProjectServerData';
end;


Procedure TPSProjectServerData.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSProjectServerData.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TPSProjectServer
  --------------------------------------------------------------------}


Class Function TPSProjectServer.ObjectRestKind : String; 

begin
  Result:='ProjectServer';
end;


Procedure TPSProjectServer.SetIsDelegate(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDelegate=AValue) then exit;
  FIsDelegate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSProjectServer.SetIsReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsReadOnly=AValue) then exit;
  FIsReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSProjectServer.KeyAsURLPart : string;

begin
  Result:=BoolToStr(IsDelegate,'true','false');
end;


Function TPSProjectServer.Calendars(AService: TODataService) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetContainedSingleTon(AService,'Calendars', TPSCalendar));
end;


Function TPSProjectServer.CustomFields(AService: TODataService) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetContainedSingleTon(AService,'CustomFields', TPSCustomField));
end;


Function TPSProjectServer.EnterpriseProjectTypes(AService: TODataService) : TPSEnterpriseProjectType; 


begin
  Result:=TPSEnterpriseProjectType(GetContainedSingleTon(AService,'EnterpriseProjectTypes', TPSEnterpriseProjectType));
end;


Function TPSProjectServer.EnterpriseResources(AService: TODataService) : TPSEnterpriseResource; 


begin
  Result:=TPSEnterpriseResource(GetContainedSingleTon(AService,'EnterpriseResources', TPSEnterpriseResource));
end;


Function TPSProjectServer.EntityTypes(AService: TODataService) : TPSEntityTypes; 


begin
  Result:=TPSEntityTypes(GetContainedSingleTon(AService,'EntityTypes', TPSEntityTypes));
end;


Function TPSProjectServer.EventHandlers(AService: TODataService) : TPSEventHandler; 


begin
  Result:=TPSEventHandler(GetContainedSingleTon(AService,'EventHandlers', TPSEventHandler));
end;


Function TPSProjectServer.Events(AService: TODataService) : TPSEvent; 


begin
  Result:=TPSEvent(GetContainedSingleTon(AService,'Events', TPSEvent));
end;


Function TPSProjectServer.LookupTables(AService: TODataService) : TPSLookupTable; 


begin
  Result:=TPSLookupTable(GetContainedSingleTon(AService,'LookupTables', TPSLookupTable));
end;


Function TPSProjectServer.Phases(AService: TODataService) : TPSPhase; 


begin
  Result:=TPSPhase(GetContainedSingleTon(AService,'Phases', TPSPhase));
end;


Function TPSProjectServer.ProjectDetailPages(AService: TODataService) : TPSProjectDetailPage; 


begin
  Result:=TPSProjectDetailPage(GetContainedSingleTon(AService,'ProjectDetailPages', TPSProjectDetailPage));
end;


Function TPSProjectServer.Projects(AService: TODataService) : TPSPublishedProject; 


begin
  Result:=TPSPublishedProject(GetContainedSingleTon(AService,'Projects', TPSPublishedProject));
end;


Function TPSProjectServer.Stages(AService: TODataService) : TPSStage; 


begin
  Result:=TPSStage(GetContainedSingleTon(AService,'Stages', TPSStage));
end;


Function TPSProjectServer.TimeSheetPeriods(AService: TODataService) : TPSTimeSheetPeriod; 


begin
  Result:=TPSTimeSheetPeriod(GetContainedSingleTon(AService,'TimeSheetPeriods', TPSTimeSheetPeriod));
end;


Function TPSProjectServer.WorkflowActivities(AService: TODataService) : TPSWorkflowActivities; 


begin
  Result:=TPSWorkflowActivities(GetContainedSingleTon(AService,'WorkflowActivities', TPSWorkflowActivities));
end;


Function TPSProjectServer.WorkflowDesigner(AService: TODataService) : TPSWorkflowDesigner; 


begin
  Result:=TPSWorkflowDesigner(GetContainedSingleTon(AService,'WorkflowDesigner', TPSWorkflowDesigner));
end;


{ --------------------------------------------------------------------
  TPSTimeSheetPeriod
  --------------------------------------------------------------------}


Class Function TPSTimeSheetPeriod.ObjectRestKind : String; 

begin
  Result:='TimeSheetPeriod';
end;


Procedure TPSTimeSheetPeriod.Set_End(AIndex: Integer; const AValue: TDateTime); 


begin
  If (F_End=AValue) then exit;
  F_End:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetPeriod.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetPeriod.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetPeriod.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TPSTimeSheetPeriod.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_End' : Result:='End';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TPSTimeSheetPeriod.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSTimeSheetPeriod.TimeSheet(AService: TODataService) : TPSTimeSheet; 


begin
  Result:=TPSTimeSheet(GetContainedSingleTon(AService,'TimeSheet', TPSTimeSheet));
end;


{ --------------------------------------------------------------------
  TPSTimeSheet
  --------------------------------------------------------------------}


Class Function TPSTimeSheet.ObjectRestKind : String; 

begin
  Result:='TimeSheet';
end;


Procedure TPSTimeSheet.SetComments(AIndex: Integer; const AValue: string); 


begin
  If (FComments=AValue) then exit;
  FComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetEntryMode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEntryMode=AValue) then exit;
  FEntryMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetIsControlledByOwner(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsControlledByOwner=AValue) then exit;
  FIsControlledByOwner:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetIsProcessed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsProcessed=AValue) then exit;
  FIsProcessed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FTotalActualWork=AValue) then exit;
  FTotalActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalActualWorkMilliseconds=AValue) then exit;
  FTotalActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalActualWorkTimeSpan=AValue) then exit;
  FTotalActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalNonBillableOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FTotalNonBillableOvertimeWork=AValue) then exit;
  FTotalNonBillableOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalNonBillableOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalNonBillableOvertimeWorkMilliseconds=AValue) then exit;
  FTotalNonBillableOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalNonBillableOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalNonBillableOvertimeWorkTimeSpan=AValue) then exit;
  FTotalNonBillableOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalNonBillableWork(AIndex: Integer; const AValue: string); 


begin
  If (FTotalNonBillableWork=AValue) then exit;
  FTotalNonBillableWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalNonBillableWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalNonBillableWorkMilliseconds=AValue) then exit;
  FTotalNonBillableWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalNonBillableWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalNonBillableWorkTimeSpan=AValue) then exit;
  FTotalNonBillableWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FTotalOvertimeWork=AValue) then exit;
  FTotalOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalOvertimeWorkMilliseconds=AValue) then exit;
  FTotalOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalOvertimeWorkTimeSpan=AValue) then exit;
  FTotalOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalWork(AIndex: Integer; const AValue: string); 


begin
  If (FTotalWork=AValue) then exit;
  FTotalWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalWorkMilliseconds=AValue) then exit;
  FTotalWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetTotalWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalWorkTimeSpan=AValue) then exit;
  FTotalWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheet.SetWeekStartsOn(AIndex: Integer; const AValue: Byte); 


begin
  If (FWeekStartsOn=AValue) then exit;
  FWeekStartsOn:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSTimeSheet.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSTimeSheet.Creator(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Creator', TSPUser));
end;


Function TPSTimeSheet.Lines(AService: TODataService) : TPSTimeSheetLine; 


begin
  Result:=TPSTimeSheetLine(GetContainedSingleTon(AService,'Lines', TPSTimeSheetLine));
end;


Function TPSTimeSheet.Manager(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Manager', TSPUser));
end;


Function TPSTimeSheet.Period(AService: TODataService) : TPSTimeSheetPeriod; 


begin
  Result:=TPSTimeSheetPeriod(GetContainedSingleTon(AService,'Period', TPSTimeSheetPeriod));
end;


{ --------------------------------------------------------------------
  TPSTimeSheetLine
  --------------------------------------------------------------------}


Class Function TPSTimeSheetLine.ObjectRestKind : String; 

begin
  Result:='TimeSheetLine';
end;


Procedure TPSTimeSheetLine.SetComment(AIndex: Integer; const AValue: string); 


begin
  If (FComment=AValue) then exit;
  FComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetLineClass(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLineClass=AValue) then exit;
  FLineClass:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetProjectName(AIndex: Integer; const AValue: string); 


begin
  If (FProjectName=AValue) then exit;
  FProjectName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetTaskName(AIndex: Integer; const AValue: string); 


begin
  If (FTaskName=AValue) then exit;
  FTaskName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetTotalWork(AIndex: Integer; const AValue: string); 


begin
  If (FTotalWork=AValue) then exit;
  FTotalWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetTotalWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalWorkMilliseconds=AValue) then exit;
  FTotalWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetTotalWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FTotalWorkTimeSpan=AValue) then exit;
  FTotalWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetLine.SetValidationType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FValidationType=AValue) then exit;
  FValidationType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSTimeSheetLine.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSTimeSheetLine.Assignment(AService: TODataService) : TPSPublishedAssignment; 


begin
  Result:=TPSPublishedAssignment(GetContainedSingleTon(AService,'Assignment', TPSPublishedAssignment));
end;


Function TPSTimeSheetLine.TimeSheet(AService: TODataService) : TPSTimeSheet; 


begin
  Result:=TPSTimeSheet(GetContainedSingleTon(AService,'TimeSheet', TPSTimeSheet));
end;


Function TPSTimeSheetLine.Work(AService: TODataService) : TPSTimeSheetWork; 


begin
  Result:=TPSTimeSheetWork(GetContainedSingleTon(AService,'Work', TPSTimeSheetWork));
end;


{ --------------------------------------------------------------------
  TPSTimeSheetWork
  --------------------------------------------------------------------}


Class Function TPSTimeSheetWork.ObjectRestKind : String; 

begin
  Result:='TimeSheetWork';
end;


Procedure TPSTimeSheetWork.SetActualWork(AIndex: Integer; const AValue: string); 


begin
  If (FActualWork=AValue) then exit;
  FActualWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetActualWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FActualWorkMilliseconds=AValue) then exit;
  FActualWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetActualWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FActualWorkTimeSpan=AValue) then exit;
  FActualWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetComment(AIndex: Integer; const AValue: string); 


begin
  If (FComment=AValue) then exit;
  FComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.Set_End(AIndex: Integer; const AValue: TDateTime); 


begin
  If (F_End=AValue) then exit;
  F_End:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetNonBillableOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FNonBillableOvertimeWork=AValue) then exit;
  FNonBillableOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetNonBillableOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNonBillableOvertimeWorkMilliseconds=AValue) then exit;
  FNonBillableOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetNonBillableOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FNonBillableOvertimeWorkTimeSpan=AValue) then exit;
  FNonBillableOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetNonBillableWork(AIndex: Integer; const AValue: string); 


begin
  If (FNonBillableWork=AValue) then exit;
  FNonBillableWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetNonBillableWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNonBillableWorkMilliseconds=AValue) then exit;
  FNonBillableWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetNonBillableWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FNonBillableWorkTimeSpan=AValue) then exit;
  FNonBillableWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetOvertimeWork(AIndex: Integer; const AValue: string); 


begin
  If (FOvertimeWork=AValue) then exit;
  FOvertimeWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetOvertimeWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOvertimeWorkMilliseconds=AValue) then exit;
  FOvertimeWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetOvertimeWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FOvertimeWorkTimeSpan=AValue) then exit;
  FOvertimeWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetPlannedWork(AIndex: Integer; const AValue: string); 


begin
  If (FPlannedWork=AValue) then exit;
  FPlannedWork:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetPlannedWorkMilliseconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPlannedWorkMilliseconds=AValue) then exit;
  FPlannedWorkMilliseconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetPlannedWorkTimeSpan(AIndex: Integer; const AValue: TTime); 


begin
  If (FPlannedWorkTimeSpan=AValue) then exit;
  FPlannedWorkTimeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimeSheetWork.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TPSTimeSheetWork.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_End' : Result:='End';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TPSTimeSheetWork.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TPSWorkflowActivities
  --------------------------------------------------------------------}


Class Function TPSWorkflowActivities.ObjectRestKind : String; 

begin
  Result:='WorkflowActivities';
end;


Procedure TPSWorkflowActivities.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSWorkflowActivities.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TPSWorkflowDesigner
  --------------------------------------------------------------------}


Class Function TPSWorkflowDesigner.ObjectRestKind : String; 

begin
  Result:='WorkflowDesigner';
end;


Procedure TPSWorkflowDesigner.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSWorkflowDesigner.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TPSWorkflowDesigner.Fields(AService: TODataService) : TPSWorkflowDesignerField; 


begin
  Result:=TPSWorkflowDesignerField(GetContainedSingleTon(AService,'Fields', TPSWorkflowDesignerField));
end;


{ --------------------------------------------------------------------
  TPSWorkflowDesignerField
  --------------------------------------------------------------------}


Class Function TPSWorkflowDesignerField.ObjectRestKind : String; 

begin
  Result:='WorkflowDesignerField';
end;


Procedure TPSWorkflowDesignerField.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSWorkflowDesignerField.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSWorkflowDesignerField.SetIsLookupField(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsLookupField=AValue) then exit;
  FIsLookupField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSWorkflowDesignerField.SetIsReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsReadOnly=AValue) then exit;
  FIsReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSWorkflowDesignerField.SetSPFieldType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSPFieldType=AValue) then exit;
  FSPFieldType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSWorkflowDesignerField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSWorkflowDesignerField.LookupEntries(AService: TODataService) : TPSLookupEntry; 


begin
  Result:=TPSLookupEntry(GetContainedSingleTon(AService,'LookupEntries', TPSLookupEntry));
end;


{ --------------------------------------------------------------------
  TPSResourceCalendarException
  --------------------------------------------------------------------}


Class Function TPSResourceCalendarException.ObjectRestKind : String; 

begin
  Result:='ResourceCalendarException';
end;


{ --------------------------------------------------------------------
  TPSResourcePlan
  --------------------------------------------------------------------}


Class Function TPSResourcePlan.ObjectRestKind : String; 

begin
  Result:='ResourcePlan';
end;


Procedure TPSResourcePlan.SetFinish(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFinish=AValue) then exit;
  FFinish:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSResourcePlan.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSResourcePlan.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSResourcePlan.SetUtilizationDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FUtilizationDate=AValue) then exit;
  FUtilizationDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSResourcePlan.SetUtilizationType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUtilizationType=AValue) then exit;
  FUtilizationType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSResourcePlan.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TPSResourcePlan.Assignments(AService: TODataService) : TPSPlanAssignment; 


begin
  Result:=TPSPlanAssignment(GetContainedSingleTon(AService,'Assignments', TPSPlanAssignment));
end;


{ --------------------------------------------------------------------
  TPSServiceStatus
  --------------------------------------------------------------------}


Class Function TPSServiceStatus.ObjectRestKind : String; 

begin
  Result:='ServiceStatus';
end;


Procedure TPSServiceStatus.SetIsDelegate(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDelegate=AValue) then exit;
  FIsDelegate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSServiceStatus.SetIsReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsReadOnly=AValue) then exit;
  FIsReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSServiceStatus.KeyAsURLPart : string;

begin
  Result:=BoolToStr(IsDelegate,'true','false');
end;


{ --------------------------------------------------------------------
  TPSTaskServiceOdataEndpoint
  --------------------------------------------------------------------}


Class Function TPSTaskServiceOdataEndpoint.ObjectRestKind : String; 

begin
  Result:='TaskServiceOdataEndpoint';
end;


Procedure TPSTaskServiceOdataEndpoint.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TPSTaskServiceOdataEndpoint.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TPSTimePhase
  --------------------------------------------------------------------}


Class Function TPSTimePhase.ObjectRestKind : String; 

begin
  Result:='TimePhase';
end;


Procedure TPSTimePhase.Set_End(AIndex: Integer; const AValue: TDateTime); 


begin
  If (F_End=AValue) then exit;
  F_End:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TPSTimePhase.SetStart(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TPSTimePhase.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_End' : Result:='End';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TPSTimePhase.KeyAsURLPart : string;

begin
  Result:=FormatDateTime('yyyy-mm-dd"T"hhmmss',_End);
end;


Function TPSTimePhase.Assignments(AService: TODataService) : TPSStatusAssignment; 


begin
  Result:=TPSStatusAssignment(GetContainedSingleTon(AService,'Assignments', TPSStatusAssignment));
end;


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazineData
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazineData.ObjectRestKind : String; 

begin
  Result:='PersonMagazineData';
end;


Procedure TSP_PublishingPersonMagazineData.SetAboutMe(AIndex: Integer; const AValue: string); 


begin
  If (FAboutMe=AValue) then exit;
  FAboutMe:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetBackgroundImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FBackgroundImageUrl=AValue) then exit;
  FBackgroundImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetBackgroundImageX(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBackgroundImageX=AValue) then exit;
  FBackgroundImageX:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetBackgroundImageY(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBackgroundImageY=AValue) then exit;
  FBackgroundImageY:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetDepartmentName(AIndex: Integer; const AValue: string); 


begin
  If (FDepartmentName=AValue) then exit;
  FDepartmentName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetHasEditPermission(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasEditPermission=AValue) then exit;
  FHasEditPermission:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetOffice(AIndex: Integer; const AValue: string); 


begin
  If (FOffice=AValue) then exit;
  FOffice:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetPhone(AIndex: Integer; const AValue: string); 


begin
  If (FPhone=AValue) then exit;
  FPhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineData.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazinePeopleBasicInfo
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazinePeopleBasicInfo.ObjectRestKind : String; 

begin
  Result:='PersonMagazinePeopleBasicInfo';
end;


Procedure TSP_PublishingPersonMagazinePeopleBasicInfo.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleBasicInfo.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleBasicInfo.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleBasicInfo.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazinePeopleModel
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazinePeopleModel.ObjectRestKind : String; 

begin
  Result:='PersonMagazinePeopleModel';
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetAboutMe(AIndex: Integer; const AValue: string); 


begin
  If (FAboutMe=AValue) then exit;
  FAboutMe:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetBackgroundImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FBackgroundImageUrl=AValue) then exit;
  FBackgroundImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetBasicInfo(AIndex: Integer; const AValue: TSP_PublishingPersonMagazinePeopleBasicInfo); 


begin
  If (FBasicInfo=AValue) then exit;
  FBasicInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetBirthday(AIndex: Integer; const AValue: string); 


begin
  If (FBirthday=AValue) then exit;
  FBirthday:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetCustomProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FCustomProperties=AValue) then exit;
  FCustomProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetDepartmentName(AIndex: Integer; const AValue: string); 


begin
  If (FDepartmentName=AValue) then exit;
  FDepartmentName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetDirectReports(AIndex: Integer; const AValue: TSP_PublishingPersonMagazinePeopleBasicInfoArray); 


begin
  If (FDirectReports=AValue) then exit;
  FDirectReports:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetHasEditPermission(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasEditPermission=AValue) then exit;
  FHasEditPermission:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetInterest(AIndex: Integer; const AValue: string); 


begin
  If (FInterest=AValue) then exit;
  FInterest:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetLync(AIndex: Integer; const AValue: string); 


begin
  If (FLync=AValue) then exit;
  FLync:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetManagerChain(AIndex: Integer; const AValue: TSP_PublishingPersonMagazinePeopleBasicInfoArray); 


begin
  If (FManagerChain=AValue) then exit;
  FManagerChain:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetOffice(AIndex: Integer; const AValue: string); 


begin
  If (FOffice=AValue) then exit;
  FOffice:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetOneDriveUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOneDriveUrl=AValue) then exit;
  FOneDriveUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetPastProjects(AIndex: Integer; const AValue: string); 


begin
  If (FPastProjects=AValue) then exit;
  FPastProjects:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetPhone(AIndex: Integer; const AValue: string); 


begin
  If (FPhone=AValue) then exit;
  FPhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetSchools(AIndex: Integer; const AValue: string); 


begin
  If (FSchools=AValue) then exit;
  FSchools:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazinePeopleModel.SetSkills(AIndex: Integer; const AValue: string); 


begin
  If (FSkills=AValue) then exit;
  FSkills:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_PublishingPersonMagazinePeopleModel.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'customproperties' : SetLength(FCustomProperties,aLength);
  'directreports' : SetLength(FDirectReports,aLength);
  'managerchain' : SetLength(FManagerChain,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazineUserProfileDirectsData
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazineUserProfileDirectsData.ObjectRestKind : String; 

begin
  Result:='PersonMagazineUserProfileDirectsData';
end;


Procedure TSP_PublishingPersonMagazineUserProfileDirectsData.SetDirectReports(AIndex: Integer; const AValue: TSP_PublishingPersonMagazineUserProfileArray); 


begin
  If (FDirectReports=AValue) then exit;
  FDirectReports:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_PublishingPersonMagazineUserProfileDirectsData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'directreports' : SetLength(FDirectReports,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazineUserProfile
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazineUserProfile.ObjectRestKind : String; 

begin
  Result:='PersonMagazineUserProfile';
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetAboutMe(AIndex: Integer; const AValue: string); 


begin
  If (FAboutMe=AValue) then exit;
  FAboutMe:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetBirthday(AIndex: Integer; const AValue: string); 


begin
  If (FBirthday=AValue) then exit;
  FBirthday:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetCustomProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FCustomProperties=AValue) then exit;
  FCustomProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetDepartmentName(AIndex: Integer; const AValue: string); 


begin
  If (FDepartmentName=AValue) then exit;
  FDepartmentName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetHasEditPermission(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasEditPermission=AValue) then exit;
  FHasEditPermission:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetInterest(AIndex: Integer; const AValue: string); 


begin
  If (FInterest=AValue) then exit;
  FInterest:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetLync(AIndex: Integer; const AValue: string); 


begin
  If (FLync=AValue) then exit;
  FLync:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetOffice(AIndex: Integer; const AValue: string); 


begin
  If (FOffice=AValue) then exit;
  FOffice:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetOneDriveUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOneDriveUrl=AValue) then exit;
  FOneDriveUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetPastProjects(AIndex: Integer; const AValue: string); 


begin
  If (FPastProjects=AValue) then exit;
  FPastProjects:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetPhone(AIndex: Integer; const AValue: string); 


begin
  If (FPhone=AValue) then exit;
  FPhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetSchools(AIndex: Integer; const AValue: string); 


begin
  If (FSchools=AValue) then exit;
  FSchools:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetSkills(AIndex: Integer; const AValue: string); 


begin
  If (FSkills=AValue) then exit;
  FSkills:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfile.SetUserName(AIndex: Integer; const AValue: string); 


begin
  If (FUserName=AValue) then exit;
  FUserName:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_PublishingPersonMagazineUserProfile.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'customproperties' : SetLength(FCustomProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazineUserProfileData
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazineUserProfileData.ObjectRestKind : String; 

begin
  Result:='PersonMagazineUserProfileData';
end;


Procedure TSP_PublishingPersonMagazineUserProfileData.SetManagerChain(AIndex: Integer; const AValue: TSP_PublishingPersonMagazineUserProfileArray); 


begin
  If (FManagerChain=AValue) then exit;
  FManagerChain:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPersonMagazineUserProfileData.SetPrimary(AIndex: Integer; const AValue: TSP_PublishingPersonMagazineUserProfile); 


begin
  If (FPrimary=AValue) then exit;
  FPrimary:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_PublishingPersonMagazineUserProfileData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'managerchain' : SetLength(FManagerChain,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_PublishingPublishSiteInformation
  --------------------------------------------------------------------}


Class Function TSP_PublishingPublishSiteInformation.ObjectRestKind : String; 

begin
  Result:='PublishSiteInformation';
end;


Procedure TSP_PublishingPublishSiteInformation.SetSiteType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSiteType=AValue) then exit;
  FSiteType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPublishSiteInformation.SetSiteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSiteUrl=AValue) then exit;
  FSiteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPublishSiteInformation.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_PublishingVideoItem
  --------------------------------------------------------------------}


Class Function TSP_PublishingVideoItem.ObjectRestKind : String; 

begin
  Result:='VideoItem';
end;


Procedure TSP_PublishingVideoItem.SetChannelID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FChannelID=AValue) then exit;
  FChannelID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetCreatedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreatedDate=AValue) then exit;
  FCreatedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetDisplayFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayFormUrl=AValue) then exit;
  FDisplayFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetFileName(AIndex: Integer; const AValue: string); 


begin
  If (FFileName=AValue) then exit;
  FFileName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetOwnerName(AIndex: Integer; const AValue: string); 


begin
  If (FOwnerName=AValue) then exit;
  FOwnerName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetPlayerPageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPlayerPageUrl=AValue) then exit;
  FPlayerPageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetThumbnailUrl(AIndex: Integer; const AValue: string); 


begin
  If (FThumbnailUrl=AValue) then exit;
  FThumbnailUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetVideoDurationInSeconds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FVideoDurationInSeconds=AValue) then exit;
  FVideoDurationInSeconds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetVideoProcessingStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FVideoProcessingStatus=AValue) then exit;
  FVideoProcessingStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetViewCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FViewCount=AValue) then exit;
  FViewCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoItem.SetYammerObjectUrl(AIndex: Integer; const AValue: string); 


begin
  If (FYammerObjectUrl=AValue) then exit;
  FYammerObjectUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingVideoItem.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ID);
end;


Function TSP_PublishingVideoItem.Author(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Author', TSPUser));
end;


Function TSP_PublishingVideoItem.Owner(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Owner', TSPUser));
end;


Function TSP_PublishingVideoItem.PeopleInMedia(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'PeopleInMedia', TSPUser));
end;


{ --------------------------------------------------------------------
  TSP_PublishingPersonMagazine
  --------------------------------------------------------------------}


Class Function TSP_PublishingPersonMagazine.ObjectRestKind : String; 

begin
  Result:='PersonMagazine';
end;


Procedure TSP_PublishingPersonMagazine.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPersonMagazine.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingDocProps
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingDocProps.ObjectRestKind : String; 

begin
  Result:='PointPublishingDocProps';
end;


Procedure TSP_PublishingPointPublishingDocProps.SetAuthor(AIndex: Integer; const AValue: string); 


begin
  If (FAuthor=AValue) then exit;
  FAuthor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetDocLibraryUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDocLibraryUrl=AValue) then exit;
  FDocLibraryUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetFileType(AIndex: Integer; const AValue: string); 


begin
  If (FFileType=AValue) then exit;
  FFileType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetServerRedirectedEmbedUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRedirectedEmbedUrl=AValue) then exit;
  FServerRedirectedEmbedUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetServerRedirectedPreviewUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRedirectedPreviewUrl=AValue) then exit;
  FServerRedirectedPreviewUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetSiteId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetSiteTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSiteTitle=AValue) then exit;
  FSiteTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingDocProps.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingDocProps.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Author);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingMagazineProps
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingMagazineProps.ObjectRestKind : String; 

begin
  Result:='PointPublishingMagazineProps';
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetBannerColor(AIndex: Integer; const AValue: string); 


begin
  If (FBannerColor=AValue) then exit;
  FBannerColor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetBannerImageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FBannerImageUrl=AValue) then exit;
  FBannerImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetBannerPattern(AIndex: Integer; const AValue: string); 


begin
  If (FBannerPattern=AValue) then exit;
  FBannerPattern:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetIsUserContributor(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUserContributor=AValue) then exit;
  FIsUserContributor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetIsUserOwner(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUserOwner=AValue) then exit;
  FIsUserOwner:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetMagazineType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMagazineType=AValue) then exit;
  FMagazineType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetPublishedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FPublishedDate=AValue) then exit;
  FPublishedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingMagazineProps.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingMagazineProps.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(BannerColor);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingPost
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingPost.ObjectRestKind : String; 

begin
  Result:='PointPublishingPost';
end;


Procedure TSP_PublishingPointPublishingPost.SetAuthor(AIndex: Integer; const AValue: string); 


begin
  If (FAuthor=AValue) then exit;
  FAuthor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetContent(AIndex: Integer; const AValue: string); 


begin
  If (FContent=AValue) then exit;
  FContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetCreatedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreatedDate=AValue) then exit;
  FCreatedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetFriendlyUrlFileName(AIndex: Integer; const AValue: string); 


begin
  If (FFriendlyUrlFileName=AValue) then exit;
  FFriendlyUrlFileName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetModifiedDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModifiedDate=AValue) then exit;
  FModifiedDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetOperationType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOperationType=AValue) then exit;
  FOperationType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetUserIsAuthor(AIndex: Integer; const AValue: boolean); 


begin
  If (FUserIsAuthor=AValue) then exit;
  FUserIsAuthor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingPost.SetVersion(AIndex: Integer; const AValue: string); 


begin
  If (FVersion=AValue) then exit;
  FVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingPost.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TSP_PublishingPointPublishingPost.images(AService: TODataService) : TSP_File; 


begin
  Result:=TSP_File(GetContainedSingleTon(AService,'images', TSP_File));
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingPostServiceManager
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingPostServiceManager.ObjectRestKind : String; 

begin
  Result:='PointPublishingPostServiceManager';
end;


Procedure TSP_PublishingPointPublishingPostServiceManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingPostServiceManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_PublishingPointPublishingPostServiceManager.bannerimages(AService: TODataService) : TSP_File; 


begin
  Result:=TSP_File(GetContainedSingleTon(AService,'bannerimages', TSP_File));
end;


Function TSP_PublishingPointPublishingPostServiceManager.contributors(AService: TODataService) : TSP_PublishingPointPublishingUser; 


begin
  Result:=TSP_PublishingPointPublishingUser(GetContainedSingleTon(AService,'contributors', TSP_PublishingPointPublishingUser));
end;


Function TSP_PublishingPointPublishingPostServiceManager.creators(AService: TODataService) : TSP_PublishingPointPublishingUser; 


begin
  Result:=TSP_PublishingPointPublishingUser(GetContainedSingleTon(AService,'creators', TSP_PublishingPointPublishingUser));
end;


Function TSP_PublishingPointPublishingPostServiceManager.magazineprops(AService: TODataService) : TSP_PublishingPointPublishingMagazineProps; 


begin
  Result:=TSP_PublishingPointPublishingMagazineProps(GetContainedSingleTon(AService,'magazineprops', TSP_PublishingPointPublishingMagazineProps));
end;


Function TSP_PublishingPointPublishingPostServiceManager.posts(AService: TODataService) : TSP_PublishingPointPublishingPost; 


begin
  Result:=TSP_PublishingPointPublishingPost(GetContainedSingleTon(AService,'posts', TSP_PublishingPointPublishingPost));
end;


Function TSP_PublishingPointPublishingPostServiceManager.viewers(AService: TODataService) : TSP_PublishingPointPublishingUser; 


begin
  Result:=TSP_PublishingPointPublishingUser(GetContainedSingleTon(AService,'viewers', TSP_PublishingPointPublishingUser));
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingUser
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingUser.ObjectRestKind : String; 

begin
  Result:='PointPublishingUser';
end;


Procedure TSP_PublishingPointPublishingUser.SetAccountName(AIndex: Integer; const AValue: string); 


begin
  If (FAccountName=AValue) then exit;
  FAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetDepartment(AIndex: Integer; const AValue: string); 


begin
  If (FDepartment=AValue) then exit;
  FDepartment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetIsDomainGroup(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDomainGroup=AValue) then exit;
  FIsDomainGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetIsMagazineOwner(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMagazineOwner=AValue) then exit;
  FIsMagazineOwner:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetJobTitle(AIndex: Integer; const AValue: string); 


begin
  If (FJobTitle=AValue) then exit;
  FJobTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetPictureUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPictureUrl=AValue) then exit;
  FPictureUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingUser.SetSipAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSipAddress=AValue) then exit;
  FSipAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingUser.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingSiteManager
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingSiteManager.ObjectRestKind : String; 

begin
  Result:='PointPublishingSiteManager';
end;


Procedure TSP_PublishingPointPublishingSiteManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingSiteManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_PublishingPointPublishingSiteStatus
  --------------------------------------------------------------------}


Class Function TSP_PublishingPointPublishingSiteStatus.ObjectRestKind : String; 

begin
  Result:='PointPublishingSiteStatus';
end;


Procedure TSP_PublishingPointPublishingSiteStatus.SetFriendlyUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFriendlyUrl=AValue) then exit;
  FFriendlyUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingSiteStatus.SetSiteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSiteUrl=AValue) then exit;
  FSiteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingPointPublishingSiteStatus.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingPointPublishingSiteStatus.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(FriendlyUrl);
end;


{ --------------------------------------------------------------------
  TSP_PublishingSpotlightChannel
  --------------------------------------------------------------------}


Class Function TSP_PublishingSpotlightChannel.ObjectRestKind : String; 

begin
  Result:='SpotlightChannel';
end;


Procedure TSP_PublishingSpotlightChannel.SetChannelId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FChannelId=AValue) then exit;
  FChannelId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingSpotlightChannel.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingSpotlightChannel.SetTileHtmlColor(AIndex: Integer; const AValue: string); 


begin
  If (FTileHtmlColor=AValue) then exit;
  FTileHtmlColor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingSpotlightChannel.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingSpotlightChannel.SetVideoLibraryServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FVideoLibraryServerRelativeUrl=AValue) then exit;
  FVideoLibraryServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingSpotlightChannel.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TSP_PublishingSpotlightChannel.Channel(AService: TODataService) : TSP_PublishingVideoChannel; 


begin
  Result:=TSP_PublishingVideoChannel(GetContainedSingleTon(AService,'Channel', TSP_PublishingVideoChannel));
end;


{ --------------------------------------------------------------------
  TSP_PublishingVideoChannel
  --------------------------------------------------------------------}


Class Function TSP_PublishingVideoChannel.ObjectRestKind : String; 

begin
  Result:='VideoChannel';
end;


Procedure TSP_PublishingVideoChannel.SetChannelPageUrl(AIndex: Integer; const AValue: string); 


begin
  If (FChannelPageUrl=AValue) then exit;
  FChannelPageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoChannel.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoChannel.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoChannel.SetTileHtmlColor(AIndex: Integer; const AValue: string); 


begin
  If (FTileHtmlColor=AValue) then exit;
  FTileHtmlColor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoChannel.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoChannel.SetYammerEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FYammerEnabled=AValue) then exit;
  FYammerEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingVideoChannel.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSP_PublishingVideoChannel.Search(AService: TODataService) : TSP_PublishingSearch; 


begin
  Result:=TSP_PublishingSearch(GetContainedSingleTon(AService,'Search', TSP_PublishingSearch));
end;


Function TSP_PublishingVideoChannel.SpotlightVideos(AService: TODataService) : TSP_PublishingSpotlightVideo; 


begin
  Result:=TSP_PublishingSpotlightVideo(GetContainedSingleTon(AService,'SpotlightVideos', TSP_PublishingSpotlightVideo));
end;


Function TSP_PublishingVideoChannel.Videos(AService: TODataService) : TSP_PublishingVideoItem; 


begin
  Result:=TSP_PublishingVideoItem(GetContainedSingleTon(AService,'Videos', TSP_PublishingVideoItem));
end;


{ --------------------------------------------------------------------
  TSP_PublishingSearch
  --------------------------------------------------------------------}


Class Function TSP_PublishingSearch.ObjectRestKind : String; 

begin
  Result:='Search';
end;


Procedure TSP_PublishingSearch.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingSearch.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_PublishingSpotlightVideo
  --------------------------------------------------------------------}


Class Function TSP_PublishingSpotlightVideo.ObjectRestKind : String; 

begin
  Result:='SpotlightVideo';
end;


Procedure TSP_PublishingSpotlightVideo.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingSpotlightVideo.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingSpotlightVideo.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingSpotlightVideo.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TSP_PublishingSpotlightVideo.Video(AService: TODataService) : TSP_PublishingVideoItem; 


begin
  Result:=TSP_PublishingVideoItem(GetContainedSingleTon(AService,'Video', TSP_PublishingVideoItem));
end;


{ --------------------------------------------------------------------
  TSP_PublishingVideoPermissionGroup
  --------------------------------------------------------------------}


Class Function TSP_PublishingVideoPermissionGroup.ObjectRestKind : String; 

begin
  Result:='VideoPermissionGroup';
end;


Procedure TSP_PublishingVideoPermissionGroup.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingVideoPermissionGroup.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


Function TSP_PublishingVideoPermissionGroup.Users(AService: TODataService) : TSPUser; 


begin
  Result:=TSPUser(GetContainedSingleTon(AService,'Users', TSPUser));
end;


{ --------------------------------------------------------------------
  TSP_PublishingVideoServiceDiscoverer
  --------------------------------------------------------------------}


Class Function TSP_PublishingVideoServiceDiscoverer.ObjectRestKind : String; 

begin
  Result:='VideoServiceDiscoverer';
end;


Procedure TSP_PublishingVideoServiceDiscoverer.SetChannelUrlTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FChannelUrlTemplate=AValue) then exit;
  FChannelUrlTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoServiceDiscoverer.SetIsLicensedForVideoPortal(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsLicensedForVideoPortal=AValue) then exit;
  FIsLicensedForVideoPortal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoServiceDiscoverer.SetIsVideoPortalEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsVideoPortalEnabled=AValue) then exit;
  FIsVideoPortalEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoServiceDiscoverer.SetPlayerUrlTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FPlayerUrlTemplate=AValue) then exit;
  FPlayerUrlTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoServiceDiscoverer.SetVideoPortalLayoutsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FVideoPortalLayoutsUrl=AValue) then exit;
  FVideoPortalLayoutsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PublishingVideoServiceDiscoverer.SetVideoPortalUrl(AIndex: Integer; const AValue: string); 


begin
  If (FVideoPortalUrl=AValue) then exit;
  FVideoPortalUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingVideoServiceDiscoverer.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ChannelUrlTemplate);
end;


{ --------------------------------------------------------------------
  TSP_PublishingVideoServiceManager
  --------------------------------------------------------------------}


Class Function TSP_PublishingVideoServiceManager.ObjectRestKind : String; 

begin
  Result:='VideoServiceManager';
end;


Procedure TSP_PublishingVideoServiceManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PublishingVideoServiceManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_PublishingVideoServiceManager.CanEditChannels(AService: TODataService) : TSP_PublishingVideoChannel; 


begin
  Result:=TSP_PublishingVideoChannel(GetContainedSingleTon(AService,'CanEditChannels', TSP_PublishingVideoChannel));
end;


Function TSP_PublishingVideoServiceManager.Channels(AService: TODataService) : TSP_PublishingVideoChannel; 


begin
  Result:=TSP_PublishingVideoChannel(GetContainedSingleTon(AService,'Channels', TSP_PublishingVideoChannel));
end;


Function TSP_PublishingVideoServiceManager.Search(AService: TODataService) : TSP_PublishingSearch; 


begin
  Result:=TSP_PublishingSearch(GetContainedSingleTon(AService,'Search', TSP_PublishingSearch));
end;


Function TSP_PublishingVideoServiceManager.SpotlightChannels(AService: TODataService) : TSP_PublishingSpotlightChannel; 


begin
  Result:=TSP_PublishingSpotlightChannel(GetContainedSingleTon(AService,'SpotlightChannels', TSP_PublishingSpotlightChannel));
end;


Function TSP_PublishingVideoServiceManager.SpotlightVideos(AService: TODataService) : TSP_PublishingSpotlightVideo; 


begin
  Result:=TSP_PublishingSpotlightVideo(GetContainedSingleTon(AService,'SpotlightVideos', TSP_PublishingSpotlightVideo));
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion.ObjectRestKind : String; 

begin
  Result:='PersonalResultSuggestion';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion.SetHighlightedTitle(AIndex: Integer; const AValue: string); 


begin
  If (FHighlightedTitle=AValue) then exit;
  FHighlightedTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion.SetIsBestBet(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsBestBet=AValue) then exit;
  FIsBestBet:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestion.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.ObjectRestKind : String; 

begin
  Result:='QueryAutoCompletionMatch';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetAlternation(AIndex: Integer; const AValue: boolean); 


begin
  If (FAlternation=AValue) then exit;
  FAlternation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetKey(AIndex: Integer; const AValue: string); 


begin
  If (FKey=AValue) then exit;
  FKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.Set_Length(AIndex: Integer; const AValue: int64); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetMatchType(AIndex: Integer; const AValue: string); 


begin
  If (FMatchType=AValue) then exit;
  FMatchType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetScore(AIndex: Integer; const AValue: Double); 


begin
  If (FScore=AValue) then exit;
  FScore:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetSourceName(AIndex: Integer; const AValue: string); 


begin
  If (FSourceName=AValue) then exit;
  FSourceName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetStart(AIndex: Integer; const AValue: int64); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.SetValue(AIndex: Integer; const AValue: string); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatch.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults.ObjectRestKind : String; 

begin
  Result:='QueryAutoCompletionResults';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults.SetCoreExecutionTimeMs(AIndex: Integer; const AValue: int64); 


begin
  If (FCoreExecutionTimeMs=AValue) then exit;
  FCoreExecutionTimeMs:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults.SetCorrelationId(AIndex: Integer; const AValue: string); 


begin
  If (FCorrelationId=AValue) then exit;
  FCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults.SetQueries(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionArray); 


begin
  If (FQueries=AValue) then exit;
  FQueries:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionResults.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'queries' : SetLength(FQueries,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion.ObjectRestKind : String; 

begin
  Result:='QueryAutoCompletion';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion.SetMatches(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletionMatchArray); 


begin
  If (FMatches=AValue) then exit;
  FMatches:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion.SetQuery(AIndex: Integer; const AValue: string); 


begin
  If (FQuery=AValue) then exit;
  FQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion.SetScore(AIndex: Integer; const AValue: Double); 


begin
  If (FScore=AValue) then exit;
  FScore:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion.SetSource(AIndex: Integer; const AValue: string); 


begin
  If (FSource=AValue) then exit;
  FSource:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryAutoCompletion.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'matches' : SetLength(FMatches,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.ObjectRestKind : String; 

begin
  Result:='QueryPropertyValue';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.SetBoolVal(AIndex: Integer; const AValue: boolean); 


begin
  If (FBoolVal=AValue) then exit;
  FBoolVal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.SetIntVal(AIndex: Integer; const AValue: TInt32); 


begin
  If (FIntVal=AValue) then exit;
  FIntVal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.SetQueryPropertyValueTypeIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FQueryPropertyValueTypeIndex=AValue) then exit;
  FQueryPropertyValueTypeIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.SetStrArray(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FStrArray=AValue) then exit;
  FStrArray:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.SetStrVal(AIndex: Integer; const AValue: string); 


begin
  If (FStrVal=AValue) then exit;
  FStrVal:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'strarray' : SetLength(FStrArray,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery.ObjectRestKind : String; 

begin
  Result:='QuerySuggestionQuery';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery.SetIsPersonal(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPersonal=AValue) then exit;
  FIsPersonal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQuery.SetQuery(AIndex: Integer; const AValue: string); 


begin
  If (FQuery=AValue) then exit;
  FQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange.ObjectRestKind : String; 

begin
  Result:='QuerySuggestionRange';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange.Set_Length(AIndex: Integer; const AValue: TInt32); 


begin
  If (F_Length=AValue) then exit;
  F_Length:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange.SetStart(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStart=AValue) then exit;
  FStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionRange.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Length' : Result:='Length';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults.ObjectRestKind : String; 

begin
  Result:='QuerySuggestionResults';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults.SetPeopleNames(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FPeopleNames=AValue) then exit;
  FPeopleNames:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults.SetPersonalResults(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryPersonalResultSuggestionArray); 


begin
  If (FPersonalResults=AValue) then exit;
  FPersonalResults:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults.SetQueries(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionQueryArray); 


begin
  If (FQueries=AValue) then exit;
  FQueries:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QueryQuerySuggestionResults.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'peoplenames' : SetLength(FPeopleNames,aLength);
  'personalresults' : SetLength(FPersonalResults,aLength);
  'queries' : SetLength(FQueries,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRule
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryReorderingRule.ObjectRestKind : String; 

begin
  Result:='ReorderingRule';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryReorderingRule.SetBoost(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBoost=AValue) then exit;
  FBoost:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryReorderingRule.SetMatchType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMatchType=AValue) then exit;
  FMatchType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryReorderingRule.SetMatchValue(AIndex: Integer; const AValue: string); 


begin
  If (FMatchValue=AValue) then exit;
  FMatchValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QuerySort
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QuerySort.ObjectRestKind : String; 

begin
  Result:='Sort';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QuerySort.SetDirection(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDirection=AValue) then exit;
  FDirection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QuerySort.Set_Property(AIndex: Integer; const AValue: string); 


begin
  If (F_Property=AValue) then exit;
  F_Property:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TMicrosoft_SharePoint_Client_Search_QuerySort.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Property' : Result:='Property';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryStringCollection
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryStringCollection.ObjectRestKind : String; 

begin
  Result:='StringCollection';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryStringCollection.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryStringCollection.SetItems(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QueryStringCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_SharePoint_Client_Search_QueryStringCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData.ObjectRestKind : String; 

begin
  Result:='QueryPersonalizationData';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling.ObjectRestKind : String; 

begin
  Result:='RankingLabeling';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection.ObjectRestKind : String; 

begin
  Result:='ReorderingRuleCollection';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection.SetItems(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_QuerySortCollection
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_QuerySortCollection.ObjectRestKind : String; 

begin
  Result:='SortCollection';
end;


Procedure TMicrosoft_SharePoint_Client_Search_QuerySortCollection.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_QuerySortCollection.SetItems(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QuerySortArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_QuerySortCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_SharePoint_Client_Search_QuerySortCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTCustomResult
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTCustomResult.ObjectRestKind : String; 

begin
  Result:='CustomResult';
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetGroupTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FGroupTemplateId=AValue) then exit;
  FGroupTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetItemTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FItemTemplateId=AValue) then exit;
  FItemTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetResultTitle(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitle=AValue) then exit;
  FResultTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetResultTitleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitleUrl=AValue) then exit;
  FResultTitleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetTable(AIndex: Integer; const AValue: TSPSimpleDataTable); 


begin
  If (FTable=AValue) then exit;
  FTable:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetTableType(AIndex: Integer; const AValue: string); 


begin
  If (FTableType=AValue) then exit;
  FTableType:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTCustomResult.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTQueryProperty
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTQueryProperty.ObjectRestKind : String; 

begin
  Result:='QueryProperty';
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryProperty.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryProperty.SetValue(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryQueryPropertyValue); 


begin
  If (FValue=AValue) then exit;
  FValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTQueryResult
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTQueryResult.ObjectRestKind : String; 

begin
  Result:='QueryResult';
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetCustomResults(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTCustomResultArray); 


begin
  If (FCustomResults=AValue) then exit;
  FCustomResults:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetQueryId(AIndex: Integer; const AValue: string); 


begin
  If (FQueryId=AValue) then exit;
  FQueryId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetQueryRuleId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FQueryRuleId=AValue) then exit;
  FQueryRuleId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetRefinementResults(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTRefinementResults); 


begin
  If (FRefinementResults=AValue) then exit;
  FRefinementResults:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetRelevantResults(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTRelevantResults); 


begin
  If (FRelevantResults=AValue) then exit;
  FRelevantResults:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetSpecialTermResults(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTSpecialTermResults); 


begin
  If (FSpecialTermResults=AValue) then exit;
  FSpecialTermResults:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTQueryResult.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'customresults' : SetLength(FCustomResults,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTRefinementResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTRefinementResults.ObjectRestKind : String; 

begin
  Result:='RefinementResults';
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetGroupTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FGroupTemplateId=AValue) then exit;
  FGroupTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetItemTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FItemTemplateId=AValue) then exit;
  FItemTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetRefiners(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTRefinerArray); 


begin
  If (FRefiners=AValue) then exit;
  FRefiners:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetResultTitle(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitle=AValue) then exit;
  FResultTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetResultTitleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitleUrl=AValue) then exit;
  FResultTitleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTRefinementResults.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  'refiners' : SetLength(FRefiners,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTRefiner
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTRefiner.ObjectRestKind : String; 

begin
  Result:='Refiner';
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefiner.SetEntries(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTRefinerEntryArray); 


begin
  If (FEntries=AValue) then exit;
  FEntries:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefiner.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTRefiner.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'entries' : SetLength(FEntries,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTRefinerEntry
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTRefinerEntry.ObjectRestKind : String; 

begin
  Result:='RefinerEntry';
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinerEntry.SetRefinementCount(AIndex: Integer; const AValue: int64); 


begin
  If (FRefinementCount=AValue) then exit;
  FRefinementCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinerEntry.SetRefinementName(AIndex: Integer; const AValue: string); 


begin
  If (FRefinementName=AValue) then exit;
  FRefinementName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinerEntry.SetRefinementToken(AIndex: Integer; const AValue: string); 


begin
  If (FRefinementToken=AValue) then exit;
  FRefinementToken:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRefinerEntry.SetRefinementValue(AIndex: Integer; const AValue: string); 


begin
  If (FRefinementValue=AValue) then exit;
  FRefinementValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTRelevantResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTRelevantResults.ObjectRestKind : String; 

begin
  Result:='RelevantResults';
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetGroupTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FGroupTemplateId=AValue) then exit;
  FGroupTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetItemTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FItemTemplateId=AValue) then exit;
  FItemTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetResultTitle(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitle=AValue) then exit;
  FResultTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetResultTitleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitleUrl=AValue) then exit;
  FResultTitleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetRowCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRowCount=AValue) then exit;
  FRowCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetTable(AIndex: Integer; const AValue: TSPSimpleDataTable); 


begin
  If (FTable=AValue) then exit;
  FTable:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetTotalRows(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalRows=AValue) then exit;
  FTotalRows:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetTotalRowsIncludingDuplicates(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalRowsIncludingDuplicates=AValue) then exit;
  FTotalRowsIncludingDuplicates:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTRelevantResults.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTSpecialTermResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTSpecialTermResults.ObjectRestKind : String; 

begin
  Result:='SpecialTermResults';
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetGroupTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FGroupTemplateId=AValue) then exit;
  FGroupTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetItemTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FItemTemplateId=AValue) then exit;
  FItemTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetResults(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTSpecialTermResultArray); 


begin
  If (FResults=AValue) then exit;
  FResults:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetResultTitle(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitle=AValue) then exit;
  FResultTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetResultTitleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FResultTitleUrl=AValue) then exit;
  FResultTitleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResults.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  'results' : SetLength(FResults,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTSpecialTermResult
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTSpecialTermResult.ObjectRestKind : String; 

begin
  Result:='SpecialTermResult';
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResult.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResult.SetIsVisualBestBet(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsVisualBestBet=AValue) then exit;
  FIsVisualBestBet:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResult.SetPiSearchResultId(AIndex: Integer; const AValue: string); 


begin
  If (FPiSearchResultId=AValue) then exit;
  FPiSearchResultId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResult.SetRenderTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FRenderTemplateId=AValue) then exit;
  FRenderTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResult.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSpecialTermResult.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTSearchRequest
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTSearchRequest.ObjectRestKind : String; 

begin
  Result:='SearchRequest';
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetBlockDedupeMode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBlockDedupeMode=AValue) then exit;
  FBlockDedupeMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetBypassResultTypes(AIndex: Integer; const AValue: boolean); 


begin
  If (FBypassResultTypes=AValue) then exit;
  FBypassResultTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetClientType(AIndex: Integer; const AValue: string); 


begin
  If (FClientType=AValue) then exit;
  FClientType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetCollapseSpecification(AIndex: Integer; const AValue: string); 


begin
  If (FCollapseSpecification=AValue) then exit;
  FCollapseSpecification:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetCulture(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCulture=AValue) then exit;
  FCulture:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetDesiredSnippetLength(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDesiredSnippetLength=AValue) then exit;
  FDesiredSnippetLength:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableFQL(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableFQL=AValue) then exit;
  FEnableFQL:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableInterleaving(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableInterleaving=AValue) then exit;
  FEnableInterleaving:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableNicknames(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableNicknames=AValue) then exit;
  FEnableNicknames:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableOrderingHitHighlightedProperty(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableOrderingHitHighlightedProperty=AValue) then exit;
  FEnableOrderingHitHighlightedProperty:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnablePhonetic(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnablePhonetic=AValue) then exit;
  FEnablePhonetic:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableQueryRules(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableQueryRules=AValue) then exit;
  FEnableQueryRules:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableSorting(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableSorting=AValue) then exit;
  FEnableSorting:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetEnableStemming(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnableStemming=AValue) then exit;
  FEnableStemming:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetGenerateBlockRankLog(AIndex: Integer; const AValue: boolean); 


begin
  If (FGenerateBlockRankLog=AValue) then exit;
  FGenerateBlockRankLog:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetHiddenConstraints(AIndex: Integer; const AValue: string); 


begin
  If (FHiddenConstraints=AValue) then exit;
  FHiddenConstraints:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetHitHighlightedMultivaluePropertyLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FHitHighlightedMultivaluePropertyLimit=AValue) then exit;
  FHitHighlightedMultivaluePropertyLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetHitHighlightedProperties(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FHitHighlightedProperties=AValue) then exit;
  FHitHighlightedProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetImpressionId(AIndex: Integer; const AValue: string); 


begin
  If (FImpressionId=AValue) then exit;
  FImpressionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetMaxSnippetLength(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMaxSnippetLength=AValue) then exit;
  FMaxSnippetLength:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetPersonalizationData(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FPersonalizationData=AValue) then exit;
  FPersonalizationData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetProcessBestBets(AIndex: Integer; const AValue: boolean); 


begin
  If (FProcessBestBets=AValue) then exit;
  FProcessBestBets:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetProcessPersonalFavorites(AIndex: Integer; const AValue: boolean); 


begin
  If (FProcessPersonalFavorites=AValue) then exit;
  FProcessPersonalFavorites:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetProperties(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTQueryPropertyArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetQueryTag(AIndex: Integer; const AValue: string); 


begin
  If (FQueryTag=AValue) then exit;
  FQueryTag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetQueryTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FQueryTemplate=AValue) then exit;
  FQueryTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetQueryTemplatePropertiesUrl(AIndex: Integer; const AValue: string); 


begin
  If (FQueryTemplatePropertiesUrl=AValue) then exit;
  FQueryTemplatePropertiesUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetQuerytext(AIndex: Integer; const AValue: string); 


begin
  If (FQuerytext=AValue) then exit;
  FQuerytext:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetRankingModelId(AIndex: Integer; const AValue: string); 


begin
  If (FRankingModelId=AValue) then exit;
  FRankingModelId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetRefinementFilters(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FRefinementFilters=AValue) then exit;
  FRefinementFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetRefiners(AIndex: Integer; const AValue: string); 


begin
  If (FRefiners=AValue) then exit;
  FRefiners:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetReorderingRules(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleArray); 


begin
  If (FReorderingRules=AValue) then exit;
  FReorderingRules:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetResultsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FResultsUrl=AValue) then exit;
  FResultsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetRowLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRowLimit=AValue) then exit;
  FRowLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetRowsPerPage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRowsPerPage=AValue) then exit;
  FRowsPerPage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetSelectProperties(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSelectProperties=AValue) then exit;
  FSelectProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetSortList(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_QuerySortArray); 


begin
  If (FSortList=AValue) then exit;
  FSortList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetSourceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSourceId=AValue) then exit;
  FSourceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetStartRow(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStartRow=AValue) then exit;
  FStartRow:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetSummaryLength(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSummaryLength=AValue) then exit;
  FSummaryLength:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetTimeout(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTimeout=AValue) then exit;
  FTimeout:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetTimeZoneId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTimeZoneId=AValue) then exit;
  FTimeZoneId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetTotalRowsExactMinimum(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalRowsExactMinimum=AValue) then exit;
  FTotalRowsExactMinimum:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetTrimDuplicates(AIndex: Integer; const AValue: boolean); 


begin
  If (FTrimDuplicates=AValue) then exit;
  FTrimDuplicates:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetTrimDuplicatesIncludeId(AIndex: Integer; const AValue: int64); 


begin
  If (FTrimDuplicatesIncludeId=AValue) then exit;
  FTrimDuplicatesIncludeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetUILanguage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUILanguage=AValue) then exit;
  FUILanguage:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTSearchRequest.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'hithighlightedproperties' : SetLength(FHitHighlightedProperties,aLength);
  'properties' : SetLength(FProperties,aLength);
  'refinementfilters' : SetLength(FRefinementFilters,aLength);
  'reorderingrules' : SetLength(FReorderingRules,aLength);
  'selectproperties' : SetLength(FSelectProperties,aLength);
  'sortlist' : SetLength(FSortList,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTSearchResult
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTSearchResult.ObjectRestKind : String; 

begin
  Result:='SearchResult';
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetElapsedTime(AIndex: Integer; const AValue: TInt32); 


begin
  If (FElapsedTime=AValue) then exit;
  FElapsedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetPrimaryQueryResult(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTQueryResult); 


begin
  If (FPrimaryQueryResult=AValue) then exit;
  FPrimaryQueryResult:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetSecondaryQueryResults(AIndex: Integer; const AValue: TMicrosoft_Office_Server_Search_RESTQueryResultArray); 


begin
  If (FSecondaryQueryResults=AValue) then exit;
  FSecondaryQueryResults:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetSpellingSuggestion(AIndex: Integer; const AValue: string); 


begin
  If (FSpellingSuggestion=AValue) then exit;
  FSpellingSuggestion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetTriggeredRules(AIndex: Integer; const AValue: TGuidStringArray); 


begin
  If (FTriggeredRules=AValue) then exit;
  FTriggeredRules:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Office_Server_Search_RESTSearchResult.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  'secondaryqueryresults' : SetLength(FSecondaryQueryResults,aLength);
  'triggeredrules' : SetLength(FTriggeredRules,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_Search_RESTSearchService
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_Search_RESTSearchService.ObjectRestKind : String; 

begin
  Result:='SearchService';
end;


Procedure TMicrosoft_Office_Server_Search_RESTSearchService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Office_Server_Search_RESTSearchService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction.ObjectRestKind : String; 

begin
  Result:='AnalyticsAction';
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction.SetActionType(AIndex: Integer; const AValue: string); 


begin
  If (FActionType=AValue) then exit;
  FActionType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction.SetExpireTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FExpireTime=AValue) then exit;
  FExpireTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction.SetUserTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FUserTime=AValue) then exit;
  FUserTime:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor.ObjectRestKind : String; 

begin
  Result:='AnalyticsActor';
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor.SetTenantId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTenantId=AValue) then exit;
  FTenantId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem.ObjectRestKind : String; 

begin
  Result:='AnalyticsItem';
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal.ObjectRestKind : String; 

begin
  Result:='AnalyticsSignal';
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal.SetAction(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsAction); 


begin
  If (FAction=AValue) then exit;
  FAction:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal.SetActor(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsActor); 


begin
  If (FActor=AValue) then exit;
  FActor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal.SetItem(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsItem); 


begin
  If (FItem=AValue) then exit;
  FItem:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsAnalyticsSignal.SetSource(AIndex: Integer; const AValue: string); 


begin
  If (FSource=AValue) then exit;
  FSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore.ObjectRestKind : String; 

begin
  Result:='SignalStore';
end;


Procedure TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_YammerWacToken
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_YammerWacToken.ObjectRestKind : String; 

begin
  Result:='WacToken';
end;


Procedure TMicrosoft_SharePoint_YammerWacToken.SetAccessToken(AIndex: Integer; const AValue: string); 


begin
  If (FAccessToken=AValue) then exit;
  FAccessToken:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_YammerWacToken.SetAccessTokenTtl(AIndex: Integer; const AValue: int64); 


begin
  If (FAccessTokenTtl=AValue) then exit;
  FAccessTokenTtl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_YammerWacToken.SetAppUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAppUrl=AValue) then exit;
  FAppUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_YammerWacToken.SetErrorMessageToDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessageToDisplay=AValue) then exit;
  FErrorMessageToDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_YammerWacToken.SetFavIconTarget(AIndex: Integer; const AValue: string); 


begin
  If (FFavIconTarget=AValue) then exit;
  FFavIconTarget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_YammerWacToken.SetRedirectUrl(AIndex: Integer; const AValue: string); 


begin
  If (FRedirectUrl=AValue) then exit;
  FRedirectUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_YammerWacApi
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_YammerWacApi.ObjectRestKind : String; 

begin
  Result:='WacApi';
end;


Procedure TMicrosoft_SharePoint_YammerWacApi.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_YammerWacApi.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_PortalCollaborationMailboxResponse
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_PortalCollaborationMailboxResponse.ObjectRestKind : String; 

begin
  Result:='CollaborationMailboxResponse';
end;


Procedure TMicrosoft_SharePoint_PortalCollaborationMailboxResponse.SetAlternateUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAlternateUrl=AValue) then exit;
  FAlternateUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PortalCollaborationMailboxResponse.SetCorrelationId(AIndex: Integer; const AValue: string); 


begin
  If (FCorrelationId=AValue) then exit;
  FCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PortalCollaborationMailboxResponse.SetErrorCode(AIndex: Integer; const AValue: TInt32); 


begin
  If (FErrorCode=AValue) then exit;
  FErrorCode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PortalCollaborationMailboxResponse.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PortalCollaborationMailboxResponse.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_PortalCollaborationMailbox
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_PortalCollaborationMailbox.ObjectRestKind : String; 

begin
  Result:='CollaborationMailbox';
end;


Procedure TMicrosoft_SharePoint_PortalCollaborationMailbox.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_PortalCollaborationMailbox.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_PortalCommunityModeration
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_PortalCommunityModeration.ObjectRestKind : String; 

begin
  Result:='CommunityModeration';
end;


Procedure TMicrosoft_SharePoint_PortalCommunityModeration.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_PortalCommunityModeration.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_PortalMySiteRecommendations
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_PortalMySiteRecommendations.ObjectRestKind : String; 

begin
  Result:='MySiteRecommendations';
end;


Procedure TMicrosoft_SharePoint_PortalMySiteRecommendations.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_PortalMySiteRecommendations.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser.ObjectRestKind : String; 

begin
  Result:='SharedWithMeDocumentUser';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser.SetSipAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSipAddress=AValue) then exit;
  FSipAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUser.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.ObjectRestKind : String; 

begin
  Result:='MySiteLinks';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.SetAllDocumentsLink(AIndex: Integer; const AValue: string); 


begin
  If (FAllDocumentsLink=AValue) then exit;
  FAllDocumentsLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.SetAllDocumentsLinkHref(AIndex: Integer; const AValue: string); 


begin
  If (FAllDocumentsLinkHref=AValue) then exit;
  FAllDocumentsLinkHref:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.SetAllDocumentsLinkTarget(AIndex: Integer; const AValue: string); 


begin
  If (FAllDocumentsLinkTarget=AValue) then exit;
  FAllDocumentsLinkTarget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.SetAllSitesLink(AIndex: Integer; const AValue: string); 


begin
  If (FAllSitesLink=AValue) then exit;
  FAllSitesLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.SetAllSitesLinkHref(AIndex: Integer; const AValue: string); 


begin
  If (FAllSitesLinkHref=AValue) then exit;
  FAllSitesLinkHref:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.SetAllSitesLinkTarget(AIndex: Integer; const AValue: string); 


begin
  If (FAllSitesLinkTarget=AValue) then exit;
  FAllSitesLinkTarget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AllDocumentsLink);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText.ObjectRestKind : String; 

begin
  Result:='MySiteDismissStatusText';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility.ObjectRestKind : String; 

begin
  Result:='MySiteDocumentMoveUtility';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.ObjectRestKind : String; 

begin
  Result:='SharedWithMeDocument';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetAuthors(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray); 


begin
  If (FAuthors=AValue) then exit;
  FAuthors:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetContentTypeId(AIndex: Integer; const AValue: TSPContentTypeId); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetDocId(AIndex: Integer; const AValue: string); 


begin
  If (FDocId=AValue) then exit;
  FDocId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetEditors(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray); 


begin
  If (FEditors=AValue) then exit;
  FEditors:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetExtension(AIndex: Integer; const AValue: string); 


begin
  If (FExtension=AValue) then exit;
  FExtension:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetIsContainer(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsContainer=AValue) then exit;
  FIsContainer:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetIsMyDocument(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMyDocument=AValue) then exit;
  FIsMyDocument:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetLinkingUrl(AIndex: Integer; const AValue: string); 


begin
  If (FLinkingUrl=AValue) then exit;
  FLinkingUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetListId(AIndex: Integer; const AValue: string); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetListItemId(AIndex: Integer; const AValue: string); 


begin
  If (FListItemId=AValue) then exit;
  FListItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetParentLink(AIndex: Integer; const AValue: string); 


begin
  If (FParentLink=AValue) then exit;
  FParentLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetProgId(AIndex: Integer; const AValue: string); 


begin
  If (FProgId=AValue) then exit;
  FProgId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetServerRedirectedEmbedUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRedirectedEmbedUrl=AValue) then exit;
  FServerRedirectedEmbedUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetServerRedirectedPreviewUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRedirectedPreviewUrl=AValue) then exit;
  FServerRedirectedPreviewUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetServerRedirectedUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRedirectedUrl=AValue) then exit;
  FServerRedirectedUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetSharedWithInternal(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentUserArray); 


begin
  If (FSharedWithInternal=AValue) then exit;
  FSharedWithInternal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetSiteId(AIndex: Integer; const AValue: string); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetSiteUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSiteUrl=AValue) then exit;
  FSiteUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetUniqueId(AIndex: Integer; const AValue: string); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetUrlPath(AIndex: Integer; const AValue: string); 


begin
  If (FUrlPath=AValue) then exit;
  FUrlPath:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetWebId(AIndex: Integer; const AValue: string); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'authors' : SetLength(FAuthors,aLength);
  'editors' : SetLength(FEditors,aLength);
  'sharedwithinternal' : SetLength(FSharedWithInternal,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe.ObjectRestKind : String; 

begin
  Result:='DocumentsSharedWithMe';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup.ObjectRestKind : String; 

begin
  Result:='DocumentsSharedWithGroup';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson.ObjectRestKind : String; 

begin
  Result:='DocumentsSharedWithPerson';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites.ObjectRestKind : String; 

begin
  Result:='PromotedSites';
end;


Procedure TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.ObjectRestKind : String; 

begin
  Result:='MyRecsCacheBlob';
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.SetDateCached(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDateCached=AValue) then exit;
  FDateCached:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.SetFillInQuery(AIndex: Integer; const AValue: string); 


begin
  If (FFillInQuery=AValue) then exit;
  FFillInQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.SetFillInSortBy(AIndex: Integer; const AValue: string); 


begin
  If (FFillInSortBy=AValue) then exit;
  FFillInSortBy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.SetQuery(AIndex: Integer; const AValue: string); 


begin
  If (FQuery=AValue) then exit;
  FQuery:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.SetQueryInfo(AIndex: Integer; const AValue: TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo); 


begin
  If (FQueryInfo=AValue) then exit;
  FQueryInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.Set_Result(AIndex: Integer; const AValue: string); 


begin
  If (F_Result=AValue) then exit;
  F_Result:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.SetSortBy(AIndex: Integer; const AValue: string); 


begin
  If (FSortBy=AValue) then exit;
  FSortBy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TMicrosoft_SharePoint_Portal_ProjectMyRecsCacheBlob.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Result' : Result:='Result';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.ObjectRestKind : String; 

begin
  Result:='MyRecsQueryInfo';
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetCategory(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCategory=AValue) then exit;
  FCategory:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetExpertiseTags(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FExpertiseTags=AValue) then exit;
  FExpertiseTags:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetFollowedUrls(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FFollowedUrls=AValue) then exit;
  FFollowedUrls:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetInterestTags(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FInterestTags=AValue) then exit;
  FInterestTags:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetQueryInfoExists(AIndex: Integer; const AValue: boolean); 


begin
  If (FQueryInfoExists=AValue) then exit;
  FQueryInfoExists:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetSuggestedTags(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSuggestedTags=AValue) then exit;
  FSuggestedTags:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_Portal_ProjectMyRecsQueryInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'expertisetags' : SetLength(FExpertiseTags,aLength);
  'followedurls' : SetLength(FFollowedUrls,aLength);
  'interesttags' : SetLength(FInterestTags,aLength);
  'suggestedtags' : SetLength(FSuggestedTags,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SiteHealthSiteHealthResult
  --------------------------------------------------------------------}


Class Function TSP_SiteHealthSiteHealthResult.ObjectRestKind : String; 

begin
  Result:='SiteHealthResult';
end;


Procedure TSP_SiteHealthSiteHealthResult.SetMessageAsText(AIndex: Integer; const AValue: string); 


begin
  If (FMessageAsText=AValue) then exit;
  FMessageAsText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthResult.SetRuleHelpLink(AIndex: Integer; const AValue: string); 


begin
  If (FRuleHelpLink=AValue) then exit;
  FRuleHelpLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthResult.SetRuleId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FRuleId=AValue) then exit;
  FRuleId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthResult.SetRuleIsRepairable(AIndex: Integer; const AValue: boolean); 


begin
  If (FRuleIsRepairable=AValue) then exit;
  FRuleIsRepairable:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthResult.SetRuleName(AIndex: Integer; const AValue: string); 


begin
  If (FRuleName=AValue) then exit;
  FRuleName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthResult.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthResult.SetTimeStamp(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeStamp=AValue) then exit;
  FTimeStamp:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SiteHealthSiteHealthSummary
  --------------------------------------------------------------------}


Class Function TSP_SiteHealthSiteHealthSummary.ObjectRestKind : String; 

begin
  Result:='SiteHealthSummary';
end;


Procedure TSP_SiteHealthSiteHealthSummary.SetFailedErrorCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFailedErrorCount=AValue) then exit;
  FFailedErrorCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthSummary.SetFailedWarningCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFailedWarningCount=AValue) then exit;
  FFailedWarningCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthSummary.SetPassedCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPassedCount=AValue) then exit;
  FPassedCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SiteHealthSiteHealthSummary.SetResults(AIndex: Integer; const AValue: TSP_SiteHealthSiteHealthResultArray); 


begin
  If (FResults=AValue) then exit;
  FResults:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SiteHealthSiteHealthSummary.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'results' : SetLength(FResults,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_SiteHealthSiteHealthSummary.KeyAsURLPart : string;

begin
  Result:=IntToStr(FailedErrorCount);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationUsageEntry
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationUsageEntry.ObjectRestKind : String; 

begin
  Result:='UsageEntry';
end;


Procedure TMicrosoft_SharePoint_AdministrationUsageEntry.SetEventTypeId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEventTypeId=AValue) then exit;
  FEventTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationUsageEntry.SetItemId(AIndex: Integer; const AValue: string); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationUsageEntry.SetScopeId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FScopeId=AValue) then exit;
  FScopeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationUsageEntry.SetSite(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSite=AValue) then exit;
  FSite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationUsageEntry.SetUser(AIndex: Integer; const AValue: string); 


begin
  If (FUser=AValue) then exit;
  FUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition.ObjectRestKind : String; 

begin
  Result:='SPAppStateQueryJobDefinition';
end;


Procedure TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationSPFarm
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationSPFarm.ObjectRestKind : String; 

begin
  Result:='SPFarm';
end;


Procedure TMicrosoft_SharePoint_AdministrationSPFarm.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationSPFarm.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TMicrosoft_SharePoint_AdministrationSPFarm.Local(AService: TODataService) : TMicrosoft_SharePoint_AdministrationSPFarm; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarm(GetContainedSingleTon(AService,'Local', TMicrosoft_SharePoint_AdministrationSPFarm));
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationFeatureDefinition
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationFeatureDefinition.ObjectRestKind : String; 

begin
  Result:='FeatureDefinition';
end;


Procedure TMicrosoft_SharePoint_AdministrationFeatureDefinition.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationFeatureDefinition.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationFeatureDefinition.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData.ObjectRestKind : String; 

begin
  Result:='SPTenantAppInstanceData';
end;


Procedure TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationSPWebApplication
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationSPWebApplication.ObjectRestKind : String; 

begin
  Result:='SPWebApplication';
end;


Procedure TMicrosoft_SharePoint_AdministrationSPWebApplication.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationSPWebApplication.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationSPWebApplication.SetOutboundMailPort(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOutboundMailPort=AValue) then exit;
  FOutboundMailPort:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationSPWebApplication.SetOutboundMailReplyToAddress(AIndex: Integer; const AValue: string); 


begin
  If (FOutboundMailReplyToAddress=AValue) then exit;
  FOutboundMailReplyToAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AdministrationSPWebApplication.SetOutboundMailSenderAddress(AIndex: Integer; const AValue: string); 


begin
  If (FOutboundMailSenderAddress=AValue) then exit;
  FOutboundMailSenderAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationSPWebApplication.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TMicrosoft_SharePoint_AdministrationSPWebApplication.Sites(AService: TODataService) : TSPSite; 


begin
  Result:=TSPSite(GetContainedSingleTon(AService,'Sites', TSPSite));
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationSPWebService
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationSPWebService.ObjectRestKind : String; 

begin
  Result:='SPWebService';
end;


Procedure TMicrosoft_SharePoint_AdministrationSPWebService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationSPWebService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TMicrosoft_SharePoint_AdministrationSPWebService.ContentService(AService: TODataService) : TMicrosoft_SharePoint_AdministrationSPWebService; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebService(GetContainedSingleTon(AService,'ContentService', TMicrosoft_SharePoint_AdministrationSPWebService));
end;


Function TMicrosoft_SharePoint_AdministrationSPWebService.WebApplications(AService: TODataService) : TMicrosoft_SharePoint_AdministrationSPWebApplication; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplication(GetContainedSingleTon(AService,'WebApplications', TMicrosoft_SharePoint_AdministrationSPWebApplication));
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService.ObjectRestKind : String; 

begin
  Result:='SPAnalyticsUsageService';
end;


Procedure TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters
  --------------------------------------------------------------------}


Class Function TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.ObjectRestKind : String; 

begin
  Result:='ClientPeoplePickerQueryParameters';
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetAllowEmailAddresses(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowEmailAddresses=AValue) then exit;
  FAllowEmailAddresses:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetAllowMultipleEntities(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowMultipleEntities=AValue) then exit;
  FAllowMultipleEntities:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetAllUrlZones(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllUrlZones=AValue) then exit;
  FAllUrlZones:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetEnabledClaimProviders(AIndex: Integer; const AValue: string); 


begin
  If (FEnabledClaimProviders=AValue) then exit;
  FEnabledClaimProviders:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetForceClaims(AIndex: Integer; const AValue: boolean); 


begin
  If (FForceClaims=AValue) then exit;
  FForceClaims:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetMaximumEntitySuggestions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMaximumEntitySuggestions=AValue) then exit;
  FMaximumEntitySuggestions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetPrincipalSource(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalSource=AValue) then exit;
  FPrincipalSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetPrincipalType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalType=AValue) then exit;
  FPrincipalType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetQueryString(AIndex: Integer; const AValue: string); 


begin
  If (FQueryString=AValue) then exit;
  FQueryString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetRequired(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequired=AValue) then exit;
  FRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetSharePointGroupID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSharePointGroupID=AValue) then exit;
  FSharePointGroupID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetUrlZone(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUrlZone=AValue) then exit;
  FUrlZone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetUrlZoneSpecified(AIndex: Integer; const AValue: boolean); 


begin
  If (FUrlZoneSpecified=AValue) then exit;
  FUrlZoneSpecified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerQueryParameters.SetWebApplicationID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebApplicationID=AValue) then exit;
  FWebApplicationID:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface
  --------------------------------------------------------------------}


Class Function TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface.ObjectRestKind : String; 

begin
  Result:='ClientPeoplePickerWebServiceInterface';
end;


Procedure TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_PageInstrumentationPageImpressionClient
  --------------------------------------------------------------------}


Class Function TSP_PageInstrumentationPageImpressionClient.ObjectRestKind : String; 

begin
  Result:='PageImpressionClient';
end;


Procedure TSP_PageInstrumentationPageImpressionClient.SetBasePageCorrelationId(AIndex: Integer; const AValue: string); 


begin
  If (FBasePageCorrelationId=AValue) then exit;
  FBasePageCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_PageInstrumentationPageImpressionClient.SetClientIdToClickInfoMap(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FClientIdToClickInfoMap=AValue) then exit;
  FClientIdToClickInfoMap:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_PageInstrumentationPageImpressionClient.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'clientidtoclickinfomap' : SetLength(FClientIdToClickInfoMap,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_PageInstrumentationClickManager
  --------------------------------------------------------------------}


Class Function TSP_PageInstrumentationClickManager.ObjectRestKind : String; 

begin
  Result:='ClickManager';
end;


Procedure TSP_PageInstrumentationClickManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_PageInstrumentationClickManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UtilitiesEmailProperties
  --------------------------------------------------------------------}


Class Function TSP_UtilitiesEmailProperties.ObjectRestKind : String; 

begin
  Result:='EmailProperties';
end;


Procedure TSP_UtilitiesEmailProperties.SetAdditionalHeaders(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FAdditionalHeaders=AValue) then exit;
  FAdditionalHeaders:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesEmailProperties.SetBCC(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FBCC=AValue) then exit;
  FBCC:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesEmailProperties.SetBody(AIndex: Integer; const AValue: string); 


begin
  If (FBody=AValue) then exit;
  FBody:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesEmailProperties.SetCC(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FCC=AValue) then exit;
  FCC:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesEmailProperties.SetFrom(AIndex: Integer; const AValue: string); 


begin
  If (FFrom=AValue) then exit;
  FFrom:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesEmailProperties.SetSubject(AIndex: Integer; const AValue: string); 


begin
  If (FSubject=AValue) then exit;
  FSubject:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesEmailProperties.Set_To(AIndex: Integer; const AValue: TStringArray); 


begin
  If (F_To=AValue) then exit;
  F_To:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_UtilitiesEmailProperties.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'additionalheaders' : SetLength(FAdditionalHeaders,aLength);
  'bcc' : SetLength(FBCC,aLength);
  'cc' : SetLength(FCC,aLength);
  '_to' : SetLength(F_To,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Class Function TSP_UtilitiesEmailProperties.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_To' : Result:='To';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSP_UtilitiesPrincipalInfo
  --------------------------------------------------------------------}


Class Function TSP_UtilitiesPrincipalInfo.ObjectRestKind : String; 

begin
  Result:='PrincipalInfo';
end;


Procedure TSP_UtilitiesPrincipalInfo.SetDepartment(AIndex: Integer; const AValue: string); 


begin
  If (FDepartment=AValue) then exit;
  FDepartment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetJobTitle(AIndex: Integer; const AValue: string); 


begin
  If (FJobTitle=AValue) then exit;
  FJobTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetLoginName(AIndex: Integer; const AValue: string); 


begin
  If (FLoginName=AValue) then exit;
  FLoginName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetMobile(AIndex: Integer; const AValue: string); 


begin
  If (FMobile=AValue) then exit;
  FMobile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetPrincipalId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalId=AValue) then exit;
  FPrincipalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetPrincipalType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPrincipalType=AValue) then exit;
  FPrincipalType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesPrincipalInfo.SetSIPAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSIPAddress=AValue) then exit;
  FSIPAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_UtilitiesWikiPageCreationInformation
  --------------------------------------------------------------------}


Class Function TSP_UtilitiesWikiPageCreationInformation.ObjectRestKind : String; 

begin
  Result:='WikiPageCreationInformation';
end;


Procedure TSP_UtilitiesWikiPageCreationInformation.SetServerRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerRelativeUrl=AValue) then exit;
  FServerRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_UtilitiesWikiPageCreationInformation.SetWikiHtmlContent(AIndex: Integer; const AValue: string); 


begin
  If (FWikiHtmlContent=AValue) then exit;
  FWikiHtmlContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_UtilitiesMarketplaceUtilities
  --------------------------------------------------------------------}


Class Function TSP_UtilitiesMarketplaceUtilities.ObjectRestKind : String; 

begin
  Result:='MarketplaceUtilities';
end;


Procedure TSP_UtilitiesMarketplaceUtilities.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UtilitiesMarketplaceUtilities.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_UtilitiesUtility
  --------------------------------------------------------------------}


Class Function TSP_UtilitiesUtility.ObjectRestKind : String; 

begin
  Result:='Utility';
end;


Procedure TSP_UtilitiesUtility.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_UtilitiesUtility.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WebPartsTileData
  --------------------------------------------------------------------}


Class Function TSP_WebPartsTileData.ObjectRestKind : String; 

begin
  Result:='TileData';
end;


Procedure TSP_WebPartsTileData.SetBackgroundCollageImageLocations(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FBackgroundCollageImageLocations=AValue) then exit;
  FBackgroundCollageImageLocations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetBackgroundImageLocation(AIndex: Integer; const AValue: string); 


begin
  If (FBackgroundImageLocation=AValue) then exit;
  FBackgroundImageLocation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetBackgroundImageRendersAsIcon(AIndex: Integer; const AValue: boolean); 


begin
  If (FBackgroundImageRendersAsIcon=AValue) then exit;
  FBackgroundImageRendersAsIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetBodyText(AIndex: Integer; const AValue: string); 


begin
  If (FBodyText=AValue) then exit;
  FBodyText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetHoverDisabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FHoverDisabled=AValue) then exit;
  FHoverDisabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetIsWide(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsWide=AValue) then exit;
  FIsWide:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetLinkLocation(AIndex: Integer; const AValue: string); 


begin
  If (FLinkLocation=AValue) then exit;
  FLinkLocation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetTileOrder(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTileOrder=AValue) then exit;
  FTileOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsTileData.SetTransparentOverlay(AIndex: Integer; const AValue: boolean); 


begin
  If (FTransparentOverlay=AValue) then exit;
  FTransparentOverlay:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WebPartsTileData.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'backgroundcollageimagelocations' : SetLength(FBackgroundCollageImageLocations,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_WebPartsLimitedWebPartManager
  --------------------------------------------------------------------}


Class Function TSP_WebPartsLimitedWebPartManager.ObjectRestKind : String; 

begin
  Result:='LimitedWebPartManager';
end;


Procedure TSP_WebPartsLimitedWebPartManager.SetHasPersonalizedParts(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasPersonalizedParts=AValue) then exit;
  FHasPersonalizedParts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsLimitedWebPartManager.SetScope(AIndex: Integer; const AValue: TInt32); 


begin
  If (FScope=AValue) then exit;
  FScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WebPartsLimitedWebPartManager.KeyAsURLPart : string;

begin
  Result:=BoolToStr(HasPersonalizedParts,'true','false');
end;


Function TSP_WebPartsLimitedWebPartManager.WebParts(AService: TODataService) : TSP_WebPartsWebPartDefinition; 


begin
  Result:=TSP_WebPartsWebPartDefinition(GetContainedSingleTon(AService,'WebParts', TSP_WebPartsWebPartDefinition));
end;


{ --------------------------------------------------------------------
  TSP_WebPartsWebPartDefinition
  --------------------------------------------------------------------}


Class Function TSP_WebPartsWebPartDefinition.ObjectRestKind : String; 

begin
  Result:='WebPartDefinition';
end;


Procedure TSP_WebPartsWebPartDefinition.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WebPartsWebPartDefinition.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


Function TSP_WebPartsWebPartDefinition.WebPart(AService: TODataService) : TSP_WebPartsWebPart; 


begin
  Result:=TSP_WebPartsWebPart(GetContainedSingleTon(AService,'WebPart', TSP_WebPartsWebPart));
end;


{ --------------------------------------------------------------------
  TSP_WebPartsWebPart
  --------------------------------------------------------------------}


Class Function TSP_WebPartsWebPart.ObjectRestKind : String; 

begin
  Result:='WebPart';
end;


Procedure TSP_WebPartsWebPart.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsWebPart.SetIsClosed(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsClosed=AValue) then exit;
  FIsClosed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsWebPart.SetSubtitle(AIndex: Integer; const AValue: string); 


begin
  If (FSubtitle=AValue) then exit;
  FSubtitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsWebPart.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsWebPart.SetTitleUrl(AIndex: Integer; const AValue: string); 


begin
  If (FTitleUrl=AValue) then exit;
  FTitleUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WebPartsWebPart.SetZoneIndex(AIndex: Integer; const AValue: TInt32); 


begin
  If (FZoneIndex=AValue) then exit;
  FZoneIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WebPartsWebPart.KeyAsURLPart : string;

begin
  Result:=BoolToStr(Hidden,'true','false');
end;


Function TSP_WebPartsWebPart.Properties(AService: TODataService) : TSPPropertyValues; 


begin
  Result:=TSPPropertyValues(GetContainedSingleTon(AService,'Properties', TSPPropertyValues));
end;


{ --------------------------------------------------------------------
  TSP_WorkflowWorkflowAssociationCreationInformation
  --------------------------------------------------------------------}


Class Function TSP_WorkflowWorkflowAssociationCreationInformation.ObjectRestKind : String; 

begin
  Result:='WorkflowAssociationCreationInformation';
end;


Procedure TSP_WorkflowWorkflowAssociationCreationInformation.SetContentTypeAssociationHistoryListName(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeAssociationHistoryListName=AValue) then exit;
  FContentTypeAssociationHistoryListName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociationCreationInformation.SetContentTypeAssociationTaskListName(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeAssociationTaskListName=AValue) then exit;
  FContentTypeAssociationTaskListName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociationCreationInformation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowWorkflowAssociation
  --------------------------------------------------------------------}


Class Function TSP_WorkflowWorkflowAssociation.ObjectRestKind : String; 

begin
  Result:='WorkflowAssociation';
end;


Procedure TSP_WorkflowWorkflowAssociation.SetAllowManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowManual=AValue) then exit;
  FAllowManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetAssociationData(AIndex: Integer; const AValue: string); 


begin
  If (FAssociationData=AValue) then exit;
  FAssociationData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetAutoStartChange(AIndex: Integer; const AValue: boolean); 


begin
  If (FAutoStartChange=AValue) then exit;
  FAutoStartChange:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetAutoStartCreate(AIndex: Integer; const AValue: boolean); 


begin
  If (FAutoStartCreate=AValue) then exit;
  FAutoStartCreate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetBaseId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FBaseId=AValue) then exit;
  FBaseId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnabled=AValue) then exit;
  FEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetHistoryListTitle(AIndex: Integer; const AValue: string); 


begin
  If (FHistoryListTitle=AValue) then exit;
  FHistoryListTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetInstantiationUrl(AIndex: Integer; const AValue: string); 


begin
  If (FInstantiationUrl=AValue) then exit;
  FInstantiationUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetInternalName(AIndex: Integer; const AValue: string); 


begin
  If (FInternalName=AValue) then exit;
  FInternalName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetIsDeclarative(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDeclarative=AValue) then exit;
  FIsDeclarative:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetTaskListTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTaskListTitle=AValue) then exit;
  FTaskListTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowAssociation.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowWorkflowAssociation.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowWorkflowTemplate
  --------------------------------------------------------------------}


Class Function TSP_WorkflowWorkflowTemplate.ObjectRestKind : String; 

begin
  Result:='WorkflowTemplate';
end;


Procedure TSP_WorkflowWorkflowTemplate.SetAllowManual(AIndex: Integer; const AValue: boolean); 


begin
  If (FAllowManual=AValue) then exit;
  FAllowManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetAssociationUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAssociationUrl=AValue) then exit;
  FAssociationUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetAutoStartChange(AIndex: Integer; const AValue: boolean); 


begin
  If (FAutoStartChange=AValue) then exit;
  FAutoStartChange:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetAutoStartCreate(AIndex: Integer; const AValue: boolean); 


begin
  If (FAutoStartCreate=AValue) then exit;
  FAutoStartCreate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetIsDeclarative(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDeclarative=AValue) then exit;
  FIsDeclarative:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowWorkflowTemplate.SetPermissionsManual(AIndex: Integer; const AValue: TSPBasePermissions); 


begin
  If (FPermissionsManual=AValue) then exit;
  FPermissionsManual:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowWorkflowTemplate.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowSPWorkflow
  --------------------------------------------------------------------}


Class Function TSP_WorkflowSPWorkflow.ObjectRestKind : String; 

begin
  Result:='SPWorkflow';
end;


Procedure TSP_WorkflowSPWorkflow.SetAssociationId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FAssociationId=AValue) then exit;
  FAssociationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowSPWorkflow.SetInstanceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FInstanceId=AValue) then exit;
  FInstanceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowSPWorkflow.SetIsCompleted(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCompleted=AValue) then exit;
  FIsCompleted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowSPWorkflow.SetStatusText(AIndex: Integer; const AValue: string); 


begin
  If (FStatusText=AValue) then exit;
  FStatusText:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowSPWorkflow.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AssociationId);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowSPWorkflowManager
  --------------------------------------------------------------------}


Class Function TSP_WorkflowSPWorkflowManager.ObjectRestKind : String; 

begin
  Result:='SPWorkflowManager';
end;


Procedure TSP_WorkflowSPWorkflowManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowSPWorkflowManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowSPWorkflowTask
  --------------------------------------------------------------------}


Class Function TSP_WorkflowSPWorkflowTask.ObjectRestKind : String; 

begin
  Result:='SPWorkflowTask';
end;


{ --------------------------------------------------------------------
  TSP_SharingUserRoleAssignment
  --------------------------------------------------------------------}


Class Function TSP_SharingUserRoleAssignment.ObjectRestKind : String; 

begin
  Result:='UserRoleAssignment';
end;


Procedure TSP_SharingUserRoleAssignment.SetRole(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRole=AValue) then exit;
  FRole:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserRoleAssignment.SetUserId(AIndex: Integer; const AValue: string); 


begin
  If (FUserId=AValue) then exit;
  FUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_SharingUserSharingResult
  --------------------------------------------------------------------}


Class Function TSP_SharingUserSharingResult.ObjectRestKind : String; 

begin
  Result:='UserSharingResult';
end;


Procedure TSP_SharingUserSharingResult.SetAllowedRoles(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FAllowedRoles=AValue) then exit;
  FAllowedRoles:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetCurrentRole(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrentRole=AValue) then exit;
  FCurrentRole:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetEmail(AIndex: Integer; const AValue: string); 


begin
  If (FEmail=AValue) then exit;
  FEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetInvitationLink(AIndex: Integer; const AValue: string); 


begin
  If (FInvitationLink=AValue) then exit;
  FInvitationLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetIsUserKnown(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUserKnown=AValue) then exit;
  FIsUserKnown:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetMessage(AIndex: Integer; const AValue: string); 


begin
  If (FMessage=AValue) then exit;
  FMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetStatus(AIndex: Integer; const AValue: boolean); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_SharingUserSharingResult.SetUser(AIndex: Integer; const AValue: string); 


begin
  If (FUser=AValue) then exit;
  FUser:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_SharingUserSharingResult.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'allowedroles' : SetLength(FAllowedRoles,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


{ --------------------------------------------------------------------
  TSP_SharingDocumentSharingManager
  --------------------------------------------------------------------}


Class Function TSP_SharingDocumentSharingManager.ObjectRestKind : String; 

begin
  Result:='DocumentSharingManager';
end;


Procedure TSP_SharingDocumentSharingManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SharingDocumentSharingManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_SharingWebSharingManager
  --------------------------------------------------------------------}


Class Function TSP_SharingWebSharingManager.ObjectRestKind : String; 

begin
  Result:='WebSharingManager';
end;


Procedure TSP_SharingWebSharingManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_SharingWebSharingManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_TaxonomyTaxonomyFieldValue
  --------------------------------------------------------------------}


Class Function TSP_TaxonomyTaxonomyFieldValue.ObjectRestKind : String; 

begin
  Result:='TaxonomyFieldValue';
end;


Procedure TSP_TaxonomyTaxonomyFieldValue.Set_Label(AIndex: Integer; const AValue: string); 


begin
  If (F_Label=AValue) then exit;
  F_Label:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TaxonomyTaxonomyFieldValue.SetTermGuid(AIndex: Integer; const AValue: string); 


begin
  If (FTermGuid=AValue) then exit;
  FTermGuid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TaxonomyTaxonomyFieldValue.SetWssId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWssId=AValue) then exit;
  FWssId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSP_TaxonomyTaxonomyFieldValue.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Label' : Result:='Label';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSP_TranslationTranslationItemInfo
  --------------------------------------------------------------------}


Class Function TSP_TranslationTranslationItemInfo.ObjectRestKind : String; 

begin
  Result:='TranslationItemInfo';
end;


Procedure TSP_TranslationTranslationItemInfo.SetCanceled(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanceled=AValue) then exit;
  FCanceled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetFailed(AIndex: Integer; const AValue: boolean); 


begin
  If (FFailed=AValue) then exit;
  FFailed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetInProgress(AIndex: Integer; const AValue: boolean); 


begin
  If (FInProgress=AValue) then exit;
  FInProgress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetInputFile(AIndex: Integer; const AValue: string); 


begin
  If (FInputFile=AValue) then exit;
  FInputFile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetNotStarted(AIndex: Integer; const AValue: boolean); 


begin
  If (FNotStarted=AValue) then exit;
  FNotStarted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetOutputFile(AIndex: Integer; const AValue: string); 


begin
  If (FOutputFile=AValue) then exit;
  FOutputFile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.Set_Result(AIndex: Integer; const AValue: TInt32); 


begin
  If (F_Result=AValue) then exit;
  F_Result:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetSucceeded(AIndex: Integer; const AValue: boolean); 


begin
  If (FSucceeded=AValue) then exit;
  FSucceeded:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationItemInfo.SetTranslationId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FTranslationId=AValue) then exit;
  FTranslationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Class Function TSP_TranslationTranslationItemInfo.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Result' : Result:='Result';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


{ --------------------------------------------------------------------
  TSP_TranslationTranslationJobInfo
  --------------------------------------------------------------------}


Class Function TSP_TranslationTranslationJobInfo.ObjectRestKind : String; 

begin
  Result:='TranslationJobInfo';
end;


Procedure TSP_TranslationTranslationJobInfo.SetCanceled(AIndex: Integer; const AValue: boolean); 


begin
  If (FCanceled=AValue) then exit;
  FCanceled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobInfo.SetCancelTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCancelTime=AValue) then exit;
  FCancelTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobInfo.SetJobId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FJobId=AValue) then exit;
  FJobId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobInfo.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobInfo.SetPartiallySubmitted(AIndex: Integer; const AValue: boolean); 


begin
  If (FPartiallySubmitted=AValue) then exit;
  FPartiallySubmitted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobInfo.SetSubmittedTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FSubmittedTime=AValue) then exit;
  FSubmittedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TSP_TranslationSyncTranslator
  --------------------------------------------------------------------}


Class Function TSP_TranslationSyncTranslator.ObjectRestKind : String; 

begin
  Result:='SyncTranslator';
end;


Procedure TSP_TranslationSyncTranslator.SetOutputSaveBehavior(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOutputSaveBehavior=AValue) then exit;
  FOutputSaveBehavior:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_TranslationSyncTranslator.KeyAsURLPart : string;

begin
  Result:=IntToStr(OutputSaveBehavior);
end;


{ --------------------------------------------------------------------
  TSP_TranslationTranslationJob
  --------------------------------------------------------------------}


Class Function TSP_TranslationTranslationJob.ObjectRestKind : String; 

begin
  Result:='TranslationJob';
end;


Procedure TSP_TranslationTranslationJob.SetJobId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FJobId=AValue) then exit;
  FJobId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJob.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJob.SetOutputSaveBehavior(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOutputSaveBehavior=AValue) then exit;
  FOutputSaveBehavior:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_TranslationTranslationJob.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_TranslationTranslationJobStatus
  --------------------------------------------------------------------}


Class Function TSP_TranslationTranslationJobStatus.ObjectRestKind : String; 

begin
  Result:='TranslationJobStatus';
end;


Procedure TSP_TranslationTranslationJobStatus.SetCanceled(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCanceled=AValue) then exit;
  FCanceled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobStatus.SetCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCount=AValue) then exit;
  FCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobStatus.SetFailed(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFailed=AValue) then exit;
  FFailed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobStatus.SetInProgress(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInProgress=AValue) then exit;
  FInProgress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobStatus.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobStatus.SetNotStarted(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNotStarted=AValue) then exit;
  FNotStarted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_TranslationTranslationJobStatus.SetSucceeded(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSucceeded=AValue) then exit;
  FSucceeded:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_TranslationTranslationJobStatus.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_TranslationVariationsTranslationTimerJob
  --------------------------------------------------------------------}


Class Function TSP_TranslationVariationsTranslationTimerJob.ObjectRestKind : String; 

begin
  Result:='VariationsTranslationTimerJob';
end;


Procedure TSP_TranslationVariationsTranslationTimerJob.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_TranslationVariationsTranslationTimerJob.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.ObjectRestKind : String; 

begin
  Result:='SPOTenantWebTemplate';
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.SetCompatibilityLevel(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCompatibilityLevel=AValue) then exit;
  FCompatibilityLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.SetDisplayCategory(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayCategory=AValue) then exit;
  FDisplayCategory:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.SetLcid(AIndex: Integer; const AValue: int64); 


begin
  If (FLcid=AValue) then exit;
  FLcid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplate.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection.ObjectRestKind : String; 

begin
  Result:='SPOTenantWebTemplateCollection';
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection.SetItems(AIndex: Integer; const AValue: TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateArray); 


begin
  If (FItems=AValue) then exit;
  FItems:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'items' : SetLength(FItems,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_AppData_AccessAccessApp
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_AppData_AccessAccessApp.ObjectRestKind : String; 

begin
  Result:='AccessApp';
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMBaseSession
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMBaseSession.ObjectRestKind : String; 

begin
  Result:='BaseSession';
end;


Procedure TSP_WorkManagement_OMBaseSession.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMBaseSession.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMBooleanCriterion
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMBooleanCriterion.ObjectRestKind : String; 

begin
  Result:='BooleanCriterion';
end;


Procedure TSP_WorkManagement_OMBooleanCriterion.SetCompareType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCompareType=AValue) then exit;
  FCompareType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMBooleanCriterion.KeyAsURLPart : string;

begin
  Result:=IntToStr(CompareType);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMCalloutInfo
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMCalloutInfo.ObjectRestKind : String; 

begin
  Result:='CalloutInfo';
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetContacts(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FContacts=AValue) then exit;
  FContacts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetDirectLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FDirectLinkTitle=AValue) then exit;
  FDirectLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetDirectLinkUrl(AIndex: Integer; const AValue: string); 


begin
  If (FDirectLinkUrl=AValue) then exit;
  FDirectLinkUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetHierarchy(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FHierarchy=AValue) then exit;
  FHierarchy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetPredecessors(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FPredecessors=AValue) then exit;
  FPredecessors:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetSuccessors(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FSuccessors=AValue) then exit;
  FSuccessors:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCalloutInfo.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMCalloutInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'contacts' : SetLength(FContacts,aLength);
  'hierarchy' : SetLength(FHierarchy,aLength);
  'predecessors' : SetLength(FPredecessors,aLength);
  'successors' : SetLength(FSuccessors,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMCalloutInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(DirectLinkTitle);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMCreateRefreshJobResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMCreateRefreshJobResult.ObjectRestKind : String; 

begin
  Result:='CreateRefreshJobResult';
end;


Procedure TSP_WorkManagement_OMCreateRefreshJobResult.SetCreatedJob(AIndex: Integer; const AValue: boolean); 


begin
  If (FCreatedJob=AValue) then exit;
  FCreatedJob:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCreateRefreshJobResult.SetCurrentJobId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCurrentJobId=AValue) then exit;
  FCurrentJobId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCreateRefreshJobResult.SetEncounteredError(AIndex: Integer; const AValue: boolean); 


begin
  If (FEncounteredError=AValue) then exit;
  FEncounteredError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMCreateRefreshJobResult.KeyAsURLPart : string;

begin
  Result:=BoolToStr(CreatedJob,'true','false');
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMCustomAttributeFilter
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMCustomAttributeFilter.ObjectRestKind : String; 

begin
  Result:='CustomAttributeFilter';
end;


Procedure TSP_WorkManagement_OMCustomAttributeFilter.SetAttributes(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FAttributes=AValue) then exit;
  FAttributes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMCustomAttributeFilter.SetConcatType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FConcatType=AValue) then exit;
  FConcatType:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMCustomAttributeFilter.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'attributes' : SetLength(FAttributes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMCustomAttributeFilter.KeyAsURLPart : string;

begin
  Result:=IntToStr(ConcatType);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMDashboardScriptExtensionInfo
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMDashboardScriptExtensionInfo.ObjectRestKind : String; 

begin
  Result:='DashboardScriptExtensionInfo';
end;


Procedure TSP_WorkManagement_OMDashboardScriptExtensionInfo.SetProviderKey(AIndex: Integer; const AValue: string); 


begin
  If (FProviderKey=AValue) then exit;
  FProviderKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMDashboardScriptExtensionInfo.SetScriptClass(AIndex: Integer; const AValue: string); 


begin
  If (FScriptClass=AValue) then exit;
  FScriptClass:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMDashboardScriptExtensionInfo.SetScriptData(AIndex: Integer; const AValue: string); 


begin
  If (FScriptData=AValue) then exit;
  FScriptData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMDashboardScriptExtensionInfo.SetScriptFiles(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FScriptFiles=AValue) then exit;
  FScriptFiles:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMDashboardScriptExtensionInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'scriptfiles' : SetLength(FScriptFiles,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMDashboardScriptExtensionInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ProviderKey);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMDateRangeCriterion
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMDateRangeCriterion.ObjectRestKind : String; 

begin
  Result:='DateRangeCriterion';
end;


Procedure TSP_WorkManagement_OMDateRangeCriterion.SetRangeEndValue(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRangeEndValue=AValue) then exit;
  FRangeEndValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMDateRangeCriterion.SetRangeStartValue(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRangeStartValue=AValue) then exit;
  FRangeStartValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMDateRangeCriterion.KeyAsURLPart : string;

begin
  Result:=FormatDateTime('yyyy-mm-dd"T"hhmmss',RangeEndValue);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMExchangeUserSyncState
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMExchangeUserSyncState.ObjectRestKind : String; 

begin
  Result:='ExchangeUserSyncState';
end;


Procedure TSP_WorkManagement_OMExchangeUserSyncState.SetIsOptedIn(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsOptedIn=AValue) then exit;
  FIsOptedIn:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMExchangeUserSyncState.SetLastEndTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastEndTime=AValue) then exit;
  FLastEndTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMExchangeUserSyncState.SetLastSyncResult(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLastSyncResult=AValue) then exit;
  FLastSyncResult:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMExchangeUserSyncState.KeyAsURLPart : string;

begin
  Result:=BoolToStr(IsOptedIn,'true','false');
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMLocation
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMLocation.ObjectRestKind : String; 

begin
  Result:='Location';
end;


Procedure TSP_WorkManagement_OMLocation.SetColor(AIndex: Integer; const AValue: string); 


begin
  If (FColor=AValue) then exit;
  FColor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocation.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocation.SetImportant(AIndex: Integer; const AValue: boolean); 


begin
  If (FImportant=AValue) then exit;
  FImportant:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocation.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocation.SetParentId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FParentId=AValue) then exit;
  FParentId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocation.SetRootProviderKey(AIndex: Integer; const AValue: string); 


begin
  If (FRootProviderKey=AValue) then exit;
  FRootProviderKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocation.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMLocation.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMLocationDisplaySetting
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMLocationDisplaySetting.ObjectRestKind : String; 

begin
  Result:='LocationDisplaySetting';
end;


Procedure TSP_WorkManagement_OMLocationDisplaySetting.SetColor(AIndex: Integer; const AValue: string); 


begin
  If (FColor=AValue) then exit;
  FColor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocationDisplaySetting.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMLocationDisplaySetting.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMLocationFilter
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMLocationFilter.ObjectRestKind : String; 

begin
  Result:='LocationFilter';
end;


Procedure TSP_WorkManagement_OMLocationFilter.SetIncludeUncategorizedTasks(AIndex: Integer; const AValue: boolean); 


begin
  If (FIncludeUncategorizedTasks=AValue) then exit;
  FIncludeUncategorizedTasks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocationFilter.SetLocationKeys(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FLocationKeys=AValue) then exit;
  FLocationKeys:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMLocationFilter.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'locationkeys' : SetLength(FLocationKeys,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMLocationFilter.KeyAsURLPart : string;

begin
  Result:=BoolToStr(IncludeUncategorizedTasks,'true','false');
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTask
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTask.ObjectRestKind : String; 

begin
  Result:='Task';
end;


Procedure TSP_WorkManagement_OMTask.SetCustomAttributes(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FCustomAttributes=AValue) then exit;
  FCustomAttributes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetDueDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FDueDate=AValue) then exit;
  FDueDate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetEditUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEditUrl=AValue) then exit;
  FEditUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetIsCompleted(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCompleted=AValue) then exit;
  FIsCompleted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetIsPersonal(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPersonal=AValue) then exit;
  FIsPersonal:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetIsReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsReadOnly=AValue) then exit;
  FIsReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetLastModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastModified=AValue) then exit;
  FLastModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetLocationId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLocationId=AValue) then exit;
  FLocationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetPinAge(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPinAge=AValue) then exit;
  FPinAge:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetSerializedCustomDataForClient(AIndex: Integer; const AValue: string); 


begin
  If (FSerializedCustomDataForClient=AValue) then exit;
  FSerializedCustomDataForClient:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTask.SetStartDate(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FStartDate=AValue) then exit;
  FStartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMTask.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'customattributes' : SetLength(FCustomAttributes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMTask.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMLocationOrientedSortableSession
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMLocationOrientedSortableSession.ObjectRestKind : String; 

begin
  Result:='LocationOrientedSortableSession';
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMLocationOrientedUserOrderedSession
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMLocationOrientedUserOrderedSession.ObjectRestKind : String; 

begin
  Result:='LocationOrientedUserOrderedSession';
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMLocationUpdateResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMLocationUpdateResult.ObjectRestKind : String; 

begin
  Result:='LocationUpdateResult';
end;


Procedure TSP_WorkManagement_OMLocationUpdateResult.SetActiveAddedCount(AIndex: Integer; const AValue: int64); 


begin
  If (FActiveAddedCount=AValue) then exit;
  FActiveAddedCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocationUpdateResult.SetAddedCount(AIndex: Integer; const AValue: int64); 


begin
  If (FAddedCount=AValue) then exit;
  FAddedCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocationUpdateResult.SetRemovedCount(AIndex: Integer; const AValue: int64); 


begin
  If (FRemovedCount=AValue) then exit;
  FRemovedCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocationUpdateResult.SetRootLocationId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRootLocationId=AValue) then exit;
  FRootLocationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMLocationUpdateResult.SetUpdatedCount(AIndex: Integer; const AValue: int64); 


begin
  If (FUpdatedCount=AValue) then exit;
  FUpdatedCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMLocationUpdateResult.KeyAsURLPart : string;

begin
  Result:=IntToStr(ActiveAddedCount);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMNameCriterion
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMNameCriterion.ObjectRestKind : String; 

begin
  Result:='NameCriterion';
end;


Procedure TSP_WorkManagement_OMNameCriterion.SetCompareType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCompareType=AValue) then exit;
  FCompareType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMNameCriterion.SetCompareValue(AIndex: Integer; const AValue: string); 


begin
  If (FCompareValue=AValue) then exit;
  FCompareValue:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMNameCriterion.KeyAsURLPart : string;

begin
  Result:=IntToStr(CompareType);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMNonTaskDataReadResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMNonTaskDataReadResult.ObjectRestKind : String; 

begin
  Result:='NonTaskDataReadResult';
end;


Procedure TSP_WorkManagement_OMNonTaskDataReadResult.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMNonTaskDataReadResult.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_WorkManagement_OMNonTaskDataReadResult.AllLocatons(AService: TODataService) : TSP_WorkManagement_OMLocation; 


begin
  Result:=TSP_WorkManagement_OMLocation(GetContainedSingleTon(AService,'AllLocatons', TSP_WorkManagement_OMLocation));
end;


Function TSP_WorkManagement_OMNonTaskDataReadResult.PersistedProperties(AService: TODataService) : TSP_WorkManagement_OMPersistedProperties; 


begin
  Result:=TSP_WorkManagement_OMPersistedProperties(GetContainedSingleTon(AService,'PersistedProperties', TSP_WorkManagement_OMPersistedProperties));
end;


Function TSP_WorkManagement_OMNonTaskDataReadResult.RefreshHistory(AService: TODataService) : TSP_WorkManagement_OMRefreshHistory; 


begin
  Result:=TSP_WorkManagement_OMRefreshHistory(GetContainedSingleTon(AService,'RefreshHistory', TSP_WorkManagement_OMRefreshHistory));
end;


Function TSP_WorkManagement_OMNonTaskDataReadResult.ScriptExtensions(AService: TODataService) : TSP_WorkManagement_OMDashboardScriptExtensionInfo; 


begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfo(GetContainedSingleTon(AService,'ScriptExtensions', TSP_WorkManagement_OMDashboardScriptExtensionInfo));
end;


Function TSP_WorkManagement_OMNonTaskDataReadResult.UserSettings(AService: TODataService) : TSP_WorkManagement_OMUserSettings; 


begin
  Result:=TSP_WorkManagement_OMUserSettings(GetContainedSingleTon(AService,'UserSettings', TSP_WorkManagement_OMUserSettings));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMPersistedProperties
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMPersistedProperties.ObjectRestKind : String; 

begin
  Result:='PersistedProperties';
end;


Procedure TSP_WorkManagement_OMPersistedProperties.SetFilteredLocationIds(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FFilteredLocationIds=AValue) then exit;
  FFilteredLocationIds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMPersistedProperties.SetGroupByProjects(AIndex: Integer; const AValue: boolean); 


begin
  If (FGroupByProjects=AValue) then exit;
  FGroupByProjects:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMPersistedProperties.SetHasShownMarkAsImportantCallout(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasShownMarkAsImportantCallout=AValue) then exit;
  FHasShownMarkAsImportantCallout:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMPersistedProperties.SetHasShownTaskListTooLongNotification(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasShownTaskListTooLongNotification=AValue) then exit;
  FHasShownTaskListTooLongNotification:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMPersistedProperties.SetQuickLaunchLandingPage(AIndex: Integer; const AValue: string); 


begin
  If (FQuickLaunchLandingPage=AValue) then exit;
  FQuickLaunchLandingPage:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMPersistedProperties.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'filteredlocationids' : SetLength(FFilteredLocationIds,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMPersistedProperties.KeyAsURLPart : string;

begin
  Result:=BoolToStr(GroupByProjects,'true','false');
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMRefreshHistory
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMRefreshHistory.ObjectRestKind : String; 

begin
  Result:='RefreshHistory';
end;


Procedure TSP_WorkManagement_OMRefreshHistory.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMRefreshHistory.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_WorkManagement_OMRefreshHistory.Refreshes(AService: TODataService) : TSP_WorkManagement_OMRefreshResult; 


begin
  Result:=TSP_WorkManagement_OMRefreshResult(GetContainedSingleTon(AService,'Refreshes', TSP_WorkManagement_OMRefreshResult));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMRefreshResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMRefreshResult.ObjectRestKind : String; 

begin
  Result:='RefreshResult';
end;


Procedure TSP_WorkManagement_OMRefreshResult.SetAggregatorRefreshState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAggregatorRefreshState=AValue) then exit;
  FAggregatorRefreshState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMRefreshResult.SetCorrelationId(AIndex: Integer; const AValue: string); 


begin
  If (FCorrelationId=AValue) then exit;
  FCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMRefreshResult.SetRefreshFinished(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRefreshFinished=AValue) then exit;
  FRefreshFinished:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMRefreshResult.SetRefreshId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRefreshId=AValue) then exit;
  FRefreshId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMRefreshResult.KeyAsURLPart : string;

begin
  Result:=IntToStr(AggregatorRefreshState);
end;


Function TSP_WorkManagement_OMRefreshResult.ProviderStatuses(AService: TODataService) : TSP_WorkManagement_OMProviderRefreshStatus; 


begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatus(GetContainedSingleTon(AService,'ProviderStatuses', TSP_WorkManagement_OMProviderRefreshStatus));
end;


Function TSP_WorkManagement_OMRefreshResult.TaskChangesByLocation(AService: TODataService) : TSP_WorkManagement_OMLocationUpdateResult; 


begin
  Result:=TSP_WorkManagement_OMLocationUpdateResult(GetContainedSingleTon(AService,'TaskChangesByLocation', TSP_WorkManagement_OMLocationUpdateResult));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMProviderRefreshStatus
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMProviderRefreshStatus.ObjectRestKind : String; 

begin
  Result:='ProviderRefreshStatus';
end;


Procedure TSP_WorkManagement_OMProviderRefreshStatus.SetProviderKey(AIndex: Integer; const AValue: string); 


begin
  If (FProviderKey=AValue) then exit;
  FProviderKey:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMProviderRefreshStatus.SetProviderLocalizedName(AIndex: Integer; const AValue: string); 


begin
  If (FProviderLocalizedName=AValue) then exit;
  FProviderLocalizedName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMProviderRefreshStatus.SetRefreshFinished(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRefreshFinished=AValue) then exit;
  FRefreshFinished:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMProviderRefreshStatus.SetRefreshStarted(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FRefreshStarted=AValue) then exit;
  FRefreshStarted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMProviderRefreshStatus.SetRootLocationId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRootLocationId=AValue) then exit;
  FRootLocationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMProviderRefreshStatus.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ProviderKey);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMUserSettings
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMUserSettings.ObjectRestKind : String; 

begin
  Result:='UserSettings';
end;


Procedure TSP_WorkManagement_OMUserSettings.SetDaysAfterCurrentDateTimelineEnds(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDaysAfterCurrentDateTimelineEnds=AValue) then exit;
  FDaysAfterCurrentDateTimelineEnds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetDaysATaskIsConsideredNewTask(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDaysATaskIsConsideredNewTask=AValue) then exit;
  FDaysATaskIsConsideredNewTask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetDaysBeforeCurrentDateTimelineStarts(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDaysBeforeCurrentDateTimelineStarts=AValue) then exit;
  FDaysBeforeCurrentDateTimelineStarts:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetImportantLocationIds(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FImportantLocationIds=AValue) then exit;
  FImportantLocationIds:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetImportantTasksLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FImportantTasksLimit=AValue) then exit;
  FImportantTasksLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetInactiveMonthsBeforeLocationExpiration(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInactiveMonthsBeforeLocationExpiration=AValue) then exit;
  FInactiveMonthsBeforeLocationExpiration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetLateTasksLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLateTasksLimit=AValue) then exit;
  FLateTasksLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetOldTasksLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOldTasksLimit=AValue) then exit;
  FOldTasksLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMUserSettings.SetUpcomingTasksLimit(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUpcomingTasksLimit=AValue) then exit;
  FUpcomingTasksLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMUserSettings.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'importantlocationids' : SetLength(FImportantLocationIds,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMUserSettings.KeyAsURLPart : string;

begin
  Result:=IntToStr(DaysAfterCurrentDateTimelineEnds);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMOrderInfo
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMOrderInfo.ObjectRestKind : String; 

begin
  Result:='OrderInfo';
end;


Procedure TSP_WorkManagement_OMOrderInfo.SetField(AIndex: Integer; const AValue: TInt32); 


begin
  If (FField=AValue) then exit;
  FField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMOrderInfo.SetIsDescending(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsDescending=AValue) then exit;
  FIsDescending:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMOrderInfo.KeyAsURLPart : string;

begin
  Result:=IntToStr(Field);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMProviderErrorInfo
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMProviderErrorInfo.ObjectRestKind : String; 

begin
  Result:='ProviderErrorInfo';
end;


Procedure TSP_WorkManagement_OMProviderErrorInfo.SetCorrelationId(AIndex: Integer; const AValue: string); 


begin
  If (FCorrelationId=AValue) then exit;
  FCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMProviderErrorInfo.SetLastSuccessfulRefresh(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastSuccessfulRefresh=AValue) then exit;
  FLastSuccessfulRefresh:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMProviderErrorInfo.SetLocalizedName(AIndex: Integer; const AValue: string); 


begin
  If (FLocalizedName=AValue) then exit;
  FLocalizedName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMProviderErrorInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(CorrelationId);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMRefreshHealthInfo
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMRefreshHealthInfo.ObjectRestKind : String; 

begin
  Result:='RefreshHealthInfo';
end;


Procedure TSP_WorkManagement_OMRefreshHealthInfo.SetLatestRefreshTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLatestRefreshTime=AValue) then exit;
  FLatestRefreshTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMRefreshHealthInfo.SetNewTasks(AIndex: Integer; const AValue: TInt32); 


begin
  If (FNewTasks=AValue) then exit;
  FNewTasks:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMRefreshHealthInfo.SetSucceeded(AIndex: Integer; const AValue: boolean); 


begin
  If (FSucceeded=AValue) then exit;
  FSucceeded:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMRefreshHealthInfo.KeyAsURLPart : string;

begin
  Result:=FormatDateTime('yyyy-mm-dd"T"hhmmss',LatestRefreshTime);
end;


Function TSP_WorkManagement_OMRefreshHealthInfo.ProviderErrors(AService: TODataService) : TSP_WorkManagement_OMProviderErrorInfo; 


begin
  Result:=TSP_WorkManagement_OMProviderErrorInfo(GetContainedSingleTon(AService,'ProviderErrors', TSP_WorkManagement_OMProviderErrorInfo));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMSortableSessionManager
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMSortableSessionManager.ObjectRestKind : String; 

begin
  Result:='SortableSessionManager';
end;


Procedure TSP_WorkManagement_OMSortableSessionManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMSortableSessionManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMSortableSession
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMSortableSession.ObjectRestKind : String; 

begin
  Result:='SortableSession';
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMSortableTaskQuery
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMSortableTaskQuery.ObjectRestKind : String; 

begin
  Result:='SortableTaskQuery';
end;


Procedure TSP_WorkManagement_OMSortableTaskQuery.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMSortableTaskQuery.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_WorkManagement_OMSortableTaskQuery.CoreQuery(AService: TODataService) : TSP_WorkManagement_OMTaskQuery; 


begin
  Result:=TSP_WorkManagement_OMTaskQuery(GetContainedSingleTon(AService,'CoreQuery', TSP_WorkManagement_OMTaskQuery));
end;


Function TSP_WorkManagement_OMSortableTaskQuery.Order(AService: TODataService) : TSP_WorkManagement_OMOrderInfo; 


begin
  Result:=TSP_WorkManagement_OMOrderInfo(GetContainedSingleTon(AService,'Order', TSP_WorkManagement_OMOrderInfo));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTaskQuery
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTaskQuery.ObjectRestKind : String; 

begin
  Result:='TaskQuery';
end;


Procedure TSP_WorkManagement_OMTaskQuery.SetKeywordFilter(AIndex: Integer; const AValue: string); 


begin
  If (FKeywordFilter=AValue) then exit;
  FKeywordFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskQuery.SetLastQueryTime(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastQueryTime=AValue) then exit;
  FLastQueryTime:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskQuery.SetPinnedFilter(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPinnedFilter=AValue) then exit;
  FPinnedFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMTaskQuery.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(KeywordFilter);
end;


Function TSP_WorkManagement_OMTaskQuery.CustomAttributeFilter(AService: TODataService) : TSP_WorkManagement_OMCustomAttributeFilter; 


begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilter(GetContainedSingleTon(AService,'CustomAttributeFilter', TSP_WorkManagement_OMCustomAttributeFilter));
end;


Function TSP_WorkManagement_OMTaskQuery.FieldFilter(AService: TODataService) : TSP_WorkManagement_OMTaskFilter; 


begin
  Result:=TSP_WorkManagement_OMTaskFilter(GetContainedSingleTon(AService,'FieldFilter', TSP_WorkManagement_OMTaskFilter));
end;


Function TSP_WorkManagement_OMTaskQuery.LastModifiedDateRangeFilter(AService: TODataService) : TSP_WorkManagement_OMDateRangeCriterion; 


begin
  Result:=TSP_WorkManagement_OMDateRangeCriterion(GetContainedSingleTon(AService,'LastModifiedDateRangeFilter', TSP_WorkManagement_OMDateRangeCriterion));
end;


Function TSP_WorkManagement_OMTaskQuery.LocationFilter(AService: TODataService) : TSP_WorkManagement_OMLocationFilter; 


begin
  Result:=TSP_WorkManagement_OMLocationFilter(GetContainedSingleTon(AService,'LocationFilter', TSP_WorkManagement_OMLocationFilter));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTaskFilter
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTaskFilter.ObjectRestKind : String; 

begin
  Result:='TaskFilter';
end;


Procedure TSP_WorkManagement_OMTaskFilter.SetCriterionConcatType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCriterionConcatType=AValue) then exit;
  FCriterionConcatType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskFilter.SetIdsToFilterBy(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FIdsToFilterBy=AValue) then exit;
  FIdsToFilterBy:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkManagement_OMTaskFilter.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'idstofilterby' : SetLength(FIdsToFilterBy,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkManagement_OMTaskFilter.KeyAsURLPart : string;

begin
  Result:=IntToStr(CriterionConcatType);
end;


Function TSP_WorkManagement_OMTaskFilter.CompletedCriterion(AService: TODataService) : TSP_WorkManagement_OMBooleanCriterion; 


begin
  Result:=TSP_WorkManagement_OMBooleanCriterion(GetContainedSingleTon(AService,'CompletedCriterion', TSP_WorkManagement_OMBooleanCriterion));
end;


Function TSP_WorkManagement_OMTaskFilter.DueDateRangeCriterion(AService: TODataService) : TSP_WorkManagement_OMDateRangeCriterion; 


begin
  Result:=TSP_WorkManagement_OMDateRangeCriterion(GetContainedSingleTon(AService,'DueDateRangeCriterion', TSP_WorkManagement_OMDateRangeCriterion));
end;


Function TSP_WorkManagement_OMTaskFilter.IsNewCriterion(AService: TODataService) : TSP_WorkManagement_OMBooleanCriterion; 


begin
  Result:=TSP_WorkManagement_OMBooleanCriterion(GetContainedSingleTon(AService,'IsNewCriterion', TSP_WorkManagement_OMBooleanCriterion));
end;


Function TSP_WorkManagement_OMTaskFilter.NameCriterion(AService: TODataService) : TSP_WorkManagement_OMNameCriterion; 


begin
  Result:=TSP_WorkManagement_OMNameCriterion(GetContainedSingleTon(AService,'NameCriterion', TSP_WorkManagement_OMNameCriterion));
end;


Function TSP_WorkManagement_OMTaskFilter.StartDateRangeCriterion(AService: TODataService) : TSP_WorkManagement_OMDateRangeCriterion; 


begin
  Result:=TSP_WorkManagement_OMDateRangeCriterion(GetContainedSingleTon(AService,'StartDateRangeCriterion', TSP_WorkManagement_OMDateRangeCriterion));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTaskQueryByLocationResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTaskQueryByLocationResult.ObjectRestKind : String; 

begin
  Result:='TaskQueryByLocationResult';
end;


Procedure TSP_WorkManagement_OMTaskQueryByLocationResult.SetError(AIndex: Integer; const AValue: TInt32); 


begin
  If (FError=AValue) then exit;
  FError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskQueryByLocationResult.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMTaskQueryByLocationResult.KeyAsURLPart : string;

begin
  Result:=IntToStr(Error);
end;


Function TSP_WorkManagement_OMTaskQueryByLocationResult.Results(AService: TODataService) : TSP_WorkManagement_OMTask; 


begin
  Result:=TSP_WorkManagement_OMTask(GetContainedSingleTon(AService,'Results', TSP_WorkManagement_OMTask));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTaskQueryResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTaskQueryResult.ObjectRestKind : String; 

begin
  Result:='TaskQueryResult';
end;


Procedure TSP_WorkManagement_OMTaskQueryResult.SetError(AIndex: Integer; const AValue: TInt32); 


begin
  If (FError=AValue) then exit;
  FError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskQueryResult.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMTaskQueryResult.KeyAsURLPart : string;

begin
  Result:=IntToStr(Error);
end;


Function TSP_WorkManagement_OMTaskQueryResult.Results(AService: TODataService) : TSP_WorkManagement_OMTask; 


begin
  Result:=TSP_WorkManagement_OMTask(GetContainedSingleTon(AService,'Results', TSP_WorkManagement_OMTask));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTaskRefreshResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTaskRefreshResult.ObjectRestKind : String; 

begin
  Result:='TaskRefreshResult';
end;


Procedure TSP_WorkManagement_OMTaskRefreshResult.SetErrorCorrelationId(AIndex: Integer; const AValue: string); 


begin
  If (FErrorCorrelationId=AValue) then exit;
  FErrorCorrelationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskRefreshResult.SetRefreshState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRefreshState=AValue) then exit;
  FRefreshState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMTaskRefreshResult.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ErrorCorrelationId);
end;


Function TSP_WorkManagement_OMTaskRefreshResult._Result(AService: TODataService) : TSP_WorkManagement_OMTask; 


begin
  Result:=TSP_WorkManagement_OMTask(GetContainedSingleTon(AService,'Result', TSP_WorkManagement_OMTask));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMTaskWriteResult
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMTaskWriteResult.ObjectRestKind : String; 

begin
  Result:='TaskWriteResult';
end;


Procedure TSP_WorkManagement_OMTaskWriteResult.SetError(AIndex: Integer; const AValue: TInt32); 


begin
  If (FError=AValue) then exit;
  FError:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMTaskWriteResult.SetErrorMessage(AIndex: Integer; const AValue: string); 


begin
  If (FErrorMessage=AValue) then exit;
  FErrorMessage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMTaskWriteResult.KeyAsURLPart : string;

begin
  Result:=IntToStr(Error);
end;


Function TSP_WorkManagement_OMTaskWriteResult._Result(AService: TODataService) : TSP_WorkManagement_OMTask; 


begin
  Result:=TSP_WorkManagement_OMTask(GetContainedSingleTon(AService,'Result', TSP_WorkManagement_OMTask));
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMUserOrderedSessionManager
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMUserOrderedSessionManager.ObjectRestKind : String; 

begin
  Result:='UserOrderedSessionManager';
end;


Procedure TSP_WorkManagement_OMUserOrderedSessionManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMUserOrderedSessionManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMUserOrderedSession
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMUserOrderedSession.ObjectRestKind : String; 

begin
  Result:='UserOrderedSession';
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMUserSettingsManager
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMUserSettingsManager.ObjectRestKind : String; 

begin
  Result:='UserSettingsManager';
end;


Procedure TSP_WorkManagement_OMUserSettingsManager.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMUserSettingsManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkManagement_OMViewSelectionInfo
  --------------------------------------------------------------------}


Class Function TSP_WorkManagement_OMViewSelectionInfo.ObjectRestKind : String; 

begin
  Result:='ViewSelectionInfo';
end;


Procedure TSP_WorkManagement_OMViewSelectionInfo.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMViewSelectionInfo.SetImage(AIndex: Integer; const AValue: string); 


begin
  If (FImage=AValue) then exit;
  FImage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkManagement_OMViewSelectionInfo.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkManagement_OMViewSelectionInfo.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TMicrosoft_AppServicesApp
  --------------------------------------------------------------------}


Class Function TMicrosoft_AppServicesApp.ObjectRestKind : String; 

begin
  Result:='App';
end;


Procedure TMicrosoft_AppServicesApp.SetId(AIndex: Integer; const AValue: string); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_AppServicesApp.SetManifest(AIndex: Integer; const AValue: string); 


begin
  If (FManifest=AValue) then exit;
  FManifest:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_AppServicesApp.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TMicrosoft_AppServicesAppStore
  --------------------------------------------------------------------}


Class Function TMicrosoft_AppServicesAppStore.ObjectRestKind : String; 

begin
  Result:='AppStore';
end;


Procedure TMicrosoft_AppServicesAppStore.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_AppServicesAppStore.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TMicrosoft_AppServicesAppStore.Apps(AService: TODataService) : TMicrosoft_AppServicesApp; 


begin
  Result:=TMicrosoft_AppServicesApp(GetContainedSingleTon(AService,'Apps', TMicrosoft_AppServicesApp));
end;


{ --------------------------------------------------------------------
  TSP_CompliancePolicyPolicyEvaluationInfo
  --------------------------------------------------------------------}


Class Function TSP_CompliancePolicyPolicyEvaluationInfo.ObjectRestKind : String; 

begin
  Result:='PolicyEvaluationInfo';
end;


Procedure TSP_CompliancePolicyPolicyEvaluationInfo.SetApplicablePolicies(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FApplicablePolicies=AValue) then exit;
  FApplicablePolicies:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_CompliancePolicyPolicyEvaluationInfo.SetDlpAccessScope(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDlpAccessScope=AValue) then exit;
  FDlpAccessScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_CompliancePolicyPolicyEvaluationInfo.SetOverriddenRules(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FOverriddenRules=AValue) then exit;
  FOverriddenRules:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_CompliancePolicyPolicyEvaluationInfo.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'applicablepolicies' : SetLength(FApplicablePolicies,aLength);
  'overriddenrules' : SetLength(FOverriddenRules,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_CompliancePolicyPolicyEvaluationInfo.KeyAsURLPart : string;

begin
  Result:=IntToStr(DlpAccessScope);
end;


{ --------------------------------------------------------------------
  TSP_CompliancePolicySPPolicyStoreProxy
  --------------------------------------------------------------------}


Class Function TSP_CompliancePolicySPPolicyStoreProxy.ObjectRestKind : String; 

begin
  Result:='SPPolicyStoreProxy';
end;


Procedure TSP_CompliancePolicySPPolicyStoreProxy.SetPolicyStoreUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPolicyStoreUrl=AValue) then exit;
  FPolicyStoreUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_CompliancePolicySPPolicyStoreProxy.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(PolicyStoreUrl);
end;


{ --------------------------------------------------------------------
  TSPO_IdentitySPOIdentityHelper
  --------------------------------------------------------------------}


Class Function TSPO_IdentitySPOIdentityHelper.ObjectRestKind : String; 

begin
  Result:='SPOIdentityHelper';
end;


Procedure TSPO_IdentitySPOIdentityHelper.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSPO_IdentitySPOIdentityHelper.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TOBA_Server_ServerWrapperDiagnostics
  --------------------------------------------------------------------}


Class Function TOBA_Server_ServerWrapperDiagnostics.ObjectRestKind : String; 

begin
  Result:='Diagnostics';
end;


Procedure TOBA_Server_ServerWrapperDiagnostics.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TOBA_Server_ServerWrapperDiagnostics.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TOBA_Server_ServerWrapperReporting
  --------------------------------------------------------------------}


Class Function TOBA_Server_ServerWrapperReporting.ObjectRestKind : String; 

begin
  Result:='Reporting';
end;


Procedure TOBA_Server_ServerWrapperReporting.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TOBA_Server_ServerWrapperReporting.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TOBA_Server_ServerWrapperTaskflow
  --------------------------------------------------------------------}


Class Function TOBA_Server_ServerWrapperTaskflow.ObjectRestKind : String; 

begin
  Result:='Taskflow';
end;


Procedure TOBA_Server_ServerWrapperTaskflow.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TOBA_Server_ServerWrapperTaskflow.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowDefinition
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowDefinition.ObjectRestKind : String; 

begin
  Result:='WorkflowDefinition';
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetAssociationUrl(AIndex: Integer; const AValue: string); 


begin
  If (FAssociationUrl=AValue) then exit;
  FAssociationUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetDraftVersion(AIndex: Integer; const AValue: string); 


begin
  If (FDraftVersion=AValue) then exit;
  FDraftVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetFormField(AIndex: Integer; const AValue: string); 


begin
  If (FFormField=AValue) then exit;
  FFormField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetInitiationUrl(AIndex: Integer; const AValue: string); 


begin
  If (FInitiationUrl=AValue) then exit;
  FInitiationUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.Set_Published(AIndex: Integer; const AValue: boolean); 


begin
  If (F_Published=AValue) then exit;
  F_Published:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetRequiresAssociationForm(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequiresAssociationForm=AValue) then exit;
  FRequiresAssociationForm:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetRequiresInitiationForm(AIndex: Integer; const AValue: boolean); 


begin
  If (FRequiresInitiationForm=AValue) then exit;
  FRequiresInitiationForm:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetRestrictToScope(AIndex: Integer; const AValue: string); 


begin
  If (FRestrictToScope=AValue) then exit;
  FRestrictToScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetRestrictToType(AIndex: Integer; const AValue: string); 


begin
  If (FRestrictToType=AValue) then exit;
  FRestrictToType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowDefinition.SetXaml(AIndex: Integer; const AValue: string); 


begin
  If (FXaml=AValue) then exit;
  FXaml:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkflowServicesWorkflowDefinition.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Class Function TSP_WorkflowServicesWorkflowDefinition.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_Published' : Result:='Published';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;


Function TSP_WorkflowServicesWorkflowDefinition.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowDeploymentService
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowDeploymentService.ObjectRestKind : String; 

begin
  Result:='WorkflowDeploymentService';
end;


Procedure TSP_WorkflowServicesWorkflowDeploymentService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowServicesWorkflowDeploymentService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowInstance
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowInstance.ObjectRestKind : String; 

begin
  Result:='WorkflowInstance';
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetFaultInfo(AIndex: Integer; const AValue: string); 


begin
  If (FFaultInfo=AValue) then exit;
  FFaultInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetInstanceCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FInstanceCreated=AValue) then exit;
  FInstanceCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetLastUpdated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLastUpdated=AValue) then exit;
  FLastUpdated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetProperties(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FProperties=AValue) then exit;
  FProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FStatus=AValue) then exit;
  FStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetUserStatus(AIndex: Integer; const AValue: string); 


begin
  If (FUserStatus=AValue) then exit;
  FUserStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowInstance.SetWorkflowSubscriptionId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowSubscriptionId=AValue) then exit;
  FWorkflowSubscriptionId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkflowServicesWorkflowInstance.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'properties' : SetLength(FProperties,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkflowServicesWorkflowInstance.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowInstanceService
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowInstanceService.ObjectRestKind : String; 

begin
  Result:='WorkflowInstanceService';
end;


Procedure TSP_WorkflowServicesWorkflowInstanceService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowServicesWorkflowInstanceService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_WorkflowServicesWorkflowInstanceService.Current(AService: TODataService) : TSP_WorkflowServicesWorkflowInstanceService; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstanceService(GetContainedSingleTon(AService,'Current', TSP_WorkflowServicesWorkflowInstanceService));
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesInteropService
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesInteropService.ObjectRestKind : String; 

begin
  Result:='InteropService';
end;


Procedure TSP_WorkflowServicesInteropService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowServicesInteropService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_WorkflowServicesInteropService.Current(AService: TODataService) : TSP_WorkflowServicesInteropService; 


begin
  Result:=TSP_WorkflowServicesInteropService(GetContainedSingleTon(AService,'Current', TSP_WorkflowServicesInteropService));
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowServicesManager
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowServicesManager.ObjectRestKind : String; 

begin
  Result:='WorkflowServicesManager';
end;


Procedure TSP_WorkflowServicesWorkflowServicesManager.SetAppId(AIndex: Integer; const AValue: string); 


begin
  If (FAppId=AValue) then exit;
  FAppId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowServicesManager.SetIsConnected(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsConnected=AValue) then exit;
  FIsConnected:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowServicesManager.SetScopePath(AIndex: Integer; const AValue: string); 


begin
  If (FScopePath=AValue) then exit;
  FScopePath:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowServicesManager.SetServiceHealthStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FServiceHealthStatus=AValue) then exit;
  FServiceHealthStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowServicesWorkflowServicesManager.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AppId);
end;


Function TSP_WorkflowServicesWorkflowServicesManager.Current(AService: TODataService) : TSP_WorkflowServicesWorkflowServicesManager; 


begin
  Result:=TSP_WorkflowServicesWorkflowServicesManager(GetContainedSingleTon(AService,'Current', TSP_WorkflowServicesWorkflowServicesManager));
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowSubscription
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowSubscription.ObjectRestKind : String; 

begin
  Result:='WorkflowSubscription';
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetDefinitionId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FDefinitionId=AValue) then exit;
  FDefinitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FEnabled=AValue) then exit;
  FEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetEventSourceId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FEventSourceId=AValue) then exit;
  FEventSourceId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetEventTypes(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FEventTypes=AValue) then exit;
  FEventTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetManualStartBypassesActivationLimit(AIndex: Integer; const AValue: boolean); 


begin
  If (FManualStartBypassesActivationLimit=AValue) then exit;
  FManualStartBypassesActivationLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetParentContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FParentContentTypeId=AValue) then exit;
  FParentContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetPropertyDefinitions(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FPropertyDefinitions=AValue) then exit;
  FPropertyDefinitions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_WorkflowServicesWorkflowSubscription.SetStatusFieldName(AIndex: Integer; const AValue: string); 


begin
  If (FStatusFieldName=AValue) then exit;
  FStatusFieldName:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_WorkflowServicesWorkflowSubscription.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'eventtypes' : SetLength(FEventTypes,aLength);
  'propertydefinitions' : SetLength(FPropertyDefinitions,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_WorkflowServicesWorkflowSubscription.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id);
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowSubscriptionService
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowSubscriptionService.ObjectRestKind : String; 

begin
  Result:='WorkflowSubscriptionService';
end;


Procedure TSP_WorkflowServicesWorkflowSubscriptionService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowServicesWorkflowSubscriptionService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_WorkflowServicesWorkflowSubscriptionService.Current(AService: TODataService) : TSP_WorkflowServicesWorkflowSubscriptionService; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionService(GetContainedSingleTon(AService,'Current', TSP_WorkflowServicesWorkflowSubscriptionService));
end;


{ --------------------------------------------------------------------
  TSP_WorkflowServicesWorkflowMessagingService
  --------------------------------------------------------------------}


Class Function TSP_WorkflowServicesWorkflowMessagingService.ObjectRestKind : String; 

begin
  Result:='WorkflowMessagingService';
end;


Procedure TSP_WorkflowServicesWorkflowMessagingService.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_WorkflowServicesWorkflowMessagingService.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_Server_ReputationModelReputation
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_Server_ReputationModelReputation.ObjectRestKind : String; 

begin
  Result:='Reputation';
end;


Procedure TMicrosoft_Office_Server_ReputationModelReputation.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Office_Server_ReputationModelReputation.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog.ObjectRestKind : String; 

begin
  Result:='DocumentCrawlLog';
end;


Procedure TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings
  --------------------------------------------------------------------}


Class Function TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.ObjectRestKind : String; 

begin
  Result:='ConnectionSettings';
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetAuthenticationMode(AIndex: Integer; const AValue: string); 


begin
  If (FAuthenticationMode=AValue) then exit;
  FAuthenticationMode:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetConnectionSettingsType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FConnectionSettingsType=AValue) then exit;
  FConnectionSettingsType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetDescription(AIndex: Integer; const AValue: string); 


begin
  If (FDescription=AValue) then exit;
  FDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetParentName(AIndex: Integer; const AValue: string); 


begin
  If (FParentName=AValue) then exit;
  FParentName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetProxySSOApplicationId(AIndex: Integer; const AValue: string); 


begin
  If (FProxySSOApplicationId=AValue) then exit;
  FProxySSOApplicationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetProxyTarget(AIndex: Integer; const AValue: string); 


begin
  If (FProxyTarget=AValue) then exit;
  FProxyTarget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetSSOApplicationId(AIndex: Integer; const AValue: string); 


begin
  If (FSSOApplicationId=AValue) then exit;
  FSSOApplicationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetSSOProviderImplId(AIndex: Integer; const AValue: string); 


begin
  If (FSSOProviderImplId=AValue) then exit;
  FSSOProviderImplId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.SetTarget(AIndex: Integer; const AValue: string); 


begin
  If (FTarget=AValue) then exit;
  FTarget:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField.ObjectRestKind : String; 

begin
  Result:='TargetApplicationField';
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField.SetCredentialType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCredentialType=AValue) then exit;
  FCredentialType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField.SetIsMasked(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMasked=AValue) then exit;
  FIsMasked:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Office_SecureStoreService_ServerTargetApplication
  --------------------------------------------------------------------}


Class Function TMicrosoft_Office_SecureStoreService_ServerTargetApplication.ObjectRestKind : String; 

begin
  Result:='TargetApplication';
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplication.SetApplicationId(AIndex: Integer; const AValue: string); 


begin
  If (FApplicationId=AValue) then exit;
  FApplicationId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplication.SetContactEmail(AIndex: Integer; const AValue: string); 


begin
  If (FContactEmail=AValue) then exit;
  FContactEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplication.SetFriendlyName(AIndex: Integer; const AValue: string); 


begin
  If (FFriendlyName=AValue) then exit;
  FFriendlyName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Office_SecureStoreService_ServerTargetApplication.SetTargetAppType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTargetAppType=AValue) then exit;
  FTargetAppType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Office_SecureStoreService_ServerTargetApplication.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(ApplicationId);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo.ObjectRestKind : String; 

begin
  Result:='SPAppPrincipalInfo';
end;


Procedure TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo.SetFlag(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFlag=AValue) then exit;
  FFlag:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Flighting_RuntimeSPFlight
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Flighting_RuntimeSPFlight.ObjectRestKind : String; 

begin
  Result:='SPFlight';
end;


Procedure TMicrosoft_SharePoint_Flighting_RuntimeSPFlight.SetConfiguration(AIndex: Integer; const AValue: string); 


begin
  If (FConfiguration=AValue) then exit;
  FConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Flighting_RuntimeSPFlight.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Configuration);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase.ObjectRestKind : String; 

begin
  Result:='SPCorporateCuratedGallerySettingsBase';
end;


Procedure TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase.SetHostSiteFullUrl(AIndex: Integer; const AValue: string); 


begin
  If (FHostSiteFullUrl=AValue) then exit;
  FHostSiteFullUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(HostSiteFullUrl);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory.ObjectRestKind : String; 

begin
  Result:='SPCorporateCuratedGallerySettingsFactory';
end;


Procedure TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings.ObjectRestKind : String; 

begin
  Result:='SPMarketplaceSettings';
end;


Procedure TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Portal_WebControlsRecentDocument
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.ObjectRestKind : String; 

begin
  Result:='RecentDocument';
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetApplication(AIndex: Integer; const AValue: string); 


begin
  If (FApplication=AValue) then exit;
  FApplication:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetFileName(AIndex: Integer; const AValue: string); 


begin
  If (FFileName=AValue) then exit;
  FFileName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetIconUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconUrl=AValue) then exit;
  FIconUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FId=AValue) then exit;
  FId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetIsPinned(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsPinned=AValue) then exit;
  FIsPinned:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetLinkLocation(AIndex: Integer; const AValue: string); 


begin
  If (FLinkLocation=AValue) then exit;
  FLinkLocation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.SetTimeStamp(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FTimeStamp=AValue) then exit;
  FTimeStamp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Portal_WebControlsRecentDocument.KeyAsURLPart : string;

begin
  Result:=IntToStr(Id);
end;


{ --------------------------------------------------------------------
  TSP_BusinessData_RuntimeEntityIdentity
  --------------------------------------------------------------------}


Class Function TSP_BusinessData_RuntimeEntityIdentity.ObjectRestKind : String; 

begin
  Result:='EntityIdentity';
end;


Procedure TSP_BusinessData_RuntimeEntityIdentity.SetIdentifierCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FIdentifierCount=AValue) then exit;
  FIdentifierCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessData_RuntimeEntityIdentity.KeyAsURLPart : string;

begin
  Result:=IntToStr(IdentifierCount);
end;


{ --------------------------------------------------------------------
  TSP_BusinessData_RuntimeNotificationCallback
  --------------------------------------------------------------------}


Class Function TSP_BusinessData_RuntimeNotificationCallback.ObjectRestKind : String; 

begin
  Result:='NotificationCallback';
end;


Procedure TSP_BusinessData_RuntimeNotificationCallback.SetNotificationContext(AIndex: Integer; const AValue: string); 


begin
  If (FNotificationContext=AValue) then exit;
  FNotificationContext:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessData_RuntimeNotificationCallback.SetNotificationEndpoint(AIndex: Integer; const AValue: string); 


begin
  If (FNotificationEndpoint=AValue) then exit;
  FNotificationEndpoint:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessData_RuntimeNotificationCallback.SetNotificationForwarderType(AIndex: Integer; const AValue: string); 


begin
  If (FNotificationForwarderType=AValue) then exit;
  FNotificationForwarderType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessData_RuntimeNotificationCallback.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(NotificationContext);
end;


{ --------------------------------------------------------------------
  TSP_BusinessData_RuntimeSubscription
  --------------------------------------------------------------------}


Class Function TSP_BusinessData_RuntimeSubscription.ObjectRestKind : String; 

begin
  Result:='Subscription';
end;


Procedure TSP_BusinessData_RuntimeSubscription.SetHash(AIndex: Integer; const AValue: string); 


begin
  If (FHash=AValue) then exit;
  FHash:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessData_RuntimeSubscription.SetID(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FID=AValue) then exit;
  FID:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_BusinessData_RuntimeSubscription.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'id' : SetLength(FID,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_BusinessData_RuntimeSubscription.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Hash);
end;


{ --------------------------------------------------------------------
  TSP_BusinessData_RuntimeEntityInstance
  --------------------------------------------------------------------}


Class Function TSP_BusinessData_RuntimeEntityInstance.ObjectRestKind : String; 

begin
  Result:='EntityInstance';
end;


Procedure TSP_BusinessData_RuntimeEntityInstance.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessData_RuntimeEntityInstance.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_BusinessData_RuntimeEntityFieldValueDictionary
  --------------------------------------------------------------------}


Class Function TSP_BusinessData_RuntimeEntityFieldValueDictionary.ObjectRestKind : String; 

begin
  Result:='EntityFieldValueDictionary';
end;


Procedure TSP_BusinessData_RuntimeEntityFieldValueDictionary.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessData_RuntimeEntityFieldValueDictionary.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataEntityField
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataEntityField.ObjectRestKind : String; 

begin
  Result:='EntityField';
end;


Procedure TSP_BusinessDataEntityField.SetContainsLocalizedDisplayName(AIndex: Integer; const AValue: boolean); 


begin
  If (FContainsLocalizedDisplayName=AValue) then exit;
  FContainsLocalizedDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntityField.SetDefaultDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultDisplayName=AValue) then exit;
  FDefaultDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntityField.SetLocalizedDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FLocalizedDisplayName=AValue) then exit;
  FLocalizedDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntityField.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataEntityField.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataFilter
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataFilter.ObjectRestKind : String; 

begin
  Result:='Filter';
end;


Procedure TSP_BusinessDataFilter.SetDefaultDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultDisplayName=AValue) then exit;
  FDefaultDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataFilter.SetFilterField(AIndex: Integer; const AValue: string); 


begin
  If (FFilterField=AValue) then exit;
  FFilterField:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataFilter.SetFilterType(AIndex: Integer; const AValue: string); 


begin
  If (FFilterType=AValue) then exit;
  FFilterType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataFilter.SetLocalizedDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FLocalizedDisplayName=AValue) then exit;
  FLocalizedDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataFilter.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataFilter.SetValueCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FValueCount=AValue) then exit;
  FValueCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataFilter.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataEntityIdentifier
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataEntityIdentifier.ObjectRestKind : String; 

begin
  Result:='EntityIdentifier';
end;


Procedure TSP_BusinessDataEntityIdentifier.SetIdentifierType(AIndex: Integer; const AValue: string); 


begin
  If (FIdentifierType=AValue) then exit;
  FIdentifierType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntityIdentifier.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataEntityIdentifier.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataLobSystemInstance
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataLobSystemInstance.ObjectRestKind : String; 

begin
  Result:='LobSystemInstance';
end;


Procedure TSP_BusinessDataLobSystemInstance.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataLobSystemInstance.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataTypeDescriptor
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataTypeDescriptor.ObjectRestKind : String; 

begin
  Result:='TypeDescriptor';
end;


Procedure TSP_BusinessDataTypeDescriptor.SetContainsReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FContainsReadOnly=AValue) then exit;
  FContainsReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataTypeDescriptor.SetIsCollection(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsCollection=AValue) then exit;
  FIsCollection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataTypeDescriptor.SetIsReadOnly(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsReadOnly=AValue) then exit;
  FIsReadOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataTypeDescriptor.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataTypeDescriptor.SetTypeName(AIndex: Integer; const AValue: string); 


begin
  If (FTypeName=AValue) then exit;
  FTypeName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataTypeDescriptor.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataEntity
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataEntity.ObjectRestKind : String; 

begin
  Result:='Entity';
end;


Procedure TSP_BusinessDataEntity.SetEstimatedInstanceCount(AIndex: Integer; const AValue: int64); 


begin
  If (FEstimatedInstanceCount=AValue) then exit;
  FEstimatedInstanceCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntity.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntity.SetNamespace(AIndex: Integer; const AValue: string); 


begin
  If (FNamespace=AValue) then exit;
  FNamespace:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataEntity.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataLobSystem
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataLobSystem.ObjectRestKind : String; 

begin
  Result:='LobSystem';
end;


Procedure TSP_BusinessDataLobSystem.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataLobSystem.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataMethodExecutionResult
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataMethodExecutionResult.ObjectRestKind : String; 

begin
  Result:='MethodExecutionResult';
end;


Procedure TSP_BusinessDataMethodExecutionResult.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataMethodExecutionResult.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


Function TSP_BusinessDataMethodExecutionResult.ReturnParameterCollection(AService: TODataService) : TSP_BusinessData_RuntimeEntityFieldValueDictionary; 


begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionary(GetContainedSingleTon(AService,'ReturnParameterCollection', TSP_BusinessData_RuntimeEntityFieldValueDictionary));
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataEntityView
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataEntityView.ObjectRestKind : String; 

begin
  Result:='EntityView';
end;


Procedure TSP_BusinessDataEntityView.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_BusinessDataEntityView.SetRelatedSpecificFinderName(AIndex: Integer; const AValue: string); 


begin
  If (FRelatedSpecificFinderName=AValue) then exit;
  FRelatedSpecificFinderName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataEntityView.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Name);
end;


Function TSP_BusinessDataEntityView.Fields(AService: TODataService) : TSP_BusinessDataEntityField; 


begin
  Result:=TSP_BusinessDataEntityField(GetContainedSingleTon(AService,'Fields', TSP_BusinessDataEntityField));
end;


{ --------------------------------------------------------------------
  TSP_BusinessDataAppBdcCatalog
  --------------------------------------------------------------------}


Class Function TSP_BusinessDataAppBdcCatalog.ObjectRestKind : String; 

begin
  Result:='AppBdcCatalog';
end;


Procedure TSP_BusinessDataAppBdcCatalog.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessDataAppBdcCatalog.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_AnalyticsAnalyticsUsageEntry
  --------------------------------------------------------------------}


Class Function TSP_AnalyticsAnalyticsUsageEntry.ObjectRestKind : String; 

begin
  Result:='AnalyticsUsageEntry';
end;


Procedure TSP_AnalyticsAnalyticsUsageEntry.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_AnalyticsAnalyticsUsageEntry.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_BusinessData_InfrastructureExternalSubscriptionStore
  --------------------------------------------------------------------}


Class Function TSP_BusinessData_InfrastructureExternalSubscriptionStore.ObjectRestKind : String; 

begin
  Result:='ExternalSubscriptionStore';
end;


Procedure TSP_BusinessData_InfrastructureExternalSubscriptionStore.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_BusinessData_InfrastructureExternalSubscriptionStore.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest.ObjectRestKind : String; 

begin
  Result:='NavigationServiceRest';
end;


Procedure TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_PackagingAppDetails
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_PackagingAppDetails.ObjectRestKind : String; 

begin
  Result:='AppDetails';
end;


Procedure TMicrosoft_SharePoint_PackagingAppDetails.SetEulaUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEulaUrl=AValue) then exit;
  FEulaUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PackagingAppDetails.SetPrivacyUrl(AIndex: Integer; const AValue: string); 


begin
  If (FPrivacyUrl=AValue) then exit;
  FPrivacyUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PackagingAppDetails.SetPublisher(AIndex: Integer; const AValue: string); 


begin
  If (FPublisher=AValue) then exit;
  FPublisher:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PackagingAppDetails.SetShortDescription(AIndex: Integer; const AValue: string); 


begin
  If (FShortDescription=AValue) then exit;
  FShortDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PackagingAppDetails.SetSupportUrl(AIndex: Integer; const AValue: string); 


begin
  If (FSupportUrl=AValue) then exit;
  FSupportUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_PackagingAppDetails.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(EulaUrl);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_PackagingAppIconInfo
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_PackagingAppIconInfo.ObjectRestKind : String; 

begin
  Result:='AppIconInfo';
end;


Procedure TMicrosoft_SharePoint_PackagingAppIconInfo.SetContent(AIndex: Integer; const AValue: TBinary); 


begin
  If (FContent=AValue) then exit;
  FContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_PackagingAppIconInfo.SetMimeType(AIndex: Integer; const AValue: string); 


begin
  If (FMimeType=AValue) then exit;
  FMimeType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_PackagingAppIconInfo.KeyAsURLPart : string;

begin
  Result:=BinaryToString(Content);
end;


{ --------------------------------------------------------------------
  TSP_OAuthNativeClient
  --------------------------------------------------------------------}


Class Function TSP_OAuthNativeClient.ObjectRestKind : String; 

begin
  Result:='NativeClient';
end;


Procedure TSP_OAuthNativeClient.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_OAuthNativeClient.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_WebControlsModuleLink
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_WebControlsModuleLink.ObjectRestKind : String; 

begin
  Result:='ModuleLink';
end;


Procedure TMicrosoft_SharePoint_WebControlsModuleLink.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_SharePoint_WebControlsModuleLink.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_SharePoint_WebControlsResourceManifestInformation
  --------------------------------------------------------------------}


Class Function TMicrosoft_SharePoint_WebControlsResourceManifestInformation.ObjectRestKind : String; 

begin
  Result:='ResourceManifestInformation';
end;


Procedure TMicrosoft_SharePoint_WebControlsResourceManifestInformation.SetRequireJsScriptBlock(AIndex: Integer; const AValue: string); 


begin
  If (FRequireJsScriptBlock=AValue) then exit;
  FRequireJsScriptBlock:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_SharePoint_WebControlsResourceManifestInformation.SetScenarioMapping(AIndex: Integer; const AValue: TSPKeyValueArray); 


begin
  If (FScenarioMapping=AValue) then exit;
  FScenarioMapping:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_SharePoint_WebControlsResourceManifestInformation.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'scenariomapping' : SetLength(FScenarioMapping,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_SharePoint_WebControlsResourceManifestInformation.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(RequireJsScriptBlock);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin.ObjectRestKind : String; 

begin
  Result:='PointPublishingAdmin';
end;


Procedure TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter.ObjectRestKind : String; 

begin
  Result:='DDIAdapter';
end;


Procedure TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantManagementExternalUser
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantManagementExternalUser.ObjectRestKind : String; 

begin
  Result:='ExternalUser';
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetAcceptedAs(AIndex: Integer; const AValue: string); 


begin
  If (FAcceptedAs=AValue) then exit;
  FAcceptedAs:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetDisplayName(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayName=AValue) then exit;
  FDisplayName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetInvitedAs(AIndex: Integer; const AValue: string); 


begin
  If (FInvitedAs=AValue) then exit;
  FInvitedAs:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetInvitedBy(AIndex: Integer; const AValue: string); 


begin
  If (FInvitedBy=AValue) then exit;
  FInvitedBy:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetUniqueId(AIndex: Integer; const AValue: string); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUserId=AValue) then exit;
  FUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementExternalUser.SetWhenCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FWhenCreated=AValue) then exit;
  FWhenCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Online_SharePoint_TenantManagementExternalUser.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(AcceptedAs);
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults.ObjectRestKind : String; 

begin
  Result:='GetExternalUsersResults';
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults.SetTotalUserCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTotalUserCount=AValue) then exit;
  FTotalUserCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults.SetUserCollectionPosition(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUserCollectionPosition=AValue) then exit;
  FUserCollectionPosition:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults.KeyAsURLPart : string;

begin
  Result:=IntToStr(TotalUserCount);
end;


Function TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults.ExternalUserCollection(AService: TODataService) : TMicrosoft_Online_SharePoint_TenantManagementExternalUser; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUser(GetContainedSingleTon(AService,'ExternalUserCollection', TMicrosoft_Online_SharePoint_TenantManagementExternalUser));
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.ObjectRestKind : String; 

begin
  Result:='Office365Tenant';
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetAllowedDomainListForSyncClient(AIndex: Integer; const AValue: TGuidStringArray); 


begin
  If (FAllowedDomainListForSyncClient=AValue) then exit;
  FAllowedDomainListForSyncClient:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetDisplayStartASiteOption(AIndex: Integer; const AValue: boolean); 


begin
  If (FDisplayStartASiteOption=AValue) then exit;
  FDisplayStartASiteOption:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetExternalServicesEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FExternalServicesEnabled=AValue) then exit;
  FExternalServicesEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetIsUnmanagedSyncClientForTenantRestricted(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUnmanagedSyncClientForTenantRestricted=AValue) then exit;
  FIsUnmanagedSyncClientForTenantRestricted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetIsUnmanagedSyncClientRestrictionFlightEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsUnmanagedSyncClientRestrictionFlightEnabled=AValue) then exit;
  FIsUnmanagedSyncClientRestrictionFlightEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetMySitesPublicEnabled(AIndex: Integer; const AValue: boolean); 


begin
  If (FMySitesPublicEnabled=AValue) then exit;
  FMySitesPublicEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetSharingCapability(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSharingCapability=AValue) then exit;
  FSharingCapability:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetStartASiteFormUrl(AIndex: Integer; const AValue: string); 


begin
  If (FStartASiteFormUrl=AValue) then exit;
  FStartASiteFormUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'alloweddomainlistforsyncclient' : SetLength(FAllowedDomainListForSyncClient,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant.KeyAsURLPart : string;

begin
  Result:=BoolToStr(DisplayStartASiteOption,'true','false');
end;


{ --------------------------------------------------------------------
  TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults
  --------------------------------------------------------------------}


Class Function TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults.ObjectRestKind : String; 

begin
  Result:='RemoveExternalUsersResults';
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults.SetId4a81de82eeb94d6080ea5bf63e27023a(AIndex: Integer; const AValue: string); 


begin
  If (FId4a81de82eeb94d6080ea5bf63e27023a=AValue) then exit;
  FId4a81de82eeb94d6080ea5bf63e27023a:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults.SetRemoveFailed(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FRemoveFailed=AValue) then exit;
  FRemoveFailed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults.SetRemoveSucceeded(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FRemoveSucceeded=AValue) then exit;
  FRemoveSucceeded:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'removefailed' : SetLength(FRemoveFailed,aLength);
  'removesucceeded' : SetLength(FRemoveSucceeded,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults.KeyAsURLPart : string;

begin
  Result:=TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a);
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_appdataItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_appdataItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_appdataItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_appdataItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataOData__x005f_catalogs_x002f_appdataItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_appdataItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataUserInfoItem
  --------------------------------------------------------------------}


Class Function TSP_DataUserInfoItem.ObjectRestKind : String; 

begin
  Result:='UserInfoItem';
end;


Procedure TSP_DataUserInfoItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetEMail(AIndex: Integer; const AValue: string); 


begin
  If (FEMail=AValue) then exit;
  FEMail:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetMobilePhone(AIndex: Integer; const AValue: string); 


begin
  If (FMobilePhone=AValue) then exit;
  FMobilePhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetNotes(AIndex: Integer; const AValue: string); 


begin
  If (FNotes=AValue) then exit;
  FNotes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetSipAddress(AIndex: Integer; const AValue: string); 


begin
  If (FSipAddress=AValue) then exit;
  FSipAddress:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLocale(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLocale=AValue) then exit;
  FLocale:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetCalendarType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCalendarType=AValue) then exit;
  FCalendarType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetAdjustHijriDays(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAdjustHijriDays=AValue) then exit;
  FAdjustHijriDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetTimeZone(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTimeZone=AValue) then exit;
  FTimeZone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetTime24(AIndex: Integer; const AValue: boolean); 


begin
  If (FTime24=AValue) then exit;
  FTime24:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetAltCalendarType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAltCalendarType=AValue) then exit;
  FAltCalendarType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetCalendarViewOptions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCalendarViewOptions=AValue) then exit;
  FCalendarViewOptions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWorkDays(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkDays=AValue) then exit;
  FWorkDays:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWorkDayStartHour(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkDayStartHour=AValue) then exit;
  FWorkDayStartHour:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWorkDayEndHour(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkDayEndHour=AValue) then exit;
  FWorkDayEndHour:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetMUILanguages(AIndex: Integer; const AValue: string); 


begin
  If (FMUILanguages=AValue) then exit;
  FMUILanguages:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetContentLanguages(AIndex: Integer; const AValue: string); 


begin
  If (FContentLanguages=AValue) then exit;
  FContentLanguages:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetIsSiteAdmin(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsSiteAdmin=AValue) then exit;
  FIsSiteAdmin:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetDeleted(AIndex: Integer; const AValue: boolean); 


begin
  If (FDeleted=AValue) then exit;
  FDeleted:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetUserInfoHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FUserInfoHidden=AValue) then exit;
  FUserInfoHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetPicture(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FPicture=AValue) then exit;
  FPicture:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetDepartment(AIndex: Integer; const AValue: string); 


begin
  If (FDepartment=AValue) then exit;
  FDepartment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetJobTitle(AIndex: Integer; const AValue: string); 


begin
  If (FJobTitle=AValue) then exit;
  FJobTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetIsActive(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsActive=AValue) then exit;
  FIsActive:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetFirstName(AIndex: Integer; const AValue: string); 


begin
  If (FFirstName=AValue) then exit;
  FFirstName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLastName(AIndex: Integer; const AValue: string); 


begin
  If (FLastName=AValue) then exit;
  FLastName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWorkPhone(AIndex: Integer; const AValue: string); 


begin
  If (FWorkPhone=AValue) then exit;
  FWorkPhone:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetUserName(AIndex: Integer; const AValue: string); 


begin
  If (FUserName=AValue) then exit;
  FUserName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWebSite(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FWebSite=AValue) then exit;
  FWebSite:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetSPSResponsibility(AIndex: Integer; const AValue: string); 


begin
  If (FSPSResponsibility=AValue) then exit;
  FSPSResponsibility:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOffice(AIndex: Integer; const AValue: string); 


begin
  If (FOffice=AValue) then exit;
  FOffice:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetSPSPictureTimestamp(AIndex: Integer; const AValue: string); 


begin
  If (FSPSPictureTimestamp=AValue) then exit;
  FSPSPictureTimestamp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetSPSPicturePlaceholderState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSPSPicturePlaceholderState=AValue) then exit;
  FSPSPicturePlaceholderState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetSPSPictureExchangeSyncState(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSPSPictureExchangeSyncState=AValue) then exit;
  FSPSPictureExchangeSyncState:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetGroupLink(AIndex: Integer; const AValue: string); 


begin
  If (FGroupLink=AValue) then exit;
  FGroupLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetGroupEdit(AIndex: Integer; const AValue: string); 


begin
  If (FGroupEdit=AValue) then exit;
  FGroupEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetImnName(AIndex: Integer; const AValue: string); 


begin
  If (FImnName=AValue) then exit;
  FImnName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetPictureDisp(AIndex: Integer; const AValue: string); 


begin
  If (FPictureDisp=AValue) then exit;
  FPictureDisp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetPictureOnly_Size_36px(AIndex: Integer; const AValue: string); 


begin
  If (FPictureOnly_Size_36px=AValue) then exit;
  FPictureOnly_Size_36px:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetPictureOnly_Size_48px(AIndex: Integer; const AValue: string); 


begin
  If (FPictureOnly_Size_48px=AValue) then exit;
  FPictureOnly_Size_48px:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetPictureOnly_Size_72px(AIndex: Integer; const AValue: string); 


begin
  If (FPictureOnly_Size_72px=AValue) then exit;
  FPictureOnly_Size_72px:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetNameWithPicture(AIndex: Integer; const AValue: string); 


begin
  If (FNameWithPicture=AValue) then exit;
  FNameWithPicture:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetNameWithPictureAndDetails(AIndex: Integer; const AValue: string); 


begin
  If (FNameWithPictureAndDetails=AValue) then exit;
  FNameWithPictureAndDetails:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetEditUser(AIndex: Integer; const AValue: string); 


begin
  If (FEditUser=AValue) then exit;
  FEditUser:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetUserSelection(AIndex: Integer; const AValue: string); 


begin
  If (FUserSelection=AValue) then exit;
  FUserSelection:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataUserInfoItem.SetContentTypeDisp(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeDisp=AValue) then exit;
  FContentTypeDisp:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataUserInfoItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataUserInfoItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_designItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_designItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_designItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetName(AIndex: Integer; const AValue: string); 


begin
  If (FName=AValue) then exit;
  FName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetMasterPageUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FMasterPageUrl=AValue) then exit;
  FMasterPageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetThemeUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FThemeUrl=AValue) then exit;
  FThemeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetImageUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FImageUrl=AValue) then exit;
  FImageUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetFontSchemeUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FFontSchemeUrl=AValue) then exit;
  FFontSchemeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_designItem.SetDisplayOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FDisplayOrder=AValue) then exit;
  FDisplayOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataOData__x005f_catalogs_x002f_designItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_designItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataContentTypeSyncLogListItem
  --------------------------------------------------------------------}


Class Function TSP_DataContentTypeSyncLogListItem.ObjectRestKind : String; 

begin
  Result:='ContentTypeSyncLogListItem';
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetPublishedObjectName(AIndex: Integer; const AValue: string); 


begin
  If (FPublishedObjectName=AValue) then exit;
  FPublishedObjectName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFailure_x0020_Stage(AIndex: Integer; const AValue: string); 


begin
  If (FFailure_x0020_Stage=AValue) then exit;
  FFailure_x0020_Stage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFailure_x0020_Message(AIndex: Integer; const AValue: string); 


begin
  If (FFailure_x0020_Message=AValue) then exit;
  FFailure_x0020_Message:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFailure_x0020_Time(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FFailure_x0020_Time=AValue) then exit;
  FFailure_x0020_Time:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataContentTypeSyncLogListItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataContentTypeSyncLogListItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataContentTypeSyncLogListItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataIWConvertedFormsItem
  --------------------------------------------------------------------}


Class Function TSP_DataIWConvertedFormsItem.ObjectRestKind : String; 

begin
  Result:='IWConvertedFormsItem';
end;


Procedure TSP_DataIWConvertedFormsItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetTemplateId(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateId=AValue) then exit;
  FTemplateId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFormRelativeUrl(AIndex: Integer; const AValue: string); 


begin
  If (FFormRelativeUrl=AValue) then exit;
  FFormRelativeUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataIWConvertedFormsItem.SetFormVersion(AIndex: Integer; const AValue: string); 


begin
  If (FFormVersion=AValue) then exit;
  FFormVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataIWConvertedFormsItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataIWConvertedFormsItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataIWConvertedFormsItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataDocumentsItem
  --------------------------------------------------------------------}


Class Function TSP_DataDocumentsItem.ObjectRestKind : String; 

begin
  Result:='DocumentsItem';
end;


Procedure TSP_DataDocumentsItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetPrincipalCount(AIndex: Integer; const AValue: string); 


begin
  If (FPrincipalCount=AValue) then exit;
  FPrincipalCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetSharedWith(AIndex: Integer; const AValue: string); 


begin
  If (FSharedWith=AValue) then exit;
  FSharedWith:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetIsMyDocuments(AIndex: Integer; const AValue: boolean); 


begin
  If (FIsMyDocuments=AValue) then exit;
  FIsMyDocuments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetSharedWithInternalId(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FSharedWithInternalId=AValue) then exit;
  FSharedWithInternalId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetSharedWithUsersId(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FSharedWithUsersId=AValue) then exit;
  FSharedWithUsersId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataDocumentsItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DataDocumentsItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'sharedwithinternalid' : SetLength(FSharedWithInternalId,aLength);
  'sharedwithusersid' : SetLength(FSharedWithUsersId,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DataDocumentsItem.SharedWithInternal(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'SharedWithInternal', TSP_DataUserInfoItem));
end;


Function TSP_DataDocumentsItem.SharedWithUsers(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'SharedWithUsers', TSP_DataUserInfoItem));
end;


Function TSP_DataDocumentsItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataDocumentsItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataDocumentsItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataFormServerTemplatesItem
  --------------------------------------------------------------------}


Class Function TSP_DataFormServerTemplatesItem.ObjectRestKind : String; 

begin
  Result:='FormServerTemplatesItem';
end;


Procedure TSP_DataFormServerTemplatesItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetTemplateUrl(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateUrl=AValue) then exit;
  FTemplateUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.Setxd_ProgID(AIndex: Integer; const AValue: string); 


begin
  If (Fxd_ProgID=AValue) then exit;
  Fxd_ProgID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.Setxd_Signature(AIndex: Integer; const AValue: boolean); 


begin
  If (Fxd_Signature=AValue) then exit;
  Fxd_Signature:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFormName(AIndex: Integer; const AValue: string); 


begin
  If (FFormName=AValue) then exit;
  FFormName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFormCategory(AIndex: Integer; const AValue: string); 


begin
  If (FFormCategory=AValue) then exit;
  FFormCategory:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFormVersion(AIndex: Integer; const AValue: string); 


begin
  If (FFormVersion=AValue) then exit;
  FFormVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFormId(AIndex: Integer; const AValue: string); 


begin
  If (FFormId=AValue) then exit;
  FFormId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFormLocale(AIndex: Integer; const AValue: string); 


begin
  If (FFormLocale=AValue) then exit;
  FFormLocale:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFormDescription(AIndex: Integer; const AValue: string); 


begin
  If (FFormDescription=AValue) then exit;
  FFormDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetCustomContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FCustomContentTypeId=AValue) then exit;
  FCustomContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetShowInCatalog(AIndex: Integer; const AValue: boolean); 


begin
  If (FShowInCatalog=AValue) then exit;
  FShowInCatalog:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetLinkTemplateName(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTemplateName=AValue) then exit;
  FLinkTemplateName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetCombine(AIndex: Integer; const AValue: string); 


begin
  If (FCombine=AValue) then exit;
  FCombine:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataFormServerTemplatesItem.SetRepairDocument(AIndex: Integer; const AValue: string); 


begin
  If (FRepairDocument=AValue) then exit;
  FRepairDocument:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataFormServerTemplatesItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataFormServerTemplatesItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataFormServerTemplatesItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_ltItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_ltItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_ltItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetTemplateTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateTitle=AValue) then exit;
  FTemplateTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetTemplateDescription(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateDescription=AValue) then exit;
  FTemplateDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetTemplateID(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateID=AValue) then exit;
  FTemplateID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLanguage(AIndex: Integer; const AValue: TInt32); 


begin
  If (FLanguage=AValue) then exit;
  FLanguage:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetTemplateType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FTemplateType=AValue) then exit;
  FTemplateType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetBaseType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FBaseType=AValue) then exit;
  FBaseType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetSubType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSubType=AValue) then exit;
  FSubType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetMajorVersion(AIndex: Integer; const AValue: Double); 


begin
  If (FMajorVersion=AValue) then exit;
  FMajorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetFeatureID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FFeatureID=AValue) then exit;
  FFeatureID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_ltItem.SetLanguageDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FLanguageDisplay=AValue) then exit;
  FLanguageDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataOData__x005f_catalogs_x002f_ltItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_ltItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_ltItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_MaintenanceLogsItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_MaintenanceLogsItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_masterpageItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_masterpageItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_masterpageItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetMasterPageDescription(AIndex: Integer; const AValue: string); 


begin
  If (FMasterPageDescription=AValue) then exit;
  FMasterPageDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetUIVersion(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FUIVersion=AValue) then exit;
  FUIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDefaultCssFile(AIndex: Integer; const AValue: string); 


begin
  If (FDefaultCssFile=AValue) then exit;
  FDefaultCssFile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSTemplateHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FDisplayTemplateJSTemplateHidden=AValue) then exit;
  FDisplayTemplateJSTemplateHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSTargetControlType(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayTemplateJSTargetControlType=AValue) then exit;
  FDisplayTemplateJSTargetControlType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSIconUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FDisplayTemplateJSIconUrl=AValue) then exit;
  FDisplayTemplateJSIconUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSTemplateType(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayTemplateJSTemplateType=AValue) then exit;
  FDisplayTemplateJSTemplateType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSTargetScope(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayTemplateJSTargetScope=AValue) then exit;
  FDisplayTemplateJSTargetScope:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSTargetListTemplate(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayTemplateJSTargetListTemplate=AValue) then exit;
  FDisplayTemplateJSTargetListTemplate:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSTargetContentType(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayTemplateJSTargetContentType=AValue) then exit;
  FDisplayTemplateJSTargetContentType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateJSConfigurationUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FDisplayTemplateJSConfigurationUrl=AValue) then exit;
  FDisplayTemplateJSConfigurationUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetTemplateHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FTemplateHidden=AValue) then exit;
  FTemplateHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetTargetControlType(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FTargetControlType=AValue) then exit;
  FTargetControlType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCrawlerXSLFile(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FCrawlerXSLFile=AValue) then exit;
  FCrawlerXSLFile:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDisplayTemplateLevel(AIndex: Integer; const AValue: string); 


begin
  If (FDisplayTemplateLevel=AValue) then exit;
  FDisplayTemplateLevel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetManagedPropertyMapping(AIndex: Integer; const AValue: string); 


begin
  If (FManagedPropertyMapping=AValue) then exit;
  FManagedPropertyMapping:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCompatibleSearchDataTypes(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FCompatibleSearchDataTypes=AValue) then exit;
  FCompatibleSearchDataTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCompatibleManagedProperties(AIndex: Integer; const AValue: string); 


begin
  If (FCompatibleManagedProperties=AValue) then exit;
  FCompatibleManagedProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFilenameMenuNoLink(AIndex: Integer; const AValue: string); 


begin
  If (FFilenameMenuNoLink=AValue) then exit;
  FFilenameMenuNoLink:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetMasterPageIcon(AIndex: Integer; const AValue: string); 


begin
  If (FMasterPageIcon=AValue) then exit;
  FMasterPageIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetFilenameNoLink(AIndex: Integer; const AValue: string); 


begin
  If (FFilenameNoLink=AValue) then exit;
  FFilenameNoLink:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DataOData__x005f_catalogs_x002f_masterpageItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'uiversion' : SetLength(FUIVersion,aLength);
  'targetcontroltype' : SetLength(FTargetControlType,aLength);
  'compatiblesearchdatatypes' : SetLength(FCompatibleSearchDataTypes,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DataOData__x005f_catalogs_x002f_masterpageItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_masterpageItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_masterpageItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataPublishedFeedListItem
  --------------------------------------------------------------------}


Class Function TSP_DataPublishedFeedListItem.ObjectRestKind : String; 

begin
  Result:='PublishedFeedListItem';
end;


Procedure TSP_DataPublishedFeedListItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMicroBlogType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMicroBlogType=AValue) then exit;
  FMicroBlogType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetPostAuthor(AIndex: Integer; const AValue: string); 


begin
  If (FPostAuthor=AValue) then exit;
  FPostAuthor:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetDefinitionId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FDefinitionId=AValue) then exit;
  FDefinitionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetRootPostID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FRootPostID=AValue) then exit;
  FRootPostID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetRootPostOwnerID(AIndex: Integer; const AValue: string); 


begin
  If (FRootPostOwnerID=AValue) then exit;
  FRootPostOwnerID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetRootPostUniqueID(AIndex: Integer; const AValue: string); 


begin
  If (FRootPostUniqueID=AValue) then exit;
  FRootPostUniqueID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetReplyCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FReplyCount=AValue) then exit;
  FReplyCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetReferenceID(AIndex: Integer; const AValue: string); 


begin
  If (FReferenceID=AValue) then exit;
  FReferenceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetAttributes(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAttributes=AValue) then exit;
  FAttributes:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetContent(AIndex: Integer; const AValue: string); 


begin
  If (FContent=AValue) then exit;
  FContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetContentData(AIndex: Integer; const AValue: string); 


begin
  If (FContentData=AValue) then exit;
  FContentData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetSearchContent(AIndex: Integer; const AValue: string); 


begin
  If (FSearchContent=AValue) then exit;
  FSearchContent:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetRefRoot(AIndex: Integer; const AValue: string); 


begin
  If (FRefRoot=AValue) then exit;
  FRefRoot:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetRefReply(AIndex: Integer; const AValue: string); 


begin
  If (FRefReply=AValue) then exit;
  FRefReply:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetPostSource(AIndex: Integer; const AValue: string); 


begin
  If (FPostSource=AValue) then exit;
  FPostSource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetPeopleCount(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPeopleCount=AValue) then exit;
  FPeopleCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetPeopleList(AIndex: Integer; const AValue: string); 


begin
  If (FPeopleList=AValue) then exit;
  FPeopleList:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaLinkType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaLinkType=AValue) then exit;
  FMediaLinkType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaLinkDescription(AIndex: Integer; const AValue: string); 


begin
  If (FMediaLinkDescription=AValue) then exit;
  FMediaLinkDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetPostSourceUri(AIndex: Integer; const AValue: string); 


begin
  If (FPostSourceUri=AValue) then exit;
  FPostSourceUri:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaLinkURI(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FMediaLinkURI=AValue) then exit;
  FMediaLinkURI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaLinkUISnippet(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FMediaLinkUISnippet=AValue) then exit;
  FMediaLinkUISnippet:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaLinkContentURI(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FMediaLinkContentURI=AValue) then exit;
  FMediaLinkContentURI:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaLength(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaLength=AValue) then exit;
  FMediaLength:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaWidth(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaWidth=AValue) then exit;
  FMediaWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaHeight(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaHeight=AValue) then exit;
  FMediaHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaPreviewWidth(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaPreviewWidth=AValue) then exit;
  FMediaPreviewWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaPreviewHeight(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaPreviewHeight=AValue) then exit;
  FMediaPreviewHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaActionWidth(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaActionWidth=AValue) then exit;
  FMediaActionWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaActionHeight(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaActionHeight=AValue) then exit;
  FMediaActionHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaActionClickUrl(AIndex: Integer; const AValue: TSPFieldUrlValue); 


begin
  If (FMediaActionClickUrl=AValue) then exit;
  FMediaActionClickUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetMediaActionClickKind(AIndex: Integer; const AValue: TInt32); 


begin
  If (FMediaActionClickKind=AValue) then exit;
  FMediaActionClickKind:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SeteMailSubscribers(AIndex: Integer; const AValue: string); 


begin
  If (FeMailSubscribers=AValue) then exit;
  FeMailSubscribers:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SeteMailUnsubscribed(AIndex: Integer; const AValue: string); 


begin
  If (FeMailUnsubscribed=AValue) then exit;
  FeMailUnsubscribed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetRemoteLocation(AIndex: Integer; const AValue: string); 


begin
  If (FRemoteLocation=AValue) then exit;
  FRemoteLocation:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLikesCount(AIndex: Integer; const AValue: Double); 


begin
  If (FLikesCount=AValue) then exit;
  FLikesCount:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLikedById(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FLikedById=AValue) then exit;
  FLikedById:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetHashTags(AIndex: Integer; const AValue: TSP_TaxonomyTaxonomyFieldValueArray); 


begin
  If (FHashTags=AValue) then exit;
  FHashTags:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.Setj33b1bc20532487296f1bbbdead35a56(AIndex: Integer; const AValue: string); 


begin
  If (Fj33b1bc20532487296f1bbbdead35a56=AValue) then exit;
  Fj33b1bc20532487296f1bbbdead35a56:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetTaxCatchAllId(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FTaxCatchAllId=AValue) then exit;
  FTaxCatchAllId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetTaxCatchAllLabelId(AIndex: Integer; const AValue: TInt32Array); 


begin
  If (FTaxCatchAllLabelId=AValue) then exit;
  FTaxCatchAllLabelId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataPublishedFeedListItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DataPublishedFeedListItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'likedbyid' : SetLength(FLikedById,aLength);
  'hashtags' : SetLength(FHashTags,aLength);
  'taxcatchallid' : SetLength(FTaxCatchAllId,aLength);
  'taxcatchalllabelid' : SetLength(FTaxCatchAllLabelId,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DataPublishedFeedListItem.LikedBy(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'LikedBy', TSP_DataUserInfoItem));
end;


Function TSP_DataPublishedFeedListItem.TaxCatchAll(AService: TODataService) : TSP_DataTaxonomyHiddenListListItem; 


begin
  Result:=TSP_DataTaxonomyHiddenListListItem(GetContainedSingleTon(AService,'TaxCatchAll', TSP_DataTaxonomyHiddenListListItem));
end;


Function TSP_DataPublishedFeedListItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataPublishedFeedListItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataTaxonomyHiddenListListItem
  --------------------------------------------------------------------}


Class Function TSP_DataTaxonomyHiddenListListItem.ObjectRestKind : String; 

begin
  Result:='TaxonomyHiddenListListItem';
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetIdForTermStore(AIndex: Integer; const AValue: string); 


begin
  If (FIdForTermStore=AValue) then exit;
  FIdForTermStore:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetIdForTerm(AIndex: Integer; const AValue: string); 


begin
  If (FIdForTerm=AValue) then exit;
  FIdForTerm:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetIdForTermSet(AIndex: Integer; const AValue: string); 


begin
  If (FIdForTermSet=AValue) then exit;
  FIdForTermSet:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm(AIndex: Integer; const AValue: string); 


begin
  If (FTerm=AValue) then exit;
  FTerm:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath(AIndex: Integer; const AValue: string); 


begin
  If (FPath=AValue) then exit;
  FPath:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetCatchAllData(AIndex: Integer; const AValue: string); 


begin
  If (FCatchAllData=AValue) then exit;
  FCatchAllData:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetCatchAllDataLabel(AIndex: Integer; const AValue: string); 


begin
  If (FCatchAllDataLabel=AValue) then exit;
  FCatchAllDataLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1031(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1031=AValue) then exit;
  FTerm1031:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1031(AIndex: Integer; const AValue: string); 


begin
  If (FPath1031=AValue) then exit;
  FPath1031:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1036(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1036=AValue) then exit;
  FTerm1036:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1036(AIndex: Integer; const AValue: string); 


begin
  If (FPath1036=AValue) then exit;
  FPath1036:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1057(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1057=AValue) then exit;
  FTerm1057:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1057(AIndex: Integer; const AValue: string); 


begin
  If (FPath1057=AValue) then exit;
  FPath1057:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1044(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1044=AValue) then exit;
  FTerm1044:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1044(AIndex: Integer; const AValue: string); 


begin
  If (FPath1044=AValue) then exit;
  FPath1044:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1049(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1049=AValue) then exit;
  FTerm1049:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1049(AIndex: Integer; const AValue: string); 


begin
  If (FPath1049=AValue) then exit;
  FPath1049:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm2052(AIndex: Integer; const AValue: string); 


begin
  If (FTerm2052=AValue) then exit;
  FTerm2052:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath2052(AIndex: Integer; const AValue: string); 


begin
  If (FPath2052=AValue) then exit;
  FPath2052:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1028(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1028=AValue) then exit;
  FTerm1028:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1028(AIndex: Integer; const AValue: string); 


begin
  If (FPath1028=AValue) then exit;
  FPath1028:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1027(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1027=AValue) then exit;
  FTerm1027:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1027(AIndex: Integer; const AValue: string); 


begin
  If (FPath1027=AValue) then exit;
  FPath1027:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1081(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1081=AValue) then exit;
  FTerm1081:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1081(AIndex: Integer; const AValue: string); 


begin
  If (FPath1081=AValue) then exit;
  FPath1081:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1086(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1086=AValue) then exit;
  FTerm1086:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1086(AIndex: Integer; const AValue: string); 


begin
  If (FPath1086=AValue) then exit;
  FPath1086:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1048(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1048=AValue) then exit;
  FTerm1048:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1048(AIndex: Integer; const AValue: string); 


begin
  If (FPath1048=AValue) then exit;
  FPath1048:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1060(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1060=AValue) then exit;
  FTerm1060:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1060(AIndex: Integer; const AValue: string); 


begin
  If (FPath1060=AValue) then exit;
  FPath1060:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1030(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1030=AValue) then exit;
  FTerm1030:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1030(AIndex: Integer; const AValue: string); 


begin
  If (FPath1030=AValue) then exit;
  FPath1030:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1069(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1069=AValue) then exit;
  FTerm1069:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1069(AIndex: Integer; const AValue: string); 


begin
  If (FPath1069=AValue) then exit;
  FPath1069:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1035(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1035=AValue) then exit;
  FTerm1035:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1035(AIndex: Integer; const AValue: string); 


begin
  If (FPath1035=AValue) then exit;
  FPath1035:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1043(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1043=AValue) then exit;
  FTerm1043:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1043(AIndex: Integer; const AValue: string); 


begin
  If (FPath1043=AValue) then exit;
  FPath1043:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1051(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1051=AValue) then exit;
  FTerm1051:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1051(AIndex: Integer; const AValue: string); 


begin
  If (FPath1051=AValue) then exit;
  FPath1051:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1026(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1026=AValue) then exit;
  FTerm1026:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1026(AIndex: Integer; const AValue: string); 


begin
  If (FPath1026=AValue) then exit;
  FPath1026:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1110(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1110=AValue) then exit;
  FTerm1110:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1110(AIndex: Integer; const AValue: string); 


begin
  If (FPath1110=AValue) then exit;
  FPath1110:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1055(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1055=AValue) then exit;
  FTerm1055:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1055(AIndex: Integer; const AValue: string); 


begin
  If (FPath1055=AValue) then exit;
  FPath1055:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1050(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1050=AValue) then exit;
  FTerm1050:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1050(AIndex: Integer; const AValue: string); 


begin
  If (FPath1050=AValue) then exit;
  FPath1050:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1038(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1038=AValue) then exit;
  FTerm1038:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1038(AIndex: Integer; const AValue: string); 


begin
  If (FPath1038=AValue) then exit;
  FPath1038:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1042(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1042=AValue) then exit;
  FTerm1042:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1042(AIndex: Integer; const AValue: string); 


begin
  If (FPath1042=AValue) then exit;
  FPath1042:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1063(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1063=AValue) then exit;
  FTerm1063:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1063(AIndex: Integer; const AValue: string); 


begin
  If (FPath1063=AValue) then exit;
  FPath1063:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1033(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1033=AValue) then exit;
  FTerm1033:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1033(AIndex: Integer; const AValue: string); 


begin
  If (FPath1033=AValue) then exit;
  FPath1033:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1025(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1025=AValue) then exit;
  FTerm1025:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1025(AIndex: Integer; const AValue: string); 


begin
  If (FPath1025=AValue) then exit;
  FPath1025:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1041(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1041=AValue) then exit;
  FTerm1041:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1041(AIndex: Integer; const AValue: string); 


begin
  If (FPath1041=AValue) then exit;
  FPath1041:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1062(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1062=AValue) then exit;
  FTerm1062:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1062(AIndex: Integer; const AValue: string); 


begin
  If (FPath1062=AValue) then exit;
  FPath1062:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1046(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1046=AValue) then exit;
  FTerm1046:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1046(AIndex: Integer; const AValue: string); 


begin
  If (FPath1046=AValue) then exit;
  FPath1046:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm2070(AIndex: Integer; const AValue: string); 


begin
  If (FTerm2070=AValue) then exit;
  FTerm2070:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath2070(AIndex: Integer; const AValue: string); 


begin
  If (FPath2070=AValue) then exit;
  FPath2070:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1054(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1054=AValue) then exit;
  FTerm1054:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1054(AIndex: Integer; const AValue: string); 


begin
  If (FPath1054=AValue) then exit;
  FPath1054:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1029(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1029=AValue) then exit;
  FTerm1029:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1029(AIndex: Integer; const AValue: string); 


begin
  If (FPath1029=AValue) then exit;
  FPath1029:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm3082(AIndex: Integer; const AValue: string); 


begin
  If (FTerm3082=AValue) then exit;
  FTerm3082:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath3082(AIndex: Integer; const AValue: string); 


begin
  If (FPath3082=AValue) then exit;
  FPath3082:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1037(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1037=AValue) then exit;
  FTerm1037:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1037(AIndex: Integer; const AValue: string); 


begin
  If (FPath1037=AValue) then exit;
  FPath1037:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1045(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1045=AValue) then exit;
  FTerm1045:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1045(AIndex: Integer; const AValue: string); 


begin
  If (FPath1045=AValue) then exit;
  FPath1045:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm2074(AIndex: Integer; const AValue: string); 


begin
  If (FTerm2074=AValue) then exit;
  FTerm2074:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath2074(AIndex: Integer; const AValue: string); 


begin
  If (FPath2074=AValue) then exit;
  FPath2074:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1058(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1058=AValue) then exit;
  FTerm1058:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1058(AIndex: Integer; const AValue: string); 


begin
  If (FPath1058=AValue) then exit;
  FPath1058:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1032(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1032=AValue) then exit;
  FTerm1032:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1032(AIndex: Integer; const AValue: string); 


begin
  If (FPath1032=AValue) then exit;
  FPath1032:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1061(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1061=AValue) then exit;
  FTerm1061:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1061(AIndex: Integer; const AValue: string); 


begin
  If (FPath1061=AValue) then exit;
  FPath1061:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1040(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1040=AValue) then exit;
  FTerm1040:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1040(AIndex: Integer; const AValue: string); 


begin
  If (FPath1040=AValue) then exit;
  FPath1040:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1087(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1087=AValue) then exit;
  FTerm1087:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1087(AIndex: Integer; const AValue: string); 


begin
  If (FPath1087=AValue) then exit;
  FPath1087:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1053(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1053=AValue) then exit;
  FTerm1053:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1053(AIndex: Integer; const AValue: string); 


begin
  If (FPath1053=AValue) then exit;
  FPath1053:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm1066(AIndex: Integer; const AValue: string); 


begin
  If (FTerm1066=AValue) then exit;
  FTerm1066:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath1066(AIndex: Integer; const AValue: string); 


begin
  If (FPath1066=AValue) then exit;
  FPath1066:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetTerm10266(AIndex: Integer; const AValue: string); 


begin
  If (FTerm10266=AValue) then exit;
  FTerm10266:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPath10266(AIndex: Integer; const AValue: string); 


begin
  If (FPath10266=AValue) then exit;
  FPath10266:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataTaxonomyHiddenListListItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataTaxonomyHiddenListListItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataTaxonomyHiddenListListItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataSiteAssetsItem
  --------------------------------------------------------------------}


Class Function TSP_DataSiteAssetsItem.ObjectRestKind : String; 

begin
  Result:='SiteAssetsItem';
end;


Procedure TSP_DataSiteAssetsItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetTemplateUrl(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateUrl=AValue) then exit;
  FTemplateUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.Setxd_ProgID(AIndex: Integer; const AValue: string); 


begin
  If (Fxd_ProgID=AValue) then exit;
  Fxd_ProgID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.Setxd_Signature(AIndex: Integer; const AValue: boolean); 


begin
  If (Fxd_Signature=AValue) then exit;
  Fxd_Signature:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetCombine(AIndex: Integer; const AValue: string); 


begin
  If (FCombine=AValue) then exit;
  FCombine:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSiteAssetsItem.SetRepairDocument(AIndex: Integer; const AValue: string); 


begin
  If (FRepairDocument=AValue) then exit;
  FRepairDocument:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataSiteAssetsItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataSiteAssetsItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataSiteAssetsItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataSocialItem
  --------------------------------------------------------------------}


Class Function TSP_DataSocialItem.ObjectRestKind : String; 

begin
  Result:='SocialItem';
end;


Procedure TSP_DataSocialItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetUnreadMentions(AIndex: Integer; const AValue: TInt32); 


begin
  If (FUnreadMentions=AValue) then exit;
  FUnreadMentions:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLastPostId(AIndex: Integer; const AValue: string); 


begin
  If (FLastPostId=AValue) then exit;
  FLastPostId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetSocialProperties(AIndex: Integer; const AValue: string); 


begin
  If (FSocialProperties=AValue) then exit;
  FSocialProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetUrl(AIndex: Integer; const AValue: string); 


begin
  If (FUrl=AValue) then exit;
  FUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFarmId(AIndex: Integer; const AValue: string); 


begin
  If (FFarmId=AValue) then exit;
  FFarmId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetSiteId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSiteId=AValue) then exit;
  FSiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetWebId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWebId=AValue) then exit;
  FWebId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetParentUrl(AIndex: Integer; const AValue: string); 


begin
  If (FParentUrl=AValue) then exit;
  FParentUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetIconUrl(AIndex: Integer; const AValue: string); 


begin
  If (FIconUrl=AValue) then exit;
  FIconUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetHidden(AIndex: Integer; const AValue: boolean); 


begin
  If (FHidden=AValue) then exit;
  FHidden:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetHasFeed(AIndex: Integer; const AValue: boolean); 


begin
  If (FHasFeed=AValue) then exit;
  FHasFeed:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFlags(AIndex: Integer; const AValue: string); 


begin
  If (FFlags=AValue) then exit;
  FFlags:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetListId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FListId=AValue) then exit;
  FListId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetItemUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FItemUniqueId=AValue) then exit;
  FItemUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetItemId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FItemId=AValue) then exit;
  FItemId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetSubtype(AIndex: Integer; const AValue: TInt32); 


begin
  If (FSubtype=AValue) then exit;
  FSubtype:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFileTypeProgid(AIndex: Integer; const AValue: string); 


begin
  If (FFileTypeProgid=AValue) then exit;
  FFileTypeProgid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetServerUrlProgid(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrlProgid=AValue) then exit;
  FServerUrlProgid:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetGroupId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGroupId=AValue) then exit;
  FGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetPinned(AIndex: Integer; const AValue: TInt32); 


begin
  If (FPinned=AValue) then exit;
  FPinned:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetAttachments(AIndex: Integer; const AValue: boolean); 


begin
  If (FAttachments=AValue) then exit;
  FAttachments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLinkTitleNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitleNoMenu=AValue) then exit;
  FLinkTitleNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLinkTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle=AValue) then exit;
  FLinkTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLinkTitle2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkTitle2=AValue) then exit;
  FLinkTitle2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataSocialItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataSocialItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataSocialItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_solutionsItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_solutionsItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_solutionsItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetSolutionId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FSolutionId=AValue) then exit;
  FSolutionId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetSolutionTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSolutionTitle=AValue) then exit;
  FSolutionTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetSolutionDescription(AIndex: Integer; const AValue: string); 


begin
  If (FSolutionDescription=AValue) then exit;
  FSolutionDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetSolutionHash(AIndex: Integer; const AValue: string); 


begin
  If (FSolutionHash=AValue) then exit;
  FSolutionHash:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetComputedStatus(AIndex: Integer; const AValue: string); 


begin
  If (FComputedStatus=AValue) then exit;
  FComputedStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_solutionsItem.SetComputedQuota(AIndex: Integer; const AValue: string); 


begin
  If (FComputedQuota=AValue) then exit;
  FComputedQuota:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataOData__x005f_catalogs_x002f_solutionsItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_solutionsItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_solutionsItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataStyle_x0020_LibraryItem
  --------------------------------------------------------------------}


Class Function TSP_DataStyle_x0020_LibraryItem.ObjectRestKind : String; 

begin
  Result:='Style_x0020_LibraryItem';
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetTemplateUrl(AIndex: Integer; const AValue: string); 


begin
  If (FTemplateUrl=AValue) then exit;
  FTemplateUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.Setxd_ProgID(AIndex: Integer; const AValue: string); 


begin
  If (Fxd_ProgID=AValue) then exit;
  Fxd_ProgID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.Setxd_Signature(AIndex: Integer; const AValue: boolean); 


begin
  If (Fxd_Signature=AValue) then exit;
  Fxd_Signature:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetCombine(AIndex: Integer; const AValue: string); 


begin
  If (FCombine=AValue) then exit;
  FCombine:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataStyle_x0020_LibraryItem.SetRepairDocument(AIndex: Integer; const AValue: string); 


begin
  If (FRepairDocument=AValue) then exit;
  FRepairDocument:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataStyle_x0020_LibraryItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataStyle_x0020_LibraryItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataStyle_x0020_LibraryItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_themeItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_themeItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_themeItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_themeItem.SetThemeDescription(AIndex: Integer; const AValue: string); 


begin
  If (FThemeDescription=AValue) then exit;
  FThemeDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Function TSP_DataOData__x005f_catalogs_x002f_themeItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_themeItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_themeItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSP_DataOData__x005f_catalogs_x002f_wpItem
  --------------------------------------------------------------------}


Class Function TSP_DataOData__x005f_catalogs_x002f_wpItem.ObjectRestKind : String; 

begin
  Result:='OData__x005f_catalogs_x002f_wpItem';
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetContentTypeId(AIndex: Integer; const AValue: string); 


begin
  If (FContentTypeId=AValue) then exit;
  FContentTypeId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetCreated(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated=AValue) then exit;
  FCreated:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAuthorId=AValue) then exit;
  FAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetModified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FModified=AValue) then exit;
  FModified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FEditorId=AValue) then exit;
  FEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__HasCopyDestinations(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__HasCopyDestinations=AValue) then exit;
  FOData__HasCopyDestinations:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__CopySource(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CopySource=AValue) then exit;
  FOData__CopySource:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__ModerationStatus(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__ModerationStatus=AValue) then exit;
  FOData__ModerationStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__ModerationComments(AIndex: Integer; const AValue: string); 


begin
  If (FOData__ModerationComments=AValue) then exit;
  FOData__ModerationComments:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetFileRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileRef=AValue) then exit;
  FFileRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetFileDirRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileDirRef=AValue) then exit;
  FFileDirRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetLast_x0020_Modified(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FLast_x0020_Modified=AValue) then exit;
  FLast_x0020_Modified:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetCreated_x0020_Date(AIndex: Integer; const AValue: TDateTime); 


begin
  If (FCreated_x0020_Date=AValue) then exit;
  FCreated_x0020_Date:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetFSObjType(AIndex: Integer; const AValue: TInt32); 


begin
  If (FFSObjType=AValue) then exit;
  FFSObjType:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetPermMask(AIndex: Integer; const AValue: string); 


begin
  If (FPermMask=AValue) then exit;
  FPermMask:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetCheckoutUserId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FCheckoutUserId=AValue) then exit;
  FCheckoutUserId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetFileLeafRef(AIndex: Integer; const AValue: string); 


begin
  If (FFileLeafRef=AValue) then exit;
  FFileLeafRef:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetUniqueId(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FUniqueId=AValue) then exit;
  FUniqueId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__CheckinComment(AIndex: Integer; const AValue: string); 


begin
  If (FOData__CheckinComment=AValue) then exit;
  FOData__CheckinComment:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetLinkCheckedOutTitle(AIndex: Integer; const AValue: string); 


begin
  If (FLinkCheckedOutTitle=AValue) then exit;
  FLinkCheckedOutTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetModified_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FModified_x0020_By=AValue) then exit;
  FModified_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetCreated_x0020_By(AIndex: Integer; const AValue: string); 


begin
  If (FCreated_x0020_By=AValue) then exit;
  FCreated_x0020_By:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetFile_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FFile_x0020_Type=AValue) then exit;
  FFile_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetHTML_x0020_File_x0020_Type(AIndex: Integer; const AValue: string); 


begin
  If (FHTML_x0020_File_x0020_Type=AValue) then exit;
  FHTML_x0020_File_x0020_Type:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__SourceUrl(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SourceUrl=AValue) then exit;
  FOData__SourceUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__SharedFileIndex(AIndex: Integer; const AValue: string); 


begin
  If (FOData__SharedFileIndex=AValue) then exit;
  FOData__SharedFileIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__EditMenuTableStart(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart=AValue) then exit;
  FOData__EditMenuTableStart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__EditMenuTableStart2(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableStart2=AValue) then exit;
  FOData__EditMenuTableStart2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__EditMenuTableEnd(AIndex: Integer; const AValue: string); 


begin
  If (FOData__EditMenuTableEnd=AValue) then exit;
  FOData__EditMenuTableEnd:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetLinkFilenameNoMenu(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilenameNoMenu=AValue) then exit;
  FLinkFilenameNoMenu:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetLinkFilename(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename=AValue) then exit;
  FLinkFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetLinkFilename2(AIndex: Integer; const AValue: string); 


begin
  If (FLinkFilename2=AValue) then exit;
  FLinkFilename2:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetDocIcon(AIndex: Integer; const AValue: string); 


begin
  If (FDocIcon=AValue) then exit;
  FDocIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetServerUrl(AIndex: Integer; const AValue: string); 


begin
  If (FServerUrl=AValue) then exit;
  FServerUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetEncodedAbsUrl(AIndex: Integer; const AValue: string); 


begin
  If (FEncodedAbsUrl=AValue) then exit;
  FEncodedAbsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetBaseName(AIndex: Integer; const AValue: string); 


begin
  If (FBaseName=AValue) then exit;
  FBaseName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetFileSizeDisplay(AIndex: Integer; const AValue: string); 


begin
  If (FFileSizeDisplay=AValue) then exit;
  FFileSizeDisplay:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__Level(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__Level=AValue) then exit;
  FOData__Level:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__IsCurrentVersion(AIndex: Integer; const AValue: boolean); 


begin
  If (FOData__IsCurrentVersion=AValue) then exit;
  FOData__IsCurrentVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetAppAuthorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppAuthorId=AValue) then exit;
  FAppAuthorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetAppEditorId(AIndex: Integer; const AValue: TInt32); 


begin
  If (FAppEditorId=AValue) then exit;
  FAppEditorId:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetSelectTitle(AIndex: Integer; const AValue: string); 


begin
  If (FSelectTitle=AValue) then exit;
  FSelectTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetSelectFilename(AIndex: Integer; const AValue: string); 


begin
  If (FSelectFilename=AValue) then exit;
  FSelectFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetEdit(AIndex: Integer; const AValue: string); 


begin
  If (FEdit=AValue) then exit;
  FEdit:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.Setowshiddenversion(AIndex: Integer; const AValue: TInt32); 


begin
  If (Fowshiddenversion=AValue) then exit;
  Fowshiddenversion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__UIVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FOData__UIVersion=AValue) then exit;
  FOData__UIVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOData__UIVersionString(AIndex: Integer; const AValue: string); 


begin
  If (FOData__UIVersionString=AValue) then exit;
  FOData__UIVersionString:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetInstanceID(AIndex: Integer; const AValue: TInt32); 


begin
  If (FInstanceID=AValue) then exit;
  FInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetOrder(AIndex: Integer; const AValue: Double); 


begin
  If (FOrder=AValue) then exit;
  FOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetGUID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FGUID=AValue) then exit;
  FGUID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWorkflowVersion(AIndex: Integer; const AValue: TInt32); 


begin
  If (FWorkflowVersion=AValue) then exit;
  FWorkflowVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWorkflowInstanceID(AIndex: Integer; const AValue: TGUIDString); 


begin
  If (FWorkflowInstanceID=AValue) then exit;
  FWorkflowInstanceID:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetTitle(AIndex: Integer; const AValue: string); 


begin
  If (FTitle=AValue) then exit;
  FTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWebPartDescription(AIndex: Integer; const AValue: string); 


begin
  If (FWebPartDescription=AValue) then exit;
  FWebPartDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWebPartAssembly(AIndex: Integer; const AValue: string); 


begin
  If (FWebPartAssembly=AValue) then exit;
  FWebPartAssembly:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWebPartTypeName(AIndex: Integer; const AValue: string); 


begin
  If (FWebPartTypeName=AValue) then exit;
  FWebPartTypeName:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWebPartPartImageLarge(AIndex: Integer; const AValue: string); 


begin
  If (FWebPartPartImageLarge=AValue) then exit;
  FWebPartPartImageLarge:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetLinkWebPart(AIndex: Integer; const AValue: string); 


begin
  If (FLinkWebPart=AValue) then exit;
  FLinkWebPart:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetWebPartIcon(AIndex: Integer; const AValue: string); 


begin
  If (FWebPartIcon=AValue) then exit;
  FWebPartIcon:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetGroup(AIndex: Integer; const AValue: string); 


begin
  If (FGroup=AValue) then exit;
  FGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;


Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetQuickAddGroups(AIndex: Integer; const AValue: TStringArray); 


begin
  If (FQuickAddGroups=AValue) then exit;
  FQuickAddGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;

{$IFDEF VER2_6}

Procedure TSP_DataOData__x005f_catalogs_x002f_wpItem.SetArrayLength(const AName: String; ALength: Longint); 

begin
  Case aName of
  'quickaddgroups' : SetLength(FQuickAddGroups,aLength);
  else
    inherited SetArrayLength(aName,ALength);
  end;
end;
{$ENDIF VER2_6}


Function TSP_DataOData__x005f_catalogs_x002f_wpItem.Author(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Author', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_wpItem.Editor(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'Editor', TSP_DataUserInfoItem));
end;


Function TSP_DataOData__x005f_catalogs_x002f_wpItem.CheckoutUser(AService: TODataService) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetContainedSingleTon(AService,'CheckoutUser', TSP_DataUserInfoItem));
end;


{ --------------------------------------------------------------------
  TSPApiData
  --------------------------------------------------------------------}


Class Function TSPApiData.ObjectRestKind : String; 

begin
  Result:='ApiData';
end;

Function TSPApiData.CreateNewApps : TSPAppsEntitySet; 

begin
  Result:=TSPAppsEntitySet(CreateEntitySet(TSPAppsEntitySet));
end;


Function TSPApiData.GetApps : TSPAppsEntitySet; 


begin
  If Not Assigned(FApps) then
    FApps:=TSPAppsEntitySet(CreateEntitySet(TSPAppsEntitySet));
  Result:=FApps;
end;

Function TSPApiData.CreateNewFiles : TSPFilesEntitySet; 

begin
  Result:=TSPFilesEntitySet(CreateEntitySet(TSPFilesEntitySet));
end;


Function TSPApiData.GetFiles : TSPFilesEntitySet; 


begin
  If Not Assigned(FFiles) then
    FFiles:=TSPFilesEntitySet(CreateEntitySet(TSPFilesEntitySet));
  Result:=FFiles;
end;

Function TSPApiData.CreateNewLists : TSPListsEntitySet; 

begin
  Result:=TSPListsEntitySet(CreateEntitySet(TSPListsEntitySet));
end;


Function TSPApiData.GetLists : TSPListsEntitySet; 


begin
  If Not Assigned(FLists) then
    FLists:=TSPListsEntitySet(CreateEntitySet(TSPListsEntitySet));
  Result:=FLists;
end;

Function TSPApiData.CreateNewMes : TSPMesEntitySet; 

begin
  Result:=TSPMesEntitySet(CreateEntitySet(TSPMesEntitySet));
end;


Function TSPApiData.GetMes : TSPMesEntitySet; 


begin
  If Not Assigned(FMes) then
    FMes:=TSPMesEntitySet(CreateEntitySet(TSPMesEntitySet));
  Result:=FMes;
end;

Function TSPApiData.CreateNewSites : TSPSitesEntitySet; 

begin
  Result:=TSPSitesEntitySet(CreateEntitySet(TSPSitesEntitySet));
end;


Function TSPApiData.GetSites : TSPSitesEntitySet; 


begin
  If Not Assigned(FSites) then
    FSites:=TSPSitesEntitySet(CreateEntitySet(TSPSitesEntitySet));
  Result:=FSites;
end;

Function TSPApiData.CreateNewWebs : TSPWebsEntitySet; 

begin
  Result:=TSPWebsEntitySet(CreateEntitySet(TSPWebsEntitySet));
end;


Function TSPApiData.GetWebs : TSPWebsEntitySet; 


begin
  If Not Assigned(FWebs) then
    FWebs:=TSPWebsEntitySet(CreateEntitySet(TSPWebsEntitySet));
  Result:=FWebs;
end;

Function TSPApiData.CreateNewAppStores : TSPAppStoresEntitySet; 

begin
  Result:=TSPAppStoresEntitySet(CreateEntitySet(TSPAppStoresEntitySet));
end;


Function TSPApiData.GetAppStores : TSPAppStoresEntitySet; 


begin
  If Not Assigned(FAppStores) then
    FAppStores:=TSPAppStoresEntitySet(CreateEntitySet(TSPAppStoresEntitySet));
  Result:=FAppStores;
end;

Function TSPApiData.CreateNewConnectionSettingss : TSPConnectionSettingssEntitySet; 

begin
  Result:=TSPConnectionSettingssEntitySet(CreateEntitySet(TSPConnectionSettingssEntitySet));
end;


Function TSPApiData.GetConnectionSettingss : TSPConnectionSettingssEntitySet; 


begin
  If Not Assigned(FConnectionSettingss) then
    FConnectionSettingss:=TSPConnectionSettingssEntitySet(CreateEntitySet(TSPConnectionSettingssEntitySet));
  Result:=FConnectionSettingss;
end;

Function TSPApiData.CreateNewTargetApplications : TSPTargetApplicationsEntitySet; 

begin
  Result:=TSPTargetApplicationsEntitySet(CreateEntitySet(TSPTargetApplicationsEntitySet));
end;


Function TSPApiData.GetTargetApplications : TSPTargetApplicationsEntitySet; 


begin
  If Not Assigned(FTargetApplications) then
    FTargetApplications:=TSPTargetApplicationsEntitySet(CreateEntitySet(TSPTargetApplicationsEntitySet));
  Result:=FTargetApplications;
end;

Function TSPApiData.CreateNewTargetApplicationFields : TSPTargetApplicationFieldsEntitySet; 

begin
  Result:=TSPTargetApplicationFieldsEntitySet(CreateEntitySet(TSPTargetApplicationFieldsEntitySet));
end;


Function TSPApiData.GetTargetApplicationFields : TSPTargetApplicationFieldsEntitySet; 


begin
  If Not Assigned(FTargetApplicationFields) then
    FTargetApplicationFields:=TSPTargetApplicationFieldsEntitySet(CreateEntitySet(TSPTargetApplicationFieldsEntitySet));
  Result:=FTargetApplicationFields;
end;

Function TSPApiData.CreateNewReputations : TSPReputationsEntitySet; 

begin
  Result:=TSPReputationsEntitySet(CreateEntitySet(TSPReputationsEntitySet));
end;


Function TSPApiData.GetReputations : TSPReputationsEntitySet; 


begin
  If Not Assigned(FReputations) then
    FReputations:=TSPReputationsEntitySet(CreateEntitySet(TSPReputationsEntitySet));
  Result:=FReputations;
end;

Function TSPApiData.CreateNewSearchServices : TSPSearchServicesEntitySet; 

begin
  Result:=TSPSearchServicesEntitySet(CreateEntitySet(TSPSearchServicesEntitySet));
end;


Function TSPApiData.GetSearchServices : TSPSearchServicesEntitySet; 


begin
  If Not Assigned(FSearchServices) then
    FSearchServices:=TSPSearchServicesEntitySet(CreateEntitySet(TSPSearchServicesEntitySet));
  Result:=FSearchServices;
end;

Function TSPApiData.CreateNewApps1 : TSPApps1EntitySet; 

begin
  Result:=TSPApps1EntitySet(CreateEntitySet(TSPApps1EntitySet));
end;


Function TSPApiData.GetApps1 : TSPApps1EntitySet; 


begin
  If Not Assigned(FApps1) then
    FApps1:=TSPApps1EntitySet(CreateEntitySet(TSPApps1EntitySet));
  Result:=FApps1;
end;

Function TSPApiData.CreateNewPointPublishingAdmins : TSPPointPublishingAdminsEntitySet; 

begin
  Result:=TSPPointPublishingAdminsEntitySet(CreateEntitySet(TSPPointPublishingAdminsEntitySet));
end;


Function TSPApiData.GetPointPublishingAdmins : TSPPointPublishingAdminsEntitySet; 


begin
  If Not Assigned(FPointPublishingAdmins) then
    FPointPublishingAdmins:=TSPPointPublishingAdminsEntitySet(CreateEntitySet(TSPPointPublishingAdminsEntitySet));
  Result:=FPointPublishingAdmins;
end;

Function TSPApiData.CreateNewDDIAdapters : TSPDDIAdaptersEntitySet; 

begin
  Result:=TSPDDIAdaptersEntitySet(CreateEntitySet(TSPDDIAdaptersEntitySet));
end;


Function TSPApiData.GetDDIAdapters : TSPDDIAdaptersEntitySet; 


begin
  If Not Assigned(FDDIAdapters) then
    FDDIAdapters:=TSPDDIAdaptersEntitySet(CreateEntitySet(TSPDDIAdaptersEntitySet));
  Result:=FDDIAdapters;
end;

Function TSPApiData.CreateNewSPOTenantWebTemplateCollections : TSPSPOTenantWebTemplateCollectionsEntitySet; 

begin
  Result:=TSPSPOTenantWebTemplateCollectionsEntitySet(CreateEntitySet(TSPSPOTenantWebTemplateCollectionsEntitySet));
end;


Function TSPApiData.GetSPOTenantWebTemplateCollections : TSPSPOTenantWebTemplateCollectionsEntitySet; 


begin
  If Not Assigned(FSPOTenantWebTemplateCollections) then
    FSPOTenantWebTemplateCollections:=TSPSPOTenantWebTemplateCollectionsEntitySet(CreateEntitySet(TSPSPOTenantWebTemplateCollectionsEntitySet));
  Result:=FSPOTenantWebTemplateCollections;
end;

Function TSPApiData.CreateNewExternalUsers : TSPExternalUsersEntitySet; 

begin
  Result:=TSPExternalUsersEntitySet(CreateEntitySet(TSPExternalUsersEntitySet));
end;


Function TSPApiData.GetExternalUsers : TSPExternalUsersEntitySet; 


begin
  If Not Assigned(FExternalUsers) then
    FExternalUsers:=TSPExternalUsersEntitySet(CreateEntitySet(TSPExternalUsersEntitySet));
  Result:=FExternalUsers;
end;

Function TSPApiData.CreateNewGetExternalUsersResultss : TSPGetExternalUsersResultssEntitySet; 

begin
  Result:=TSPGetExternalUsersResultssEntitySet(CreateEntitySet(TSPGetExternalUsersResultssEntitySet));
end;


Function TSPApiData.GetGetExternalUsersResultss : TSPGetExternalUsersResultssEntitySet; 


begin
  If Not Assigned(FGetExternalUsersResultss) then
    FGetExternalUsersResultss:=TSPGetExternalUsersResultssEntitySet(CreateEntitySet(TSPGetExternalUsersResultssEntitySet));
  Result:=FGetExternalUsersResultss;
end;

Function TSPApiData.CreateNewOffice365Tenants : TSPOffice365TenantsEntitySet; 

begin
  Result:=TSPOffice365TenantsEntitySet(CreateEntitySet(TSPOffice365TenantsEntitySet));
end;


Function TSPApiData.GetOffice365Tenants : TSPOffice365TenantsEntitySet; 


begin
  If Not Assigned(FOffice365Tenants) then
    FOffice365Tenants:=TSPOffice365TenantsEntitySet(CreateEntitySet(TSPOffice365TenantsEntitySet));
  Result:=FOffice365Tenants;
end;

Function TSPApiData.CreateNewRemoveExternalUsersResultss : TSPRemoveExternalUsersResultssEntitySet; 

begin
  Result:=TSPRemoveExternalUsersResultssEntitySet(CreateEntitySet(TSPRemoveExternalUsersResultssEntitySet));
end;


Function TSPApiData.GetRemoveExternalUsersResultss : TSPRemoveExternalUsersResultssEntitySet; 


begin
  If Not Assigned(FRemoveExternalUsersResultss) then
    FRemoveExternalUsersResultss:=TSPRemoveExternalUsersResultssEntitySet(CreateEntitySet(TSPRemoveExternalUsersResultssEntitySet));
  Result:=FRemoveExternalUsersResultss;
end;

Function TSPApiData.CreateNewFeatureDefinitions : TSPFeatureDefinitionsEntitySet; 

begin
  Result:=TSPFeatureDefinitionsEntitySet(CreateEntitySet(TSPFeatureDefinitionsEntitySet));
end;


Function TSPApiData.GetFeatureDefinitions : TSPFeatureDefinitionsEntitySet; 


begin
  If Not Assigned(FFeatureDefinitions) then
    FFeatureDefinitions:=TSPFeatureDefinitionsEntitySet(CreateEntitySet(TSPFeatureDefinitionsEntitySet));
  Result:=FFeatureDefinitions;
end;

Function TSPApiData.CreateNewSPAnalyticsUsageServices : TSPSPAnalyticsUsageServicesEntitySet; 

begin
  Result:=TSPSPAnalyticsUsageServicesEntitySet(CreateEntitySet(TSPSPAnalyticsUsageServicesEntitySet));
end;


Function TSPApiData.GetSPAnalyticsUsageServices : TSPSPAnalyticsUsageServicesEntitySet; 


begin
  If Not Assigned(FSPAnalyticsUsageServices) then
    FSPAnalyticsUsageServices:=TSPSPAnalyticsUsageServicesEntitySet(CreateEntitySet(TSPSPAnalyticsUsageServicesEntitySet));
  Result:=FSPAnalyticsUsageServices;
end;

Function TSPApiData.CreateNewSPAppStateQueryJobDefinitions : TSPSPAppStateQueryJobDefinitionsEntitySet; 

begin
  Result:=TSPSPAppStateQueryJobDefinitionsEntitySet(CreateEntitySet(TSPSPAppStateQueryJobDefinitionsEntitySet));
end;


Function TSPApiData.GetSPAppStateQueryJobDefinitions : TSPSPAppStateQueryJobDefinitionsEntitySet; 


begin
  If Not Assigned(FSPAppStateQueryJobDefinitions) then
    FSPAppStateQueryJobDefinitions:=TSPSPAppStateQueryJobDefinitionsEntitySet(CreateEntitySet(TSPSPAppStateQueryJobDefinitionsEntitySet));
  Result:=FSPAppStateQueryJobDefinitions;
end;

Function TSPApiData.CreateNewSPFarms : TSPSPFarmsEntitySet; 

begin
  Result:=TSPSPFarmsEntitySet(CreateEntitySet(TSPSPFarmsEntitySet));
end;


Function TSPApiData.GetSPFarms : TSPSPFarmsEntitySet; 


begin
  If Not Assigned(FSPFarms) then
    FSPFarms:=TSPSPFarmsEntitySet(CreateEntitySet(TSPSPFarmsEntitySet));
  Result:=FSPFarms;
end;

Function TSPApiData.CreateNewSPTenantAppInstanceDatas : TSPSPTenantAppInstanceDatasEntitySet; 

begin
  Result:=TSPSPTenantAppInstanceDatasEntitySet(CreateEntitySet(TSPSPTenantAppInstanceDatasEntitySet));
end;


Function TSPApiData.GetSPTenantAppInstanceDatas : TSPSPTenantAppInstanceDatasEntitySet; 


begin
  If Not Assigned(FSPTenantAppInstanceDatas) then
    FSPTenantAppInstanceDatas:=TSPSPTenantAppInstanceDatasEntitySet(CreateEntitySet(TSPSPTenantAppInstanceDatasEntitySet));
  Result:=FSPTenantAppInstanceDatas;
end;

Function TSPApiData.CreateNewSPWebApplications : TSPSPWebApplicationsEntitySet; 

begin
  Result:=TSPSPWebApplicationsEntitySet(CreateEntitySet(TSPSPWebApplicationsEntitySet));
end;


Function TSPApiData.GetSPWebApplications : TSPSPWebApplicationsEntitySet; 


begin
  If Not Assigned(FSPWebApplications) then
    FSPWebApplications:=TSPSPWebApplicationsEntitySet(CreateEntitySet(TSPSPWebApplicationsEntitySet));
  Result:=FSPWebApplications;
end;

Function TSPApiData.CreateNewSPWebServices : TSPSPWebServicesEntitySet; 

begin
  Result:=TSPSPWebServicesEntitySet(CreateEntitySet(TSPSPWebServicesEntitySet));
end;


Function TSPApiData.GetSPWebServices : TSPSPWebServicesEntitySet; 


begin
  If Not Assigned(FSPWebServices) then
    FSPWebServices:=TSPSPWebServicesEntitySet(CreateEntitySet(TSPSPWebServicesEntitySet));
  Result:=FSPWebServices;
end;

Function TSPApiData.CreateNewSPAppPrincipalInfos : TSPSPAppPrincipalInfosEntitySet; 

begin
  Result:=TSPSPAppPrincipalInfosEntitySet(CreateEntitySet(TSPSPAppPrincipalInfosEntitySet));
end;


Function TSPApiData.GetSPAppPrincipalInfos : TSPSPAppPrincipalInfosEntitySet; 


begin
  If Not Assigned(FSPAppPrincipalInfos) then
    FSPAppPrincipalInfos:=TSPSPAppPrincipalInfosEntitySet(CreateEntitySet(TSPSPAppPrincipalInfosEntitySet));
  Result:=FSPAppPrincipalInfos;
end;

Function TSPApiData.CreateNewDocumentCrawlLogs : TSPDocumentCrawlLogsEntitySet; 

begin
  Result:=TSPDocumentCrawlLogsEntitySet(CreateEntitySet(TSPDocumentCrawlLogsEntitySet));
end;


Function TSPApiData.GetDocumentCrawlLogs : TSPDocumentCrawlLogsEntitySet; 


begin
  If Not Assigned(FDocumentCrawlLogs) then
    FDocumentCrawlLogs:=TSPDocumentCrawlLogsEntitySet(CreateEntitySet(TSPDocumentCrawlLogsEntitySet));
  Result:=FDocumentCrawlLogs;
end;

Function TSPApiData.CreateNewSignalStores : TSPSignalStoresEntitySet; 

begin
  Result:=TSPSignalStoresEntitySet(CreateEntitySet(TSPSignalStoresEntitySet));
end;


Function TSPApiData.GetSignalStores : TSPSignalStoresEntitySet; 


begin
  If Not Assigned(FSignalStores) then
    FSignalStores:=TSPSignalStoresEntitySet(CreateEntitySet(TSPSignalStoresEntitySet));
  Result:=FSignalStores;
end;

Function TSPApiData.CreateNewQueryPersonalizationDatas : TSPQueryPersonalizationDatasEntitySet; 

begin
  Result:=TSPQueryPersonalizationDatasEntitySet(CreateEntitySet(TSPQueryPersonalizationDatasEntitySet));
end;


Function TSPApiData.GetQueryPersonalizationDatas : TSPQueryPersonalizationDatasEntitySet; 


begin
  If Not Assigned(FQueryPersonalizationDatas) then
    FQueryPersonalizationDatas:=TSPQueryPersonalizationDatasEntitySet(CreateEntitySet(TSPQueryPersonalizationDatasEntitySet));
  Result:=FQueryPersonalizationDatas;
end;

Function TSPApiData.CreateNewRankingLabelings : TSPRankingLabelingsEntitySet; 

begin
  Result:=TSPRankingLabelingsEntitySet(CreateEntitySet(TSPRankingLabelingsEntitySet));
end;


Function TSPApiData.GetRankingLabelings : TSPRankingLabelingsEntitySet; 


begin
  If Not Assigned(FRankingLabelings) then
    FRankingLabelings:=TSPRankingLabelingsEntitySet(CreateEntitySet(TSPRankingLabelingsEntitySet));
  Result:=FRankingLabelings;
end;

Function TSPApiData.CreateNewReorderingRuleCollections : TSPReorderingRuleCollectionsEntitySet; 

begin
  Result:=TSPReorderingRuleCollectionsEntitySet(CreateEntitySet(TSPReorderingRuleCollectionsEntitySet));
end;


Function TSPApiData.GetReorderingRuleCollections : TSPReorderingRuleCollectionsEntitySet; 


begin
  If Not Assigned(FReorderingRuleCollections) then
    FReorderingRuleCollections:=TSPReorderingRuleCollectionsEntitySet(CreateEntitySet(TSPReorderingRuleCollectionsEntitySet));
  Result:=FReorderingRuleCollections;
end;

Function TSPApiData.CreateNewSortCollections : TSPSortCollectionsEntitySet; 

begin
  Result:=TSPSortCollectionsEntitySet(CreateEntitySet(TSPSortCollectionsEntitySet));
end;


Function TSPApiData.GetSortCollections : TSPSortCollectionsEntitySet; 


begin
  If Not Assigned(FSortCollections) then
    FSortCollections:=TSPSortCollectionsEntitySet(CreateEntitySet(TSPSortCollectionsEntitySet));
  Result:=FSortCollections;
end;

Function TSPApiData.CreateNewStringCollections : TSPStringCollectionsEntitySet; 

begin
  Result:=TSPStringCollectionsEntitySet(CreateEntitySet(TSPStringCollectionsEntitySet));
end;


Function TSPApiData.GetStringCollections : TSPStringCollectionsEntitySet; 


begin
  If Not Assigned(FStringCollections) then
    FStringCollections:=TSPStringCollectionsEntitySet(CreateEntitySet(TSPStringCollectionsEntitySet));
  Result:=FStringCollections;
end;

Function TSPApiData.CreateNewSPFlights : TSPSPFlightsEntitySet; 

begin
  Result:=TSPSPFlightsEntitySet(CreateEntitySet(TSPSPFlightsEntitySet));
end;


Function TSPApiData.GetSPFlights : TSPSPFlightsEntitySet; 


begin
  If Not Assigned(FSPFlights) then
    FSPFlights:=TSPSPFlightsEntitySet(CreateEntitySet(TSPSPFlightsEntitySet));
  Result:=FSPFlights;
end;

Function TSPApiData.CreateNewSPCorporateCuratedGallerySettingsBases : TSPSPCorporateCuratedGallerySettingsBasesEntitySet; 

begin
  Result:=TSPSPCorporateCuratedGallerySettingsBasesEntitySet(CreateEntitySet(TSPSPCorporateCuratedGallerySettingsBasesEntitySet));
end;


Function TSPApiData.GetSPCorporateCuratedGallerySettingsBases : TSPSPCorporateCuratedGallerySettingsBasesEntitySet; 


begin
  If Not Assigned(FSPCorporateCuratedGallerySettingsBases) then
    FSPCorporateCuratedGallerySettingsBases:=TSPSPCorporateCuratedGallerySettingsBasesEntitySet(CreateEntitySet(TSPSPCorporateCuratedGallerySettingsBasesEntitySet));
  Result:=FSPCorporateCuratedGallerySettingsBases;
end;

Function TSPApiData.CreateNewSPCorporateCuratedGallerySettingsFactorys : TSPSPCorporateCuratedGallerySettingsFactorysEntitySet; 

begin
  Result:=TSPSPCorporateCuratedGallerySettingsFactorysEntitySet(CreateEntitySet(TSPSPCorporateCuratedGallerySettingsFactorysEntitySet));
end;


Function TSPApiData.GetSPCorporateCuratedGallerySettingsFactorys : TSPSPCorporateCuratedGallerySettingsFactorysEntitySet; 


begin
  If Not Assigned(FSPCorporateCuratedGallerySettingsFactorys) then
    FSPCorporateCuratedGallerySettingsFactorys:=TSPSPCorporateCuratedGallerySettingsFactorysEntitySet(CreateEntitySet(TSPSPCorporateCuratedGallerySettingsFactorysEntitySet));
  Result:=FSPCorporateCuratedGallerySettingsFactorys;
end;

Function TSPApiData.CreateNewSPMarketplaceSettingss : TSPSPMarketplaceSettingssEntitySet; 

begin
  Result:=TSPSPMarketplaceSettingssEntitySet(CreateEntitySet(TSPSPMarketplaceSettingssEntitySet));
end;


Function TSPApiData.GetSPMarketplaceSettingss : TSPSPMarketplaceSettingssEntitySet; 


begin
  If Not Assigned(FSPMarketplaceSettingss) then
    FSPMarketplaceSettingss:=TSPSPMarketplaceSettingssEntitySet(CreateEntitySet(TSPSPMarketplaceSettingssEntitySet));
  Result:=FSPMarketplaceSettingss;
end;

Function TSPApiData.CreateNewNavigationServiceRests : TSPNavigationServiceRestsEntitySet; 

begin
  Result:=TSPNavigationServiceRestsEntitySet(CreateEntitySet(TSPNavigationServiceRestsEntitySet));
end;


Function TSPApiData.GetNavigationServiceRests : TSPNavigationServiceRestsEntitySet; 


begin
  If Not Assigned(FNavigationServiceRests) then
    FNavigationServiceRests:=TSPNavigationServiceRestsEntitySet(CreateEntitySet(TSPNavigationServiceRestsEntitySet));
  Result:=FNavigationServiceRests;
end;

Function TSPApiData.CreateNewAppDetailss : TSPAppDetailssEntitySet; 

begin
  Result:=TSPAppDetailssEntitySet(CreateEntitySet(TSPAppDetailssEntitySet));
end;


Function TSPApiData.GetAppDetailss : TSPAppDetailssEntitySet; 


begin
  If Not Assigned(FAppDetailss) then
    FAppDetailss:=TSPAppDetailssEntitySet(CreateEntitySet(TSPAppDetailssEntitySet));
  Result:=FAppDetailss;
end;

Function TSPApiData.CreateNewAppIconInfos : TSPAppIconInfosEntitySet; 

begin
  Result:=TSPAppIconInfosEntitySet(CreateEntitySet(TSPAppIconInfosEntitySet));
end;


Function TSPApiData.GetAppIconInfos : TSPAppIconInfosEntitySet; 


begin
  If Not Assigned(FAppIconInfos) then
    FAppIconInfos:=TSPAppIconInfosEntitySet(CreateEntitySet(TSPAppIconInfosEntitySet));
  Result:=FAppIconInfos;
end;

Function TSPApiData.CreateNewCollaborationMailboxs : TSPCollaborationMailboxsEntitySet; 

begin
  Result:=TSPCollaborationMailboxsEntitySet(CreateEntitySet(TSPCollaborationMailboxsEntitySet));
end;


Function TSPApiData.GetCollaborationMailboxs : TSPCollaborationMailboxsEntitySet; 


begin
  If Not Assigned(FCollaborationMailboxs) then
    FCollaborationMailboxs:=TSPCollaborationMailboxsEntitySet(CreateEntitySet(TSPCollaborationMailboxsEntitySet));
  Result:=FCollaborationMailboxs;
end;

Function TSPApiData.CreateNewCommunityModerations : TSPCommunityModerationsEntitySet; 

begin
  Result:=TSPCommunityModerationsEntitySet(CreateEntitySet(TSPCommunityModerationsEntitySet));
end;


Function TSPApiData.GetCommunityModerations : TSPCommunityModerationsEntitySet; 


begin
  If Not Assigned(FCommunityModerations) then
    FCommunityModerations:=TSPCommunityModerationsEntitySet(CreateEntitySet(TSPCommunityModerationsEntitySet));
  Result:=FCommunityModerations;
end;

Function TSPApiData.CreateNewMySiteRecommendationss : TSPMySiteRecommendationssEntitySet; 

begin
  Result:=TSPMySiteRecommendationssEntitySet(CreateEntitySet(TSPMySiteRecommendationssEntitySet));
end;


Function TSPApiData.GetMySiteRecommendationss : TSPMySiteRecommendationssEntitySet; 


begin
  If Not Assigned(FMySiteRecommendationss) then
    FMySiteRecommendationss:=TSPMySiteRecommendationssEntitySet(CreateEntitySet(TSPMySiteRecommendationssEntitySet));
  Result:=FMySiteRecommendationss;
end;

Function TSPApiData.CreateNewDocumentsSharedWithGroups : TSPDocumentsSharedWithGroupsEntitySet; 

begin
  Result:=TSPDocumentsSharedWithGroupsEntitySet(CreateEntitySet(TSPDocumentsSharedWithGroupsEntitySet));
end;


Function TSPApiData.GetDocumentsSharedWithGroups : TSPDocumentsSharedWithGroupsEntitySet; 


begin
  If Not Assigned(FDocumentsSharedWithGroups) then
    FDocumentsSharedWithGroups:=TSPDocumentsSharedWithGroupsEntitySet(CreateEntitySet(TSPDocumentsSharedWithGroupsEntitySet));
  Result:=FDocumentsSharedWithGroups;
end;

Function TSPApiData.CreateNewDocumentsSharedWithMes : TSPDocumentsSharedWithMesEntitySet; 

begin
  Result:=TSPDocumentsSharedWithMesEntitySet(CreateEntitySet(TSPDocumentsSharedWithMesEntitySet));
end;


Function TSPApiData.GetDocumentsSharedWithMes : TSPDocumentsSharedWithMesEntitySet; 


begin
  If Not Assigned(FDocumentsSharedWithMes) then
    FDocumentsSharedWithMes:=TSPDocumentsSharedWithMesEntitySet(CreateEntitySet(TSPDocumentsSharedWithMesEntitySet));
  Result:=FDocumentsSharedWithMes;
end;

Function TSPApiData.CreateNewDocumentsSharedWithPersons : TSPDocumentsSharedWithPersonsEntitySet; 

begin
  Result:=TSPDocumentsSharedWithPersonsEntitySet(CreateEntitySet(TSPDocumentsSharedWithPersonsEntitySet));
end;


Function TSPApiData.GetDocumentsSharedWithPersons : TSPDocumentsSharedWithPersonsEntitySet; 


begin
  If Not Assigned(FDocumentsSharedWithPersons) then
    FDocumentsSharedWithPersons:=TSPDocumentsSharedWithPersonsEntitySet(CreateEntitySet(TSPDocumentsSharedWithPersonsEntitySet));
  Result:=FDocumentsSharedWithPersons;
end;

Function TSPApiData.CreateNewMySiteDismissStatusTexts : TSPMySiteDismissStatusTextsEntitySet; 

begin
  Result:=TSPMySiteDismissStatusTextsEntitySet(CreateEntitySet(TSPMySiteDismissStatusTextsEntitySet));
end;


Function TSPApiData.GetMySiteDismissStatusTexts : TSPMySiteDismissStatusTextsEntitySet; 


begin
  If Not Assigned(FMySiteDismissStatusTexts) then
    FMySiteDismissStatusTexts:=TSPMySiteDismissStatusTextsEntitySet(CreateEntitySet(TSPMySiteDismissStatusTextsEntitySet));
  Result:=FMySiteDismissStatusTexts;
end;

Function TSPApiData.CreateNewMySiteDocumentMoveUtilitys : TSPMySiteDocumentMoveUtilitysEntitySet; 

begin
  Result:=TSPMySiteDocumentMoveUtilitysEntitySet(CreateEntitySet(TSPMySiteDocumentMoveUtilitysEntitySet));
end;


Function TSPApiData.GetMySiteDocumentMoveUtilitys : TSPMySiteDocumentMoveUtilitysEntitySet; 


begin
  If Not Assigned(FMySiteDocumentMoveUtilitys) then
    FMySiteDocumentMoveUtilitys:=TSPMySiteDocumentMoveUtilitysEntitySet(CreateEntitySet(TSPMySiteDocumentMoveUtilitysEntitySet));
  Result:=FMySiteDocumentMoveUtilitys;
end;

Function TSPApiData.CreateNewMySiteLinkss : TSPMySiteLinkssEntitySet; 

begin
  Result:=TSPMySiteLinkssEntitySet(CreateEntitySet(TSPMySiteLinkssEntitySet));
end;


Function TSPApiData.GetMySiteLinkss : TSPMySiteLinkssEntitySet; 


begin
  If Not Assigned(FMySiteLinkss) then
    FMySiteLinkss:=TSPMySiteLinkssEntitySet(CreateEntitySet(TSPMySiteLinkssEntitySet));
  Result:=FMySiteLinkss;
end;

Function TSPApiData.CreateNewPromotedSitess : TSPPromotedSitessEntitySet; 

begin
  Result:=TSPPromotedSitessEntitySet(CreateEntitySet(TSPPromotedSitessEntitySet));
end;


Function TSPApiData.GetPromotedSitess : TSPPromotedSitessEntitySet; 


begin
  If Not Assigned(FPromotedSitess) then
    FPromotedSitess:=TSPPromotedSitessEntitySet(CreateEntitySet(TSPPromotedSitessEntitySet));
  Result:=FPromotedSitess;
end;

Function TSPApiData.CreateNewSharedWithMeDocuments : TSPSharedWithMeDocumentsEntitySet; 

begin
  Result:=TSPSharedWithMeDocumentsEntitySet(CreateEntitySet(TSPSharedWithMeDocumentsEntitySet));
end;


Function TSPApiData.GetSharedWithMeDocuments : TSPSharedWithMeDocumentsEntitySet; 


begin
  If Not Assigned(FSharedWithMeDocuments) then
    FSharedWithMeDocuments:=TSPSharedWithMeDocumentsEntitySet(CreateEntitySet(TSPSharedWithMeDocumentsEntitySet));
  Result:=FSharedWithMeDocuments;
end;

Function TSPApiData.CreateNewRecentDocuments : TSPRecentDocumentsEntitySet; 

begin
  Result:=TSPRecentDocumentsEntitySet(CreateEntitySet(TSPRecentDocumentsEntitySet));
end;


Function TSPApiData.GetRecentDocuments : TSPRecentDocumentsEntitySet; 


begin
  If Not Assigned(FRecentDocuments) then
    FRecentDocuments:=TSPRecentDocumentsEntitySet(CreateEntitySet(TSPRecentDocumentsEntitySet));
  Result:=FRecentDocuments;
end;

Function TSPApiData.CreateNewModuleLinks : TSPModuleLinksEntitySet; 

begin
  Result:=TSPModuleLinksEntitySet(CreateEntitySet(TSPModuleLinksEntitySet));
end;


Function TSPApiData.GetModuleLinks : TSPModuleLinksEntitySet; 


begin
  If Not Assigned(FModuleLinks) then
    FModuleLinks:=TSPModuleLinksEntitySet(CreateEntitySet(TSPModuleLinksEntitySet));
  Result:=FModuleLinks;
end;

Function TSPApiData.CreateNewResourceManifestInformations : TSPResourceManifestInformationsEntitySet; 

begin
  Result:=TSPResourceManifestInformationsEntitySet(CreateEntitySet(TSPResourceManifestInformationsEntitySet));
end;


Function TSPApiData.GetResourceManifestInformations : TSPResourceManifestInformationsEntitySet; 


begin
  If Not Assigned(FResourceManifestInformations) then
    FResourceManifestInformations:=TSPResourceManifestInformationsEntitySet(CreateEntitySet(TSPResourceManifestInformationsEntitySet));
  Result:=FResourceManifestInformations;
end;

Function TSPApiData.CreateNewWacApis : TSPWacApisEntitySet; 

begin
  Result:=TSPWacApisEntitySet(CreateEntitySet(TSPWacApisEntitySet));
end;


Function TSPApiData.GetWacApis : TSPWacApisEntitySet; 


begin
  If Not Assigned(FWacApis) then
    FWacApis:=TSPWacApisEntitySet(CreateEntitySet(TSPWacApisEntitySet));
  Result:=FWacApis;
end;

Function TSPApiData.CreateNewEntityItems : TSPEntityItemsEntitySet; 

begin
  Result:=TSPEntityItemsEntitySet(CreateEntitySet(TSPEntityItemsEntitySet));
end;


Function TSPApiData.GetEntityItems : TSPEntityItemsEntitySet; 


begin
  If Not Assigned(FEntityItems) then
    FEntityItems:=TSPEntityItemsEntitySet(CreateEntitySet(TSPEntityItemsEntitySet));
  Result:=FEntityItems;
end;

Function TSPApiData.CreateNewEntityTypes : TSPEntityTypesEntitySet; 

begin
  Result:=TSPEntityTypesEntitySet(CreateEntitySet(TSPEntityTypesEntitySet));
end;


Function TSPApiData.GetEntityTypes : TSPEntityTypesEntitySet; 


begin
  If Not Assigned(FEntityTypes) then
    FEntityTypes:=TSPEntityTypesEntitySet(CreateEntitySet(TSPEntityTypesEntitySet));
  Result:=FEntityTypes;
end;

Function TSPApiData.CreateNewEntityTypeBases : TSPEntityTypeBasesEntitySet; 

begin
  Result:=TSPEntityTypeBasesEntitySet(CreateEntitySet(TSPEntityTypeBasesEntitySet));
end;


Function TSPApiData.GetEntityTypeBases : TSPEntityTypeBasesEntitySet; 


begin
  If Not Assigned(FEntityTypeBases) then
    FEntityTypeBases:=TSPEntityTypeBasesEntitySet(CreateEntitySet(TSPEntityTypeBasesEntitySet));
  Result:=FEntityTypeBases;
end;

Function TSPApiData.CreateNewExternalEntityTypes : TSPExternalEntityTypesEntitySet; 

begin
  Result:=TSPExternalEntityTypesEntitySet(CreateEntitySet(TSPExternalEntityTypesEntitySet));
end;


Function TSPApiData.GetExternalEntityTypes : TSPExternalEntityTypesEntitySet; 


begin
  If Not Assigned(FExternalEntityTypes) then
    FExternalEntityTypes:=TSPExternalEntityTypesEntitySet(CreateEntitySet(TSPExternalEntityTypesEntitySet));
  Result:=FExternalEntityTypes;
end;

Function TSPApiData.CreateNewFields : TSPFieldsEntitySet; 

begin
  Result:=TSPFieldsEntitySet(CreateEntitySet(TSPFieldsEntitySet));
end;


Function TSPApiData.GetFields : TSPFieldsEntitySet; 


begin
  If Not Assigned(FFields) then
    FFields:=TSPFieldsEntitySet(CreateEntitySet(TSPFieldsEntitySet));
  Result:=FFields;
end;

Function TSPApiData.CreateNewODataStoreContexts : TSPODataStoreContextsEntitySet; 

begin
  Result:=TSPODataStoreContextsEntitySet(CreateEntitySet(TSPODataStoreContextsEntitySet));
end;


Function TSPApiData.GetODataStoreContexts : TSPODataStoreContextsEntitySet; 


begin
  If Not Assigned(FODataStoreContexts) then
    FODataStoreContexts:=TSPODataStoreContextsEntitySet(CreateEntitySet(TSPODataStoreContextsEntitySet));
  Result:=FODataStoreContexts;
end;

Function TSPApiData.CreateNewRequestContexts : TSPRequestContextsEntitySet; 

begin
  Result:=TSPRequestContextsEntitySet(CreateEntitySet(TSPRequestContextsEntitySet));
end;


Function TSPApiData.GetRequestContexts : TSPRequestContextsEntitySet; 


begin
  If Not Assigned(FRequestContexts) then
    FRequestContexts:=TSPRequestContextsEntitySet(CreateEntitySet(TSPRequestContextsEntitySet));
  Result:=FRequestContexts;
end;

Function TSPApiData.CreateNewSqlStoreContexts : TSPSqlStoreContextsEntitySet; 

begin
  Result:=TSPSqlStoreContextsEntitySet(CreateEntitySet(TSPSqlStoreContextsEntitySet));
end;


Function TSPApiData.GetSqlStoreContexts : TSPSqlStoreContextsEntitySet; 


begin
  If Not Assigned(FSqlStoreContexts) then
    FSqlStoreContexts:=TSPSqlStoreContextsEntitySet(CreateEntitySet(TSPSqlStoreContextsEntitySet));
  Result:=FSqlStoreContexts;
end;

Function TSPApiData.CreateNewStoreContextBases : TSPStoreContextBasesEntitySet; 

begin
  Result:=TSPStoreContextBasesEntitySet(CreateEntitySet(TSPStoreContextBasesEntitySet));
end;


Function TSPApiData.GetStoreContextBases : TSPStoreContextBasesEntitySet; 


begin
  If Not Assigned(FStoreContextBases) then
    FStoreContextBases:=TSPStoreContextBasesEntitySet(CreateEntitySet(TSPStoreContextBasesEntitySet));
  Result:=FStoreContextBases;
end;

Function TSPApiData.CreateNewFiles1 : TSPFiles1EntitySet; 

begin
  Result:=TSPFiles1EntitySet(CreateEntitySet(TSPFiles1EntitySet));
end;


Function TSPApiData.GetFiles1 : TSPFiles1EntitySet; 


begin
  If Not Assigned(FFiles1) then
    FFiles1:=TSPFiles1EntitySet(CreateEntitySet(TSPFiles1EntitySet));
  Result:=FFiles1;
end;

Function TSPApiData.CreateNewFileServices : TSPFileServicesEntitySet; 

begin
  Result:=TSPFileServicesEntitySet(CreateEntitySet(TSPFileServicesEntitySet));
end;


Function TSPApiData.GetFileServices : TSPFileServicesEntitySet; 


begin
  If Not Assigned(FFileServices) then
    FFileServices:=TSPFileServicesEntitySet(CreateEntitySet(TSPFileServicesEntitySet));
  Result:=FFileServices;
end;

Function TSPApiData.CreateNewFolders : TSPFoldersEntitySet; 

begin
  Result:=TSPFoldersEntitySet(CreateEntitySet(TSPFoldersEntitySet));
end;


Function TSPApiData.GetFolders : TSPFoldersEntitySet; 


begin
  If Not Assigned(FFolders) then
    FFolders:=TSPFoldersEntitySet(CreateEntitySet(TSPFoldersEntitySet));
  Result:=FFolders;
end;

Function TSPApiData.CreateNewMeFileServices : TSPMeFileServicesEntitySet; 

begin
  Result:=TSPMeFileServicesEntitySet(CreateEntitySet(TSPMeFileServicesEntitySet));
end;


Function TSPApiData.GetMeFileServices : TSPMeFileServicesEntitySet; 


begin
  If Not Assigned(FMeFileServices) then
    FMeFileServices:=TSPMeFileServicesEntitySet(CreateEntitySet(TSPMeFileServicesEntitySet));
  Result:=FMeFileServices;
end;

Function TSPApiData.CreateNewDiagnosticss : TSPDiagnosticssEntitySet; 

begin
  Result:=TSPDiagnosticssEntitySet(CreateEntitySet(TSPDiagnosticssEntitySet));
end;


Function TSPApiData.GetDiagnosticss : TSPDiagnosticssEntitySet; 


begin
  If Not Assigned(FDiagnosticss) then
    FDiagnosticss:=TSPDiagnosticssEntitySet(CreateEntitySet(TSPDiagnosticssEntitySet));
  Result:=FDiagnosticss;
end;

Function TSPApiData.CreateNewReportings : TSPReportingsEntitySet; 

begin
  Result:=TSPReportingsEntitySet(CreateEntitySet(TSPReportingsEntitySet));
end;


Function TSPApiData.GetReportings : TSPReportingsEntitySet; 


begin
  If Not Assigned(FReportings) then
    FReportings:=TSPReportingsEntitySet(CreateEntitySet(TSPReportingsEntitySet));
  Result:=FReportings;
end;

Function TSPApiData.CreateNewTaskflows : TSPTaskflowsEntitySet; 

begin
  Result:=TSPTaskflowsEntitySet(CreateEntitySet(TSPTaskflowsEntitySet));
end;


Function TSPApiData.GetTaskflows : TSPTaskflowsEntitySet; 


begin
  If Not Assigned(FTaskflows) then
    FTaskflows:=TSPTaskflowsEntitySet(CreateEntitySet(TSPTaskflowsEntitySet));
  Result:=FTaskflows;
end;

Function TSPApiData.CreateNewAssignments : TSPAssignmentsEntitySet; 

begin
  Result:=TSPAssignmentsEntitySet(CreateEntitySet(TSPAssignmentsEntitySet));
end;


Function TSPApiData.GetAssignments : TSPAssignmentsEntitySet; 


begin
  If Not Assigned(FAssignments) then
    FAssignments:=TSPAssignmentsEntitySet(CreateEntitySet(TSPAssignmentsEntitySet));
  Result:=FAssignments;
end;

Function TSPApiData.CreateNewBaseCalendarExceptions : TSPBaseCalendarExceptionsEntitySet; 

begin
  Result:=TSPBaseCalendarExceptionsEntitySet(CreateEntitySet(TSPBaseCalendarExceptionsEntitySet));
end;


Function TSPApiData.GetBaseCalendarExceptions : TSPBaseCalendarExceptionsEntitySet; 


begin
  If Not Assigned(FBaseCalendarExceptions) then
    FBaseCalendarExceptions:=TSPBaseCalendarExceptionsEntitySet(CreateEntitySet(TSPBaseCalendarExceptionsEntitySet));
  Result:=FBaseCalendarExceptions;
end;

Function TSPApiData.CreateNewCalendars : TSPCalendarsEntitySet; 

begin
  Result:=TSPCalendarsEntitySet(CreateEntitySet(TSPCalendarsEntitySet));
end;


Function TSPApiData.GetCalendars : TSPCalendarsEntitySet; 


begin
  If Not Assigned(FCalendars) then
    FCalendars:=TSPCalendarsEntitySet(CreateEntitySet(TSPCalendarsEntitySet));
  Result:=FCalendars;
end;

Function TSPApiData.CreateNewCalendarExceptions : TSPCalendarExceptionsEntitySet; 

begin
  Result:=TSPCalendarExceptionsEntitySet(CreateEntitySet(TSPCalendarExceptionsEntitySet));
end;


Function TSPApiData.GetCalendarExceptions : TSPCalendarExceptionsEntitySet; 


begin
  If Not Assigned(FCalendarExceptions) then
    FCalendarExceptions:=TSPCalendarExceptionsEntitySet(CreateEntitySet(TSPCalendarExceptionsEntitySet));
  Result:=FCalendarExceptions;
end;

Function TSPApiData.CreateNewCustomFields : TSPCustomFieldsEntitySet; 

begin
  Result:=TSPCustomFieldsEntitySet(CreateEntitySet(TSPCustomFieldsEntitySet));
end;


Function TSPApiData.GetCustomFields : TSPCustomFieldsEntitySet; 


begin
  If Not Assigned(FCustomFields) then
    FCustomFields:=TSPCustomFieldsEntitySet(CreateEntitySet(TSPCustomFieldsEntitySet));
  Result:=FCustomFields;
end;

Function TSPApiData.CreateNewDraftAssignments : TSPDraftAssignmentsEntitySet; 

begin
  Result:=TSPDraftAssignmentsEntitySet(CreateEntitySet(TSPDraftAssignmentsEntitySet));
end;


Function TSPApiData.GetDraftAssignments : TSPDraftAssignmentsEntitySet; 


begin
  If Not Assigned(FDraftAssignments) then
    FDraftAssignments:=TSPDraftAssignmentsEntitySet(CreateEntitySet(TSPDraftAssignmentsEntitySet));
  Result:=FDraftAssignments;
end;

Function TSPApiData.CreateNewDraftProjects : TSPDraftProjectsEntitySet; 

begin
  Result:=TSPDraftProjectsEntitySet(CreateEntitySet(TSPDraftProjectsEntitySet));
end;


Function TSPApiData.GetDraftProjects : TSPDraftProjectsEntitySet; 


begin
  If Not Assigned(FDraftProjects) then
    FDraftProjects:=TSPDraftProjectsEntitySet(CreateEntitySet(TSPDraftProjectsEntitySet));
  Result:=FDraftProjects;
end;

Function TSPApiData.CreateNewDraftProjectResources : TSPDraftProjectResourcesEntitySet; 

begin
  Result:=TSPDraftProjectResourcesEntitySet(CreateEntitySet(TSPDraftProjectResourcesEntitySet));
end;


Function TSPApiData.GetDraftProjectResources : TSPDraftProjectResourcesEntitySet; 


begin
  If Not Assigned(FDraftProjectResources) then
    FDraftProjectResources:=TSPDraftProjectResourcesEntitySet(CreateEntitySet(TSPDraftProjectResourcesEntitySet));
  Result:=FDraftProjectResources;
end;

Function TSPApiData.CreateNewDraftTasks : TSPDraftTasksEntitySet; 

begin
  Result:=TSPDraftTasksEntitySet(CreateEntitySet(TSPDraftTasksEntitySet));
end;


Function TSPApiData.GetDraftTasks : TSPDraftTasksEntitySet; 


begin
  If Not Assigned(FDraftTasks) then
    FDraftTasks:=TSPDraftTasksEntitySet(CreateEntitySet(TSPDraftTasksEntitySet));
  Result:=FDraftTasks;
end;

Function TSPApiData.CreateNewDraftTaskLinks : TSPDraftTaskLinksEntitySet; 

begin
  Result:=TSPDraftTaskLinksEntitySet(CreateEntitySet(TSPDraftTaskLinksEntitySet));
end;


Function TSPApiData.GetDraftTaskLinks : TSPDraftTaskLinksEntitySet; 


begin
  If Not Assigned(FDraftTaskLinks) then
    FDraftTaskLinks:=TSPDraftTaskLinksEntitySet(CreateEntitySet(TSPDraftTaskLinksEntitySet));
  Result:=FDraftTaskLinks;
end;

Function TSPApiData.CreateNewEnterpriseProjectTypes : TSPEnterpriseProjectTypesEntitySet; 

begin
  Result:=TSPEnterpriseProjectTypesEntitySet(CreateEntitySet(TSPEnterpriseProjectTypesEntitySet));
end;


Function TSPApiData.GetEnterpriseProjectTypes : TSPEnterpriseProjectTypesEntitySet; 


begin
  If Not Assigned(FEnterpriseProjectTypes) then
    FEnterpriseProjectTypes:=TSPEnterpriseProjectTypesEntitySet(CreateEntitySet(TSPEnterpriseProjectTypesEntitySet));
  Result:=FEnterpriseProjectTypes;
end;

Function TSPApiData.CreateNewEnterpriseResources : TSPEnterpriseResourcesEntitySet; 

begin
  Result:=TSPEnterpriseResourcesEntitySet(CreateEntitySet(TSPEnterpriseResourcesEntitySet));
end;


Function TSPApiData.GetEnterpriseResources : TSPEnterpriseResourcesEntitySet; 


begin
  If Not Assigned(FEnterpriseResources) then
    FEnterpriseResources:=TSPEnterpriseResourcesEntitySet(CreateEntitySet(TSPEnterpriseResourcesEntitySet));
  Result:=FEnterpriseResources;
end;

Function TSPApiData.CreateNewEntityTypes1 : TSPEntityTypes1EntitySet; 

begin
  Result:=TSPEntityTypes1EntitySet(CreateEntitySet(TSPEntityTypes1EntitySet));
end;


Function TSPApiData.GetEntityTypes1 : TSPEntityTypes1EntitySet; 


begin
  If Not Assigned(FEntityTypes1) then
    FEntityTypes1:=TSPEntityTypes1EntitySet(CreateEntitySet(TSPEntityTypes1EntitySet));
  Result:=FEntityTypes1;
end;

Function TSPApiData.CreateNewEntityTypess : TSPEntityTypessEntitySet; 

begin
  Result:=TSPEntityTypessEntitySet(CreateEntitySet(TSPEntityTypessEntitySet));
end;


Function TSPApiData.GetEntityTypess : TSPEntityTypessEntitySet; 


begin
  If Not Assigned(FEntityTypess) then
    FEntityTypess:=TSPEntityTypessEntitySet(CreateEntitySet(TSPEntityTypessEntitySet));
  Result:=FEntityTypess;
end;

Function TSPApiData.CreateNewEvents : TSPEventsEntitySet; 

begin
  Result:=TSPEventsEntitySet(CreateEntitySet(TSPEventsEntitySet));
end;


Function TSPApiData.GetEvents : TSPEventsEntitySet; 


begin
  If Not Assigned(FEvents) then
    FEvents:=TSPEventsEntitySet(CreateEntitySet(TSPEventsEntitySet));
  Result:=FEvents;
end;

Function TSPApiData.CreateNewEventHandlers : TSPEventHandlersEntitySet; 

begin
  Result:=TSPEventHandlersEntitySet(CreateEntitySet(TSPEventHandlersEntitySet));
end;


Function TSPApiData.GetEventHandlers : TSPEventHandlersEntitySet; 


begin
  If Not Assigned(FEventHandlers) then
    FEventHandlers:=TSPEventHandlersEntitySet(CreateEntitySet(TSPEventHandlersEntitySet));
  Result:=FEventHandlers;
end;

Function TSPApiData.CreateNewLookupCosts : TSPLookupCostsEntitySet; 

begin
  Result:=TSPLookupCostsEntitySet(CreateEntitySet(TSPLookupCostsEntitySet));
end;


Function TSPApiData.GetLookupCosts : TSPLookupCostsEntitySet; 


begin
  If Not Assigned(FLookupCosts) then
    FLookupCosts:=TSPLookupCostsEntitySet(CreateEntitySet(TSPLookupCostsEntitySet));
  Result:=FLookupCosts;
end;

Function TSPApiData.CreateNewLookupDates : TSPLookupDatesEntitySet; 

begin
  Result:=TSPLookupDatesEntitySet(CreateEntitySet(TSPLookupDatesEntitySet));
end;


Function TSPApiData.GetLookupDates : TSPLookupDatesEntitySet; 


begin
  If Not Assigned(FLookupDates) then
    FLookupDates:=TSPLookupDatesEntitySet(CreateEntitySet(TSPLookupDatesEntitySet));
  Result:=FLookupDates;
end;

Function TSPApiData.CreateNewLookupDurations : TSPLookupDurationsEntitySet; 

begin
  Result:=TSPLookupDurationsEntitySet(CreateEntitySet(TSPLookupDurationsEntitySet));
end;


Function TSPApiData.GetLookupDurations : TSPLookupDurationsEntitySet; 


begin
  If Not Assigned(FLookupDurations) then
    FLookupDurations:=TSPLookupDurationsEntitySet(CreateEntitySet(TSPLookupDurationsEntitySet));
  Result:=FLookupDurations;
end;

Function TSPApiData.CreateNewLookupEntrys : TSPLookupEntrysEntitySet; 

begin
  Result:=TSPLookupEntrysEntitySet(CreateEntitySet(TSPLookupEntrysEntitySet));
end;


Function TSPApiData.GetLookupEntrys : TSPLookupEntrysEntitySet; 


begin
  If Not Assigned(FLookupEntrys) then
    FLookupEntrys:=TSPLookupEntrysEntitySet(CreateEntitySet(TSPLookupEntrysEntitySet));
  Result:=FLookupEntrys;
end;

Function TSPApiData.CreateNewLookupNumbers : TSPLookupNumbersEntitySet; 

begin
  Result:=TSPLookupNumbersEntitySet(CreateEntitySet(TSPLookupNumbersEntitySet));
end;


Function TSPApiData.GetLookupNumbers : TSPLookupNumbersEntitySet; 


begin
  If Not Assigned(FLookupNumbers) then
    FLookupNumbers:=TSPLookupNumbersEntitySet(CreateEntitySet(TSPLookupNumbersEntitySet));
  Result:=FLookupNumbers;
end;

Function TSPApiData.CreateNewLookupTables : TSPLookupTablesEntitySet; 

begin
  Result:=TSPLookupTablesEntitySet(CreateEntitySet(TSPLookupTablesEntitySet));
end;


Function TSPApiData.GetLookupTables : TSPLookupTablesEntitySet; 


begin
  If Not Assigned(FLookupTables) then
    FLookupTables:=TSPLookupTablesEntitySet(CreateEntitySet(TSPLookupTablesEntitySet));
  Result:=FLookupTables;
end;

Function TSPApiData.CreateNewLookupTabless : TSPLookupTablessEntitySet; 

begin
  Result:=TSPLookupTablessEntitySet(CreateEntitySet(TSPLookupTablessEntitySet));
end;


Function TSPApiData.GetLookupTabless : TSPLookupTablessEntitySet; 


begin
  If Not Assigned(FLookupTabless) then
    FLookupTabless:=TSPLookupTablessEntitySet(CreateEntitySet(TSPLookupTablessEntitySet));
  Result:=FLookupTabless;
end;

Function TSPApiData.CreateNewLookupTexts : TSPLookupTextsEntitySet; 

begin
  Result:=TSPLookupTextsEntitySet(CreateEntitySet(TSPLookupTextsEntitySet));
end;


Function TSPApiData.GetLookupTexts : TSPLookupTextsEntitySet; 


begin
  If Not Assigned(FLookupTexts) then
    FLookupTexts:=TSPLookupTextsEntitySet(CreateEntitySet(TSPLookupTextsEntitySet));
  Result:=FLookupTexts;
end;

Function TSPApiData.CreateNewPhases : TSPPhasesEntitySet; 

begin
  Result:=TSPPhasesEntitySet(CreateEntitySet(TSPPhasesEntitySet));
end;


Function TSPApiData.GetPhases : TSPPhasesEntitySet; 


begin
  If Not Assigned(FPhases) then
    FPhases:=TSPPhasesEntitySet(CreateEntitySet(TSPPhasesEntitySet));
  Result:=FPhases;
end;

Function TSPApiData.CreateNewPlanAssignments : TSPPlanAssignmentsEntitySet; 

begin
  Result:=TSPPlanAssignmentsEntitySet(CreateEntitySet(TSPPlanAssignmentsEntitySet));
end;


Function TSPApiData.GetPlanAssignments : TSPPlanAssignmentsEntitySet; 


begin
  If Not Assigned(FPlanAssignments) then
    FPlanAssignments:=TSPPlanAssignmentsEntitySet(CreateEntitySet(TSPPlanAssignmentsEntitySet));
  Result:=FPlanAssignments;
end;

Function TSPApiData.CreateNewPlanAssignmentIntervals : TSPPlanAssignmentIntervalsEntitySet; 

begin
  Result:=TSPPlanAssignmentIntervalsEntitySet(CreateEntitySet(TSPPlanAssignmentIntervalsEntitySet));
end;


Function TSPApiData.GetPlanAssignmentIntervals : TSPPlanAssignmentIntervalsEntitySet; 


begin
  If Not Assigned(FPlanAssignmentIntervals) then
    FPlanAssignmentIntervals:=TSPPlanAssignmentIntervalsEntitySet(CreateEntitySet(TSPPlanAssignmentIntervalsEntitySet));
  Result:=FPlanAssignmentIntervals;
end;

Function TSPApiData.CreateNewProjects : TSPProjectsEntitySet; 

begin
  Result:=TSPProjectsEntitySet(CreateEntitySet(TSPProjectsEntitySet));
end;


Function TSPApiData.GetProjects : TSPProjectsEntitySet; 


begin
  If Not Assigned(FProjects) then
    FProjects:=TSPProjectsEntitySet(CreateEntitySet(TSPProjectsEntitySet));
  Result:=FProjects;
end;

Function TSPApiData.CreateNewProjectDetailPages : TSPProjectDetailPagesEntitySet; 

begin
  Result:=TSPProjectDetailPagesEntitySet(CreateEntitySet(TSPProjectDetailPagesEntitySet));
end;


Function TSPApiData.GetProjectDetailPages : TSPProjectDetailPagesEntitySet; 


begin
  If Not Assigned(FProjectDetailPages) then
    FProjectDetailPages:=TSPProjectDetailPagesEntitySet(CreateEntitySet(TSPProjectDetailPagesEntitySet));
  Result:=FProjectDetailPages;
end;

Function TSPApiData.CreateNewProjectResources : TSPProjectResourcesEntitySet; 

begin
  Result:=TSPProjectResourcesEntitySet(CreateEntitySet(TSPProjectResourcesEntitySet));
end;


Function TSPApiData.GetProjectResources : TSPProjectResourcesEntitySet; 


begin
  If Not Assigned(FProjectResources) then
    FProjectResources:=TSPProjectResourcesEntitySet(CreateEntitySet(TSPProjectResourcesEntitySet));
  Result:=FProjectResources;
end;

Function TSPApiData.CreateNewProjectServers : TSPProjectServersEntitySet; 

begin
  Result:=TSPProjectServersEntitySet(CreateEntitySet(TSPProjectServersEntitySet));
end;


Function TSPApiData.GetProjectServers : TSPProjectServersEntitySet; 


begin
  If Not Assigned(FProjectServers) then
    FProjectServers:=TSPProjectServersEntitySet(CreateEntitySet(TSPProjectServersEntitySet));
  Result:=FProjectServers;
end;

Function TSPApiData.CreateNewProjectServerDatas : TSPProjectServerDatasEntitySet; 

begin
  Result:=TSPProjectServerDatasEntitySet(CreateEntitySet(TSPProjectServerDatasEntitySet));
end;


Function TSPApiData.GetProjectServerDatas : TSPProjectServerDatasEntitySet; 


begin
  If Not Assigned(FProjectServerDatas) then
    FProjectServerDatas:=TSPProjectServerDatasEntitySet(CreateEntitySet(TSPProjectServerDatasEntitySet));
  Result:=FProjectServerDatas;
end;

Function TSPApiData.CreateNewPublishedAssignments : TSPPublishedAssignmentsEntitySet; 

begin
  Result:=TSPPublishedAssignmentsEntitySet(CreateEntitySet(TSPPublishedAssignmentsEntitySet));
end;


Function TSPApiData.GetPublishedAssignments : TSPPublishedAssignmentsEntitySet; 


begin
  If Not Assigned(FPublishedAssignments) then
    FPublishedAssignments:=TSPPublishedAssignmentsEntitySet(CreateEntitySet(TSPPublishedAssignmentsEntitySet));
  Result:=FPublishedAssignments;
end;

Function TSPApiData.CreateNewPublishedProjects : TSPPublishedProjectsEntitySet; 

begin
  Result:=TSPPublishedProjectsEntitySet(CreateEntitySet(TSPPublishedProjectsEntitySet));
end;


Function TSPApiData.GetPublishedProjects : TSPPublishedProjectsEntitySet; 


begin
  If Not Assigned(FPublishedProjects) then
    FPublishedProjects:=TSPPublishedProjectsEntitySet(CreateEntitySet(TSPPublishedProjectsEntitySet));
  Result:=FPublishedProjects;
end;

Function TSPApiData.CreateNewPublishedProjectResources : TSPPublishedProjectResourcesEntitySet; 

begin
  Result:=TSPPublishedProjectResourcesEntitySet(CreateEntitySet(TSPPublishedProjectResourcesEntitySet));
end;


Function TSPApiData.GetPublishedProjectResources : TSPPublishedProjectResourcesEntitySet; 


begin
  If Not Assigned(FPublishedProjectResources) then
    FPublishedProjectResources:=TSPPublishedProjectResourcesEntitySet(CreateEntitySet(TSPPublishedProjectResourcesEntitySet));
  Result:=FPublishedProjectResources;
end;

Function TSPApiData.CreateNewPublishedTasks : TSPPublishedTasksEntitySet; 

begin
  Result:=TSPPublishedTasksEntitySet(CreateEntitySet(TSPPublishedTasksEntitySet));
end;


Function TSPApiData.GetPublishedTasks : TSPPublishedTasksEntitySet; 


begin
  If Not Assigned(FPublishedTasks) then
    FPublishedTasks:=TSPPublishedTasksEntitySet(CreateEntitySet(TSPPublishedTasksEntitySet));
  Result:=FPublishedTasks;
end;

Function TSPApiData.CreateNewPublishedTaskLinks : TSPPublishedTaskLinksEntitySet; 

begin
  Result:=TSPPublishedTaskLinksEntitySet(CreateEntitySet(TSPPublishedTaskLinksEntitySet));
end;


Function TSPApiData.GetPublishedTaskLinks : TSPPublishedTaskLinksEntitySet; 


begin
  If Not Assigned(FPublishedTaskLinks) then
    FPublishedTaskLinks:=TSPPublishedTaskLinksEntitySet(CreateEntitySet(TSPPublishedTaskLinksEntitySet));
  Result:=FPublishedTaskLinks;
end;

Function TSPApiData.CreateNewQueueJobs : TSPQueueJobsEntitySet; 

begin
  Result:=TSPQueueJobsEntitySet(CreateEntitySet(TSPQueueJobsEntitySet));
end;


Function TSPApiData.GetQueueJobs : TSPQueueJobsEntitySet; 


begin
  If Not Assigned(FQueueJobs) then
    FQueueJobs:=TSPQueueJobsEntitySet(CreateEntitySet(TSPQueueJobsEntitySet));
  Result:=FQueueJobs;
end;

Function TSPApiData.CreateNewResourceCalendarExceptions : TSPResourceCalendarExceptionsEntitySet; 

begin
  Result:=TSPResourceCalendarExceptionsEntitySet(CreateEntitySet(TSPResourceCalendarExceptionsEntitySet));
end;


Function TSPApiData.GetResourceCalendarExceptions : TSPResourceCalendarExceptionsEntitySet; 


begin
  If Not Assigned(FResourceCalendarExceptions) then
    FResourceCalendarExceptions:=TSPResourceCalendarExceptionsEntitySet(CreateEntitySet(TSPResourceCalendarExceptionsEntitySet));
  Result:=FResourceCalendarExceptions;
end;

Function TSPApiData.CreateNewResourcePlans : TSPResourcePlansEntitySet; 

begin
  Result:=TSPResourcePlansEntitySet(CreateEntitySet(TSPResourcePlansEntitySet));
end;


Function TSPApiData.GetResourcePlans : TSPResourcePlansEntitySet; 


begin
  If Not Assigned(FResourcePlans) then
    FResourcePlans:=TSPResourcePlansEntitySet(CreateEntitySet(TSPResourcePlansEntitySet));
  Result:=FResourcePlans;
end;

Function TSPApiData.CreateNewServiceStatuss : TSPServiceStatussEntitySet; 

begin
  Result:=TSPServiceStatussEntitySet(CreateEntitySet(TSPServiceStatussEntitySet));
end;


Function TSPApiData.GetServiceStatuss : TSPServiceStatussEntitySet; 


begin
  If Not Assigned(FServiceStatuss) then
    FServiceStatuss:=TSPServiceStatussEntitySet(CreateEntitySet(TSPServiceStatussEntitySet));
  Result:=FServiceStatuss;
end;

Function TSPApiData.CreateNewStages : TSPStagesEntitySet; 

begin
  Result:=TSPStagesEntitySet(CreateEntitySet(TSPStagesEntitySet));
end;


Function TSPApiData.GetStages : TSPStagesEntitySet; 


begin
  If Not Assigned(FStages) then
    FStages:=TSPStagesEntitySet(CreateEntitySet(TSPStagesEntitySet));
  Result:=FStages;
end;

Function TSPApiData.CreateNewStageCustomFields : TSPStageCustomFieldsEntitySet; 

begin
  Result:=TSPStageCustomFieldsEntitySet(CreateEntitySet(TSPStageCustomFieldsEntitySet));
end;


Function TSPApiData.GetStageCustomFields : TSPStageCustomFieldsEntitySet; 


begin
  If Not Assigned(FStageCustomFields) then
    FStageCustomFields:=TSPStageCustomFieldsEntitySet(CreateEntitySet(TSPStageCustomFieldsEntitySet));
  Result:=FStageCustomFields;
end;

Function TSPApiData.CreateNewStageDetailPages : TSPStageDetailPagesEntitySet; 

begin
  Result:=TSPStageDetailPagesEntitySet(CreateEntitySet(TSPStageDetailPagesEntitySet));
end;


Function TSPApiData.GetStageDetailPages : TSPStageDetailPagesEntitySet; 


begin
  If Not Assigned(FStageDetailPages) then
    FStageDetailPages:=TSPStageDetailPagesEntitySet(CreateEntitySet(TSPStageDetailPagesEntitySet));
  Result:=FStageDetailPages;
end;

Function TSPApiData.CreateNewStatusAssignments : TSPStatusAssignmentsEntitySet; 

begin
  Result:=TSPStatusAssignmentsEntitySet(CreateEntitySet(TSPStatusAssignmentsEntitySet));
end;


Function TSPApiData.GetStatusAssignments : TSPStatusAssignmentsEntitySet; 


begin
  If Not Assigned(FStatusAssignments) then
    FStatusAssignments:=TSPStatusAssignmentsEntitySet(CreateEntitySet(TSPStatusAssignmentsEntitySet));
  Result:=FStatusAssignments;
end;

Function TSPApiData.CreateNewStatusTasks : TSPStatusTasksEntitySet; 

begin
  Result:=TSPStatusTasksEntitySet(CreateEntitySet(TSPStatusTasksEntitySet));
end;


Function TSPApiData.GetStatusTasks : TSPStatusTasksEntitySet; 


begin
  If Not Assigned(FStatusTasks) then
    FStatusTasks:=TSPStatusTasksEntitySet(CreateEntitySet(TSPStatusTasksEntitySet));
  Result:=FStatusTasks;
end;

Function TSPApiData.CreateNewTasks : TSPTasksEntitySet; 

begin
  Result:=TSPTasksEntitySet(CreateEntitySet(TSPTasksEntitySet));
end;


Function TSPApiData.GetTasks : TSPTasksEntitySet; 


begin
  If Not Assigned(FTasks) then
    FTasks:=TSPTasksEntitySet(CreateEntitySet(TSPTasksEntitySet));
  Result:=FTasks;
end;

Function TSPApiData.CreateNewTaskLinks : TSPTaskLinksEntitySet; 

begin
  Result:=TSPTaskLinksEntitySet(CreateEntitySet(TSPTaskLinksEntitySet));
end;


Function TSPApiData.GetTaskLinks : TSPTaskLinksEntitySet; 


begin
  If Not Assigned(FTaskLinks) then
    FTaskLinks:=TSPTaskLinksEntitySet(CreateEntitySet(TSPTaskLinksEntitySet));
  Result:=FTaskLinks;
end;

Function TSPApiData.CreateNewTaskServiceOdataEndpoints : TSPTaskServiceOdataEndpointsEntitySet; 

begin
  Result:=TSPTaskServiceOdataEndpointsEntitySet(CreateEntitySet(TSPTaskServiceOdataEndpointsEntitySet));
end;


Function TSPApiData.GetTaskServiceOdataEndpoints : TSPTaskServiceOdataEndpointsEntitySet; 


begin
  If Not Assigned(FTaskServiceOdataEndpoints) then
    FTaskServiceOdataEndpoints:=TSPTaskServiceOdataEndpointsEntitySet(CreateEntitySet(TSPTaskServiceOdataEndpointsEntitySet));
  Result:=FTaskServiceOdataEndpoints;
end;

Function TSPApiData.CreateNewTimePhases : TSPTimePhasesEntitySet; 

begin
  Result:=TSPTimePhasesEntitySet(CreateEntitySet(TSPTimePhasesEntitySet));
end;


Function TSPApiData.GetTimePhases : TSPTimePhasesEntitySet; 


begin
  If Not Assigned(FTimePhases) then
    FTimePhases:=TSPTimePhasesEntitySet(CreateEntitySet(TSPTimePhasesEntitySet));
  Result:=FTimePhases;
end;

Function TSPApiData.CreateNewTimeSheets : TSPTimeSheetsEntitySet; 

begin
  Result:=TSPTimeSheetsEntitySet(CreateEntitySet(TSPTimeSheetsEntitySet));
end;


Function TSPApiData.GetTimeSheets : TSPTimeSheetsEntitySet; 


begin
  If Not Assigned(FTimeSheets) then
    FTimeSheets:=TSPTimeSheetsEntitySet(CreateEntitySet(TSPTimeSheetsEntitySet));
  Result:=FTimeSheets;
end;

Function TSPApiData.CreateNewTimeSheetLines : TSPTimeSheetLinesEntitySet; 

begin
  Result:=TSPTimeSheetLinesEntitySet(CreateEntitySet(TSPTimeSheetLinesEntitySet));
end;


Function TSPApiData.GetTimeSheetLines : TSPTimeSheetLinesEntitySet; 


begin
  If Not Assigned(FTimeSheetLines) then
    FTimeSheetLines:=TSPTimeSheetLinesEntitySet(CreateEntitySet(TSPTimeSheetLinesEntitySet));
  Result:=FTimeSheetLines;
end;

Function TSPApiData.CreateNewTimeSheetPeriods : TSPTimeSheetPeriodsEntitySet; 

begin
  Result:=TSPTimeSheetPeriodsEntitySet(CreateEntitySet(TSPTimeSheetPeriodsEntitySet));
end;


Function TSPApiData.GetTimeSheetPeriods : TSPTimeSheetPeriodsEntitySet; 


begin
  If Not Assigned(FTimeSheetPeriods) then
    FTimeSheetPeriods:=TSPTimeSheetPeriodsEntitySet(CreateEntitySet(TSPTimeSheetPeriodsEntitySet));
  Result:=FTimeSheetPeriods;
end;

Function TSPApiData.CreateNewTimeSheetWorks : TSPTimeSheetWorksEntitySet; 

begin
  Result:=TSPTimeSheetWorksEntitySet(CreateEntitySet(TSPTimeSheetWorksEntitySet));
end;


Function TSPApiData.GetTimeSheetWorks : TSPTimeSheetWorksEntitySet; 


begin
  If Not Assigned(FTimeSheetWorks) then
    FTimeSheetWorks:=TSPTimeSheetWorksEntitySet(CreateEntitySet(TSPTimeSheetWorksEntitySet));
  Result:=FTimeSheetWorks;
end;

Function TSPApiData.CreateNewWorkflowActivitiess : TSPWorkflowActivitiessEntitySet; 

begin
  Result:=TSPWorkflowActivitiessEntitySet(CreateEntitySet(TSPWorkflowActivitiessEntitySet));
end;


Function TSPApiData.GetWorkflowActivitiess : TSPWorkflowActivitiessEntitySet; 


begin
  If Not Assigned(FWorkflowActivitiess) then
    FWorkflowActivitiess:=TSPWorkflowActivitiessEntitySet(CreateEntitySet(TSPWorkflowActivitiessEntitySet));
  Result:=FWorkflowActivitiess;
end;

Function TSPApiData.CreateNewWorkflowDesigners : TSPWorkflowDesignersEntitySet; 

begin
  Result:=TSPWorkflowDesignersEntitySet(CreateEntitySet(TSPWorkflowDesignersEntitySet));
end;


Function TSPApiData.GetWorkflowDesigners : TSPWorkflowDesignersEntitySet; 


begin
  If Not Assigned(FWorkflowDesigners) then
    FWorkflowDesigners:=TSPWorkflowDesignersEntitySet(CreateEntitySet(TSPWorkflowDesignersEntitySet));
  Result:=FWorkflowDesigners;
end;

Function TSPApiData.CreateNewWorkflowDesignerFields : TSPWorkflowDesignerFieldsEntitySet; 

begin
  Result:=TSPWorkflowDesignerFieldsEntitySet(CreateEntitySet(TSPWorkflowDesignerFieldsEntitySet));
end;


Function TSPApiData.GetWorkflowDesignerFields : TSPWorkflowDesignerFieldsEntitySet; 


begin
  If Not Assigned(FWorkflowDesignerFields) then
    FWorkflowDesignerFields:=TSPWorkflowDesignerFieldsEntitySet(CreateEntitySet(TSPWorkflowDesignerFieldsEntitySet));
  Result:=FWorkflowDesignerFields;
end;

Function TSPApiData.CreateNewAccessRequestss : TSPAccessRequestssEntitySet; 

begin
  Result:=TSPAccessRequestssEntitySet(CreateEntitySet(TSPAccessRequestssEntitySet));
end;


Function TSPApiData.GetAccessRequestss : TSPAccessRequestssEntitySet; 


begin
  If Not Assigned(FAccessRequestss) then
    FAccessRequestss:=TSPAccessRequestssEntitySet(CreateEntitySet(TSPAccessRequestssEntitySet));
  Result:=FAccessRequestss;
end;

Function TSPApiData.CreateNewAlternateUrls : TSPAlternateUrlsEntitySet; 

begin
  Result:=TSPAlternateUrlsEntitySet(CreateEntitySet(TSPAlternateUrlsEntitySet));
end;


Function TSPApiData.GetAlternateUrls : TSPAlternateUrlsEntitySet; 


begin
  If Not Assigned(FAlternateUrls) then
    FAlternateUrls:=TSPAlternateUrlsEntitySet(CreateEntitySet(TSPAlternateUrlsEntitySet));
  Result:=FAlternateUrls;
end;

Function TSPApiData.CreateNewAnalyticsUsageEntrys : TSPAnalyticsUsageEntrysEntitySet; 

begin
  Result:=TSPAnalyticsUsageEntrysEntitySet(CreateEntitySet(TSPAnalyticsUsageEntrysEntitySet));
end;


Function TSPApiData.GetAnalyticsUsageEntrys : TSPAnalyticsUsageEntrysEntitySet; 


begin
  If Not Assigned(FAnalyticsUsageEntrys) then
    FAnalyticsUsageEntrys:=TSPAnalyticsUsageEntrysEntitySet(CreateEntitySet(TSPAnalyticsUsageEntrysEntitySet));
  Result:=FAnalyticsUsageEntrys;
end;

Function TSPApiData.CreateNewApiMetadatas : TSPApiMetadatasEntitySet; 

begin
  Result:=TSPApiMetadatasEntitySet(CreateEntitySet(TSPApiMetadatasEntitySet));
end;


Function TSPApiData.GetApiMetadatas : TSPApiMetadatasEntitySet; 


begin
  If Not Assigned(FApiMetadatas) then
    FApiMetadatas:=TSPApiMetadatasEntitySet(CreateEntitySet(TSPApiMetadatasEntitySet));
  Result:=FApiMetadatas;
end;

Function TSPApiData.CreateNewApps12 : TSPApps12EntitySet; 

begin
  Result:=TSPApps12EntitySet(CreateEntitySet(TSPApps12EntitySet));
end;


Function TSPApiData.GetApps12 : TSPApps12EntitySet; 


begin
  If Not Assigned(FApps12) then
    FApps12:=TSPApps12EntitySet(CreateEntitySet(TSPApps12EntitySet));
  Result:=FApps12;
end;

Function TSPApiData.CreateNewAppCatalogs : TSPAppCatalogsEntitySet; 

begin
  Result:=TSPAppCatalogsEntitySet(CreateEntitySet(TSPAppCatalogsEntitySet));
end;


Function TSPApiData.GetAppCatalogs : TSPAppCatalogsEntitySet; 


begin
  If Not Assigned(FAppCatalogs) then
    FAppCatalogs:=TSPAppCatalogsEntitySet(CreateEntitySet(TSPAppCatalogsEntitySet));
  Result:=FAppCatalogs;
end;

Function TSPApiData.CreateNewAppContextSites : TSPAppContextSitesEntitySet; 

begin
  Result:=TSPAppContextSitesEntitySet(CreateEntitySet(TSPAppContextSitesEntitySet));
end;


Function TSPApiData.GetAppContextSites : TSPAppContextSitesEntitySet; 


begin
  If Not Assigned(FAppContextSites) then
    FAppContextSites:=TSPAppContextSitesEntitySet(CreateEntitySet(TSPAppContextSitesEntitySet));
  Result:=FAppContextSites;
end;

Function TSPApiData.CreateNewAppInstances : TSPAppInstancesEntitySet; 

begin
  Result:=TSPAppInstancesEntitySet(CreateEntitySet(TSPAppInstancesEntitySet));
end;


Function TSPApiData.GetAppInstances : TSPAppInstancesEntitySet; 


begin
  If Not Assigned(FAppInstances) then
    FAppInstances:=TSPAppInstancesEntitySet(CreateEntitySet(TSPAppInstancesEntitySet));
  Result:=FAppInstances;
end;

Function TSPApiData.CreateNewAppInstanceErrorDetailss : TSPAppInstanceErrorDetailssEntitySet; 

begin
  Result:=TSPAppInstanceErrorDetailssEntitySet(CreateEntitySet(TSPAppInstanceErrorDetailssEntitySet));
end;


Function TSPApiData.GetAppInstanceErrorDetailss : TSPAppInstanceErrorDetailssEntitySet; 


begin
  If Not Assigned(FAppInstanceErrorDetailss) then
    FAppInstanceErrorDetailss:=TSPAppInstanceErrorDetailssEntitySet(CreateEntitySet(TSPAppInstanceErrorDetailssEntitySet));
  Result:=FAppInstanceErrorDetailss;
end;

Function TSPApiData.CreateNewAppTiles : TSPAppTilesEntitySet; 

begin
  Result:=TSPAppTilesEntitySet(CreateEntitySet(TSPAppTilesEntitySet));
end;


Function TSPApiData.GetAppTiles : TSPAppTilesEntitySet; 


begin
  If Not Assigned(FAppTiles) then
    FAppTiles:=TSPAppTilesEntitySet(CreateEntitySet(TSPAppTilesEntitySet));
  Result:=FAppTiles;
end;

Function TSPApiData.CreateNewAttachments : TSPAttachmentsEntitySet; 

begin
  Result:=TSPAttachmentsEntitySet(CreateEntitySet(TSPAttachmentsEntitySet));
end;


Function TSPApiData.GetAttachments : TSPAttachmentsEntitySet; 


begin
  If Not Assigned(FAttachments) then
    FAttachments:=TSPAttachmentsEntitySet(CreateEntitySet(TSPAttachmentsEntitySet));
  Result:=FAttachments;
end;

Function TSPApiData.CreateNewAudits : TSPAuditsEntitySet; 

begin
  Result:=TSPAuditsEntitySet(CreateEntitySet(TSPAuditsEntitySet));
end;


Function TSPApiData.GetAudits : TSPAuditsEntitySet; 


begin
  If Not Assigned(FAudits) then
    FAudits:=TSPAuditsEntitySet(CreateEntitySet(TSPAuditsEntitySet));
  Result:=FAudits;
end;

Function TSPApiData.CreateNewAppBdcCatalogs : TSPAppBdcCatalogsEntitySet; 

begin
  Result:=TSPAppBdcCatalogsEntitySet(CreateEntitySet(TSPAppBdcCatalogsEntitySet));
end;


Function TSPApiData.GetAppBdcCatalogs : TSPAppBdcCatalogsEntitySet; 


begin
  If Not Assigned(FAppBdcCatalogs) then
    FAppBdcCatalogs:=TSPAppBdcCatalogsEntitySet(CreateEntitySet(TSPAppBdcCatalogsEntitySet));
  Result:=FAppBdcCatalogs;
end;

Function TSPApiData.CreateNewEntitys : TSPEntitysEntitySet; 

begin
  Result:=TSPEntitysEntitySet(CreateEntitySet(TSPEntitysEntitySet));
end;


Function TSPApiData.GetEntitys : TSPEntitysEntitySet; 


begin
  If Not Assigned(FEntitys) then
    FEntitys:=TSPEntitysEntitySet(CreateEntitySet(TSPEntitysEntitySet));
  Result:=FEntitys;
end;

Function TSPApiData.CreateNewEntityFields : TSPEntityFieldsEntitySet; 

begin
  Result:=TSPEntityFieldsEntitySet(CreateEntitySet(TSPEntityFieldsEntitySet));
end;


Function TSPApiData.GetEntityFields : TSPEntityFieldsEntitySet; 


begin
  If Not Assigned(FEntityFields) then
    FEntityFields:=TSPEntityFieldsEntitySet(CreateEntitySet(TSPEntityFieldsEntitySet));
  Result:=FEntityFields;
end;

Function TSPApiData.CreateNewEntityIdentifiers : TSPEntityIdentifiersEntitySet; 

begin
  Result:=TSPEntityIdentifiersEntitySet(CreateEntitySet(TSPEntityIdentifiersEntitySet));
end;


Function TSPApiData.GetEntityIdentifiers : TSPEntityIdentifiersEntitySet; 


begin
  If Not Assigned(FEntityIdentifiers) then
    FEntityIdentifiers:=TSPEntityIdentifiersEntitySet(CreateEntitySet(TSPEntityIdentifiersEntitySet));
  Result:=FEntityIdentifiers;
end;

Function TSPApiData.CreateNewEntityViews : TSPEntityViewsEntitySet; 

begin
  Result:=TSPEntityViewsEntitySet(CreateEntitySet(TSPEntityViewsEntitySet));
end;


Function TSPApiData.GetEntityViews : TSPEntityViewsEntitySet; 


begin
  If Not Assigned(FEntityViews) then
    FEntityViews:=TSPEntityViewsEntitySet(CreateEntitySet(TSPEntityViewsEntitySet));
  Result:=FEntityViews;
end;

Function TSPApiData.CreateNewFilters : TSPFiltersEntitySet; 

begin
  Result:=TSPFiltersEntitySet(CreateEntitySet(TSPFiltersEntitySet));
end;


Function TSPApiData.GetFilters : TSPFiltersEntitySet; 


begin
  If Not Assigned(FFilters) then
    FFilters:=TSPFiltersEntitySet(CreateEntitySet(TSPFiltersEntitySet));
  Result:=FFilters;
end;

Function TSPApiData.CreateNewExternalSubscriptionStores : TSPExternalSubscriptionStoresEntitySet; 

begin
  Result:=TSPExternalSubscriptionStoresEntitySet(CreateEntitySet(TSPExternalSubscriptionStoresEntitySet));
end;


Function TSPApiData.GetExternalSubscriptionStores : TSPExternalSubscriptionStoresEntitySet; 


begin
  If Not Assigned(FExternalSubscriptionStores) then
    FExternalSubscriptionStores:=TSPExternalSubscriptionStoresEntitySet(CreateEntitySet(TSPExternalSubscriptionStoresEntitySet));
  Result:=FExternalSubscriptionStores;
end;

Function TSPApiData.CreateNewLobSystems : TSPLobSystemsEntitySet; 

begin
  Result:=TSPLobSystemsEntitySet(CreateEntitySet(TSPLobSystemsEntitySet));
end;


Function TSPApiData.GetLobSystems : TSPLobSystemsEntitySet; 


begin
  If Not Assigned(FLobSystems) then
    FLobSystems:=TSPLobSystemsEntitySet(CreateEntitySet(TSPLobSystemsEntitySet));
  Result:=FLobSystems;
end;

Function TSPApiData.CreateNewLobSystemInstances : TSPLobSystemInstancesEntitySet; 

begin
  Result:=TSPLobSystemInstancesEntitySet(CreateEntitySet(TSPLobSystemInstancesEntitySet));
end;


Function TSPApiData.GetLobSystemInstances : TSPLobSystemInstancesEntitySet; 


begin
  If Not Assigned(FLobSystemInstances) then
    FLobSystemInstances:=TSPLobSystemInstancesEntitySet(CreateEntitySet(TSPLobSystemInstancesEntitySet));
  Result:=FLobSystemInstances;
end;

Function TSPApiData.CreateNewMethodExecutionResults : TSPMethodExecutionResultsEntitySet; 

begin
  Result:=TSPMethodExecutionResultsEntitySet(CreateEntitySet(TSPMethodExecutionResultsEntitySet));
end;


Function TSPApiData.GetMethodExecutionResults : TSPMethodExecutionResultsEntitySet; 


begin
  If Not Assigned(FMethodExecutionResults) then
    FMethodExecutionResults:=TSPMethodExecutionResultsEntitySet(CreateEntitySet(TSPMethodExecutionResultsEntitySet));
  Result:=FMethodExecutionResults;
end;

Function TSPApiData.CreateNewEntityFieldValueDictionarys : TSPEntityFieldValueDictionarysEntitySet; 

begin
  Result:=TSPEntityFieldValueDictionarysEntitySet(CreateEntitySet(TSPEntityFieldValueDictionarysEntitySet));
end;


Function TSPApiData.GetEntityFieldValueDictionarys : TSPEntityFieldValueDictionarysEntitySet; 


begin
  If Not Assigned(FEntityFieldValueDictionarys) then
    FEntityFieldValueDictionarys:=TSPEntityFieldValueDictionarysEntitySet(CreateEntitySet(TSPEntityFieldValueDictionarysEntitySet));
  Result:=FEntityFieldValueDictionarys;
end;

Function TSPApiData.CreateNewEntityIdentitys : TSPEntityIdentitysEntitySet; 

begin
  Result:=TSPEntityIdentitysEntitySet(CreateEntitySet(TSPEntityIdentitysEntitySet));
end;


Function TSPApiData.GetEntityIdentitys : TSPEntityIdentitysEntitySet; 


begin
  If Not Assigned(FEntityIdentitys) then
    FEntityIdentitys:=TSPEntityIdentitysEntitySet(CreateEntitySet(TSPEntityIdentitysEntitySet));
  Result:=FEntityIdentitys;
end;

Function TSPApiData.CreateNewEntityInstances : TSPEntityInstancesEntitySet; 

begin
  Result:=TSPEntityInstancesEntitySet(CreateEntitySet(TSPEntityInstancesEntitySet));
end;


Function TSPApiData.GetEntityInstances : TSPEntityInstancesEntitySet; 


begin
  If Not Assigned(FEntityInstances) then
    FEntityInstances:=TSPEntityInstancesEntitySet(CreateEntitySet(TSPEntityInstancesEntitySet));
  Result:=FEntityInstances;
end;

Function TSPApiData.CreateNewNotificationCallbacks : TSPNotificationCallbacksEntitySet; 

begin
  Result:=TSPNotificationCallbacksEntitySet(CreateEntitySet(TSPNotificationCallbacksEntitySet));
end;


Function TSPApiData.GetNotificationCallbacks : TSPNotificationCallbacksEntitySet; 


begin
  If Not Assigned(FNotificationCallbacks) then
    FNotificationCallbacks:=TSPNotificationCallbacksEntitySet(CreateEntitySet(TSPNotificationCallbacksEntitySet));
  Result:=FNotificationCallbacks;
end;

Function TSPApiData.CreateNewSubscriptions : TSPSubscriptionsEntitySet; 

begin
  Result:=TSPSubscriptionsEntitySet(CreateEntitySet(TSPSubscriptionsEntitySet));
end;


Function TSPApiData.GetSubscriptions : TSPSubscriptionsEntitySet; 


begin
  If Not Assigned(FSubscriptions) then
    FSubscriptions:=TSPSubscriptionsEntitySet(CreateEntitySet(TSPSubscriptionsEntitySet));
  Result:=FSubscriptions;
end;

Function TSPApiData.CreateNewTypeDescriptors : TSPTypeDescriptorsEntitySet; 

begin
  Result:=TSPTypeDescriptorsEntitySet(CreateEntitySet(TSPTypeDescriptorsEntitySet));
end;


Function TSPApiData.GetTypeDescriptors : TSPTypeDescriptorsEntitySet; 


begin
  If Not Assigned(FTypeDescriptors) then
    FTypeDescriptors:=TSPTypeDescriptorsEntitySet(CreateEntitySet(TSPTypeDescriptorsEntitySet));
  Result:=FTypeDescriptors;
end;

Function TSPApiData.CreateNewChanges : TSPChangesEntitySet; 

begin
  Result:=TSPChangesEntitySet(CreateEntitySet(TSPChangesEntitySet));
end;


Function TSPApiData.GetChanges : TSPChangesEntitySet; 


begin
  If Not Assigned(FChanges) then
    FChanges:=TSPChangesEntitySet(CreateEntitySet(TSPChangesEntitySet));
  Result:=FChanges;
end;

Function TSPApiData.CreateNewCompatibilityRanges : TSPCompatibilityRangesEntitySet; 

begin
  Result:=TSPCompatibilityRangesEntitySet(CreateEntitySet(TSPCompatibilityRangesEntitySet));
end;


Function TSPApiData.GetCompatibilityRanges : TSPCompatibilityRangesEntitySet; 


begin
  If Not Assigned(FCompatibilityRanges) then
    FCompatibilityRanges:=TSPCompatibilityRangesEntitySet(CreateEntitySet(TSPCompatibilityRangesEntitySet));
  Result:=FCompatibilityRanges;
end;

Function TSPApiData.CreateNewPolicyEvaluationInfos : TSPPolicyEvaluationInfosEntitySet; 

begin
  Result:=TSPPolicyEvaluationInfosEntitySet(CreateEntitySet(TSPPolicyEvaluationInfosEntitySet));
end;


Function TSPApiData.GetPolicyEvaluationInfos : TSPPolicyEvaluationInfosEntitySet; 


begin
  If Not Assigned(FPolicyEvaluationInfos) then
    FPolicyEvaluationInfos:=TSPPolicyEvaluationInfosEntitySet(CreateEntitySet(TSPPolicyEvaluationInfosEntitySet));
  Result:=FPolicyEvaluationInfos;
end;

Function TSPApiData.CreateNewSPPolicyStoreProxys : TSPSPPolicyStoreProxysEntitySet; 

begin
  Result:=TSPSPPolicyStoreProxysEntitySet(CreateEntitySet(TSPSPPolicyStoreProxysEntitySet));
end;


Function TSPApiData.GetSPPolicyStoreProxys : TSPSPPolicyStoreProxysEntitySet; 


begin
  If Not Assigned(FSPPolicyStoreProxys) then
    FSPPolicyStoreProxys:=TSPSPPolicyStoreProxysEntitySet(CreateEntitySet(TSPSPPolicyStoreProxysEntitySet));
  Result:=FSPPolicyStoreProxys;
end;

Function TSPApiData.CreateNewContentTypes : TSPContentTypesEntitySet; 

begin
  Result:=TSPContentTypesEntitySet(CreateEntitySet(TSPContentTypesEntitySet));
end;


Function TSPApiData.GetContentTypes : TSPContentTypesEntitySet; 


begin
  If Not Assigned(FContentTypes) then
    FContentTypes:=TSPContentTypesEntitySet(CreateEntitySet(TSPContentTypesEntitySet));
  Result:=FContentTypes;
end;

Function TSPApiData.CreateNewCreatablesInfos : TSPCreatablesInfosEntitySet; 

begin
  Result:=TSPCreatablesInfosEntitySet(CreateEntitySet(TSPCreatablesInfosEntitySet));
end;


Function TSPApiData.GetCreatablesInfos : TSPCreatablesInfosEntitySet; 


begin
  If Not Assigned(FCreatablesInfos) then
    FCreatablesInfos:=TSPCreatablesInfosEntitySet(CreateEntitySet(TSPCreatablesInfosEntitySet));
  Result:=FCreatablesInfos;
end;

Function TSPApiData.CreateNewDirectorySessions : TSPDirectorySessionsEntitySet; 

begin
  Result:=TSPDirectorySessionsEntitySet(CreateEntitySet(TSPDirectorySessionsEntitySet));
end;


Function TSPApiData.GetDirectorySessions : TSPDirectorySessionsEntitySet; 


begin
  If Not Assigned(FDirectorySessions) then
    FDirectorySessions:=TSPDirectorySessionsEntitySet(CreateEntitySet(TSPDirectorySessionsEntitySet));
  Result:=FDirectorySessions;
end;

Function TSPApiData.CreateNewGroups : TSPGroupsEntitySet; 

begin
  Result:=TSPGroupsEntitySet(CreateEntitySet(TSPGroupsEntitySet));
end;


Function TSPApiData.GetGroups : TSPGroupsEntitySet; 


begin
  If Not Assigned(FGroups) then
    FGroups:=TSPGroupsEntitySet(CreateEntitySet(TSPGroupsEntitySet));
  Result:=FGroups;
end;

Function TSPApiData.CreateNewGroupAndUserStatuss : TSPGroupAndUserStatussEntitySet; 

begin
  Result:=TSPGroupAndUserStatussEntitySet(CreateEntitySet(TSPGroupAndUserStatussEntitySet));
end;


Function TSPApiData.GetGroupAndUserStatuss : TSPGroupAndUserStatussEntitySet; 


begin
  If Not Assigned(FGroupAndUserStatuss) then
    FGroupAndUserStatuss:=TSPGroupAndUserStatussEntitySet(CreateEntitySet(TSPGroupAndUserStatussEntitySet));
  Result:=FGroupAndUserStatuss;
end;

Function TSPApiData.CreateNewLinkCollections : TSPLinkCollectionsEntitySet; 

begin
  Result:=TSPLinkCollectionsEntitySet(CreateEntitySet(TSPLinkCollectionsEntitySet));
end;


Function TSPApiData.GetLinkCollections : TSPLinkCollectionsEntitySet; 


begin
  If Not Assigned(FLinkCollections) then
    FLinkCollections:=TSPLinkCollectionsEntitySet(CreateEntitySet(TSPLinkCollectionsEntitySet));
  Result:=FLinkCollections;
end;

Function TSPApiData.CreateNewMembershipResults : TSPMembershipResultsEntitySet; 

begin
  Result:=TSPMembershipResultsEntitySet(CreateEntitySet(TSPMembershipResultsEntitySet));
end;


Function TSPApiData.GetMembershipResults : TSPMembershipResultsEntitySet; 


begin
  If Not Assigned(FMembershipResults) then
    FMembershipResults:=TSPMembershipResultsEntitySet(CreateEntitySet(TSPMembershipResultsEntitySet));
  Result:=FMembershipResults;
end;

Function TSPApiData.CreateNewMembersInfos : TSPMembersInfosEntitySet; 

begin
  Result:=TSPMembersInfosEntitySet(CreateEntitySet(TSPMembersInfosEntitySet));
end;


Function TSPApiData.GetMembersInfos : TSPMembersInfosEntitySet; 


begin
  If Not Assigned(FMembersInfos) then
    FMembersInfos:=TSPMembersInfosEntitySet(CreateEntitySet(TSPMembersInfosEntitySet));
  Result:=FMembersInfos;
end;

Function TSPApiData.CreateNewMyGroupsResults : TSPMyGroupsResultsEntitySet; 

begin
  Result:=TSPMyGroupsResultsEntitySet(CreateEntitySet(TSPMyGroupsResultsEntitySet));
end;


Function TSPApiData.GetMyGroupsResults : TSPMyGroupsResultsEntitySet; 


begin
  If Not Assigned(FMyGroupsResults) then
    FMyGroupsResults:=TSPMyGroupsResultsEntitySet(CreateEntitySet(TSPMyGroupsResultsEntitySet));
  Result:=FMyGroupsResults;
end;

Function TSPApiData.CreateNewPropertys : TSPPropertysEntitySet; 

begin
  Result:=TSPPropertysEntitySet(CreateEntitySet(TSPPropertysEntitySet));
end;


Function TSPApiData.GetPropertys : TSPPropertysEntitySet; 


begin
  If Not Assigned(FPropertys) then
    FPropertys:=TSPPropertysEntitySet(CreateEntitySet(TSPPropertysEntitySet));
  Result:=FPropertys;
end;

Function TSPApiData.CreateNewPropertyDictionarys : TSPPropertyDictionarysEntitySet; 

begin
  Result:=TSPPropertyDictionarysEntitySet(CreateEntitySet(TSPPropertyDictionarysEntitySet));
end;


Function TSPApiData.GetPropertyDictionarys : TSPPropertyDictionarysEntitySet; 


begin
  If Not Assigned(FPropertyDictionarys) then
    FPropertyDictionarys:=TSPPropertyDictionarysEntitySet(CreateEntitySet(TSPPropertyDictionarysEntitySet));
  Result:=FPropertyDictionarys;
end;

Function TSPApiData.CreateNewSharePointDirectoryProviders : TSPSharePointDirectoryProvidersEntitySet; 

begin
  Result:=TSPSharePointDirectoryProvidersEntitySet(CreateEntitySet(TSPSharePointDirectoryProvidersEntitySet));
end;


Function TSPApiData.GetSharePointDirectoryProviders : TSPSharePointDirectoryProvidersEntitySet; 


begin
  If Not Assigned(FSharePointDirectoryProviders) then
    FSharePointDirectoryProviders:=TSPSharePointDirectoryProvidersEntitySet(CreateEntitySet(TSPSharePointDirectoryProvidersEntitySet));
  Result:=FSharePointDirectoryProviders;
end;

Function TSPApiData.CreateNewSPHelpers : TSPSPHelpersEntitySet; 

begin
  Result:=TSPSPHelpersEntitySet(CreateEntitySet(TSPSPHelpersEntitySet));
end;


Function TSPApiData.GetSPHelpers : TSPSPHelpersEntitySet; 


begin
  If Not Assigned(FSPHelpers) then
    FSPHelpers:=TSPSPHelpersEntitySet(CreateEntitySet(TSPSPHelpersEntitySet));
  Result:=FSPHelpers;
end;

Function TSPApiData.CreateNewUsers : TSPUsersEntitySet; 

begin
  Result:=TSPUsersEntitySet(CreateEntitySet(TSPUsersEntitySet));
end;


Function TSPApiData.GetUsers : TSPUsersEntitySet; 


begin
  If Not Assigned(FUsers) then
    FUsers:=TSPUsersEntitySet(CreateEntitySet(TSPUsersEntitySet));
  Result:=FUsers;
end;

Function TSPApiData.CreateNewUserRequestSchemas : TSPUserRequestSchemasEntitySet; 

begin
  Result:=TSPUserRequestSchemasEntitySet(CreateEntitySet(TSPUserRequestSchemasEntitySet));
end;


Function TSPApiData.GetUserRequestSchemas : TSPUserRequestSchemasEntitySet; 


begin
  If Not Assigned(FUserRequestSchemas) then
    FUserRequestSchemas:=TSPUserRequestSchemasEntitySet(CreateEntitySet(TSPUserRequestSchemasEntitySet));
  Result:=FUserRequestSchemas;
end;

Function TSPApiData.CreateNewDlpPolicyTips : TSPDlpPolicyTipsEntitySet; 

begin
  Result:=TSPDlpPolicyTipsEntitySet(CreateEntitySet(TSPDlpPolicyTipsEntitySet));
end;


Function TSPApiData.GetDlpPolicyTips : TSPDlpPolicyTipsEntitySet; 


begin
  If Not Assigned(FDlpPolicyTips) then
    FDlpPolicyTips:=TSPDlpPolicyTipsEntitySet(CreateEntitySet(TSPDlpPolicyTipsEntitySet));
  Result:=FDlpPolicyTips;
end;

Function TSPApiData.CreateNewEventReceiverDefinitions : TSPEventReceiverDefinitionsEntitySet; 

begin
  Result:=TSPEventReceiverDefinitionsEntitySet(CreateEntitySet(TSPEventReceiverDefinitionsEntitySet));
end;


Function TSPApiData.GetEventReceiverDefinitions : TSPEventReceiverDefinitionsEntitySet; 


begin
  If Not Assigned(FEventReceiverDefinitions) then
    FEventReceiverDefinitions:=TSPEventReceiverDefinitionsEntitySet(CreateEntitySet(TSPEventReceiverDefinitionsEntitySet));
  Result:=FEventReceiverDefinitions;
end;

Function TSPApiData.CreateNewFeatures : TSPFeaturesEntitySet; 

begin
  Result:=TSPFeaturesEntitySet(CreateEntitySet(TSPFeaturesEntitySet));
end;


Function TSPApiData.GetFeatures : TSPFeaturesEntitySet; 


begin
  If Not Assigned(FFeatures) then
    FFeatures:=TSPFeaturesEntitySet(CreateEntitySet(TSPFeaturesEntitySet));
  Result:=FFeatures;
end;

Function TSPApiData.CreateNewFields1 : TSPFields1EntitySet; 

begin
  Result:=TSPFields1EntitySet(CreateEntitySet(TSPFields1EntitySet));
end;


Function TSPApiData.GetFields1 : TSPFields1EntitySet; 


begin
  If Not Assigned(FFields1) then
    FFields1:=TSPFields1EntitySet(CreateEntitySet(TSPFields1EntitySet));
  Result:=FFields1;
end;

Function TSPApiData.CreateNewFieldLinks : TSPFieldLinksEntitySet; 

begin
  Result:=TSPFieldLinksEntitySet(CreateEntitySet(TSPFieldLinksEntitySet));
end;


Function TSPApiData.GetFieldLinks : TSPFieldLinksEntitySet; 


begin
  If Not Assigned(FFieldLinks) then
    FFieldLinks:=TSPFieldLinksEntitySet(CreateEntitySet(TSPFieldLinksEntitySet));
  Result:=FFieldLinks;
end;

Function TSPApiData.CreateNewFieldStringValuess : TSPFieldStringValuessEntitySet; 

begin
  Result:=TSPFieldStringValuessEntitySet(CreateEntitySet(TSPFieldStringValuessEntitySet));
end;


Function TSPApiData.GetFieldStringValuess : TSPFieldStringValuessEntitySet; 


begin
  If Not Assigned(FFieldStringValuess) then
    FFieldStringValuess:=TSPFieldStringValuessEntitySet(CreateEntitySet(TSPFieldStringValuessEntitySet));
  Result:=FFieldStringValuess;
end;

Function TSPApiData.CreateNewFiles12 : TSPFiles12EntitySet; 

begin
  Result:=TSPFiles12EntitySet(CreateEntitySet(TSPFiles12EntitySet));
end;


Function TSPApiData.GetFiles12 : TSPFiles12EntitySet; 


begin
  If Not Assigned(FFiles12) then
    FFiles12:=TSPFiles12EntitySet(CreateEntitySet(TSPFiles12EntitySet));
  Result:=FFiles12;
end;

Function TSPApiData.CreateNewFileVersions : TSPFileVersionsEntitySet; 

begin
  Result:=TSPFileVersionsEntitySet(CreateEntitySet(TSPFileVersionsEntitySet));
end;


Function TSPApiData.GetFileVersions : TSPFileVersionsEntitySet; 


begin
  If Not Assigned(FFileVersions) then
    FFileVersions:=TSPFileVersionsEntitySet(CreateEntitySet(TSPFileVersionsEntitySet));
  Result:=FFileVersions;
end;

Function TSPApiData.CreateNewFolders1 : TSPFolders1EntitySet; 

begin
  Result:=TSPFolders1EntitySet(CreateEntitySet(TSPFolders1EntitySet));
end;


Function TSPApiData.GetFolders1 : TSPFolders1EntitySet; 


begin
  If Not Assigned(FFolders1) then
    FFolders1:=TSPFolders1EntitySet(CreateEntitySet(TSPFolders1EntitySet));
  Result:=FFolders1;
end;

Function TSPApiData.CreateNewForms : TSPFormsEntitySet; 

begin
  Result:=TSPFormsEntitySet(CreateEntitySet(TSPFormsEntitySet));
end;


Function TSPApiData.GetForms : TSPFormsEntitySet; 


begin
  If Not Assigned(FForms) then
    FForms:=TSPFormsEntitySet(CreateEntitySet(TSPFormsEntitySet));
  Result:=FForms;
end;

Function TSPApiData.CreateNewGroups1 : TSPGroups1EntitySet; 

begin
  Result:=TSPGroups1EntitySet(CreateEntitySet(TSPGroups1EntitySet));
end;


Function TSPApiData.GetGroups1 : TSPGroups1EntitySet; 


begin
  If Not Assigned(FGroups1) then
    FGroups1:=TSPGroups1EntitySet(CreateEntitySet(TSPGroups1EntitySet));
  Result:=FGroups1;
end;

Function TSPApiData.CreateNewInformationRightsManagementSettingss : TSPInformationRightsManagementSettingssEntitySet; 

begin
  Result:=TSPInformationRightsManagementSettingssEntitySet(CreateEntitySet(TSPInformationRightsManagementSettingssEntitySet));
end;


Function TSPApiData.GetInformationRightsManagementSettingss : TSPInformationRightsManagementSettingssEntitySet; 


begin
  If Not Assigned(FInformationRightsManagementSettingss) then
    FInformationRightsManagementSettingss:=TSPInformationRightsManagementSettingssEntitySet(CreateEntitySet(TSPInformationRightsManagementSettingssEntitySet));
  Result:=FInformationRightsManagementSettingss;
end;

Function TSPApiData.CreateNewListItems : TSPListItemsEntitySet; 

begin
  Result:=TSPListItemsEntitySet(CreateEntitySet(TSPListItemsEntitySet));
end;


Function TSPApiData.GetListItems : TSPListItemsEntitySet; 


begin
  If Not Assigned(FListItems) then
    FListItems:=TSPListItemsEntitySet(CreateEntitySet(TSPListItemsEntitySet));
  Result:=FListItems;
end;

Function TSPApiData.CreateNewListTemplates : TSPListTemplatesEntitySet; 

begin
  Result:=TSPListTemplatesEntitySet(CreateEntitySet(TSPListTemplatesEntitySet));
end;


Function TSPApiData.GetListTemplates : TSPListTemplatesEntitySet; 


begin
  If Not Assigned(FListTemplates) then
    FListTemplates:=TSPListTemplatesEntitySet(CreateEntitySet(TSPListTemplatesEntitySet));
  Result:=FListTemplates;
end;

Function TSPApiData.CreateNewMicrofeedAttachmentStores : TSPMicrofeedAttachmentStoresEntitySet; 

begin
  Result:=TSPMicrofeedAttachmentStoresEntitySet(CreateEntitySet(TSPMicrofeedAttachmentStoresEntitySet));
end;


Function TSPApiData.GetMicrofeedAttachmentStores : TSPMicrofeedAttachmentStoresEntitySet; 


begin
  If Not Assigned(FMicrofeedAttachmentStores) then
    FMicrofeedAttachmentStores:=TSPMicrofeedAttachmentStoresEntitySet(CreateEntitySet(TSPMicrofeedAttachmentStoresEntitySet));
  Result:=FMicrofeedAttachmentStores;
end;

Function TSPApiData.CreateNewMicrofeedDatas : TSPMicrofeedDatasEntitySet; 

begin
  Result:=TSPMicrofeedDatasEntitySet(CreateEntitySet(TSPMicrofeedDatasEntitySet));
end;


Function TSPApiData.GetMicrofeedDatas : TSPMicrofeedDatasEntitySet; 


begin
  If Not Assigned(FMicrofeedDatas) then
    FMicrofeedDatas:=TSPMicrofeedDatasEntitySet(CreateEntitySet(TSPMicrofeedDatasEntitySet));
  Result:=FMicrofeedDatas;
end;

Function TSPApiData.CreateNewMicrofeedManagers : TSPMicrofeedManagersEntitySet; 

begin
  Result:=TSPMicrofeedManagersEntitySet(CreateEntitySet(TSPMicrofeedManagersEntitySet));
end;


Function TSPApiData.GetMicrofeedManagers : TSPMicrofeedManagersEntitySet; 


begin
  If Not Assigned(FMicrofeedManagers) then
    FMicrofeedManagers:=TSPMicrofeedManagersEntitySet(CreateEntitySet(TSPMicrofeedManagersEntitySet));
  Result:=FMicrofeedManagers;
end;

Function TSPApiData.CreateNewMicrofeedPostDefinitionManagers : TSPMicrofeedPostDefinitionManagersEntitySet; 

begin
  Result:=TSPMicrofeedPostDefinitionManagersEntitySet(CreateEntitySet(TSPMicrofeedPostDefinitionManagersEntitySet));
end;


Function TSPApiData.GetMicrofeedPostDefinitionManagers : TSPMicrofeedPostDefinitionManagersEntitySet; 


begin
  If Not Assigned(FMicrofeedPostDefinitionManagers) then
    FMicrofeedPostDefinitionManagers:=TSPMicrofeedPostDefinitionManagersEntitySet(CreateEntitySet(TSPMicrofeedPostDefinitionManagersEntitySet));
  Result:=FMicrofeedPostDefinitionManagers;
end;

Function TSPApiData.CreateNewMicrofeedPostOptionCollections : TSPMicrofeedPostOptionCollectionsEntitySet; 

begin
  Result:=TSPMicrofeedPostOptionCollectionsEntitySet(CreateEntitySet(TSPMicrofeedPostOptionCollectionsEntitySet));
end;


Function TSPApiData.GetMicrofeedPostOptionCollections : TSPMicrofeedPostOptionCollectionsEntitySet; 


begin
  If Not Assigned(FMicrofeedPostOptionCollections) then
    FMicrofeedPostOptionCollections:=TSPMicrofeedPostOptionCollectionsEntitySet(CreateEntitySet(TSPMicrofeedPostOptionCollectionsEntitySet));
  Result:=FMicrofeedPostOptionCollections;
end;

Function TSPApiData.CreateNewMicrofeedStores : TSPMicrofeedStoresEntitySet; 

begin
  Result:=TSPMicrofeedStoresEntitySet(CreateEntitySet(TSPMicrofeedStoresEntitySet));
end;


Function TSPApiData.GetMicrofeedStores : TSPMicrofeedStoresEntitySet; 


begin
  If Not Assigned(FMicrofeedStores) then
    FMicrofeedStores:=TSPMicrofeedStoresEntitySet(CreateEntitySet(TSPMicrofeedStoresEntitySet));
  Result:=FMicrofeedStores;
end;

Function TSPApiData.CreateNewMountedFolderInfos : TSPMountedFolderInfosEntitySet; 

begin
  Result:=TSPMountedFolderInfosEntitySet(CreateEntitySet(TSPMountedFolderInfosEntitySet));
end;


Function TSPApiData.GetMountedFolderInfos : TSPMountedFolderInfosEntitySet; 


begin
  If Not Assigned(FMountedFolderInfos) then
    FMountedFolderInfos:=TSPMountedFolderInfosEntitySet(CreateEntitySet(TSPMountedFolderInfosEntitySet));
  Result:=FMountedFolderInfos;
end;

Function TSPApiData.CreateNewMountPoints : TSPMountPointsEntitySet; 

begin
  Result:=TSPMountPointsEntitySet(CreateEntitySet(TSPMountPointsEntitySet));
end;


Function TSPApiData.GetMountPoints : TSPMountPointsEntitySet; 


begin
  If Not Assigned(FMountPoints) then
    FMountPoints:=TSPMountPointsEntitySet(CreateEntitySet(TSPMountPointsEntitySet));
  Result:=FMountPoints;
end;

Function TSPApiData.CreateNewMountPointInfos : TSPMountPointInfosEntitySet; 

begin
  Result:=TSPMountPointInfosEntitySet(CreateEntitySet(TSPMountPointInfosEntitySet));
end;


Function TSPApiData.GetMountPointInfos : TSPMountPointInfosEntitySet; 


begin
  If Not Assigned(FMountPointInfos) then
    FMountPointInfos:=TSPMountPointInfosEntitySet(CreateEntitySet(TSPMountPointInfosEntitySet));
  Result:=FMountPointInfos;
end;

Function TSPApiData.CreateNewMoveCopyUtils : TSPMoveCopyUtilsEntitySet; 

begin
  Result:=TSPMoveCopyUtilsEntitySet(CreateEntitySet(TSPMoveCopyUtilsEntitySet));
end;


Function TSPApiData.GetMoveCopyUtils : TSPMoveCopyUtilsEntitySet; 


begin
  If Not Assigned(FMoveCopyUtils) then
    FMoveCopyUtils:=TSPMoveCopyUtilsEntitySet(CreateEntitySet(TSPMoveCopyUtilsEntitySet));
  Result:=FMoveCopyUtils;
end;

Function TSPApiData.CreateNewNavigations : TSPNavigationsEntitySet; 

begin
  Result:=TSPNavigationsEntitySet(CreateEntitySet(TSPNavigationsEntitySet));
end;


Function TSPApiData.GetNavigations : TSPNavigationsEntitySet; 


begin
  If Not Assigned(FNavigations) then
    FNavigations:=TSPNavigationsEntitySet(CreateEntitySet(TSPNavigationsEntitySet));
  Result:=FNavigations;
end;

Function TSPApiData.CreateNewNavigationNodes : TSPNavigationNodesEntitySet; 

begin
  Result:=TSPNavigationNodesEntitySet(CreateEntitySet(TSPNavigationNodesEntitySet));
end;


Function TSPApiData.GetNavigationNodes : TSPNavigationNodesEntitySet; 


begin
  If Not Assigned(FNavigationNodes) then
    FNavigationNodes:=TSPNavigationNodesEntitySet(CreateEntitySet(TSPNavigationNodesEntitySet));
  Result:=FNavigationNodes;
end;

Function TSPApiData.CreateNewNativeClients : TSPNativeClientsEntitySet; 

begin
  Result:=TSPNativeClientsEntitySet(CreateEntitySet(TSPNativeClientsEntitySet));
end;


Function TSPApiData.GetNativeClients : TSPNativeClientsEntitySet; 


begin
  If Not Assigned(FNativeClients) then
    FNativeClients:=TSPNativeClientsEntitySet(CreateEntitySet(TSPNativeClientsEntitySet));
  Result:=FNativeClients;
end;

Function TSPApiData.CreateNewObjectSharingInformations : TSPObjectSharingInformationsEntitySet; 

begin
  Result:=TSPObjectSharingInformationsEntitySet(CreateEntitySet(TSPObjectSharingInformationsEntitySet));
end;


Function TSPApiData.GetObjectSharingInformations : TSPObjectSharingInformationsEntitySet; 


begin
  If Not Assigned(FObjectSharingInformations) then
    FObjectSharingInformations:=TSPObjectSharingInformationsEntitySet(CreateEntitySet(TSPObjectSharingInformationsEntitySet));
  Result:=FObjectSharingInformations;
end;

Function TSPApiData.CreateNewObjectSharingInformationUsers : TSPObjectSharingInformationUsersEntitySet; 

begin
  Result:=TSPObjectSharingInformationUsersEntitySet(CreateEntitySet(TSPObjectSharingInformationUsersEntitySet));
end;


Function TSPApiData.GetObjectSharingInformationUsers : TSPObjectSharingInformationUsersEntitySet; 


begin
  If Not Assigned(FObjectSharingInformationUsers) then
    FObjectSharingInformationUsers:=TSPObjectSharingInformationUsersEntitySet(CreateEntitySet(TSPObjectSharingInformationUsersEntitySet));
  Result:=FObjectSharingInformationUsers;
end;

Function TSPApiData.CreateNewObjectSharingSettingss : TSPObjectSharingSettingssEntitySet; 

begin
  Result:=TSPObjectSharingSettingssEntitySet(CreateEntitySet(TSPObjectSharingSettingssEntitySet));
end;


Function TSPApiData.GetObjectSharingSettingss : TSPObjectSharingSettingssEntitySet; 


begin
  If Not Assigned(FObjectSharingSettingss) then
    FObjectSharingSettingss:=TSPObjectSharingSettingssEntitySet(CreateEntitySet(TSPObjectSharingSettingssEntitySet));
  Result:=FObjectSharingSettingss;
end;

Function TSPApiData.CreateNewClickManagers : TSPClickManagersEntitySet; 

begin
  Result:=TSPClickManagersEntitySet(CreateEntitySet(TSPClickManagersEntitySet));
end;


Function TSPApiData.GetClickManagers : TSPClickManagersEntitySet; 


begin
  If Not Assigned(FClickManagers) then
    FClickManagers:=TSPClickManagersEntitySet(CreateEntitySet(TSPClickManagersEntitySet));
  Result:=FClickManagers;
end;

Function TSPApiData.CreateNewPickerSettingss : TSPPickerSettingssEntitySet; 

begin
  Result:=TSPPickerSettingssEntitySet(CreateEntitySet(TSPPickerSettingssEntitySet));
end;


Function TSPApiData.GetPickerSettingss : TSPPickerSettingssEntitySet; 


begin
  If Not Assigned(FPickerSettingss) then
    FPickerSettingss:=TSPPickerSettingssEntitySet(CreateEntitySet(TSPPickerSettingssEntitySet));
  Result:=FPickerSettingss;
end;

Function TSPApiData.CreateNewPrincipals : TSPPrincipalsEntitySet; 

begin
  Result:=TSPPrincipalsEntitySet(CreateEntitySet(TSPPrincipalsEntitySet));
end;


Function TSPApiData.GetPrincipals : TSPPrincipalsEntitySet; 


begin
  If Not Assigned(FPrincipals) then
    FPrincipals:=TSPPrincipalsEntitySet(CreateEntitySet(TSPPrincipalsEntitySet));
  Result:=FPrincipals;
end;

Function TSPApiData.CreateNewPropertyValuess : TSPPropertyValuessEntitySet; 

begin
  Result:=TSPPropertyValuessEntitySet(CreateEntitySet(TSPPropertyValuessEntitySet));
end;


Function TSPApiData.GetPropertyValuess : TSPPropertyValuessEntitySet; 


begin
  If Not Assigned(FPropertyValuess) then
    FPropertyValuess:=TSPPropertyValuessEntitySet(CreateEntitySet(TSPPropertyValuessEntitySet));
  Result:=FPropertyValuess;
end;

Function TSPApiData.CreateNewPersonMagazines : TSPPersonMagazinesEntitySet; 

begin
  Result:=TSPPersonMagazinesEntitySet(CreateEntitySet(TSPPersonMagazinesEntitySet));
end;


Function TSPApiData.GetPersonMagazines : TSPPersonMagazinesEntitySet; 


begin
  If Not Assigned(FPersonMagazines) then
    FPersonMagazines:=TSPPersonMagazinesEntitySet(CreateEntitySet(TSPPersonMagazinesEntitySet));
  Result:=FPersonMagazines;
end;

Function TSPApiData.CreateNewPointPublishingDocPropss : TSPPointPublishingDocPropssEntitySet; 

begin
  Result:=TSPPointPublishingDocPropssEntitySet(CreateEntitySet(TSPPointPublishingDocPropssEntitySet));
end;


Function TSPApiData.GetPointPublishingDocPropss : TSPPointPublishingDocPropssEntitySet; 


begin
  If Not Assigned(FPointPublishingDocPropss) then
    FPointPublishingDocPropss:=TSPPointPublishingDocPropssEntitySet(CreateEntitySet(TSPPointPublishingDocPropssEntitySet));
  Result:=FPointPublishingDocPropss;
end;

Function TSPApiData.CreateNewPointPublishingMagazinePropss : TSPPointPublishingMagazinePropssEntitySet; 

begin
  Result:=TSPPointPublishingMagazinePropssEntitySet(CreateEntitySet(TSPPointPublishingMagazinePropssEntitySet));
end;


Function TSPApiData.GetPointPublishingMagazinePropss : TSPPointPublishingMagazinePropssEntitySet; 


begin
  If Not Assigned(FPointPublishingMagazinePropss) then
    FPointPublishingMagazinePropss:=TSPPointPublishingMagazinePropssEntitySet(CreateEntitySet(TSPPointPublishingMagazinePropssEntitySet));
  Result:=FPointPublishingMagazinePropss;
end;

Function TSPApiData.CreateNewPointPublishingPosts : TSPPointPublishingPostsEntitySet; 

begin
  Result:=TSPPointPublishingPostsEntitySet(CreateEntitySet(TSPPointPublishingPostsEntitySet));
end;


Function TSPApiData.GetPointPublishingPosts : TSPPointPublishingPostsEntitySet; 


begin
  If Not Assigned(FPointPublishingPosts) then
    FPointPublishingPosts:=TSPPointPublishingPostsEntitySet(CreateEntitySet(TSPPointPublishingPostsEntitySet));
  Result:=FPointPublishingPosts;
end;

Function TSPApiData.CreateNewPointPublishingPostServiceManagers : TSPPointPublishingPostServiceManagersEntitySet; 

begin
  Result:=TSPPointPublishingPostServiceManagersEntitySet(CreateEntitySet(TSPPointPublishingPostServiceManagersEntitySet));
end;


Function TSPApiData.GetPointPublishingPostServiceManagers : TSPPointPublishingPostServiceManagersEntitySet; 


begin
  If Not Assigned(FPointPublishingPostServiceManagers) then
    FPointPublishingPostServiceManagers:=TSPPointPublishingPostServiceManagersEntitySet(CreateEntitySet(TSPPointPublishingPostServiceManagersEntitySet));
  Result:=FPointPublishingPostServiceManagers;
end;

Function TSPApiData.CreateNewPointPublishingSiteManagers : TSPPointPublishingSiteManagersEntitySet; 

begin
  Result:=TSPPointPublishingSiteManagersEntitySet(CreateEntitySet(TSPPointPublishingSiteManagersEntitySet));
end;


Function TSPApiData.GetPointPublishingSiteManagers : TSPPointPublishingSiteManagersEntitySet; 


begin
  If Not Assigned(FPointPublishingSiteManagers) then
    FPointPublishingSiteManagers:=TSPPointPublishingSiteManagersEntitySet(CreateEntitySet(TSPPointPublishingSiteManagersEntitySet));
  Result:=FPointPublishingSiteManagers;
end;

Function TSPApiData.CreateNewPointPublishingSiteStatuss : TSPPointPublishingSiteStatussEntitySet; 

begin
  Result:=TSPPointPublishingSiteStatussEntitySet(CreateEntitySet(TSPPointPublishingSiteStatussEntitySet));
end;


Function TSPApiData.GetPointPublishingSiteStatuss : TSPPointPublishingSiteStatussEntitySet; 


begin
  If Not Assigned(FPointPublishingSiteStatuss) then
    FPointPublishingSiteStatuss:=TSPPointPublishingSiteStatussEntitySet(CreateEntitySet(TSPPointPublishingSiteStatussEntitySet));
  Result:=FPointPublishingSiteStatuss;
end;

Function TSPApiData.CreateNewPointPublishingUsers : TSPPointPublishingUsersEntitySet; 

begin
  Result:=TSPPointPublishingUsersEntitySet(CreateEntitySet(TSPPointPublishingUsersEntitySet));
end;


Function TSPApiData.GetPointPublishingUsers : TSPPointPublishingUsersEntitySet; 


begin
  If Not Assigned(FPointPublishingUsers) then
    FPointPublishingUsers:=TSPPointPublishingUsersEntitySet(CreateEntitySet(TSPPointPublishingUsersEntitySet));
  Result:=FPointPublishingUsers;
end;

Function TSPApiData.CreateNewSearchs : TSPSearchsEntitySet; 

begin
  Result:=TSPSearchsEntitySet(CreateEntitySet(TSPSearchsEntitySet));
end;


Function TSPApiData.GetSearchs : TSPSearchsEntitySet; 


begin
  If Not Assigned(FSearchs) then
    FSearchs:=TSPSearchsEntitySet(CreateEntitySet(TSPSearchsEntitySet));
  Result:=FSearchs;
end;

Function TSPApiData.CreateNewSpotlightChannels : TSPSpotlightChannelsEntitySet; 

begin
  Result:=TSPSpotlightChannelsEntitySet(CreateEntitySet(TSPSpotlightChannelsEntitySet));
end;


Function TSPApiData.GetSpotlightChannels : TSPSpotlightChannelsEntitySet; 


begin
  If Not Assigned(FSpotlightChannels) then
    FSpotlightChannels:=TSPSpotlightChannelsEntitySet(CreateEntitySet(TSPSpotlightChannelsEntitySet));
  Result:=FSpotlightChannels;
end;

Function TSPApiData.CreateNewSpotlightVideos : TSPSpotlightVideosEntitySet; 

begin
  Result:=TSPSpotlightVideosEntitySet(CreateEntitySet(TSPSpotlightVideosEntitySet));
end;


Function TSPApiData.GetSpotlightVideos : TSPSpotlightVideosEntitySet; 


begin
  If Not Assigned(FSpotlightVideos) then
    FSpotlightVideos:=TSPSpotlightVideosEntitySet(CreateEntitySet(TSPSpotlightVideosEntitySet));
  Result:=FSpotlightVideos;
end;

Function TSPApiData.CreateNewVideoChannels : TSPVideoChannelsEntitySet; 

begin
  Result:=TSPVideoChannelsEntitySet(CreateEntitySet(TSPVideoChannelsEntitySet));
end;


Function TSPApiData.GetVideoChannels : TSPVideoChannelsEntitySet; 


begin
  If Not Assigned(FVideoChannels) then
    FVideoChannels:=TSPVideoChannelsEntitySet(CreateEntitySet(TSPVideoChannelsEntitySet));
  Result:=FVideoChannels;
end;

Function TSPApiData.CreateNewVideoItems : TSPVideoItemsEntitySet; 

begin
  Result:=TSPVideoItemsEntitySet(CreateEntitySet(TSPVideoItemsEntitySet));
end;


Function TSPApiData.GetVideoItems : TSPVideoItemsEntitySet; 


begin
  If Not Assigned(FVideoItems) then
    FVideoItems:=TSPVideoItemsEntitySet(CreateEntitySet(TSPVideoItemsEntitySet));
  Result:=FVideoItems;
end;

Function TSPApiData.CreateNewVideoPermissionGroups : TSPVideoPermissionGroupsEntitySet; 

begin
  Result:=TSPVideoPermissionGroupsEntitySet(CreateEntitySet(TSPVideoPermissionGroupsEntitySet));
end;


Function TSPApiData.GetVideoPermissionGroups : TSPVideoPermissionGroupsEntitySet; 


begin
  If Not Assigned(FVideoPermissionGroups) then
    FVideoPermissionGroups:=TSPVideoPermissionGroupsEntitySet(CreateEntitySet(TSPVideoPermissionGroupsEntitySet));
  Result:=FVideoPermissionGroups;
end;

Function TSPApiData.CreateNewVideoServiceDiscoverers : TSPVideoServiceDiscoverersEntitySet; 

begin
  Result:=TSPVideoServiceDiscoverersEntitySet(CreateEntitySet(TSPVideoServiceDiscoverersEntitySet));
end;


Function TSPApiData.GetVideoServiceDiscoverers : TSPVideoServiceDiscoverersEntitySet; 


begin
  If Not Assigned(FVideoServiceDiscoverers) then
    FVideoServiceDiscoverers:=TSPVideoServiceDiscoverersEntitySet(CreateEntitySet(TSPVideoServiceDiscoverersEntitySet));
  Result:=FVideoServiceDiscoverers;
end;

Function TSPApiData.CreateNewVideoServiceManagers : TSPVideoServiceManagersEntitySet; 

begin
  Result:=TSPVideoServiceManagersEntitySet(CreateEntitySet(TSPVideoServiceManagersEntitySet));
end;


Function TSPApiData.GetVideoServiceManagers : TSPVideoServiceManagersEntitySet; 


begin
  If Not Assigned(FVideoServiceManagers) then
    FVideoServiceManagers:=TSPVideoServiceManagersEntitySet(CreateEntitySet(TSPVideoServiceManagersEntitySet));
  Result:=FVideoServiceManagers;
end;

Function TSPApiData.CreateNewPushNotificationSubscribers : TSPPushNotificationSubscribersEntitySet; 

begin
  Result:=TSPPushNotificationSubscribersEntitySet(CreateEntitySet(TSPPushNotificationSubscribersEntitySet));
end;


Function TSPApiData.GetPushNotificationSubscribers : TSPPushNotificationSubscribersEntitySet; 


begin
  If Not Assigned(FPushNotificationSubscribers) then
    FPushNotificationSubscribers:=TSPPushNotificationSubscribersEntitySet(CreateEntitySet(TSPPushNotificationSubscribersEntitySet));
  Result:=FPushNotificationSubscribers;
end;

Function TSPApiData.CreateNewRecycleBinItems : TSPRecycleBinItemsEntitySet; 

begin
  Result:=TSPRecycleBinItemsEntitySet(CreateEntitySet(TSPRecycleBinItemsEntitySet));
end;


Function TSPApiData.GetRecycleBinItems : TSPRecycleBinItemsEntitySet; 


begin
  If Not Assigned(FRecycleBinItems) then
    FRecycleBinItems:=TSPRecycleBinItemsEntitySet(CreateEntitySet(TSPRecycleBinItemsEntitySet));
  Result:=FRecycleBinItems;
end;

Function TSPApiData.CreateNewRegionalSettingss : TSPRegionalSettingssEntitySet; 

begin
  Result:=TSPRegionalSettingssEntitySet(CreateEntitySet(TSPRegionalSettingssEntitySet));
end;


Function TSPApiData.GetRegionalSettingss : TSPRegionalSettingssEntitySet; 


begin
  If Not Assigned(FRegionalSettingss) then
    FRegionalSettingss:=TSPRegionalSettingssEntitySet(CreateEntitySet(TSPRegionalSettingssEntitySet));
  Result:=FRegionalSettingss;
end;

Function TSPApiData.CreateNewRelatedFields : TSPRelatedFieldsEntitySet; 

begin
  Result:=TSPRelatedFieldsEntitySet(CreateEntitySet(TSPRelatedFieldsEntitySet));
end;


Function TSPApiData.GetRelatedFields : TSPRelatedFieldsEntitySet; 


begin
  If Not Assigned(FRelatedFields) then
    FRelatedFields:=TSPRelatedFieldsEntitySet(CreateEntitySet(TSPRelatedFieldsEntitySet));
  Result:=FRelatedFields;
end;

Function TSPApiData.CreateNewRelatedItemManagers : TSPRelatedItemManagersEntitySet; 

begin
  Result:=TSPRelatedItemManagersEntitySet(CreateEntitySet(TSPRelatedItemManagersEntitySet));
end;


Function TSPApiData.GetRelatedItemManagers : TSPRelatedItemManagersEntitySet; 


begin
  If Not Assigned(FRelatedItemManagers) then
    FRelatedItemManagers:=TSPRelatedItemManagersEntitySet(CreateEntitySet(TSPRelatedItemManagersEntitySet));
  Result:=FRelatedItemManagers;
end;

Function TSPApiData.CreateNewRemoteWebs : TSPRemoteWebsEntitySet; 

begin
  Result:=TSPRemoteWebsEntitySet(CreateEntitySet(TSPRemoteWebsEntitySet));
end;


Function TSPApiData.GetRemoteWebs : TSPRemoteWebsEntitySet; 


begin
  If Not Assigned(FRemoteWebs) then
    FRemoteWebs:=TSPRemoteWebsEntitySet(CreateEntitySet(TSPRemoteWebsEntitySet));
  Result:=FRemoteWebs;
end;

Function TSPApiData.CreateNewRequestContexts1 : TSPRequestContexts1EntitySet; 

begin
  Result:=TSPRequestContexts1EntitySet(CreateEntitySet(TSPRequestContexts1EntitySet));
end;


Function TSPApiData.GetRequestContexts1 : TSPRequestContexts1EntitySet; 


begin
  If Not Assigned(FRequestContexts1) then
    FRequestContexts1:=TSPRequestContexts1EntitySet(CreateEntitySet(TSPRequestContexts1EntitySet));
  Result:=FRequestContexts1;
end;

Function TSPApiData.CreateNewRoleAssignments : TSPRoleAssignmentsEntitySet; 

begin
  Result:=TSPRoleAssignmentsEntitySet(CreateEntitySet(TSPRoleAssignmentsEntitySet));
end;


Function TSPApiData.GetRoleAssignments : TSPRoleAssignmentsEntitySet; 


begin
  If Not Assigned(FRoleAssignments) then
    FRoleAssignments:=TSPRoleAssignmentsEntitySet(CreateEntitySet(TSPRoleAssignmentsEntitySet));
  Result:=FRoleAssignments;
end;

Function TSPApiData.CreateNewRoleDefinitions : TSPRoleDefinitionsEntitySet; 

begin
  Result:=TSPRoleDefinitionsEntitySet(CreateEntitySet(TSPRoleDefinitionsEntitySet));
end;


Function TSPApiData.GetRoleDefinitions : TSPRoleDefinitionsEntitySet; 


begin
  If Not Assigned(FRoleDefinitions) then
    FRoleDefinitions:=TSPRoleDefinitionsEntitySet(CreateEntitySet(TSPRoleDefinitionsEntitySet));
  Result:=FRoleDefinitions;
end;

Function TSPApiData.CreateNewSecurableObjects : TSPSecurableObjectsEntitySet; 

begin
  Result:=TSPSecurableObjectsEntitySet(CreateEntitySet(TSPSecurableObjectsEntitySet));
end;


Function TSPApiData.GetSecurableObjects : TSPSecurableObjectsEntitySet; 


begin
  If Not Assigned(FSecurableObjects) then
    FSecurableObjects:=TSPSecurableObjectsEntitySet(CreateEntitySet(TSPSecurableObjectsEntitySet));
  Result:=FSecurableObjects;
end;

Function TSPApiData.CreateNewServerSettingss : TSPServerSettingssEntitySet; 

begin
  Result:=TSPServerSettingssEntitySet(CreateEntitySet(TSPServerSettingssEntitySet));
end;


Function TSPApiData.GetServerSettingss : TSPServerSettingssEntitySet; 


begin
  If Not Assigned(FServerSettingss) then
    FServerSettingss:=TSPServerSettingssEntitySet(CreateEntitySet(TSPServerSettingssEntitySet));
  Result:=FServerSettingss;
end;

Function TSPApiData.CreateNewSharePointSharingSettingss : TSPSharePointSharingSettingssEntitySet; 

begin
  Result:=TSPSharePointSharingSettingssEntitySet(CreateEntitySet(TSPSharePointSharingSettingssEntitySet));
end;


Function TSPApiData.GetSharePointSharingSettingss : TSPSharePointSharingSettingssEntitySet; 


begin
  If Not Assigned(FSharePointSharingSettingss) then
    FSharePointSharingSettingss:=TSPSharePointSharingSettingssEntitySet(CreateEntitySet(TSPSharePointSharingSettingssEntitySet));
  Result:=FSharePointSharingSettingss;
end;

Function TSPApiData.CreateNewDocumentSharingManagers : TSPDocumentSharingManagersEntitySet; 

begin
  Result:=TSPDocumentSharingManagersEntitySet(CreateEntitySet(TSPDocumentSharingManagersEntitySet));
end;


Function TSPApiData.GetDocumentSharingManagers : TSPDocumentSharingManagersEntitySet; 


begin
  If Not Assigned(FDocumentSharingManagers) then
    FDocumentSharingManagers:=TSPDocumentSharingManagersEntitySet(CreateEntitySet(TSPDocumentSharingManagersEntitySet));
  Result:=FDocumentSharingManagers;
end;

Function TSPApiData.CreateNewWebSharingManagers : TSPWebSharingManagersEntitySet; 

begin
  Result:=TSPWebSharingManagersEntitySet(CreateEntitySet(TSPWebSharingManagersEntitySet));
end;


Function TSPApiData.GetWebSharingManagers : TSPWebSharingManagersEntitySet; 


begin
  If Not Assigned(FWebSharingManagers) then
    FWebSharingManagers:=TSPWebSharingManagersEntitySet(CreateEntitySet(TSPWebSharingManagersEntitySet));
  Result:=FWebSharingManagers;
end;

Function TSPApiData.CreateNewSharingResults : TSPSharingResultsEntitySet; 

begin
  Result:=TSPSharingResultsEntitySet(CreateEntitySet(TSPSharingResultsEntitySet));
end;


Function TSPApiData.GetSharingResults : TSPSharingResultsEntitySet; 


begin
  If Not Assigned(FSharingResults) then
    FSharingResults:=TSPSharingResultsEntitySet(CreateEntitySet(TSPSharingResultsEntitySet));
  Result:=FSharingResults;
end;

Function TSPApiData.CreateNewSiteHealthSummarys : TSPSiteHealthSummarysEntitySet; 

begin
  Result:=TSPSiteHealthSummarysEntitySet(CreateEntitySet(TSPSiteHealthSummarysEntitySet));
end;


Function TSPApiData.GetSiteHealthSummarys : TSPSiteHealthSummarysEntitySet; 


begin
  If Not Assigned(FSiteHealthSummarys) then
    FSiteHealthSummarys:=TSPSiteHealthSummarysEntitySet(CreateEntitySet(TSPSiteHealthSummarysEntitySet));
  Result:=FSiteHealthSummarys;
end;

Function TSPApiData.CreateNewSiteUrls : TSPSiteUrlsEntitySet; 

begin
  Result:=TSPSiteUrlsEntitySet(CreateEntitySet(TSPSiteUrlsEntitySet));
end;


Function TSPApiData.GetSiteUrls : TSPSiteUrlsEntitySet; 


begin
  If Not Assigned(FSiteUrls) then
    FSiteUrls:=TSPSiteUrlsEntitySet(CreateEntitySet(TSPSiteUrlsEntitySet));
  Result:=FSiteUrls;
end;

Function TSPApiData.CreateNewSocialAnnouncementManagers : TSPSocialAnnouncementManagersEntitySet; 

begin
  Result:=TSPSocialAnnouncementManagersEntitySet(CreateEntitySet(TSPSocialAnnouncementManagersEntitySet));
end;


Function TSPApiData.GetSocialAnnouncementManagers : TSPSocialAnnouncementManagersEntitySet; 


begin
  If Not Assigned(FSocialAnnouncementManagers) then
    FSocialAnnouncementManagers:=TSPSocialAnnouncementManagersEntitySet(CreateEntitySet(TSPSocialAnnouncementManagersEntitySet));
  Result:=FSocialAnnouncementManagers;
end;

Function TSPApiData.CreateNewSocialFeedManagers : TSPSocialFeedManagersEntitySet; 

begin
  Result:=TSPSocialFeedManagersEntitySet(CreateEntitySet(TSPSocialFeedManagersEntitySet));
end;


Function TSPApiData.GetSocialFeedManagers : TSPSocialFeedManagersEntitySet; 


begin
  If Not Assigned(FSocialFeedManagers) then
    FSocialFeedManagers:=TSPSocialFeedManagersEntitySet(CreateEntitySet(TSPSocialFeedManagersEntitySet));
  Result:=FSocialFeedManagers;
end;

Function TSPApiData.CreateNewSocialFollowingManagers : TSPSocialFollowingManagersEntitySet; 

begin
  Result:=TSPSocialFollowingManagersEntitySet(CreateEntitySet(TSPSocialFollowingManagersEntitySet));
end;


Function TSPApiData.GetSocialFollowingManagers : TSPSocialFollowingManagersEntitySet; 


begin
  If Not Assigned(FSocialFollowingManagers) then
    FSocialFollowingManagers:=TSPSocialFollowingManagersEntitySet(CreateEntitySet(TSPSocialFollowingManagersEntitySet));
  Result:=FSocialFollowingManagers;
end;

Function TSPApiData.CreateNewSocialRestActors : TSPSocialRestActorsEntitySet; 

begin
  Result:=TSPSocialRestActorsEntitySet(CreateEntitySet(TSPSocialRestActorsEntitySet));
end;


Function TSPApiData.GetSocialRestActors : TSPSocialRestActorsEntitySet; 


begin
  If Not Assigned(FSocialRestActors) then
    FSocialRestActors:=TSPSocialRestActorsEntitySet(CreateEntitySet(TSPSocialRestActorsEntitySet));
  Result:=FSocialRestActors;
end;

Function TSPApiData.CreateNewSocialRestFeeds : TSPSocialRestFeedsEntitySet; 

begin
  Result:=TSPSocialRestFeedsEntitySet(CreateEntitySet(TSPSocialRestFeedsEntitySet));
end;


Function TSPApiData.GetSocialRestFeeds : TSPSocialRestFeedsEntitySet; 


begin
  If Not Assigned(FSocialRestFeeds) then
    FSocialRestFeeds:=TSPSocialRestFeedsEntitySet(CreateEntitySet(TSPSocialRestFeedsEntitySet));
  Result:=FSocialRestFeeds;
end;

Function TSPApiData.CreateNewSocialRestFeedManagers : TSPSocialRestFeedManagersEntitySet; 

begin
  Result:=TSPSocialRestFeedManagersEntitySet(CreateEntitySet(TSPSocialRestFeedManagersEntitySet));
end;


Function TSPApiData.GetSocialRestFeedManagers : TSPSocialRestFeedManagersEntitySet; 


begin
  If Not Assigned(FSocialRestFeedManagers) then
    FSocialRestFeedManagers:=TSPSocialRestFeedManagersEntitySet(CreateEntitySet(TSPSocialRestFeedManagersEntitySet));
  Result:=FSocialRestFeedManagers;
end;

Function TSPApiData.CreateNewSocialRestFollowingManagers : TSPSocialRestFollowingManagersEntitySet; 

begin
  Result:=TSPSocialRestFollowingManagersEntitySet(CreateEntitySet(TSPSocialRestFollowingManagersEntitySet));
end;


Function TSPApiData.GetSocialRestFollowingManagers : TSPSocialRestFollowingManagersEntitySet; 


begin
  If Not Assigned(FSocialRestFollowingManagers) then
    FSocialRestFollowingManagers:=TSPSocialRestFollowingManagersEntitySet(CreateEntitySet(TSPSocialRestFollowingManagersEntitySet));
  Result:=FSocialRestFollowingManagers;
end;

Function TSPApiData.CreateNewSocialRestThreads : TSPSocialRestThreadsEntitySet; 

begin
  Result:=TSPSocialRestThreadsEntitySet(CreateEntitySet(TSPSocialRestThreadsEntitySet));
end;


Function TSPApiData.GetSocialRestThreads : TSPSocialRestThreadsEntitySet; 


begin
  If Not Assigned(FSocialRestThreads) then
    FSocialRestThreads:=TSPSocialRestThreadsEntitySet(CreateEntitySet(TSPSocialRestThreadsEntitySet));
  Result:=FSocialRestThreads;
end;

Function TSPApiData.CreateNewSolutionExporters : TSPSolutionExportersEntitySet; 

begin
  Result:=TSPSolutionExportersEntitySet(CreateEntitySet(TSPSolutionExportersEntitySet));
end;


Function TSPApiData.GetSolutionExporters : TSPSolutionExportersEntitySet; 


begin
  If Not Assigned(FSolutionExporters) then
    FSolutionExporters:=TSPSolutionExportersEntitySet(CreateEntitySet(TSPSolutionExportersEntitySet));
  Result:=FSolutionExporters;
end;

Function TSPApiData.CreateNewSPAppLicenseManagers : TSPSPAppLicenseManagersEntitySet; 

begin
  Result:=TSPSPAppLicenseManagersEntitySet(CreateEntitySet(TSPSPAppLicenseManagersEntitySet));
end;


Function TSPApiData.GetSPAppLicenseManagers : TSPSPAppLicenseManagersEntitySet; 


begin
  If Not Assigned(FSPAppLicenseManagers) then
    FSPAppLicenseManagers:=TSPSPAppLicenseManagersEntitySet(CreateEntitySet(TSPSPAppLicenseManagersEntitySet));
  Result:=FSPAppLicenseManagers;
end;

Function TSPApiData.CreateNewSPDataLeakagePreventionStatusInfos : TSPSPDataLeakagePreventionStatusInfosEntitySet; 

begin
  Result:=TSPSPDataLeakagePreventionStatusInfosEntitySet(CreateEntitySet(TSPSPDataLeakagePreventionStatusInfosEntitySet));
end;


Function TSPApiData.GetSPDataLeakagePreventionStatusInfos : TSPSPDataLeakagePreventionStatusInfosEntitySet; 


begin
  If Not Assigned(FSPDataLeakagePreventionStatusInfos) then
    FSPDataLeakagePreventionStatusInfos:=TSPSPDataLeakagePreventionStatusInfosEntitySet(CreateEntitySet(TSPSPDataLeakagePreventionStatusInfosEntitySet));
  Result:=FSPDataLeakagePreventionStatusInfos;
end;

Function TSPApiData.CreateNewTenantAppInstances : TSPTenantAppInstancesEntitySet; 

begin
  Result:=TSPTenantAppInstancesEntitySet(CreateEntitySet(TSPTenantAppInstancesEntitySet));
end;


Function TSPApiData.GetTenantAppInstances : TSPTenantAppInstancesEntitySet; 


begin
  If Not Assigned(FTenantAppInstances) then
    FTenantAppInstances:=TSPTenantAppInstancesEntitySet(CreateEntitySet(TSPTenantAppInstancesEntitySet));
  Result:=FTenantAppInstances;
end;

Function TSPApiData.CreateNewTenantAppUtilitys : TSPTenantAppUtilitysEntitySet; 

begin
  Result:=TSPTenantAppUtilitysEntitySet(CreateEntitySet(TSPTenantAppUtilitysEntitySet));
end;


Function TSPApiData.GetTenantAppUtilitys : TSPTenantAppUtilitysEntitySet; 


begin
  If Not Assigned(FTenantAppUtilitys) then
    FTenantAppUtilitys:=TSPTenantAppUtilitysEntitySet(CreateEntitySet(TSPTenantAppUtilitysEntitySet));
  Result:=FTenantAppUtilitys;
end;

Function TSPApiData.CreateNewTenantSettingss : TSPTenantSettingssEntitySet; 

begin
  Result:=TSPTenantSettingssEntitySet(CreateEntitySet(TSPTenantSettingssEntitySet));
end;


Function TSPApiData.GetTenantSettingss : TSPTenantSettingssEntitySet; 


begin
  If Not Assigned(FTenantSettingss) then
    FTenantSettingss:=TSPTenantSettingssEntitySet(CreateEntitySet(TSPTenantSettingssEntitySet));
  Result:=FTenantSettingss;
end;

Function TSPApiData.CreateNewThemeInfos : TSPThemeInfosEntitySet; 

begin
  Result:=TSPThemeInfosEntitySet(CreateEntitySet(TSPThemeInfosEntitySet));
end;


Function TSPApiData.GetThemeInfos : TSPThemeInfosEntitySet; 


begin
  If Not Assigned(FThemeInfos) then
    FThemeInfos:=TSPThemeInfosEntitySet(CreateEntitySet(TSPThemeInfosEntitySet));
  Result:=FThemeInfos;
end;

Function TSPApiData.CreateNewTimeZones : TSPTimeZonesEntitySet; 

begin
  Result:=TSPTimeZonesEntitySet(CreateEntitySet(TSPTimeZonesEntitySet));
end;


Function TSPApiData.GetTimeZones : TSPTimeZonesEntitySet; 


begin
  If Not Assigned(FTimeZones) then
    FTimeZones:=TSPTimeZonesEntitySet(CreateEntitySet(TSPTimeZonesEntitySet));
  Result:=FTimeZones;
end;

Function TSPApiData.CreateNewSyncTranslators : TSPSyncTranslatorsEntitySet; 

begin
  Result:=TSPSyncTranslatorsEntitySet(CreateEntitySet(TSPSyncTranslatorsEntitySet));
end;


Function TSPApiData.GetSyncTranslators : TSPSyncTranslatorsEntitySet; 


begin
  If Not Assigned(FSyncTranslators) then
    FSyncTranslators:=TSPSyncTranslatorsEntitySet(CreateEntitySet(TSPSyncTranslatorsEntitySet));
  Result:=FSyncTranslators;
end;

Function TSPApiData.CreateNewTranslationJobs : TSPTranslationJobsEntitySet; 

begin
  Result:=TSPTranslationJobsEntitySet(CreateEntitySet(TSPTranslationJobsEntitySet));
end;


Function TSPApiData.GetTranslationJobs : TSPTranslationJobsEntitySet; 


begin
  If Not Assigned(FTranslationJobs) then
    FTranslationJobs:=TSPTranslationJobsEntitySet(CreateEntitySet(TSPTranslationJobsEntitySet));
  Result:=FTranslationJobs;
end;

Function TSPApiData.CreateNewTranslationJobStatuss : TSPTranslationJobStatussEntitySet; 

begin
  Result:=TSPTranslationJobStatussEntitySet(CreateEntitySet(TSPTranslationJobStatussEntitySet));
end;


Function TSPApiData.GetTranslationJobStatuss : TSPTranslationJobStatussEntitySet; 


begin
  If Not Assigned(FTranslationJobStatuss) then
    FTranslationJobStatuss:=TSPTranslationJobStatussEntitySet(CreateEntitySet(TSPTranslationJobStatussEntitySet));
  Result:=FTranslationJobStatuss;
end;

Function TSPApiData.CreateNewVariationsTranslationTimerJobs : TSPVariationsTranslationTimerJobsEntitySet; 

begin
  Result:=TSPVariationsTranslationTimerJobsEntitySet(CreateEntitySet(TSPVariationsTranslationTimerJobsEntitySet));
end;


Function TSPApiData.GetVariationsTranslationTimerJobs : TSPVariationsTranslationTimerJobsEntitySet; 


begin
  If Not Assigned(FVariationsTranslationTimerJobs) then
    FVariationsTranslationTimerJobs:=TSPVariationsTranslationTimerJobsEntitySet(CreateEntitySet(TSPVariationsTranslationTimerJobsEntitySet));
  Result:=FVariationsTranslationTimerJobs;
end;

Function TSPApiData.CreateNewTypeInformations : TSPTypeInformationsEntitySet; 

begin
  Result:=TSPTypeInformationsEntitySet(CreateEntitySet(TSPTypeInformationsEntitySet));
end;


Function TSPApiData.GetTypeInformations : TSPTypeInformationsEntitySet; 


begin
  If Not Assigned(FTypeInformations) then
    FTypeInformations:=TSPTypeInformationsEntitySet(CreateEntitySet(TSPTypeInformationsEntitySet));
  Result:=FTypeInformations;
end;

Function TSPApiData.CreateNewClientPeoplePickerWebServiceInterfaces : TSPClientPeoplePickerWebServiceInterfacesEntitySet; 

begin
  Result:=TSPClientPeoplePickerWebServiceInterfacesEntitySet(CreateEntitySet(TSPClientPeoplePickerWebServiceInterfacesEntitySet));
end;


Function TSPApiData.GetClientPeoplePickerWebServiceInterfaces : TSPClientPeoplePickerWebServiceInterfacesEntitySet; 


begin
  If Not Assigned(FClientPeoplePickerWebServiceInterfaces) then
    FClientPeoplePickerWebServiceInterfaces:=TSPClientPeoplePickerWebServiceInterfacesEntitySet(CreateEntitySet(TSPClientPeoplePickerWebServiceInterfacesEntitySet));
  Result:=FClientPeoplePickerWebServiceInterfaces;
end;

Function TSPApiData.CreateNewUsers1 : TSPUsers1EntitySet; 

begin
  Result:=TSPUsers1EntitySet(CreateEntitySet(TSPUsers1EntitySet));
end;


Function TSPApiData.GetUsers1 : TSPUsers1EntitySet; 


begin
  If Not Assigned(FUsers1) then
    FUsers1:=TSPUsers1EntitySet(CreateEntitySet(TSPUsers1EntitySet));
  Result:=FUsers1;
end;

Function TSPApiData.CreateNewUserCustomActions : TSPUserCustomActionsEntitySet; 

begin
  Result:=TSPUserCustomActionsEntitySet(CreateEntitySet(TSPUserCustomActionsEntitySet));
end;


Function TSPApiData.GetUserCustomActions : TSPUserCustomActionsEntitySet; 


begin
  If Not Assigned(FUserCustomActions) then
    FUserCustomActions:=TSPUserCustomActionsEntitySet(CreateEntitySet(TSPUserCustomActionsEntitySet));
  Result:=FUserCustomActions;
end;

Function TSPApiData.CreateNewFollowedContents : TSPFollowedContentsEntitySet; 

begin
  Result:=TSPFollowedContentsEntitySet(CreateEntitySet(TSPFollowedContentsEntitySet));
end;


Function TSPApiData.GetFollowedContents : TSPFollowedContentsEntitySet; 


begin
  If Not Assigned(FFollowedContents) then
    FFollowedContents:=TSPFollowedContentsEntitySet(CreateEntitySet(TSPFollowedContentsEntitySet));
  Result:=FFollowedContents;
end;

Function TSPApiData.CreateNewFollowedItemDatas : TSPFollowedItemDatasEntitySet; 

begin
  Result:=TSPFollowedItemDatasEntitySet(CreateEntitySet(TSPFollowedItemDatasEntitySet));
end;


Function TSPApiData.GetFollowedItemDatas : TSPFollowedItemDatasEntitySet; 


begin
  If Not Assigned(FFollowedItemDatas) then
    FFollowedItemDatas:=TSPFollowedItemDatasEntitySet(CreateEntitySet(TSPFollowedItemDatasEntitySet));
  Result:=FFollowedItemDatas;
end;

Function TSPApiData.CreateNewHashTagCollections : TSPHashTagCollectionsEntitySet; 

begin
  Result:=TSPHashTagCollectionsEntitySet(CreateEntitySet(TSPHashTagCollectionsEntitySet));
end;


Function TSPApiData.GetHashTagCollections : TSPHashTagCollectionsEntitySet; 


begin
  If Not Assigned(FHashTagCollections) then
    FHashTagCollections:=TSPHashTagCollectionsEntitySet(CreateEntitySet(TSPHashTagCollectionsEntitySet));
  Result:=FHashTagCollections;
end;

Function TSPApiData.CreateNewPeopleManagers : TSPPeopleManagersEntitySet; 

begin
  Result:=TSPPeopleManagersEntitySet(CreateEntitySet(TSPPeopleManagersEntitySet));
end;


Function TSPApiData.GetPeopleManagers : TSPPeopleManagersEntitySet; 


begin
  If Not Assigned(FPeopleManagers) then
    FPeopleManagers:=TSPPeopleManagersEntitySet(CreateEntitySet(TSPPeopleManagersEntitySet));
  Result:=FPeopleManagers;
end;

Function TSPApiData.CreateNewPersonPropertiess : TSPPersonPropertiessEntitySet; 

begin
  Result:=TSPPersonPropertiessEntitySet(CreateEntitySet(TSPPersonPropertiessEntitySet));
end;


Function TSPApiData.GetPersonPropertiess : TSPPersonPropertiessEntitySet; 


begin
  If Not Assigned(FPersonPropertiess) then
    FPersonPropertiess:=TSPPersonPropertiessEntitySet(CreateEntitySet(TSPPersonPropertiessEntitySet));
  Result:=FPersonPropertiess;
end;

Function TSPApiData.CreateNewProfileImageStores : TSPProfileImageStoresEntitySet; 

begin
  Result:=TSPProfileImageStoresEntitySet(CreateEntitySet(TSPProfileImageStoresEntitySet));
end;


Function TSPApiData.GetProfileImageStores : TSPProfileImageStoresEntitySet; 


begin
  If Not Assigned(FProfileImageStores) then
    FProfileImageStores:=TSPProfileImageStoresEntitySet(CreateEntitySet(TSPProfileImageStoresEntitySet));
  Result:=FProfileImageStores;
end;

Function TSPApiData.CreateNewProfileLoaders : TSPProfileLoadersEntitySet; 

begin
  Result:=TSPProfileLoadersEntitySet(CreateEntitySet(TSPProfileLoadersEntitySet));
end;


Function TSPApiData.GetProfileLoaders : TSPProfileLoadersEntitySet; 


begin
  If Not Assigned(FProfileLoaders) then
    FProfileLoaders:=TSPProfileLoadersEntitySet(CreateEntitySet(TSPProfileLoadersEntitySet));
  Result:=FProfileLoaders;
end;

Function TSPApiData.CreateNewUserProfiles : TSPUserProfilesEntitySet; 

begin
  Result:=TSPUserProfilesEntitySet(CreateEntitySet(TSPUserProfilesEntitySet));
end;


Function TSPApiData.GetUserProfiles : TSPUserProfilesEntitySet; 


begin
  If Not Assigned(FUserProfiles) then
    FUserProfiles:=TSPUserProfilesEntitySet(CreateEntitySet(TSPUserProfilesEntitySet));
  Result:=FUserProfiles;
end;

Function TSPApiData.CreateNewUserProfilePropertiesForUsers : TSPUserProfilePropertiesForUsersEntitySet; 

begin
  Result:=TSPUserProfilePropertiesForUsersEntitySet(CreateEntitySet(TSPUserProfilePropertiesForUsersEntitySet));
end;


Function TSPApiData.GetUserProfilePropertiesForUsers : TSPUserProfilePropertiesForUsersEntitySet; 


begin
  If Not Assigned(FUserProfilePropertiesForUsers) then
    FUserProfilePropertiesForUsers:=TSPUserProfilePropertiesForUsersEntitySet(CreateEntitySet(TSPUserProfilePropertiesForUsersEntitySet));
  Result:=FUserProfilePropertiesForUsers;
end;

Function TSPApiData.CreateNewUserResources : TSPUserResourcesEntitySet; 

begin
  Result:=TSPUserResourcesEntitySet(CreateEntitySet(TSPUserResourcesEntitySet));
end;


Function TSPApiData.GetUserResources : TSPUserResourcesEntitySet; 


begin
  If Not Assigned(FUserResources) then
    FUserResources:=TSPUserResourcesEntitySet(CreateEntitySet(TSPUserResourcesEntitySet));
  Result:=FUserResources;
end;

Function TSPApiData.CreateNewUserSolutions : TSPUserSolutionsEntitySet; 

begin
  Result:=TSPUserSolutionsEntitySet(CreateEntitySet(TSPUserSolutionsEntitySet));
end;


Function TSPApiData.GetUserSolutions : TSPUserSolutionsEntitySet; 


begin
  If Not Assigned(FUserSolutions) then
    FUserSolutions:=TSPUserSolutionsEntitySet(CreateEntitySet(TSPUserSolutionsEntitySet));
  Result:=FUserSolutions;
end;

Function TSPApiData.CreateNewMarketplaceUtilitiess : TSPMarketplaceUtilitiessEntitySet; 

begin
  Result:=TSPMarketplaceUtilitiessEntitySet(CreateEntitySet(TSPMarketplaceUtilitiessEntitySet));
end;


Function TSPApiData.GetMarketplaceUtilitiess : TSPMarketplaceUtilitiessEntitySet; 


begin
  If Not Assigned(FMarketplaceUtilitiess) then
    FMarketplaceUtilitiess:=TSPMarketplaceUtilitiessEntitySet(CreateEntitySet(TSPMarketplaceUtilitiessEntitySet));
  Result:=FMarketplaceUtilitiess;
end;

Function TSPApiData.CreateNewUtilitys : TSPUtilitysEntitySet; 

begin
  Result:=TSPUtilitysEntitySet(CreateEntitySet(TSPUtilitysEntitySet));
end;


Function TSPApiData.GetUtilitys : TSPUtilitysEntitySet; 


begin
  If Not Assigned(FUtilitys) then
    FUtilitys:=TSPUtilitysEntitySet(CreateEntitySet(TSPUtilitysEntitySet));
  Result:=FUtilitys;
end;

Function TSPApiData.CreateNewViews : TSPViewsEntitySet; 

begin
  Result:=TSPViewsEntitySet(CreateEntitySet(TSPViewsEntitySet));
end;


Function TSPApiData.GetViews : TSPViewsEntitySet; 


begin
  If Not Assigned(FViews) then
    FViews:=TSPViewsEntitySet(CreateEntitySet(TSPViewsEntitySet));
  Result:=FViews;
end;

Function TSPApiData.CreateNewViewFieldCollections : TSPViewFieldCollectionsEntitySet; 

begin
  Result:=TSPViewFieldCollectionsEntitySet(CreateEntitySet(TSPViewFieldCollectionsEntitySet));
end;


Function TSPApiData.GetViewFieldCollections : TSPViewFieldCollectionsEntitySet; 


begin
  If Not Assigned(FViewFieldCollections) then
    FViewFieldCollections:=TSPViewFieldCollectionsEntitySet(CreateEntitySet(TSPViewFieldCollectionsEntitySet));
  Result:=FViewFieldCollections;
end;

Function TSPApiData.CreateNewWebInformations : TSPWebInformationsEntitySet; 

begin
  Result:=TSPWebInformationsEntitySet(CreateEntitySet(TSPWebInformationsEntitySet));
end;


Function TSPApiData.GetWebInformations : TSPWebInformationsEntitySet; 


begin
  If Not Assigned(FWebInformations) then
    FWebInformations:=TSPWebInformationsEntitySet(CreateEntitySet(TSPWebInformationsEntitySet));
  Result:=FWebInformations;
end;

Function TSPApiData.CreateNewLimitedWebPartManagers : TSPLimitedWebPartManagersEntitySet; 

begin
  Result:=TSPLimitedWebPartManagersEntitySet(CreateEntitySet(TSPLimitedWebPartManagersEntitySet));
end;


Function TSPApiData.GetLimitedWebPartManagers : TSPLimitedWebPartManagersEntitySet; 


begin
  If Not Assigned(FLimitedWebPartManagers) then
    FLimitedWebPartManagers:=TSPLimitedWebPartManagersEntitySet(CreateEntitySet(TSPLimitedWebPartManagersEntitySet));
  Result:=FLimitedWebPartManagers;
end;

Function TSPApiData.CreateNewWebParts : TSPWebPartsEntitySet; 

begin
  Result:=TSPWebPartsEntitySet(CreateEntitySet(TSPWebPartsEntitySet));
end;


Function TSPApiData.GetWebParts : TSPWebPartsEntitySet; 


begin
  If Not Assigned(FWebParts) then
    FWebParts:=TSPWebPartsEntitySet(CreateEntitySet(TSPWebPartsEntitySet));
  Result:=FWebParts;
end;

Function TSPApiData.CreateNewWebPartDefinitions : TSPWebPartDefinitionsEntitySet; 

begin
  Result:=TSPWebPartDefinitionsEntitySet(CreateEntitySet(TSPWebPartDefinitionsEntitySet));
end;


Function TSPApiData.GetWebPartDefinitions : TSPWebPartDefinitionsEntitySet; 


begin
  If Not Assigned(FWebPartDefinitions) then
    FWebPartDefinitions:=TSPWebPartDefinitionsEntitySet(CreateEntitySet(TSPWebPartDefinitionsEntitySet));
  Result:=FWebPartDefinitions;
end;

Function TSPApiData.CreateNewWebProxys : TSPWebProxysEntitySet; 

begin
  Result:=TSPWebProxysEntitySet(CreateEntitySet(TSPWebProxysEntitySet));
end;


Function TSPApiData.GetWebProxys : TSPWebProxysEntitySet; 


begin
  If Not Assigned(FWebProxys) then
    FWebProxys:=TSPWebProxysEntitySet(CreateEntitySet(TSPWebProxysEntitySet));
  Result:=FWebProxys;
end;

Function TSPApiData.CreateNewWebTemplates : TSPWebTemplatesEntitySet; 

begin
  Result:=TSPWebTemplatesEntitySet(CreateEntitySet(TSPWebTemplatesEntitySet));
end;


Function TSPApiData.GetWebTemplates : TSPWebTemplatesEntitySet; 


begin
  If Not Assigned(FWebTemplates) then
    FWebTemplates:=TSPWebTemplatesEntitySet(CreateEntitySet(TSPWebTemplatesEntitySet));
  Result:=FWebTemplates;
end;

Function TSPApiData.CreateNewSPWorkflows : TSPSPWorkflowsEntitySet; 

begin
  Result:=TSPSPWorkflowsEntitySet(CreateEntitySet(TSPSPWorkflowsEntitySet));
end;


Function TSPApiData.GetSPWorkflows : TSPSPWorkflowsEntitySet; 


begin
  If Not Assigned(FSPWorkflows) then
    FSPWorkflows:=TSPSPWorkflowsEntitySet(CreateEntitySet(TSPSPWorkflowsEntitySet));
  Result:=FSPWorkflows;
end;

Function TSPApiData.CreateNewSPWorkflowManagers : TSPSPWorkflowManagersEntitySet; 

begin
  Result:=TSPSPWorkflowManagersEntitySet(CreateEntitySet(TSPSPWorkflowManagersEntitySet));
end;


Function TSPApiData.GetSPWorkflowManagers : TSPSPWorkflowManagersEntitySet; 


begin
  If Not Assigned(FSPWorkflowManagers) then
    FSPWorkflowManagers:=TSPSPWorkflowManagersEntitySet(CreateEntitySet(TSPSPWorkflowManagersEntitySet));
  Result:=FSPWorkflowManagers;
end;

Function TSPApiData.CreateNewWorkflowAssociations : TSPWorkflowAssociationsEntitySet; 

begin
  Result:=TSPWorkflowAssociationsEntitySet(CreateEntitySet(TSPWorkflowAssociationsEntitySet));
end;


Function TSPApiData.GetWorkflowAssociations : TSPWorkflowAssociationsEntitySet; 


begin
  If Not Assigned(FWorkflowAssociations) then
    FWorkflowAssociations:=TSPWorkflowAssociationsEntitySet(CreateEntitySet(TSPWorkflowAssociationsEntitySet));
  Result:=FWorkflowAssociations;
end;

Function TSPApiData.CreateNewWorkflowTemplates : TSPWorkflowTemplatesEntitySet; 

begin
  Result:=TSPWorkflowTemplatesEntitySet(CreateEntitySet(TSPWorkflowTemplatesEntitySet));
end;


Function TSPApiData.GetWorkflowTemplates : TSPWorkflowTemplatesEntitySet; 


begin
  If Not Assigned(FWorkflowTemplates) then
    FWorkflowTemplates:=TSPWorkflowTemplatesEntitySet(CreateEntitySet(TSPWorkflowTemplatesEntitySet));
  Result:=FWorkflowTemplates;
end;

Function TSPApiData.CreateNewInteropServices : TSPInteropServicesEntitySet; 

begin
  Result:=TSPInteropServicesEntitySet(CreateEntitySet(TSPInteropServicesEntitySet));
end;


Function TSPApiData.GetInteropServices : TSPInteropServicesEntitySet; 


begin
  If Not Assigned(FInteropServices) then
    FInteropServices:=TSPInteropServicesEntitySet(CreateEntitySet(TSPInteropServicesEntitySet));
  Result:=FInteropServices;
end;

Function TSPApiData.CreateNewWorkflowDefinitions : TSPWorkflowDefinitionsEntitySet; 

begin
  Result:=TSPWorkflowDefinitionsEntitySet(CreateEntitySet(TSPWorkflowDefinitionsEntitySet));
end;


Function TSPApiData.GetWorkflowDefinitions : TSPWorkflowDefinitionsEntitySet; 


begin
  If Not Assigned(FWorkflowDefinitions) then
    FWorkflowDefinitions:=TSPWorkflowDefinitionsEntitySet(CreateEntitySet(TSPWorkflowDefinitionsEntitySet));
  Result:=FWorkflowDefinitions;
end;

Function TSPApiData.CreateNewWorkflowDeploymentServices : TSPWorkflowDeploymentServicesEntitySet; 

begin
  Result:=TSPWorkflowDeploymentServicesEntitySet(CreateEntitySet(TSPWorkflowDeploymentServicesEntitySet));
end;


Function TSPApiData.GetWorkflowDeploymentServices : TSPWorkflowDeploymentServicesEntitySet; 


begin
  If Not Assigned(FWorkflowDeploymentServices) then
    FWorkflowDeploymentServices:=TSPWorkflowDeploymentServicesEntitySet(CreateEntitySet(TSPWorkflowDeploymentServicesEntitySet));
  Result:=FWorkflowDeploymentServices;
end;

Function TSPApiData.CreateNewWorkflowInstances : TSPWorkflowInstancesEntitySet; 

begin
  Result:=TSPWorkflowInstancesEntitySet(CreateEntitySet(TSPWorkflowInstancesEntitySet));
end;


Function TSPApiData.GetWorkflowInstances : TSPWorkflowInstancesEntitySet; 


begin
  If Not Assigned(FWorkflowInstances) then
    FWorkflowInstances:=TSPWorkflowInstancesEntitySet(CreateEntitySet(TSPWorkflowInstancesEntitySet));
  Result:=FWorkflowInstances;
end;

Function TSPApiData.CreateNewWorkflowInstanceServices : TSPWorkflowInstanceServicesEntitySet; 

begin
  Result:=TSPWorkflowInstanceServicesEntitySet(CreateEntitySet(TSPWorkflowInstanceServicesEntitySet));
end;


Function TSPApiData.GetWorkflowInstanceServices : TSPWorkflowInstanceServicesEntitySet; 


begin
  If Not Assigned(FWorkflowInstanceServices) then
    FWorkflowInstanceServices:=TSPWorkflowInstanceServicesEntitySet(CreateEntitySet(TSPWorkflowInstanceServicesEntitySet));
  Result:=FWorkflowInstanceServices;
end;

Function TSPApiData.CreateNewWorkflowMessagingServices : TSPWorkflowMessagingServicesEntitySet; 

begin
  Result:=TSPWorkflowMessagingServicesEntitySet(CreateEntitySet(TSPWorkflowMessagingServicesEntitySet));
end;


Function TSPApiData.GetWorkflowMessagingServices : TSPWorkflowMessagingServicesEntitySet; 


begin
  If Not Assigned(FWorkflowMessagingServices) then
    FWorkflowMessagingServices:=TSPWorkflowMessagingServicesEntitySet(CreateEntitySet(TSPWorkflowMessagingServicesEntitySet));
  Result:=FWorkflowMessagingServices;
end;

Function TSPApiData.CreateNewWorkflowServicesManagers : TSPWorkflowServicesManagersEntitySet; 

begin
  Result:=TSPWorkflowServicesManagersEntitySet(CreateEntitySet(TSPWorkflowServicesManagersEntitySet));
end;


Function TSPApiData.GetWorkflowServicesManagers : TSPWorkflowServicesManagersEntitySet; 


begin
  If Not Assigned(FWorkflowServicesManagers) then
    FWorkflowServicesManagers:=TSPWorkflowServicesManagersEntitySet(CreateEntitySet(TSPWorkflowServicesManagersEntitySet));
  Result:=FWorkflowServicesManagers;
end;

Function TSPApiData.CreateNewWorkflowSubscriptions : TSPWorkflowSubscriptionsEntitySet; 

begin
  Result:=TSPWorkflowSubscriptionsEntitySet(CreateEntitySet(TSPWorkflowSubscriptionsEntitySet));
end;


Function TSPApiData.GetWorkflowSubscriptions : TSPWorkflowSubscriptionsEntitySet; 


begin
  If Not Assigned(FWorkflowSubscriptions) then
    FWorkflowSubscriptions:=TSPWorkflowSubscriptionsEntitySet(CreateEntitySet(TSPWorkflowSubscriptionsEntitySet));
  Result:=FWorkflowSubscriptions;
end;

Function TSPApiData.CreateNewWorkflowSubscriptionServices : TSPWorkflowSubscriptionServicesEntitySet; 

begin
  Result:=TSPWorkflowSubscriptionServicesEntitySet(CreateEntitySet(TSPWorkflowSubscriptionServicesEntitySet));
end;


Function TSPApiData.GetWorkflowSubscriptionServices : TSPWorkflowSubscriptionServicesEntitySet; 


begin
  If Not Assigned(FWorkflowSubscriptionServices) then
    FWorkflowSubscriptionServices:=TSPWorkflowSubscriptionServicesEntitySet(CreateEntitySet(TSPWorkflowSubscriptionServicesEntitySet));
  Result:=FWorkflowSubscriptionServices;
end;

Function TSPApiData.CreateNewBaseSessions : TSPBaseSessionsEntitySet; 

begin
  Result:=TSPBaseSessionsEntitySet(CreateEntitySet(TSPBaseSessionsEntitySet));
end;


Function TSPApiData.GetBaseSessions : TSPBaseSessionsEntitySet; 


begin
  If Not Assigned(FBaseSessions) then
    FBaseSessions:=TSPBaseSessionsEntitySet(CreateEntitySet(TSPBaseSessionsEntitySet));
  Result:=FBaseSessions;
end;

Function TSPApiData.CreateNewBooleanCriterions : TSPBooleanCriterionsEntitySet; 

begin
  Result:=TSPBooleanCriterionsEntitySet(CreateEntitySet(TSPBooleanCriterionsEntitySet));
end;


Function TSPApiData.GetBooleanCriterions : TSPBooleanCriterionsEntitySet; 


begin
  If Not Assigned(FBooleanCriterions) then
    FBooleanCriterions:=TSPBooleanCriterionsEntitySet(CreateEntitySet(TSPBooleanCriterionsEntitySet));
  Result:=FBooleanCriterions;
end;

Function TSPApiData.CreateNewCalloutInfos : TSPCalloutInfosEntitySet; 

begin
  Result:=TSPCalloutInfosEntitySet(CreateEntitySet(TSPCalloutInfosEntitySet));
end;


Function TSPApiData.GetCalloutInfos : TSPCalloutInfosEntitySet; 


begin
  If Not Assigned(FCalloutInfos) then
    FCalloutInfos:=TSPCalloutInfosEntitySet(CreateEntitySet(TSPCalloutInfosEntitySet));
  Result:=FCalloutInfos;
end;

Function TSPApiData.CreateNewCreateRefreshJobResults : TSPCreateRefreshJobResultsEntitySet; 

begin
  Result:=TSPCreateRefreshJobResultsEntitySet(CreateEntitySet(TSPCreateRefreshJobResultsEntitySet));
end;


Function TSPApiData.GetCreateRefreshJobResults : TSPCreateRefreshJobResultsEntitySet; 


begin
  If Not Assigned(FCreateRefreshJobResults) then
    FCreateRefreshJobResults:=TSPCreateRefreshJobResultsEntitySet(CreateEntitySet(TSPCreateRefreshJobResultsEntitySet));
  Result:=FCreateRefreshJobResults;
end;

Function TSPApiData.CreateNewCustomAttributeFilters : TSPCustomAttributeFiltersEntitySet; 

begin
  Result:=TSPCustomAttributeFiltersEntitySet(CreateEntitySet(TSPCustomAttributeFiltersEntitySet));
end;


Function TSPApiData.GetCustomAttributeFilters : TSPCustomAttributeFiltersEntitySet; 


begin
  If Not Assigned(FCustomAttributeFilters) then
    FCustomAttributeFilters:=TSPCustomAttributeFiltersEntitySet(CreateEntitySet(TSPCustomAttributeFiltersEntitySet));
  Result:=FCustomAttributeFilters;
end;

Function TSPApiData.CreateNewDashboardScriptExtensionInfos : TSPDashboardScriptExtensionInfosEntitySet; 

begin
  Result:=TSPDashboardScriptExtensionInfosEntitySet(CreateEntitySet(TSPDashboardScriptExtensionInfosEntitySet));
end;


Function TSPApiData.GetDashboardScriptExtensionInfos : TSPDashboardScriptExtensionInfosEntitySet; 


begin
  If Not Assigned(FDashboardScriptExtensionInfos) then
    FDashboardScriptExtensionInfos:=TSPDashboardScriptExtensionInfosEntitySet(CreateEntitySet(TSPDashboardScriptExtensionInfosEntitySet));
  Result:=FDashboardScriptExtensionInfos;
end;

Function TSPApiData.CreateNewDateRangeCriterions : TSPDateRangeCriterionsEntitySet; 

begin
  Result:=TSPDateRangeCriterionsEntitySet(CreateEntitySet(TSPDateRangeCriterionsEntitySet));
end;


Function TSPApiData.GetDateRangeCriterions : TSPDateRangeCriterionsEntitySet; 


begin
  If Not Assigned(FDateRangeCriterions) then
    FDateRangeCriterions:=TSPDateRangeCriterionsEntitySet(CreateEntitySet(TSPDateRangeCriterionsEntitySet));
  Result:=FDateRangeCriterions;
end;

Function TSPApiData.CreateNewExchangeUserSyncStates : TSPExchangeUserSyncStatesEntitySet; 

begin
  Result:=TSPExchangeUserSyncStatesEntitySet(CreateEntitySet(TSPExchangeUserSyncStatesEntitySet));
end;


Function TSPApiData.GetExchangeUserSyncStates : TSPExchangeUserSyncStatesEntitySet; 


begin
  If Not Assigned(FExchangeUserSyncStates) then
    FExchangeUserSyncStates:=TSPExchangeUserSyncStatesEntitySet(CreateEntitySet(TSPExchangeUserSyncStatesEntitySet));
  Result:=FExchangeUserSyncStates;
end;

Function TSPApiData.CreateNewLocations : TSPLocationsEntitySet; 

begin
  Result:=TSPLocationsEntitySet(CreateEntitySet(TSPLocationsEntitySet));
end;


Function TSPApiData.GetLocations : TSPLocationsEntitySet; 


begin
  If Not Assigned(FLocations) then
    FLocations:=TSPLocationsEntitySet(CreateEntitySet(TSPLocationsEntitySet));
  Result:=FLocations;
end;

Function TSPApiData.CreateNewLocationDisplaySettings : TSPLocationDisplaySettingsEntitySet; 

begin
  Result:=TSPLocationDisplaySettingsEntitySet(CreateEntitySet(TSPLocationDisplaySettingsEntitySet));
end;


Function TSPApiData.GetLocationDisplaySettings : TSPLocationDisplaySettingsEntitySet; 


begin
  If Not Assigned(FLocationDisplaySettings) then
    FLocationDisplaySettings:=TSPLocationDisplaySettingsEntitySet(CreateEntitySet(TSPLocationDisplaySettingsEntitySet));
  Result:=FLocationDisplaySettings;
end;

Function TSPApiData.CreateNewLocationFilters : TSPLocationFiltersEntitySet; 

begin
  Result:=TSPLocationFiltersEntitySet(CreateEntitySet(TSPLocationFiltersEntitySet));
end;


Function TSPApiData.GetLocationFilters : TSPLocationFiltersEntitySet; 


begin
  If Not Assigned(FLocationFilters) then
    FLocationFilters:=TSPLocationFiltersEntitySet(CreateEntitySet(TSPLocationFiltersEntitySet));
  Result:=FLocationFilters;
end;

Function TSPApiData.CreateNewLocationUpdateResults : TSPLocationUpdateResultsEntitySet; 

begin
  Result:=TSPLocationUpdateResultsEntitySet(CreateEntitySet(TSPLocationUpdateResultsEntitySet));
end;


Function TSPApiData.GetLocationUpdateResults : TSPLocationUpdateResultsEntitySet; 


begin
  If Not Assigned(FLocationUpdateResults) then
    FLocationUpdateResults:=TSPLocationUpdateResultsEntitySet(CreateEntitySet(TSPLocationUpdateResultsEntitySet));
  Result:=FLocationUpdateResults;
end;

Function TSPApiData.CreateNewNameCriterions : TSPNameCriterionsEntitySet; 

begin
  Result:=TSPNameCriterionsEntitySet(CreateEntitySet(TSPNameCriterionsEntitySet));
end;


Function TSPApiData.GetNameCriterions : TSPNameCriterionsEntitySet; 


begin
  If Not Assigned(FNameCriterions) then
    FNameCriterions:=TSPNameCriterionsEntitySet(CreateEntitySet(TSPNameCriterionsEntitySet));
  Result:=FNameCriterions;
end;

Function TSPApiData.CreateNewNonTaskDataReadResults : TSPNonTaskDataReadResultsEntitySet; 

begin
  Result:=TSPNonTaskDataReadResultsEntitySet(CreateEntitySet(TSPNonTaskDataReadResultsEntitySet));
end;


Function TSPApiData.GetNonTaskDataReadResults : TSPNonTaskDataReadResultsEntitySet; 


begin
  If Not Assigned(FNonTaskDataReadResults) then
    FNonTaskDataReadResults:=TSPNonTaskDataReadResultsEntitySet(CreateEntitySet(TSPNonTaskDataReadResultsEntitySet));
  Result:=FNonTaskDataReadResults;
end;

Function TSPApiData.CreateNewOrderInfos : TSPOrderInfosEntitySet; 

begin
  Result:=TSPOrderInfosEntitySet(CreateEntitySet(TSPOrderInfosEntitySet));
end;


Function TSPApiData.GetOrderInfos : TSPOrderInfosEntitySet; 


begin
  If Not Assigned(FOrderInfos) then
    FOrderInfos:=TSPOrderInfosEntitySet(CreateEntitySet(TSPOrderInfosEntitySet));
  Result:=FOrderInfos;
end;

Function TSPApiData.CreateNewPersistedPropertiess : TSPPersistedPropertiessEntitySet; 

begin
  Result:=TSPPersistedPropertiessEntitySet(CreateEntitySet(TSPPersistedPropertiessEntitySet));
end;


Function TSPApiData.GetPersistedPropertiess : TSPPersistedPropertiessEntitySet; 


begin
  If Not Assigned(FPersistedPropertiess) then
    FPersistedPropertiess:=TSPPersistedPropertiessEntitySet(CreateEntitySet(TSPPersistedPropertiessEntitySet));
  Result:=FPersistedPropertiess;
end;

Function TSPApiData.CreateNewProviderErrorInfos : TSPProviderErrorInfosEntitySet; 

begin
  Result:=TSPProviderErrorInfosEntitySet(CreateEntitySet(TSPProviderErrorInfosEntitySet));
end;


Function TSPApiData.GetProviderErrorInfos : TSPProviderErrorInfosEntitySet; 


begin
  If Not Assigned(FProviderErrorInfos) then
    FProviderErrorInfos:=TSPProviderErrorInfosEntitySet(CreateEntitySet(TSPProviderErrorInfosEntitySet));
  Result:=FProviderErrorInfos;
end;

Function TSPApiData.CreateNewProviderRefreshStatuss : TSPProviderRefreshStatussEntitySet; 

begin
  Result:=TSPProviderRefreshStatussEntitySet(CreateEntitySet(TSPProviderRefreshStatussEntitySet));
end;


Function TSPApiData.GetProviderRefreshStatuss : TSPProviderRefreshStatussEntitySet; 


begin
  If Not Assigned(FProviderRefreshStatuss) then
    FProviderRefreshStatuss:=TSPProviderRefreshStatussEntitySet(CreateEntitySet(TSPProviderRefreshStatussEntitySet));
  Result:=FProviderRefreshStatuss;
end;

Function TSPApiData.CreateNewRefreshHealthInfos : TSPRefreshHealthInfosEntitySet; 

begin
  Result:=TSPRefreshHealthInfosEntitySet(CreateEntitySet(TSPRefreshHealthInfosEntitySet));
end;


Function TSPApiData.GetRefreshHealthInfos : TSPRefreshHealthInfosEntitySet; 


begin
  If Not Assigned(FRefreshHealthInfos) then
    FRefreshHealthInfos:=TSPRefreshHealthInfosEntitySet(CreateEntitySet(TSPRefreshHealthInfosEntitySet));
  Result:=FRefreshHealthInfos;
end;

Function TSPApiData.CreateNewRefreshHistorys : TSPRefreshHistorysEntitySet; 

begin
  Result:=TSPRefreshHistorysEntitySet(CreateEntitySet(TSPRefreshHistorysEntitySet));
end;


Function TSPApiData.GetRefreshHistorys : TSPRefreshHistorysEntitySet; 


begin
  If Not Assigned(FRefreshHistorys) then
    FRefreshHistorys:=TSPRefreshHistorysEntitySet(CreateEntitySet(TSPRefreshHistorysEntitySet));
  Result:=FRefreshHistorys;
end;

Function TSPApiData.CreateNewRefreshResults : TSPRefreshResultsEntitySet; 

begin
  Result:=TSPRefreshResultsEntitySet(CreateEntitySet(TSPRefreshResultsEntitySet));
end;


Function TSPApiData.GetRefreshResults : TSPRefreshResultsEntitySet; 


begin
  If Not Assigned(FRefreshResults) then
    FRefreshResults:=TSPRefreshResultsEntitySet(CreateEntitySet(TSPRefreshResultsEntitySet));
  Result:=FRefreshResults;
end;

Function TSPApiData.CreateNewSortableSessionManagers : TSPSortableSessionManagersEntitySet; 

begin
  Result:=TSPSortableSessionManagersEntitySet(CreateEntitySet(TSPSortableSessionManagersEntitySet));
end;


Function TSPApiData.GetSortableSessionManagers : TSPSortableSessionManagersEntitySet; 


begin
  If Not Assigned(FSortableSessionManagers) then
    FSortableSessionManagers:=TSPSortableSessionManagersEntitySet(CreateEntitySet(TSPSortableSessionManagersEntitySet));
  Result:=FSortableSessionManagers;
end;

Function TSPApiData.CreateNewSortableTaskQuerys : TSPSortableTaskQuerysEntitySet; 

begin
  Result:=TSPSortableTaskQuerysEntitySet(CreateEntitySet(TSPSortableTaskQuerysEntitySet));
end;


Function TSPApiData.GetSortableTaskQuerys : TSPSortableTaskQuerysEntitySet; 


begin
  If Not Assigned(FSortableTaskQuerys) then
    FSortableTaskQuerys:=TSPSortableTaskQuerysEntitySet(CreateEntitySet(TSPSortableTaskQuerysEntitySet));
  Result:=FSortableTaskQuerys;
end;

Function TSPApiData.CreateNewTasks1 : TSPTasks1EntitySet; 

begin
  Result:=TSPTasks1EntitySet(CreateEntitySet(TSPTasks1EntitySet));
end;


Function TSPApiData.GetTasks1 : TSPTasks1EntitySet; 


begin
  If Not Assigned(FTasks1) then
    FTasks1:=TSPTasks1EntitySet(CreateEntitySet(TSPTasks1EntitySet));
  Result:=FTasks1;
end;

Function TSPApiData.CreateNewTaskFilters : TSPTaskFiltersEntitySet; 

begin
  Result:=TSPTaskFiltersEntitySet(CreateEntitySet(TSPTaskFiltersEntitySet));
end;


Function TSPApiData.GetTaskFilters : TSPTaskFiltersEntitySet; 


begin
  If Not Assigned(FTaskFilters) then
    FTaskFilters:=TSPTaskFiltersEntitySet(CreateEntitySet(TSPTaskFiltersEntitySet));
  Result:=FTaskFilters;
end;

Function TSPApiData.CreateNewTaskQuerys : TSPTaskQuerysEntitySet; 

begin
  Result:=TSPTaskQuerysEntitySet(CreateEntitySet(TSPTaskQuerysEntitySet));
end;


Function TSPApiData.GetTaskQuerys : TSPTaskQuerysEntitySet; 


begin
  If Not Assigned(FTaskQuerys) then
    FTaskQuerys:=TSPTaskQuerysEntitySet(CreateEntitySet(TSPTaskQuerysEntitySet));
  Result:=FTaskQuerys;
end;

Function TSPApiData.CreateNewTaskQueryByLocationResults : TSPTaskQueryByLocationResultsEntitySet; 

begin
  Result:=TSPTaskQueryByLocationResultsEntitySet(CreateEntitySet(TSPTaskQueryByLocationResultsEntitySet));
end;


Function TSPApiData.GetTaskQueryByLocationResults : TSPTaskQueryByLocationResultsEntitySet; 


begin
  If Not Assigned(FTaskQueryByLocationResults) then
    FTaskQueryByLocationResults:=TSPTaskQueryByLocationResultsEntitySet(CreateEntitySet(TSPTaskQueryByLocationResultsEntitySet));
  Result:=FTaskQueryByLocationResults;
end;

Function TSPApiData.CreateNewTaskQueryResults : TSPTaskQueryResultsEntitySet; 

begin
  Result:=TSPTaskQueryResultsEntitySet(CreateEntitySet(TSPTaskQueryResultsEntitySet));
end;


Function TSPApiData.GetTaskQueryResults : TSPTaskQueryResultsEntitySet; 


begin
  If Not Assigned(FTaskQueryResults) then
    FTaskQueryResults:=TSPTaskQueryResultsEntitySet(CreateEntitySet(TSPTaskQueryResultsEntitySet));
  Result:=FTaskQueryResults;
end;

Function TSPApiData.CreateNewTaskRefreshResults : TSPTaskRefreshResultsEntitySet; 

begin
  Result:=TSPTaskRefreshResultsEntitySet(CreateEntitySet(TSPTaskRefreshResultsEntitySet));
end;


Function TSPApiData.GetTaskRefreshResults : TSPTaskRefreshResultsEntitySet; 


begin
  If Not Assigned(FTaskRefreshResults) then
    FTaskRefreshResults:=TSPTaskRefreshResultsEntitySet(CreateEntitySet(TSPTaskRefreshResultsEntitySet));
  Result:=FTaskRefreshResults;
end;

Function TSPApiData.CreateNewTaskWriteResults : TSPTaskWriteResultsEntitySet; 

begin
  Result:=TSPTaskWriteResultsEntitySet(CreateEntitySet(TSPTaskWriteResultsEntitySet));
end;


Function TSPApiData.GetTaskWriteResults : TSPTaskWriteResultsEntitySet; 


begin
  If Not Assigned(FTaskWriteResults) then
    FTaskWriteResults:=TSPTaskWriteResultsEntitySet(CreateEntitySet(TSPTaskWriteResultsEntitySet));
  Result:=FTaskWriteResults;
end;

Function TSPApiData.CreateNewUserOrderedSessionManagers : TSPUserOrderedSessionManagersEntitySet; 

begin
  Result:=TSPUserOrderedSessionManagersEntitySet(CreateEntitySet(TSPUserOrderedSessionManagersEntitySet));
end;


Function TSPApiData.GetUserOrderedSessionManagers : TSPUserOrderedSessionManagersEntitySet; 


begin
  If Not Assigned(FUserOrderedSessionManagers) then
    FUserOrderedSessionManagers:=TSPUserOrderedSessionManagersEntitySet(CreateEntitySet(TSPUserOrderedSessionManagersEntitySet));
  Result:=FUserOrderedSessionManagers;
end;

Function TSPApiData.CreateNewUserSettingss : TSPUserSettingssEntitySet; 

begin
  Result:=TSPUserSettingssEntitySet(CreateEntitySet(TSPUserSettingssEntitySet));
end;


Function TSPApiData.GetUserSettingss : TSPUserSettingssEntitySet; 


begin
  If Not Assigned(FUserSettingss) then
    FUserSettingss:=TSPUserSettingssEntitySet(CreateEntitySet(TSPUserSettingssEntitySet));
  Result:=FUserSettingss;
end;

Function TSPApiData.CreateNewUserSettingsManagers : TSPUserSettingsManagersEntitySet; 

begin
  Result:=TSPUserSettingsManagersEntitySet(CreateEntitySet(TSPUserSettingsManagersEntitySet));
end;


Function TSPApiData.GetUserSettingsManagers : TSPUserSettingsManagersEntitySet; 


begin
  If Not Assigned(FUserSettingsManagers) then
    FUserSettingsManagers:=TSPUserSettingsManagersEntitySet(CreateEntitySet(TSPUserSettingsManagersEntitySet));
  Result:=FUserSettingsManagers;
end;

Function TSPApiData.CreateNewViewSelectionInfos : TSPViewSelectionInfosEntitySet; 

begin
  Result:=TSPViewSelectionInfosEntitySet(CreateEntitySet(TSPViewSelectionInfosEntitySet));
end;


Function TSPApiData.GetViewSelectionInfos : TSPViewSelectionInfosEntitySet; 


begin
  If Not Assigned(FViewSelectionInfos) then
    FViewSelectionInfos:=TSPViewSelectionInfosEntitySet(CreateEntitySet(TSPViewSelectionInfosEntitySet));
  Result:=FViewSelectionInfos;
end;

Function TSPApiData.CreateNewSPOIdentityHelpers : TSPSPOIdentityHelpersEntitySet; 

begin
  Result:=TSPSPOIdentityHelpersEntitySet(CreateEntitySet(TSPSPOIdentityHelpersEntitySet));
end;


Function TSPApiData.GetSPOIdentityHelpers : TSPSPOIdentityHelpersEntitySet; 


begin
  If Not Assigned(FSPOIdentityHelpers) then
    FSPOIdentityHelpers:=TSPSPOIdentityHelpersEntitySet(CreateEntitySet(TSPSPOIdentityHelpersEntitySet));
  Result:=FSPOIdentityHelpers;
end;

Function TSPApiData.CreateNewAppPrincipalIdentityProviders : TSPAppPrincipalIdentityProvidersEntitySet; 

begin
  Result:=TSPAppPrincipalIdentityProvidersEntitySet(CreateEntitySet(TSPAppPrincipalIdentityProvidersEntitySet));
end;


Function TSPApiData.GetAppPrincipalIdentityProviders : TSPAppPrincipalIdentityProvidersEntitySet; 


begin
  If Not Assigned(FAppPrincipalIdentityProviders) then
    FAppPrincipalIdentityProviders:=TSPAppPrincipalIdentityProvidersEntitySet(CreateEntitySet(TSPAppPrincipalIdentityProvidersEntitySet));
  Result:=FAppPrincipalIdentityProviders;
end;

Function TSPApiData.CreateNewAppPrincipalManagers : TSPAppPrincipalManagersEntitySet; 

begin
  Result:=TSPAppPrincipalManagersEntitySet(CreateEntitySet(TSPAppPrincipalManagersEntitySet));
end;


Function TSPApiData.GetAppPrincipalManagers : TSPAppPrincipalManagersEntitySet; 


begin
  If Not Assigned(FAppPrincipalManagers) then
    FAppPrincipalManagers:=TSPAppPrincipalManagersEntitySet(CreateEntitySet(TSPAppPrincipalManagersEntitySet));
  Result:=FAppPrincipalManagers;
end;

Function TSPApiData.CreateNewAppPrincipalCredentials : TSPAppPrincipalCredentialsEntitySet; 

begin
  Result:=TSPAppPrincipalCredentialsEntitySet(CreateEntitySet(TSPAppPrincipalCredentialsEntitySet));
end;


Function TSPApiData.GetAppPrincipalCredentials : TSPAppPrincipalCredentialsEntitySet; 


begin
  If Not Assigned(FAppPrincipalCredentials) then
    FAppPrincipalCredentials:=TSPAppPrincipalCredentialsEntitySet(CreateEntitySet(TSPAppPrincipalCredentialsEntitySet));
  Result:=FAppPrincipalCredentials;
end;

Function TSPApiData.CreateNewAppPrincipalNames : TSPAppPrincipalNamesEntitySet; 

begin
  Result:=TSPAppPrincipalNamesEntitySet(CreateEntitySet(TSPAppPrincipalNamesEntitySet));
end;


Function TSPApiData.GetAppPrincipalNames : TSPAppPrincipalNamesEntitySet; 


begin
  If Not Assigned(FAppPrincipalNames) then
    FAppPrincipalNames:=TSPAppPrincipalNamesEntitySet(CreateEntitySet(TSPAppPrincipalNamesEntitySet));
  Result:=FAppPrincipalNames;
end;

Function TSPApiData.CreateNewDraftProjectResources1 : TSPDraftProjectResources1EntitySet; 

begin
  Result:=TSPDraftProjectResources1EntitySet(CreateEntitySet(TSPDraftProjectResources1EntitySet));
end;


Function TSPApiData.GetDraftProjectResources1 : TSPDraftProjectResources1EntitySet; 


begin
  If Not Assigned(FDraftProjectResources1) then
    FDraftProjectResources1:=TSPDraftProjectResources1EntitySet(CreateEntitySet(TSPDraftProjectResources1EntitySet));
  Result:=FDraftProjectResources1;
end;


{ --------------------------------------------------------------------
  TSPAppsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppsEntitySet.ObjectRestKind : String; 

begin
  Result:='Apps';
end;

Class Function TSPAppsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_AppServicesApp;
end;


Function TSPAppsEntitySet.Get(const Id: string) : TMicrosoft_AppServicesApp; 


begin
  Result:=TMicrosoft_AppServicesApp(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPAppsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_AppServicesAppArray; 


begin
  Result:=TMicrosoft_AppServicesAppArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_AppServicesAppArray; 


begin
  Result:=TMicrosoft_AppServicesAppArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppsEntitySet.ListAll(const AQuery: String) : TMicrosoft_AppServicesAppArray; 

var N : String;

begin
  Result:=TMicrosoft_AppServicesAppArray(GetMulti(AQuery,True,N));
end;


Function TSPAppsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_AppServicesAppArray; 

var N : String;

begin
  Result:=TMicrosoft_AppServicesAppArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFilesEntitySet
  --------------------------------------------------------------------}


Class Function TSPFilesEntitySet.ObjectRestKind : String; 

begin
  Result:='Files';
end;

Class Function TSPFilesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_FileServicesFileSystemItem;
end;


Function TSPFilesEntitySet.Get(const Id: string) : TMS_FileServicesFileSystemItem; 


begin
  Result:=TMS_FileServicesFileSystemItem(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFilesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_FileServicesFileSystemItemArray; 


begin
  Result:=TMS_FileServicesFileSystemItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFilesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_FileServicesFileSystemItemArray; 


begin
  Result:=TMS_FileServicesFileSystemItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFilesEntitySet.ListAll(const AQuery: String) : TMS_FileServicesFileSystemItemArray; 

var N : String;

begin
  Result:=TMS_FileServicesFileSystemItemArray(GetMulti(AQuery,True,N));
end;


Function TSPFilesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_FileServicesFileSystemItemArray; 

var N : String;

begin
  Result:=TMS_FileServicesFileSystemItemArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPListsEntitySet
  --------------------------------------------------------------------}


Class Function TSPListsEntitySet.ObjectRestKind : String; 

begin
  Result:='Lists';
end;

Class Function TSPListsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPList;
end;


Function TSPListsEntitySet.Get(const HasUniqueRoleAssignments: boolean) : TSPList; 


begin
  Result:=TSPList(GetSingle(BoolToStr(HasUniqueRoleAssignments,'true','false')));
end;


Function TSPListsEntitySet.List(const AQuery: String; out NextLink: String) : TSPListArray; 


begin
  Result:=TSPListArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPListsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPListArray; 


begin
  Result:=TSPListArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPListsEntitySet.ListAll(const AQuery: String) : TSPListArray; 

var N : String;

begin
  Result:=TSPListArray(GetMulti(AQuery,True,N));
end;


Function TSPListsEntitySet.ListAll(const AQuery: TQueryParams) : TSPListArray; 

var N : String;

begin
  Result:=TSPListArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMesEntitySet
  --------------------------------------------------------------------}


Class Function TSPMesEntitySet.ObjectRestKind : String; 

begin
  Result:='Mes';
end;

Class Function TSPMesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRequestUserContext;
end;


Function TSPMesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPRequestUserContext; 


begin
  Result:=TSPRequestUserContext(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMesEntitySet.List(const AQuery: String; out NextLink: String) : TSPRequestUserContextArray; 


begin
  Result:=TSPRequestUserContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRequestUserContextArray; 


begin
  Result:=TSPRequestUserContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMesEntitySet.ListAll(const AQuery: String) : TSPRequestUserContextArray; 

var N : String;

begin
  Result:=TSPRequestUserContextArray(GetMulti(AQuery,True,N));
end;


Function TSPMesEntitySet.ListAll(const AQuery: TQueryParams) : TSPRequestUserContextArray; 

var N : String;

begin
  Result:=TSPRequestUserContextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSitesEntitySet
  --------------------------------------------------------------------}


Class Function TSPSitesEntitySet.ObjectRestKind : String; 

begin
  Result:='Sites';
end;

Class Function TSPSitesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSite;
end;


Function TSPSitesEntitySet.Get(const Id: TGUIDString) : TSPSite; 


begin
  Result:=TSPSite(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPSitesEntitySet.List(const AQuery: String; out NextLink: String) : TSPSiteArray; 


begin
  Result:=TSPSiteArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSitesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSiteArray; 


begin
  Result:=TSPSiteArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSitesEntitySet.ListAll(const AQuery: String) : TSPSiteArray; 

var N : String;

begin
  Result:=TSPSiteArray(GetMulti(AQuery,True,N));
end;


Function TSPSitesEntitySet.ListAll(const AQuery: TQueryParams) : TSPSiteArray; 

var N : String;

begin
  Result:=TSPSiteArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebsEntitySet.ObjectRestKind : String; 

begin
  Result:='Webs';
end;

Class Function TSPWebsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPWeb;
end;


Function TSPWebsEntitySet.Get(const HasUniqueRoleAssignments: boolean) : TSPWeb; 


begin
  Result:=TSPWeb(GetSingle(BoolToStr(HasUniqueRoleAssignments,'true','false')));
end;


Function TSPWebsEntitySet.List(const AQuery: String; out NextLink: String) : TSPWebArray; 


begin
  Result:=TSPWebArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPWebArray; 


begin
  Result:=TSPWebArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebsEntitySet.ListAll(const AQuery: String) : TSPWebArray; 

var N : String;

begin
  Result:=TSPWebArray(GetMulti(AQuery,True,N));
end;


Function TSPWebsEntitySet.ListAll(const AQuery: TQueryParams) : TSPWebArray; 

var N : String;

begin
  Result:=TSPWebArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppStoresEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppStoresEntitySet.ObjectRestKind : String; 

begin
  Result:='AppStores';
end;

Class Function TSPAppStoresEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_AppServicesAppStore;
end;


Function TSPAppStoresEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_AppServicesAppStore; 


begin
  Result:=TMicrosoft_AppServicesAppStore(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppStoresEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_AppServicesAppStoreArray; 


begin
  Result:=TMicrosoft_AppServicesAppStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppStoresEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_AppServicesAppStoreArray; 


begin
  Result:=TMicrosoft_AppServicesAppStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppStoresEntitySet.ListAll(const AQuery: String) : TMicrosoft_AppServicesAppStoreArray; 

var N : String;

begin
  Result:=TMicrosoft_AppServicesAppStoreArray(GetMulti(AQuery,True,N));
end;


Function TSPAppStoresEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_AppServicesAppStoreArray; 

var N : String;

begin
  Result:=TMicrosoft_AppServicesAppStoreArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPConnectionSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPConnectionSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='ConnectionSettingss';
end;

Class Function TSPConnectionSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings;
end;


Function TSPConnectionSettingssEntitySet.Get(const _Name: string) : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings; 


begin
  Result:=TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettings(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPConnectionSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray; 


begin
  Result:=TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPConnectionSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray; 


begin
  Result:=TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPConnectionSettingssEntitySet.ListAll(const AQuery: String) : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray; 

var N : String;

begin
  Result:=TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPConnectionSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray; 

var N : String;

begin
  Result:=TMicrosoft_BusinessData_Infrastructure_SecureStoreConnectionSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTargetApplicationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTargetApplicationsEntitySet.ObjectRestKind : String; 

begin
  Result:='TargetApplications';
end;

Class Function TSPTargetApplicationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplication;
end;


Function TSPTargetApplicationsEntitySet.Get(const ApplicationId: string) : TMicrosoft_Office_SecureStoreService_ServerTargetApplication; 


begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplication(GetSingle(TODataObject.MakeKeyString(ApplicationId)));
end;


Function TSPTargetApplicationsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray; 


begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTargetApplicationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray; 


begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTargetApplicationsEntitySet.ListAll(const AQuery: String) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray(GetMulti(AQuery,True,N));
end;


Function TSPTargetApplicationsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTargetApplicationFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTargetApplicationFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='TargetApplicationFields';
end;

Class Function TSPTargetApplicationFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField;
end;


Function TSPTargetApplicationFieldsEntitySet.Get(const _Name: string) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField; 


begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationField(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPTargetApplicationFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray; 


begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTargetApplicationFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray; 


begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTargetApplicationFieldsEntitySet.ListAll(const AQuery: String) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPTargetApplicationFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_SecureStoreService_ServerTargetApplicationFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPReputationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPReputationsEntitySet.ObjectRestKind : String; 

begin
  Result:='Reputations';
end;

Class Function TSPReputationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Office_Server_ReputationModelReputation;
end;


Function TSPReputationsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_Office_Server_ReputationModelReputation; 


begin
  Result:=TMicrosoft_Office_Server_ReputationModelReputation(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPReputationsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Office_Server_ReputationModelReputationArray; 


begin
  Result:=TMicrosoft_Office_Server_ReputationModelReputationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPReputationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Office_Server_ReputationModelReputationArray; 


begin
  Result:=TMicrosoft_Office_Server_ReputationModelReputationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPReputationsEntitySet.ListAll(const AQuery: String) : TMicrosoft_Office_Server_ReputationModelReputationArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_Server_ReputationModelReputationArray(GetMulti(AQuery,True,N));
end;


Function TSPReputationsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Office_Server_ReputationModelReputationArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_Server_ReputationModelReputationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSearchServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPSearchServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='SearchServices';
end;

Class Function TSPSearchServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Office_Server_Search_RESTSearchService;
end;


Function TSPSearchServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_Office_Server_Search_RESTSearchService; 


begin
  Result:=TMicrosoft_Office_Server_Search_RESTSearchService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSearchServicesEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Office_Server_Search_RESTSearchServiceArray; 


begin
  Result:=TMicrosoft_Office_Server_Search_RESTSearchServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSearchServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Office_Server_Search_RESTSearchServiceArray; 


begin
  Result:=TMicrosoft_Office_Server_Search_RESTSearchServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSearchServicesEntitySet.ListAll(const AQuery: String) : TMicrosoft_Office_Server_Search_RESTSearchServiceArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_Server_Search_RESTSearchServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPSearchServicesEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Office_Server_Search_RESTSearchServiceArray; 

var N : String;

begin
  Result:=TMicrosoft_Office_Server_Search_RESTSearchServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPApps1EntitySet
  --------------------------------------------------------------------}


Class Function TSPApps1EntitySet.ObjectRestKind : String; 

begin
  Result:='Apps1';
end;

Class Function TSPApps1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataApp;
end;


Function TSPApps1EntitySet.Get(const Id: TGUIDString) : TMS_AppDataApp; 


begin
  Result:=TMS_AppDataApp(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPApps1EntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataAppArray; 


begin
  Result:=TMS_AppDataAppArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPApps1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataAppArray; 


begin
  Result:=TMS_AppDataAppArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPApps1EntitySet.ListAll(const AQuery: String) : TMS_AppDataAppArray; 

var N : String;

begin
  Result:=TMS_AppDataAppArray(GetMulti(AQuery,True,N));
end;


Function TSPApps1EntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataAppArray; 

var N : String;

begin
  Result:=TMS_AppDataAppArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingAdminsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingAdminsEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingAdmins';
end;

Class Function TSPPointPublishingAdminsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin;
end;


Function TSPPointPublishingAdminsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin; 


begin
  Result:=TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdmin(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPointPublishingAdminsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingAdminsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingAdminsEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingAdminsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_PointPublishingPointPublishingAdminArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDDIAdaptersEntitySet
  --------------------------------------------------------------------}


Class Function TSPDDIAdaptersEntitySet.ObjectRestKind : String; 

begin
  Result:='DDIAdapters';
end;

Class Function TSPDDIAdaptersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter;
end;


Function TSPDDIAdaptersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapter(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDDIAdaptersEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDDIAdaptersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDDIAdaptersEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray(GetMulti(AQuery,True,N));
end;


Function TSPDDIAdaptersEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdmin_MiddleTierDDIAdapterArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPOTenantWebTemplateCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPOTenantWebTemplateCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='SPOTenantWebTemplateCollections';
end;

Class Function TSPSPOTenantWebTemplateCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection;
end;


Function TSPSPOTenantWebTemplateCollectionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollection(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPOTenantWebTemplateCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPOTenantWebTemplateCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPOTenantWebTemplateCollectionsEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPSPOTenantWebTemplateCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantAdministrationSPOTenantWebTemplateCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPExternalUsersEntitySet
  --------------------------------------------------------------------}


Class Function TSPExternalUsersEntitySet.ObjectRestKind : String; 

begin
  Result:='ExternalUsers';
end;

Class Function TSPExternalUsersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUser;
end;


Function TSPExternalUsersEntitySet.Get(const AcceptedAs: string) : TMicrosoft_Online_SharePoint_TenantManagementExternalUser; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUser(GetSingle(TODataObject.MakeKeyString(AcceptedAs)));
end;


Function TSPExternalUsersEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExternalUsersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExternalUsersEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray(GetMulti(AQuery,True,N));
end;


Function TSPExternalUsersEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementExternalUserArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPGetExternalUsersResultssEntitySet
  --------------------------------------------------------------------}


Class Function TSPGetExternalUsersResultssEntitySet.ObjectRestKind : String; 

begin
  Result:='GetExternalUsersResultss';
end;

Class Function TSPGetExternalUsersResultssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults;
end;


Function TSPGetExternalUsersResultssEntitySet.Get(const TotalUserCount: TInt32) : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResults(GetSingle(IntToStr(TotalUserCount)));
end;


Function TSPGetExternalUsersResultssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGetExternalUsersResultssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGetExternalUsersResultssEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray(GetMulti(AQuery,True,N));
end;


Function TSPGetExternalUsersResultssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementGetExternalUsersResultsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPOffice365TenantsEntitySet
  --------------------------------------------------------------------}


Class Function TSPOffice365TenantsEntitySet.ObjectRestKind : String; 

begin
  Result:='Office365Tenants';
end;

Class Function TSPOffice365TenantsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant;
end;


Function TSPOffice365TenantsEntitySet.Get(const DisplayStartASiteOption: boolean) : TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementOffice365Tenant(GetSingle(BoolToStr(DisplayStartASiteOption,'true','false')));
end;


Function TSPOffice365TenantsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPOffice365TenantsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPOffice365TenantsEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray(GetMulti(AQuery,True,N));
end;


Function TSPOffice365TenantsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementOffice365TenantArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRemoveExternalUsersResultssEntitySet
  --------------------------------------------------------------------}


Class Function TSPRemoveExternalUsersResultssEntitySet.ObjectRestKind : String; 

begin
  Result:='RemoveExternalUsersResultss';
end;

Class Function TSPRemoveExternalUsersResultssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults;
end;


Function TSPRemoveExternalUsersResultssEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResults(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPRemoveExternalUsersResultssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRemoveExternalUsersResultssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray; 


begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRemoveExternalUsersResultssEntitySet.ListAll(const AQuery: String) : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray(GetMulti(AQuery,True,N));
end;


Function TSPRemoveExternalUsersResultssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray; 

var N : String;

begin
  Result:=TMicrosoft_Online_SharePoint_TenantManagementRemoveExternalUsersResultsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFeatureDefinitionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPFeatureDefinitionsEntitySet.ObjectRestKind : String; 

begin
  Result:='FeatureDefinitions';
end;

Class Function TSPFeatureDefinitionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationFeatureDefinition;
end;


Function TSPFeatureDefinitionsEntitySet.Get(const Id: TGUIDString) : TMicrosoft_SharePoint_AdministrationFeatureDefinition; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationFeatureDefinition(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFeatureDefinitionsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFeatureDefinitionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFeatureDefinitionsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray(GetMulti(AQuery,True,N));
end;


Function TSPFeatureDefinitionsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationFeatureDefinitionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPAnalyticsUsageServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPAnalyticsUsageServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='SPAnalyticsUsageServices';
end;

Class Function TSPSPAnalyticsUsageServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService;
end;


Function TSPSPAnalyticsUsageServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPAnalyticsUsageServicesEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAnalyticsUsageServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAnalyticsUsageServicesEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPSPAnalyticsUsageServicesEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAnalyticsUsageServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPAppStateQueryJobDefinitionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPAppStateQueryJobDefinitionsEntitySet.ObjectRestKind : String; 

begin
  Result:='SPAppStateQueryJobDefinitions';
end;

Class Function TSPSPAppStateQueryJobDefinitionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition;
end;


Function TSPSPAppStateQueryJobDefinitionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinition(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPAppStateQueryJobDefinitionsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAppStateQueryJobDefinitionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAppStateQueryJobDefinitionsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray(GetMulti(AQuery,True,N));
end;


Function TSPSPAppStateQueryJobDefinitionsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPAppStateQueryJobDefinitionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPFarmsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPFarmsEntitySet.ObjectRestKind : String; 

begin
  Result:='SPFarms';
end;

Class Function TSPSPFarmsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarm;
end;


Function TSPSPFarmsEntitySet.Get(const Id: TGUIDString) : TMicrosoft_SharePoint_AdministrationSPFarm; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarm(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPSPFarmsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPFarmArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarmArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPFarmsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPFarmArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarmArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPFarmsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationSPFarmArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarmArray(GetMulti(AQuery,True,N));
end;


Function TSPSPFarmsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationSPFarmArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPFarmArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPTenantAppInstanceDatasEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPTenantAppInstanceDatasEntitySet.ObjectRestKind : String; 

begin
  Result:='SPTenantAppInstanceDatas';
end;

Class Function TSPSPTenantAppInstanceDatasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData;
end;


Function TSPSPTenantAppInstanceDatasEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceData(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPTenantAppInstanceDatasEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPTenantAppInstanceDatasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPTenantAppInstanceDatasEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray(GetMulti(AQuery,True,N));
end;


Function TSPSPTenantAppInstanceDatasEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPTenantAppInstanceDataArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPWebApplicationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPWebApplicationsEntitySet.ObjectRestKind : String; 

begin
  Result:='SPWebApplications';
end;

Class Function TSPSPWebApplicationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplication;
end;


Function TSPSPWebApplicationsEntitySet.Get(const Id: TGUIDString) : TMicrosoft_SharePoint_AdministrationSPWebApplication; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplication(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPSPWebApplicationsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplicationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWebApplicationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplicationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWebApplicationsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplicationArray(GetMulti(AQuery,True,N));
end;


Function TSPSPWebApplicationsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationSPWebApplicationArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebApplicationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPWebServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPWebServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='SPWebServices';
end;

Class Function TSPSPWebServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebService;
end;


Function TSPSPWebServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_AdministrationSPWebService; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPWebServicesEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPWebServiceArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWebServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AdministrationSPWebServiceArray; 


begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWebServicesEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AdministrationSPWebServiceArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPSPWebServicesEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AdministrationSPWebServiceArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AdministrationSPWebServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPAppPrincipalInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPAppPrincipalInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='SPAppPrincipalInfos';
end;

Class Function TSPSPAppPrincipalInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo;
end;


Function TSPSPAppPrincipalInfosEntitySet.Get(const _Name: string) : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo; 


begin
  Result:=TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfo(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPSPAppPrincipalInfosEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray; 


begin
  Result:=TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAppPrincipalInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray; 


begin
  Result:=TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAppPrincipalInfosEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPSPAppPrincipalInfosEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_AppManagementSPAppPrincipalInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDocumentCrawlLogsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDocumentCrawlLogsEntitySet.ObjectRestKind : String; 

begin
  Result:='DocumentCrawlLogs';
end;

Class Function TSPDocumentCrawlLogsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog;
end;


Function TSPDocumentCrawlLogsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLog(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDocumentCrawlLogsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentCrawlLogsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentCrawlLogsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray(GetMulti(AQuery,True,N));
end;


Function TSPDocumentCrawlLogsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_AdministrationDocumentCrawlLogArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSignalStoresEntitySet
  --------------------------------------------------------------------}


Class Function TSPSignalStoresEntitySet.ObjectRestKind : String; 

begin
  Result:='SignalStores';
end;

Class Function TSPSignalStoresEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore;
end;


Function TSPSignalStoresEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStore(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSignalStoresEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSignalStoresEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSignalStoresEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray(GetMulti(AQuery,True,N));
end;


Function TSPSignalStoresEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_AnalyticsSignalStoreArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPQueryPersonalizationDatasEntitySet
  --------------------------------------------------------------------}


Class Function TSPQueryPersonalizationDatasEntitySet.ObjectRestKind : String; 

begin
  Result:='QueryPersonalizationDatas';
end;

Class Function TSPQueryPersonalizationDatasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData;
end;


Function TSPQueryPersonalizationDatasEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationData(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPQueryPersonalizationDatasEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPQueryPersonalizationDatasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPQueryPersonalizationDatasEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray(GetMulti(AQuery,True,N));
end;


Function TSPQueryPersonalizationDatasEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryQueryPersonalizationDataArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRankingLabelingsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRankingLabelingsEntitySet.ObjectRestKind : String; 

begin
  Result:='RankingLabelings';
end;

Class Function TSPRankingLabelingsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling;
end;


Function TSPRankingLabelingsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryRankingLabeling(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPRankingLabelingsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRankingLabelingsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRankingLabelingsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray(GetMulti(AQuery,True,N));
end;


Function TSPRankingLabelingsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryRankingLabelingArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPReorderingRuleCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPReorderingRuleCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='ReorderingRuleCollections';
end;

Class Function TSPReorderingRuleCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection;
end;


Function TSPReorderingRuleCollectionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollection(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPReorderingRuleCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPReorderingRuleCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPReorderingRuleCollectionsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPReorderingRuleCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryReorderingRuleCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSortCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSortCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='SortCollections';
end;

Class Function TSPSortCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QuerySortCollection;
end;


Function TSPSortCollectionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_QuerySortCollection; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QuerySortCollection(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSortCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSortCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSortCollectionsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPSortCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QuerySortCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStringCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPStringCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='StringCollections';
end;

Class Function TSPStringCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryStringCollection;
end;


Function TSPStringCollectionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Client_Search_QueryStringCollection; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryStringCollection(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPStringCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStringCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray; 


begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStringCollectionsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPStringCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Client_Search_QueryStringCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPFlightsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPFlightsEntitySet.ObjectRestKind : String; 

begin
  Result:='SPFlights';
end;

Class Function TSPSPFlightsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Flighting_RuntimeSPFlight;
end;


Function TSPSPFlightsEntitySet.Get(const Configuration: string) : TMicrosoft_SharePoint_Flighting_RuntimeSPFlight; 


begin
  Result:=TMicrosoft_SharePoint_Flighting_RuntimeSPFlight(GetSingle(TODataObject.MakeKeyString(Configuration)));
end;


Function TSPSPFlightsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray; 


begin
  Result:=TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPFlightsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray; 


begin
  Result:=TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPFlightsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray(GetMulti(AQuery,True,N));
end;


Function TSPSPFlightsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Flighting_RuntimeSPFlightArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPCorporateCuratedGallerySettingsBasesEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.ObjectRestKind : String; 

begin
  Result:='SPCorporateCuratedGallerySettingsBases';
end;

Class Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase;
end;


Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.Get(const HostSiteFullUrl: string) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase; 


begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBase(GetSingle(TODataObject.MakeKeyString(HostSiteFullUrl)));
end;


Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray; 


begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray; 


begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray(GetMulti(AQuery,True,N));
end;


Function TSPSPCorporateCuratedGallerySettingsBasesEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsBaseArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPCorporateCuratedGallerySettingsFactorysEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.ObjectRestKind : String; 

begin
  Result:='SPCorporateCuratedGallerySettingsFactorys';
end;

Class Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory;
end;


Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory; 


begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactory(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray; 


begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray; 


begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray(GetMulti(AQuery,True,N));
end;


Function TSPSPCorporateCuratedGallerySettingsFactorysEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Marketplace_CorporateCuratedGallerySPCorporateCuratedGallerySettingsFactoryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPMarketplaceSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPMarketplaceSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='SPMarketplaceSettingss';
end;

Class Function TSPSPMarketplaceSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings;
end;


Function TSPSPMarketplaceSettingssEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings; 


begin
  Result:=TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettings(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPMarketplaceSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray; 


begin
  Result:=TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPMarketplaceSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray; 


begin
  Result:=TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPMarketplaceSettingssEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPSPMarketplaceSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_MarketplaceSPMarketplaceSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNavigationServiceRestsEntitySet
  --------------------------------------------------------------------}


Class Function TSPNavigationServiceRestsEntitySet.ObjectRestKind : String; 

begin
  Result:='NavigationServiceRests';
end;

Class Function TSPNavigationServiceRestsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest;
end;


Function TSPNavigationServiceRestsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest; 


begin
  Result:=TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRest(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPNavigationServiceRestsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray; 


begin
  Result:=TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNavigationServiceRestsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray; 


begin
  Result:=TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNavigationServiceRestsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray(GetMulti(AQuery,True,N));
end;


Function TSPNavigationServiceRestsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Navigation_RESTNavigationServiceRestArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppDetailssEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppDetailssEntitySet.ObjectRestKind : String; 

begin
  Result:='AppDetailss';
end;

Class Function TSPAppDetailssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_PackagingAppDetails;
end;


Function TSPAppDetailssEntitySet.Get(const EulaUrl: string) : TMicrosoft_SharePoint_PackagingAppDetails; 


begin
  Result:=TMicrosoft_SharePoint_PackagingAppDetails(GetSingle(TODataObject.MakeKeyString(EulaUrl)));
end;


Function TSPAppDetailssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_PackagingAppDetailsArray; 


begin
  Result:=TMicrosoft_SharePoint_PackagingAppDetailsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppDetailssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_PackagingAppDetailsArray; 


begin
  Result:=TMicrosoft_SharePoint_PackagingAppDetailsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppDetailssEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_PackagingAppDetailsArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PackagingAppDetailsArray(GetMulti(AQuery,True,N));
end;


Function TSPAppDetailssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_PackagingAppDetailsArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PackagingAppDetailsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppIconInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppIconInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='AppIconInfos';
end;

Class Function TSPAppIconInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_PackagingAppIconInfo;
end;


Function TSPAppIconInfosEntitySet.Get(const Content: TBinary) : TMicrosoft_SharePoint_PackagingAppIconInfo; 


begin
  Result:=TMicrosoft_SharePoint_PackagingAppIconInfo(GetSingle(BinaryToString(Content)));
end;


Function TSPAppIconInfosEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_PackagingAppIconInfoArray; 


begin
  Result:=TMicrosoft_SharePoint_PackagingAppIconInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppIconInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_PackagingAppIconInfoArray; 


begin
  Result:=TMicrosoft_SharePoint_PackagingAppIconInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppIconInfosEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_PackagingAppIconInfoArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PackagingAppIconInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPAppIconInfosEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_PackagingAppIconInfoArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PackagingAppIconInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCollaborationMailboxsEntitySet
  --------------------------------------------------------------------}


Class Function TSPCollaborationMailboxsEntitySet.ObjectRestKind : String; 

begin
  Result:='CollaborationMailboxs';
end;

Class Function TSPCollaborationMailboxsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_PortalCollaborationMailbox;
end;


Function TSPCollaborationMailboxsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_PortalCollaborationMailbox; 


begin
  Result:=TMicrosoft_SharePoint_PortalCollaborationMailbox(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPCollaborationMailboxsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_PortalCollaborationMailboxArray; 


begin
  Result:=TMicrosoft_SharePoint_PortalCollaborationMailboxArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCollaborationMailboxsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_PortalCollaborationMailboxArray; 


begin
  Result:=TMicrosoft_SharePoint_PortalCollaborationMailboxArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCollaborationMailboxsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_PortalCollaborationMailboxArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PortalCollaborationMailboxArray(GetMulti(AQuery,True,N));
end;


Function TSPCollaborationMailboxsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_PortalCollaborationMailboxArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PortalCollaborationMailboxArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCommunityModerationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPCommunityModerationsEntitySet.ObjectRestKind : String; 

begin
  Result:='CommunityModerations';
end;

Class Function TSPCommunityModerationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_PortalCommunityModeration;
end;


Function TSPCommunityModerationsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_PortalCommunityModeration; 


begin
  Result:=TMicrosoft_SharePoint_PortalCommunityModeration(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPCommunityModerationsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_PortalCommunityModerationArray; 


begin
  Result:=TMicrosoft_SharePoint_PortalCommunityModerationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCommunityModerationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_PortalCommunityModerationArray; 


begin
  Result:=TMicrosoft_SharePoint_PortalCommunityModerationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCommunityModerationsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_PortalCommunityModerationArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PortalCommunityModerationArray(GetMulti(AQuery,True,N));
end;


Function TSPCommunityModerationsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_PortalCommunityModerationArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PortalCommunityModerationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMySiteRecommendationssEntitySet
  --------------------------------------------------------------------}


Class Function TSPMySiteRecommendationssEntitySet.ObjectRestKind : String; 

begin
  Result:='MySiteRecommendationss';
end;

Class Function TSPMySiteRecommendationssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_PortalMySiteRecommendations;
end;


Function TSPMySiteRecommendationssEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_PortalMySiteRecommendations; 


begin
  Result:=TMicrosoft_SharePoint_PortalMySiteRecommendations(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMySiteRecommendationssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray; 


begin
  Result:=TMicrosoft_SharePoint_PortalMySiteRecommendationsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteRecommendationssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray; 


begin
  Result:=TMicrosoft_SharePoint_PortalMySiteRecommendationsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteRecommendationssEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PortalMySiteRecommendationsArray(GetMulti(AQuery,True,N));
end;


Function TSPMySiteRecommendationssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_PortalMySiteRecommendationsArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_PortalMySiteRecommendationsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDocumentsSharedWithGroupsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDocumentsSharedWithGroupsEntitySet.ObjectRestKind : String; 

begin
  Result:='DocumentsSharedWithGroups';
end;

Class Function TSPDocumentsSharedWithGroupsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup;
end;


Function TSPDocumentsSharedWithGroupsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroup(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDocumentsSharedWithGroupsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentsSharedWithGroupsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentsSharedWithGroupsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray(GetMulti(AQuery,True,N));
end;


Function TSPDocumentsSharedWithGroupsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithGroupArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDocumentsSharedWithMesEntitySet
  --------------------------------------------------------------------}


Class Function TSPDocumentsSharedWithMesEntitySet.ObjectRestKind : String; 

begin
  Result:='DocumentsSharedWithMes';
end;

Class Function TSPDocumentsSharedWithMesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe;
end;


Function TSPDocumentsSharedWithMesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMe(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDocumentsSharedWithMesEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentsSharedWithMesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentsSharedWithMesEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray(GetMulti(AQuery,True,N));
end;


Function TSPDocumentsSharedWithMesEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithMeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDocumentsSharedWithPersonsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDocumentsSharedWithPersonsEntitySet.ObjectRestKind : String; 

begin
  Result:='DocumentsSharedWithPersons';
end;

Class Function TSPDocumentsSharedWithPersonsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson;
end;


Function TSPDocumentsSharedWithPersonsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPerson(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDocumentsSharedWithPersonsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentsSharedWithPersonsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentsSharedWithPersonsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray(GetMulti(AQuery,True,N));
end;


Function TSPDocumentsSharedWithPersonsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesDocumentsSharedWithPersonArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMySiteDismissStatusTextsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMySiteDismissStatusTextsEntitySet.ObjectRestKind : String; 

begin
  Result:='MySiteDismissStatusTexts';
end;

Class Function TSPMySiteDismissStatusTextsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText;
end;


Function TSPMySiteDismissStatusTextsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusText(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMySiteDismissStatusTextsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteDismissStatusTextsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteDismissStatusTextsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray(GetMulti(AQuery,True,N));
end;


Function TSPMySiteDismissStatusTextsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDismissStatusTextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMySiteDocumentMoveUtilitysEntitySet
  --------------------------------------------------------------------}


Class Function TSPMySiteDocumentMoveUtilitysEntitySet.ObjectRestKind : String; 

begin
  Result:='MySiteDocumentMoveUtilitys';
end;

Class Function TSPMySiteDocumentMoveUtilitysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility;
end;


Function TSPMySiteDocumentMoveUtilitysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtility(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMySiteDocumentMoveUtilitysEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteDocumentMoveUtilitysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteDocumentMoveUtilitysEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray(GetMulti(AQuery,True,N));
end;


Function TSPMySiteDocumentMoveUtilitysEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteDocumentMoveUtilityArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMySiteLinkssEntitySet
  --------------------------------------------------------------------}


Class Function TSPMySiteLinkssEntitySet.ObjectRestKind : String; 

begin
  Result:='MySiteLinkss';
end;

Class Function TSPMySiteLinkssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks;
end;


Function TSPMySiteLinkssEntitySet.Get(const AllDocumentsLink: string) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinks(GetSingle(TODataObject.MakeKeyString(AllDocumentsLink)));
end;


Function TSPMySiteLinkssEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteLinkssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMySiteLinkssEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray(GetMulti(AQuery,True,N));
end;


Function TSPMySiteLinkssEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesMySiteLinksArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPromotedSitessEntitySet
  --------------------------------------------------------------------}


Class Function TSPPromotedSitessEntitySet.ObjectRestKind : String; 

begin
  Result:='PromotedSitess';
end;

Class Function TSPPromotedSitessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites;
end;


Function TSPPromotedSitessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesPromotedSites(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPromotedSitessEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPromotedSitessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPromotedSitessEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray(GetMulti(AQuery,True,N));
end;


Function TSPPromotedSitessEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesPromotedSitesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSharedWithMeDocumentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSharedWithMeDocumentsEntitySet.ObjectRestKind : String; 

begin
  Result:='SharedWithMeDocuments';
end;

Class Function TSPSharedWithMeDocumentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument;
end;


Function TSPSharedWithMeDocumentsEntitySet.Get(const Id: TInt32) : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocument(GetSingle(IntToStr(Id)));
end;


Function TSPSharedWithMeDocumentsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharedWithMeDocumentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharedWithMeDocumentsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray(GetMulti(AQuery,True,N));
end;


Function TSPSharedWithMeDocumentsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_UserProfilesSharedWithMeDocumentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRecentDocumentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRecentDocumentsEntitySet.ObjectRestKind : String; 

begin
  Result:='RecentDocuments';
end;

Class Function TSPRecentDocumentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_Portal_WebControlsRecentDocument;
end;


Function TSPRecentDocumentsEntitySet.Get(const Id: TInt32) : TMicrosoft_SharePoint_Portal_WebControlsRecentDocument; 


begin
  Result:=TMicrosoft_SharePoint_Portal_WebControlsRecentDocument(GetSingle(IntToStr(Id)));
end;


Function TSPRecentDocumentsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRecentDocumentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray; 


begin
  Result:=TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRecentDocumentsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray(GetMulti(AQuery,True,N));
end;


Function TSPRecentDocumentsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_Portal_WebControlsRecentDocumentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPModuleLinksEntitySet
  --------------------------------------------------------------------}


Class Function TSPModuleLinksEntitySet.ObjectRestKind : String; 

begin
  Result:='ModuleLinks';
end;

Class Function TSPModuleLinksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_WebControlsModuleLink;
end;


Function TSPModuleLinksEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_WebControlsModuleLink; 


begin
  Result:=TMicrosoft_SharePoint_WebControlsModuleLink(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPModuleLinksEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_WebControlsModuleLinkArray; 


begin
  Result:=TMicrosoft_SharePoint_WebControlsModuleLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPModuleLinksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_WebControlsModuleLinkArray; 


begin
  Result:=TMicrosoft_SharePoint_WebControlsModuleLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPModuleLinksEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_WebControlsModuleLinkArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_WebControlsModuleLinkArray(GetMulti(AQuery,True,N));
end;


Function TSPModuleLinksEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_WebControlsModuleLinkArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_WebControlsModuleLinkArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPResourceManifestInformationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPResourceManifestInformationsEntitySet.ObjectRestKind : String; 

begin
  Result:='ResourceManifestInformations';
end;

Class Function TSPResourceManifestInformationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_WebControlsResourceManifestInformation;
end;


Function TSPResourceManifestInformationsEntitySet.Get(const RequireJsScriptBlock: string) : TMicrosoft_SharePoint_WebControlsResourceManifestInformation; 


begin
  Result:=TMicrosoft_SharePoint_WebControlsResourceManifestInformation(GetSingle(TODataObject.MakeKeyString(RequireJsScriptBlock)));
end;


Function TSPResourceManifestInformationsEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray; 


begin
  Result:=TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPResourceManifestInformationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray; 


begin
  Result:=TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPResourceManifestInformationsEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray(GetMulti(AQuery,True,N));
end;


Function TSPResourceManifestInformationsEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_WebControlsResourceManifestInformationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWacApisEntitySet
  --------------------------------------------------------------------}


Class Function TSPWacApisEntitySet.ObjectRestKind : String; 

begin
  Result:='WacApis';
end;

Class Function TSPWacApisEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMicrosoft_SharePoint_YammerWacApi;
end;


Function TSPWacApisEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMicrosoft_SharePoint_YammerWacApi; 


begin
  Result:=TMicrosoft_SharePoint_YammerWacApi(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWacApisEntitySet.List(const AQuery: String; out NextLink: String) : TMicrosoft_SharePoint_YammerWacApiArray; 


begin
  Result:=TMicrosoft_SharePoint_YammerWacApiArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWacApisEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMicrosoft_SharePoint_YammerWacApiArray; 


begin
  Result:=TMicrosoft_SharePoint_YammerWacApiArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWacApisEntitySet.ListAll(const AQuery: String) : TMicrosoft_SharePoint_YammerWacApiArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_YammerWacApiArray(GetMulti(AQuery,True,N));
end;


Function TSPWacApisEntitySet.ListAll(const AQuery: TQueryParams) : TMicrosoft_SharePoint_YammerWacApiArray; 

var N : String;

begin
  Result:=TMicrosoft_SharePoint_YammerWacApiArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityItemsEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityItemsEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityItems';
end;

Class Function TSPEntityItemsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataEntityItem;
end;


Function TSPEntityItemsEntitySet.Get(const Id: TInt32) : TMS_AppDataEntityItem; 


begin
  Result:=TMS_AppDataEntityItem(GetSingle(IntToStr(Id)));
end;


Function TSPEntityItemsEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataEntityItemArray; 


begin
  Result:=TMS_AppDataEntityItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityItemsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataEntityItemArray; 


begin
  Result:=TMS_AppDataEntityItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityItemsEntitySet.ListAll(const AQuery: String) : TMS_AppDataEntityItemArray; 

var N : String;

begin
  Result:=TMS_AppDataEntityItemArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityItemsEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataEntityItemArray; 

var N : String;

begin
  Result:=TMS_AppDataEntityItemArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityTypesEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityTypesEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityTypes';
end;

Class Function TSPEntityTypesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataEntityType;
end;


Function TSPEntityTypesEntitySet.Get(const Id: TGUIDString) : TMS_AppDataEntityType; 


begin
  Result:=TMS_AppDataEntityType(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPEntityTypesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataEntityTypeArray; 


begin
  Result:=TMS_AppDataEntityTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataEntityTypeArray; 


begin
  Result:=TMS_AppDataEntityTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypesEntitySet.ListAll(const AQuery: String) : TMS_AppDataEntityTypeArray; 

var N : String;

begin
  Result:=TMS_AppDataEntityTypeArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityTypesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataEntityTypeArray; 

var N : String;

begin
  Result:=TMS_AppDataEntityTypeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityTypeBasesEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityTypeBasesEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityTypeBases';
end;

Class Function TSPEntityTypeBasesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataEntityTypeBase;
end;


Function TSPEntityTypeBasesEntitySet.Get(const Id: TGUIDString) : TMS_AppDataEntityTypeBase; 


begin
  Result:=TMS_AppDataEntityTypeBase(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPEntityTypeBasesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataEntityTypeBaseArray; 


begin
  Result:=TMS_AppDataEntityTypeBaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypeBasesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataEntityTypeBaseArray; 


begin
  Result:=TMS_AppDataEntityTypeBaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypeBasesEntitySet.ListAll(const AQuery: String) : TMS_AppDataEntityTypeBaseArray; 

var N : String;

begin
  Result:=TMS_AppDataEntityTypeBaseArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityTypeBasesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataEntityTypeBaseArray; 

var N : String;

begin
  Result:=TMS_AppDataEntityTypeBaseArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPExternalEntityTypesEntitySet
  --------------------------------------------------------------------}


Class Function TSPExternalEntityTypesEntitySet.ObjectRestKind : String; 

begin
  Result:='ExternalEntityTypes';
end;

Class Function TSPExternalEntityTypesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataExternalEntityType;
end;


Function TSPExternalEntityTypesEntitySet.Get(const Id: TGUIDString) : TMS_AppDataExternalEntityType; 


begin
  Result:=TMS_AppDataExternalEntityType(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPExternalEntityTypesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataExternalEntityTypeArray; 


begin
  Result:=TMS_AppDataExternalEntityTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExternalEntityTypesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataExternalEntityTypeArray; 


begin
  Result:=TMS_AppDataExternalEntityTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExternalEntityTypesEntitySet.ListAll(const AQuery: String) : TMS_AppDataExternalEntityTypeArray; 

var N : String;

begin
  Result:=TMS_AppDataExternalEntityTypeArray(GetMulti(AQuery,True,N));
end;


Function TSPExternalEntityTypesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataExternalEntityTypeArray; 

var N : String;

begin
  Result:=TMS_AppDataExternalEntityTypeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='Fields';
end;

Class Function TSPFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataField;
end;


Function TSPFieldsEntitySet.Get(const Id: TGUIDString) : TMS_AppDataField; 


begin
  Result:=TMS_AppDataField(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataFieldArray; 


begin
  Result:=TMS_AppDataFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataFieldArray; 


begin
  Result:=TMS_AppDataFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFieldsEntitySet.ListAll(const AQuery: String) : TMS_AppDataFieldArray; 

var N : String;

begin
  Result:=TMS_AppDataFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataFieldArray; 

var N : String;

begin
  Result:=TMS_AppDataFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPODataStoreContextsEntitySet
  --------------------------------------------------------------------}


Class Function TSPODataStoreContextsEntitySet.ObjectRestKind : String; 

begin
  Result:='ODataStoreContexts';
end;

Class Function TSPODataStoreContextsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataODataStoreContext;
end;


Function TSPODataStoreContextsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMS_AppDataODataStoreContext; 


begin
  Result:=TMS_AppDataODataStoreContext(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPODataStoreContextsEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataODataStoreContextArray; 


begin
  Result:=TMS_AppDataODataStoreContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPODataStoreContextsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataODataStoreContextArray; 


begin
  Result:=TMS_AppDataODataStoreContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPODataStoreContextsEntitySet.ListAll(const AQuery: String) : TMS_AppDataODataStoreContextArray; 

var N : String;

begin
  Result:=TMS_AppDataODataStoreContextArray(GetMulti(AQuery,True,N));
end;


Function TSPODataStoreContextsEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataODataStoreContextArray; 

var N : String;

begin
  Result:=TMS_AppDataODataStoreContextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRequestContextsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRequestContextsEntitySet.ObjectRestKind : String; 

begin
  Result:='RequestContexts';
end;

Class Function TSPRequestContextsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataRequestContext;
end;


Function TSPRequestContextsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMS_AppDataRequestContext; 


begin
  Result:=TMS_AppDataRequestContext(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPRequestContextsEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataRequestContextArray; 


begin
  Result:=TMS_AppDataRequestContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRequestContextsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataRequestContextArray; 


begin
  Result:=TMS_AppDataRequestContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRequestContextsEntitySet.ListAll(const AQuery: String) : TMS_AppDataRequestContextArray; 

var N : String;

begin
  Result:=TMS_AppDataRequestContextArray(GetMulti(AQuery,True,N));
end;


Function TSPRequestContextsEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataRequestContextArray; 

var N : String;

begin
  Result:=TMS_AppDataRequestContextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSqlStoreContextsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSqlStoreContextsEntitySet.ObjectRestKind : String; 

begin
  Result:='SqlStoreContexts';
end;

Class Function TSPSqlStoreContextsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataSqlStoreContext;
end;


Function TSPSqlStoreContextsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMS_AppDataSqlStoreContext; 


begin
  Result:=TMS_AppDataSqlStoreContext(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSqlStoreContextsEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataSqlStoreContextArray; 


begin
  Result:=TMS_AppDataSqlStoreContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSqlStoreContextsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataSqlStoreContextArray; 


begin
  Result:=TMS_AppDataSqlStoreContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSqlStoreContextsEntitySet.ListAll(const AQuery: String) : TMS_AppDataSqlStoreContextArray; 

var N : String;

begin
  Result:=TMS_AppDataSqlStoreContextArray(GetMulti(AQuery,True,N));
end;


Function TSPSqlStoreContextsEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataSqlStoreContextArray; 

var N : String;

begin
  Result:=TMS_AppDataSqlStoreContextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStoreContextBasesEntitySet
  --------------------------------------------------------------------}


Class Function TSPStoreContextBasesEntitySet.ObjectRestKind : String; 

begin
  Result:='StoreContextBases';
end;

Class Function TSPStoreContextBasesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_AppDataStoreContextBase;
end;


Function TSPStoreContextBasesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMS_AppDataStoreContextBase; 


begin
  Result:=TMS_AppDataStoreContextBase(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPStoreContextBasesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_AppDataStoreContextBaseArray; 


begin
  Result:=TMS_AppDataStoreContextBaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStoreContextBasesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_AppDataStoreContextBaseArray; 


begin
  Result:=TMS_AppDataStoreContextBaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStoreContextBasesEntitySet.ListAll(const AQuery: String) : TMS_AppDataStoreContextBaseArray; 

var N : String;

begin
  Result:=TMS_AppDataStoreContextBaseArray(GetMulti(AQuery,True,N));
end;


Function TSPStoreContextBasesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_AppDataStoreContextBaseArray; 

var N : String;

begin
  Result:=TMS_AppDataStoreContextBaseArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFiles1EntitySet
  --------------------------------------------------------------------}


Class Function TSPFiles1EntitySet.ObjectRestKind : String; 

begin
  Result:='Files1';
end;

Class Function TSPFiles1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_FileServices_File;
end;


Function TSPFiles1EntitySet.Get(const Id: string) : TMS_FileServices_File; 


begin
  Result:=TMS_FileServices_File(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFiles1EntitySet.List(const AQuery: String; out NextLink: String) : TMS_FileServices_FileArray; 


begin
  Result:=TMS_FileServices_FileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFiles1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_FileServices_FileArray; 


begin
  Result:=TMS_FileServices_FileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFiles1EntitySet.ListAll(const AQuery: String) : TMS_FileServices_FileArray; 

var N : String;

begin
  Result:=TMS_FileServices_FileArray(GetMulti(AQuery,True,N));
end;


Function TSPFiles1EntitySet.ListAll(const AQuery: TQueryParams) : TMS_FileServices_FileArray; 

var N : String;

begin
  Result:=TMS_FileServices_FileArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFileServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPFileServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='FileServices';
end;

Class Function TSPFileServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_FileServicesFileService;
end;


Function TSPFileServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMS_FileServicesFileService; 


begin
  Result:=TMS_FileServicesFileService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPFileServicesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_FileServicesFileServiceArray; 


begin
  Result:=TMS_FileServicesFileServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFileServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_FileServicesFileServiceArray; 


begin
  Result:=TMS_FileServicesFileServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFileServicesEntitySet.ListAll(const AQuery: String) : TMS_FileServicesFileServiceArray; 

var N : String;

begin
  Result:=TMS_FileServicesFileServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPFileServicesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_FileServicesFileServiceArray; 

var N : String;

begin
  Result:=TMS_FileServicesFileServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFoldersEntitySet
  --------------------------------------------------------------------}


Class Function TSPFoldersEntitySet.ObjectRestKind : String; 

begin
  Result:='Folders';
end;

Class Function TSPFoldersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_FileServicesFolder;
end;


Function TSPFoldersEntitySet.Get(const Id: string) : TMS_FileServicesFolder; 


begin
  Result:=TMS_FileServicesFolder(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFoldersEntitySet.List(const AQuery: String; out NextLink: String) : TMS_FileServicesFolderArray; 


begin
  Result:=TMS_FileServicesFolderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFoldersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_FileServicesFolderArray; 


begin
  Result:=TMS_FileServicesFolderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFoldersEntitySet.ListAll(const AQuery: String) : TMS_FileServicesFolderArray; 

var N : String;

begin
  Result:=TMS_FileServicesFolderArray(GetMulti(AQuery,True,N));
end;


Function TSPFoldersEntitySet.ListAll(const AQuery: TQueryParams) : TMS_FileServicesFolderArray; 

var N : String;

begin
  Result:=TMS_FileServicesFolderArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMeFileServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPMeFileServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='MeFileServices';
end;

Class Function TSPMeFileServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TMS_FileServicesMeFileService;
end;


Function TSPMeFileServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TMS_FileServicesMeFileService; 


begin
  Result:=TMS_FileServicesMeFileService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMeFileServicesEntitySet.List(const AQuery: String; out NextLink: String) : TMS_FileServicesMeFileServiceArray; 


begin
  Result:=TMS_FileServicesMeFileServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMeFileServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TMS_FileServicesMeFileServiceArray; 


begin
  Result:=TMS_FileServicesMeFileServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMeFileServicesEntitySet.ListAll(const AQuery: String) : TMS_FileServicesMeFileServiceArray; 

var N : String;

begin
  Result:=TMS_FileServicesMeFileServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPMeFileServicesEntitySet.ListAll(const AQuery: TQueryParams) : TMS_FileServicesMeFileServiceArray; 

var N : String;

begin
  Result:=TMS_FileServicesMeFileServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDiagnosticssEntitySet
  --------------------------------------------------------------------}


Class Function TSPDiagnosticssEntitySet.ObjectRestKind : String; 

begin
  Result:='Diagnosticss';
end;

Class Function TSPDiagnosticssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TOBA_Server_ServerWrapperDiagnostics;
end;


Function TSPDiagnosticssEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TOBA_Server_ServerWrapperDiagnostics; 


begin
  Result:=TOBA_Server_ServerWrapperDiagnostics(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDiagnosticssEntitySet.List(const AQuery: String; out NextLink: String) : TOBA_Server_ServerWrapperDiagnosticsArray; 


begin
  Result:=TOBA_Server_ServerWrapperDiagnosticsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDiagnosticssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TOBA_Server_ServerWrapperDiagnosticsArray; 


begin
  Result:=TOBA_Server_ServerWrapperDiagnosticsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDiagnosticssEntitySet.ListAll(const AQuery: String) : TOBA_Server_ServerWrapperDiagnosticsArray; 

var N : String;

begin
  Result:=TOBA_Server_ServerWrapperDiagnosticsArray(GetMulti(AQuery,True,N));
end;


Function TSPDiagnosticssEntitySet.ListAll(const AQuery: TQueryParams) : TOBA_Server_ServerWrapperDiagnosticsArray; 

var N : String;

begin
  Result:=TOBA_Server_ServerWrapperDiagnosticsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPReportingsEntitySet
  --------------------------------------------------------------------}


Class Function TSPReportingsEntitySet.ObjectRestKind : String; 

begin
  Result:='Reportings';
end;

Class Function TSPReportingsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TOBA_Server_ServerWrapperReporting;
end;


Function TSPReportingsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TOBA_Server_ServerWrapperReporting; 


begin
  Result:=TOBA_Server_ServerWrapperReporting(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPReportingsEntitySet.List(const AQuery: String; out NextLink: String) : TOBA_Server_ServerWrapperReportingArray; 


begin
  Result:=TOBA_Server_ServerWrapperReportingArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPReportingsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TOBA_Server_ServerWrapperReportingArray; 


begin
  Result:=TOBA_Server_ServerWrapperReportingArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPReportingsEntitySet.ListAll(const AQuery: String) : TOBA_Server_ServerWrapperReportingArray; 

var N : String;

begin
  Result:=TOBA_Server_ServerWrapperReportingArray(GetMulti(AQuery,True,N));
end;


Function TSPReportingsEntitySet.ListAll(const AQuery: TQueryParams) : TOBA_Server_ServerWrapperReportingArray; 

var N : String;

begin
  Result:=TOBA_Server_ServerWrapperReportingArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskflowsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskflowsEntitySet.ObjectRestKind : String; 

begin
  Result:='Taskflows';
end;

Class Function TSPTaskflowsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TOBA_Server_ServerWrapperTaskflow;
end;


Function TSPTaskflowsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TOBA_Server_ServerWrapperTaskflow; 


begin
  Result:=TOBA_Server_ServerWrapperTaskflow(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPTaskflowsEntitySet.List(const AQuery: String; out NextLink: String) : TOBA_Server_ServerWrapperTaskflowArray; 


begin
  Result:=TOBA_Server_ServerWrapperTaskflowArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskflowsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TOBA_Server_ServerWrapperTaskflowArray; 


begin
  Result:=TOBA_Server_ServerWrapperTaskflowArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskflowsEntitySet.ListAll(const AQuery: String) : TOBA_Server_ServerWrapperTaskflowArray; 

var N : String;

begin
  Result:=TOBA_Server_ServerWrapperTaskflowArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskflowsEntitySet.ListAll(const AQuery: TQueryParams) : TOBA_Server_ServerWrapperTaskflowArray; 

var N : String;

begin
  Result:=TOBA_Server_ServerWrapperTaskflowArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAssignmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAssignmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='Assignments';
end;

Class Function TSPAssignmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSAssignment;
end;


Function TSPAssignmentsEntitySet.Get(const Id: TGUIDString) : TPSAssignment; 


begin
  Result:=TPSAssignment(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPAssignmentsEntitySet.List(const AQuery: String; out NextLink: String) : TPSAssignmentArray; 


begin
  Result:=TPSAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAssignmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSAssignmentArray; 


begin
  Result:=TPSAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAssignmentsEntitySet.ListAll(const AQuery: String) : TPSAssignmentArray; 

var N : String;

begin
  Result:=TPSAssignmentArray(GetMulti(AQuery,True,N));
end;


Function TSPAssignmentsEntitySet.ListAll(const AQuery: TQueryParams) : TPSAssignmentArray; 

var N : String;

begin
  Result:=TPSAssignmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPBaseCalendarExceptionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPBaseCalendarExceptionsEntitySet.ObjectRestKind : String; 

begin
  Result:='BaseCalendarExceptions';
end;

Class Function TSPBaseCalendarExceptionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSBaseCalendarException;
end;


Function TSPBaseCalendarExceptionsEntitySet.Get(const Id: TInt32) : TPSBaseCalendarException; 


begin
  Result:=TPSBaseCalendarException(GetSingle(IntToStr(Id)));
end;


Function TSPBaseCalendarExceptionsEntitySet.List(const AQuery: String; out NextLink: String) : TPSBaseCalendarExceptionArray; 


begin
  Result:=TPSBaseCalendarExceptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPBaseCalendarExceptionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSBaseCalendarExceptionArray; 


begin
  Result:=TPSBaseCalendarExceptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPBaseCalendarExceptionsEntitySet.ListAll(const AQuery: String) : TPSBaseCalendarExceptionArray; 

var N : String;

begin
  Result:=TPSBaseCalendarExceptionArray(GetMulti(AQuery,True,N));
end;


Function TSPBaseCalendarExceptionsEntitySet.ListAll(const AQuery: TQueryParams) : TPSBaseCalendarExceptionArray; 

var N : String;

begin
  Result:=TPSBaseCalendarExceptionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCalendarsEntitySet
  --------------------------------------------------------------------}


Class Function TSPCalendarsEntitySet.ObjectRestKind : String; 

begin
  Result:='Calendars';
end;

Class Function TSPCalendarsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSCalendar;
end;


Function TSPCalendarsEntitySet.Get(const Id: TGUIDString) : TPSCalendar; 


begin
  Result:=TPSCalendar(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPCalendarsEntitySet.List(const AQuery: String; out NextLink: String) : TPSCalendarArray; 


begin
  Result:=TPSCalendarArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCalendarsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSCalendarArray; 


begin
  Result:=TPSCalendarArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCalendarsEntitySet.ListAll(const AQuery: String) : TPSCalendarArray; 

var N : String;

begin
  Result:=TPSCalendarArray(GetMulti(AQuery,True,N));
end;


Function TSPCalendarsEntitySet.ListAll(const AQuery: TQueryParams) : TPSCalendarArray; 

var N : String;

begin
  Result:=TPSCalendarArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCalendarExceptionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPCalendarExceptionsEntitySet.ObjectRestKind : String; 

begin
  Result:='CalendarExceptions';
end;

Class Function TSPCalendarExceptionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSCalendarException;
end;


Function TSPCalendarExceptionsEntitySet.Get(const Id: TInt32) : TPSCalendarException; 


begin
  Result:=TPSCalendarException(GetSingle(IntToStr(Id)));
end;


Function TSPCalendarExceptionsEntitySet.List(const AQuery: String; out NextLink: String) : TPSCalendarExceptionArray; 


begin
  Result:=TPSCalendarExceptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCalendarExceptionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSCalendarExceptionArray; 


begin
  Result:=TPSCalendarExceptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCalendarExceptionsEntitySet.ListAll(const AQuery: String) : TPSCalendarExceptionArray; 

var N : String;

begin
  Result:=TPSCalendarExceptionArray(GetMulti(AQuery,True,N));
end;


Function TSPCalendarExceptionsEntitySet.ListAll(const AQuery: TQueryParams) : TPSCalendarExceptionArray; 

var N : String;

begin
  Result:=TPSCalendarExceptionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCustomFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPCustomFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='CustomFields';
end;

Class Function TSPCustomFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSCustomField;
end;


Function TSPCustomFieldsEntitySet.Get(const Id: TGUIDString) : TPSCustomField; 


begin
  Result:=TPSCustomField(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPCustomFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TPSCustomFieldArray; 


begin
  Result:=TPSCustomFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCustomFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSCustomFieldArray; 


begin
  Result:=TPSCustomFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCustomFieldsEntitySet.ListAll(const AQuery: String) : TPSCustomFieldArray; 

var N : String;

begin
  Result:=TPSCustomFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPCustomFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TPSCustomFieldArray; 

var N : String;

begin
  Result:=TPSCustomFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDraftAssignmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDraftAssignmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='DraftAssignments';
end;

Class Function TSPDraftAssignmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSDraftAssignment;
end;


Function TSPDraftAssignmentsEntitySet.Get(const Id: TGUIDString) : TPSDraftAssignment; 


begin
  Result:=TPSDraftAssignment(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPDraftAssignmentsEntitySet.List(const AQuery: String; out NextLink: String) : TPSDraftAssignmentArray; 


begin
  Result:=TPSDraftAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftAssignmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSDraftAssignmentArray; 


begin
  Result:=TPSDraftAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftAssignmentsEntitySet.ListAll(const AQuery: String) : TPSDraftAssignmentArray; 

var N : String;

begin
  Result:=TPSDraftAssignmentArray(GetMulti(AQuery,True,N));
end;


Function TSPDraftAssignmentsEntitySet.ListAll(const AQuery: TQueryParams) : TPSDraftAssignmentArray; 

var N : String;

begin
  Result:=TPSDraftAssignmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDraftProjectsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDraftProjectsEntitySet.ObjectRestKind : String; 

begin
  Result:='DraftProjects';
end;

Class Function TSPDraftProjectsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSDraftProject;
end;


Function TSPDraftProjectsEntitySet.Get(const Id: TGUIDString) : TPSDraftProject; 


begin
  Result:=TPSDraftProject(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPDraftProjectsEntitySet.List(const AQuery: String; out NextLink: String) : TPSDraftProjectArray; 


begin
  Result:=TPSDraftProjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftProjectsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSDraftProjectArray; 


begin
  Result:=TPSDraftProjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftProjectsEntitySet.ListAll(const AQuery: String) : TPSDraftProjectArray; 

var N : String;

begin
  Result:=TPSDraftProjectArray(GetMulti(AQuery,True,N));
end;


Function TSPDraftProjectsEntitySet.ListAll(const AQuery: TQueryParams) : TPSDraftProjectArray; 

var N : String;

begin
  Result:=TPSDraftProjectArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDraftProjectResourcesEntitySet
  --------------------------------------------------------------------}


Class Function TSPDraftProjectResourcesEntitySet.ObjectRestKind : String; 

begin
  Result:='DraftProjectResources';
end;

Class Function TSPDraftProjectResourcesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSDraftProjectResource;
end;


Function TSPDraftProjectResourcesEntitySet.Get(const Id: TGUIDString) : TPSDraftProjectResource; 


begin
  Result:=TPSDraftProjectResource(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPDraftProjectResourcesEntitySet.List(const AQuery: String; out NextLink: String) : TPSDraftProjectResourceArray; 


begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftProjectResourcesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSDraftProjectResourceArray; 


begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftProjectResourcesEntitySet.ListAll(const AQuery: String) : TPSDraftProjectResourceArray; 

var N : String;

begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,True,N));
end;


Function TSPDraftProjectResourcesEntitySet.ListAll(const AQuery: TQueryParams) : TPSDraftProjectResourceArray; 

var N : String;

begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDraftTasksEntitySet
  --------------------------------------------------------------------}


Class Function TSPDraftTasksEntitySet.ObjectRestKind : String; 

begin
  Result:='DraftTasks';
end;

Class Function TSPDraftTasksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSDraftTask;
end;


Function TSPDraftTasksEntitySet.Get(const Id: TGUIDString) : TPSDraftTask; 


begin
  Result:=TPSDraftTask(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPDraftTasksEntitySet.List(const AQuery: String; out NextLink: String) : TPSDraftTaskArray; 


begin
  Result:=TPSDraftTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftTasksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSDraftTaskArray; 


begin
  Result:=TPSDraftTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftTasksEntitySet.ListAll(const AQuery: String) : TPSDraftTaskArray; 

var N : String;

begin
  Result:=TPSDraftTaskArray(GetMulti(AQuery,True,N));
end;


Function TSPDraftTasksEntitySet.ListAll(const AQuery: TQueryParams) : TPSDraftTaskArray; 

var N : String;

begin
  Result:=TPSDraftTaskArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDraftTaskLinksEntitySet
  --------------------------------------------------------------------}


Class Function TSPDraftTaskLinksEntitySet.ObjectRestKind : String; 

begin
  Result:='DraftTaskLinks';
end;

Class Function TSPDraftTaskLinksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSDraftTaskLink;
end;


Function TSPDraftTaskLinksEntitySet.Get(const Id: TGUIDString) : TPSDraftTaskLink; 


begin
  Result:=TPSDraftTaskLink(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPDraftTaskLinksEntitySet.List(const AQuery: String; out NextLink: String) : TPSDraftTaskLinkArray; 


begin
  Result:=TPSDraftTaskLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftTaskLinksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSDraftTaskLinkArray; 


begin
  Result:=TPSDraftTaskLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftTaskLinksEntitySet.ListAll(const AQuery: String) : TPSDraftTaskLinkArray; 

var N : String;

begin
  Result:=TPSDraftTaskLinkArray(GetMulti(AQuery,True,N));
end;


Function TSPDraftTaskLinksEntitySet.ListAll(const AQuery: TQueryParams) : TPSDraftTaskLinkArray; 

var N : String;

begin
  Result:=TPSDraftTaskLinkArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEnterpriseProjectTypesEntitySet
  --------------------------------------------------------------------}


Class Function TSPEnterpriseProjectTypesEntitySet.ObjectRestKind : String; 

begin
  Result:='EnterpriseProjectTypes';
end;

Class Function TSPEnterpriseProjectTypesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSEnterpriseProjectType;
end;


Function TSPEnterpriseProjectTypesEntitySet.Get(const Id: TGUIDString) : TPSEnterpriseProjectType; 


begin
  Result:=TPSEnterpriseProjectType(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPEnterpriseProjectTypesEntitySet.List(const AQuery: String; out NextLink: String) : TPSEnterpriseProjectTypeArray; 


begin
  Result:=TPSEnterpriseProjectTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEnterpriseProjectTypesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSEnterpriseProjectTypeArray; 


begin
  Result:=TPSEnterpriseProjectTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEnterpriseProjectTypesEntitySet.ListAll(const AQuery: String) : TPSEnterpriseProjectTypeArray; 

var N : String;

begin
  Result:=TPSEnterpriseProjectTypeArray(GetMulti(AQuery,True,N));
end;


Function TSPEnterpriseProjectTypesEntitySet.ListAll(const AQuery: TQueryParams) : TPSEnterpriseProjectTypeArray; 

var N : String;

begin
  Result:=TPSEnterpriseProjectTypeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEnterpriseResourcesEntitySet
  --------------------------------------------------------------------}


Class Function TSPEnterpriseResourcesEntitySet.ObjectRestKind : String; 

begin
  Result:='EnterpriseResources';
end;

Class Function TSPEnterpriseResourcesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSEnterpriseResource;
end;


Function TSPEnterpriseResourcesEntitySet.Get(const Id: TGUIDString) : TPSEnterpriseResource; 


begin
  Result:=TPSEnterpriseResource(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPEnterpriseResourcesEntitySet.List(const AQuery: String; out NextLink: String) : TPSEnterpriseResourceArray; 


begin
  Result:=TPSEnterpriseResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEnterpriseResourcesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSEnterpriseResourceArray; 


begin
  Result:=TPSEnterpriseResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEnterpriseResourcesEntitySet.ListAll(const AQuery: String) : TPSEnterpriseResourceArray; 

var N : String;

begin
  Result:=TPSEnterpriseResourceArray(GetMulti(AQuery,True,N));
end;


Function TSPEnterpriseResourcesEntitySet.ListAll(const AQuery: TQueryParams) : TPSEnterpriseResourceArray; 

var N : String;

begin
  Result:=TPSEnterpriseResourceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityTypes1EntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityTypes1EntitySet.ObjectRestKind : String; 

begin
  Result:='EntityTypes1';
end;

Class Function TSPEntityTypes1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSEntityType;
end;


Function TSPEntityTypes1EntitySet.Get(const _Name: string) : TPSEntityType; 


begin
  Result:=TPSEntityType(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPEntityTypes1EntitySet.List(const AQuery: String; out NextLink: String) : TPSEntityTypeArray; 


begin
  Result:=TPSEntityTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypes1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSEntityTypeArray; 


begin
  Result:=TPSEntityTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypes1EntitySet.ListAll(const AQuery: String) : TPSEntityTypeArray; 

var N : String;

begin
  Result:=TPSEntityTypeArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityTypes1EntitySet.ListAll(const AQuery: TQueryParams) : TPSEntityTypeArray; 

var N : String;

begin
  Result:=TPSEntityTypeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityTypessEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityTypessEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityTypess';
end;

Class Function TSPEntityTypessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSEntityTypes;
end;


Function TSPEntityTypessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TPSEntityTypes; 


begin
  Result:=TPSEntityTypes(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPEntityTypessEntitySet.List(const AQuery: String; out NextLink: String) : TPSEntityTypesArray; 


begin
  Result:=TPSEntityTypesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSEntityTypesArray; 


begin
  Result:=TPSEntityTypesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityTypessEntitySet.ListAll(const AQuery: String) : TPSEntityTypesArray; 

var N : String;

begin
  Result:=TPSEntityTypesArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityTypessEntitySet.ListAll(const AQuery: TQueryParams) : TPSEntityTypesArray; 

var N : String;

begin
  Result:=TPSEntityTypesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEventsEntitySet
  --------------------------------------------------------------------}


Class Function TSPEventsEntitySet.ObjectRestKind : String; 

begin
  Result:='Events';
end;

Class Function TSPEventsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSEvent;
end;


Function TSPEventsEntitySet.Get(const Id: TInt32) : TPSEvent; 


begin
  Result:=TPSEvent(GetSingle(IntToStr(Id)));
end;


Function TSPEventsEntitySet.List(const AQuery: String; out NextLink: String) : TPSEventArray; 


begin
  Result:=TPSEventArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEventsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSEventArray; 


begin
  Result:=TPSEventArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEventsEntitySet.ListAll(const AQuery: String) : TPSEventArray; 

var N : String;

begin
  Result:=TPSEventArray(GetMulti(AQuery,True,N));
end;


Function TSPEventsEntitySet.ListAll(const AQuery: TQueryParams) : TPSEventArray; 

var N : String;

begin
  Result:=TPSEventArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEventHandlersEntitySet
  --------------------------------------------------------------------}


Class Function TSPEventHandlersEntitySet.ObjectRestKind : String; 

begin
  Result:='EventHandlers';
end;

Class Function TSPEventHandlersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSEventHandler;
end;


Function TSPEventHandlersEntitySet.Get(const Id: TGUIDString) : TPSEventHandler; 


begin
  Result:=TPSEventHandler(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPEventHandlersEntitySet.List(const AQuery: String; out NextLink: String) : TPSEventHandlerArray; 


begin
  Result:=TPSEventHandlerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEventHandlersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSEventHandlerArray; 


begin
  Result:=TPSEventHandlerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEventHandlersEntitySet.ListAll(const AQuery: String) : TPSEventHandlerArray; 

var N : String;

begin
  Result:=TPSEventHandlerArray(GetMulti(AQuery,True,N));
end;


Function TSPEventHandlersEntitySet.ListAll(const AQuery: TQueryParams) : TPSEventHandlerArray; 

var N : String;

begin
  Result:=TPSEventHandlerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupCostsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupCostsEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupCosts';
end;

Class Function TSPLookupCostsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupCost;
end;


Function TSPLookupCostsEntitySet.Get(const Id: TGUIDString) : TPSLookupCost; 


begin
  Result:=TPSLookupCost(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupCostsEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupCostArray; 


begin
  Result:=TPSLookupCostArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupCostsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupCostArray; 


begin
  Result:=TPSLookupCostArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupCostsEntitySet.ListAll(const AQuery: String) : TPSLookupCostArray; 

var N : String;

begin
  Result:=TPSLookupCostArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupCostsEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupCostArray; 

var N : String;

begin
  Result:=TPSLookupCostArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupDatesEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupDatesEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupDates';
end;

Class Function TSPLookupDatesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupDate;
end;


Function TSPLookupDatesEntitySet.Get(const Id: TGUIDString) : TPSLookupDate; 


begin
  Result:=TPSLookupDate(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupDatesEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupDateArray; 


begin
  Result:=TPSLookupDateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupDatesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupDateArray; 


begin
  Result:=TPSLookupDateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupDatesEntitySet.ListAll(const AQuery: String) : TPSLookupDateArray; 

var N : String;

begin
  Result:=TPSLookupDateArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupDatesEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupDateArray; 

var N : String;

begin
  Result:=TPSLookupDateArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupDurationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupDurationsEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupDurations';
end;

Class Function TSPLookupDurationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupDuration;
end;


Function TSPLookupDurationsEntitySet.Get(const Id: TGUIDString) : TPSLookupDuration; 


begin
  Result:=TPSLookupDuration(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupDurationsEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupDurationArray; 


begin
  Result:=TPSLookupDurationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupDurationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupDurationArray; 


begin
  Result:=TPSLookupDurationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupDurationsEntitySet.ListAll(const AQuery: String) : TPSLookupDurationArray; 

var N : String;

begin
  Result:=TPSLookupDurationArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupDurationsEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupDurationArray; 

var N : String;

begin
  Result:=TPSLookupDurationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupEntrysEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupEntrysEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupEntrys';
end;

Class Function TSPLookupEntrysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupEntry;
end;


Function TSPLookupEntrysEntitySet.Get(const Id: TGUIDString) : TPSLookupEntry; 


begin
  Result:=TPSLookupEntry(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupEntrysEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupEntryArray; 


begin
  Result:=TPSLookupEntryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupEntrysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupEntryArray; 


begin
  Result:=TPSLookupEntryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupEntrysEntitySet.ListAll(const AQuery: String) : TPSLookupEntryArray; 

var N : String;

begin
  Result:=TPSLookupEntryArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupEntrysEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupEntryArray; 

var N : String;

begin
  Result:=TPSLookupEntryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupNumbersEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupNumbersEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupNumbers';
end;

Class Function TSPLookupNumbersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupNumber;
end;


Function TSPLookupNumbersEntitySet.Get(const Id: TGUIDString) : TPSLookupNumber; 


begin
  Result:=TPSLookupNumber(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupNumbersEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupNumberArray; 


begin
  Result:=TPSLookupNumberArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupNumbersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupNumberArray; 


begin
  Result:=TPSLookupNumberArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupNumbersEntitySet.ListAll(const AQuery: String) : TPSLookupNumberArray; 

var N : String;

begin
  Result:=TPSLookupNumberArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupNumbersEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupNumberArray; 

var N : String;

begin
  Result:=TPSLookupNumberArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupTablesEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupTablesEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupTables';
end;

Class Function TSPLookupTablesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupTable;
end;


Function TSPLookupTablesEntitySet.Get(const Id: TGUIDString) : TPSLookupTable; 


begin
  Result:=TPSLookupTable(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupTablesEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupTableArray; 


begin
  Result:=TPSLookupTableArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupTablesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupTableArray; 


begin
  Result:=TPSLookupTableArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupTablesEntitySet.ListAll(const AQuery: String) : TPSLookupTableArray; 

var N : String;

begin
  Result:=TPSLookupTableArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupTablesEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupTableArray; 

var N : String;

begin
  Result:=TPSLookupTableArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupTablessEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupTablessEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupTabless';
end;

Class Function TSPLookupTablessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupTables;
end;


Function TSPLookupTablessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TPSLookupTables; 


begin
  Result:=TPSLookupTables(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPLookupTablessEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupTablesArray; 


begin
  Result:=TPSLookupTablesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupTablessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupTablesArray; 


begin
  Result:=TPSLookupTablesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupTablessEntitySet.ListAll(const AQuery: String) : TPSLookupTablesArray; 

var N : String;

begin
  Result:=TPSLookupTablesArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupTablessEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupTablesArray; 

var N : String;

begin
  Result:=TPSLookupTablesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLookupTextsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLookupTextsEntitySet.ObjectRestKind : String; 

begin
  Result:='LookupTexts';
end;

Class Function TSPLookupTextsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSLookupText;
end;


Function TSPLookupTextsEntitySet.Get(const Id: TGUIDString) : TPSLookupText; 


begin
  Result:=TPSLookupText(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPLookupTextsEntitySet.List(const AQuery: String; out NextLink: String) : TPSLookupTextArray; 


begin
  Result:=TPSLookupTextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupTextsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSLookupTextArray; 


begin
  Result:=TPSLookupTextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLookupTextsEntitySet.ListAll(const AQuery: String) : TPSLookupTextArray; 

var N : String;

begin
  Result:=TPSLookupTextArray(GetMulti(AQuery,True,N));
end;


Function TSPLookupTextsEntitySet.ListAll(const AQuery: TQueryParams) : TPSLookupTextArray; 

var N : String;

begin
  Result:=TPSLookupTextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPhasesEntitySet
  --------------------------------------------------------------------}


Class Function TSPPhasesEntitySet.ObjectRestKind : String; 

begin
  Result:='Phases';
end;

Class Function TSPPhasesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPhase;
end;


Function TSPPhasesEntitySet.Get(const Id: TGUIDString) : TPSPhase; 


begin
  Result:=TPSPhase(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPhasesEntitySet.List(const AQuery: String; out NextLink: String) : TPSPhaseArray; 


begin
  Result:=TPSPhaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPhasesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPhaseArray; 


begin
  Result:=TPSPhaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPhasesEntitySet.ListAll(const AQuery: String) : TPSPhaseArray; 

var N : String;

begin
  Result:=TPSPhaseArray(GetMulti(AQuery,True,N));
end;


Function TSPPhasesEntitySet.ListAll(const AQuery: TQueryParams) : TPSPhaseArray; 

var N : String;

begin
  Result:=TPSPhaseArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPlanAssignmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPlanAssignmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='PlanAssignments';
end;

Class Function TSPPlanAssignmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPlanAssignment;
end;


Function TSPPlanAssignmentsEntitySet.Get(const Id: TGUIDString) : TPSPlanAssignment; 


begin
  Result:=TPSPlanAssignment(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPlanAssignmentsEntitySet.List(const AQuery: String; out NextLink: String) : TPSPlanAssignmentArray; 


begin
  Result:=TPSPlanAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPlanAssignmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPlanAssignmentArray; 


begin
  Result:=TPSPlanAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPlanAssignmentsEntitySet.ListAll(const AQuery: String) : TPSPlanAssignmentArray; 

var N : String;

begin
  Result:=TPSPlanAssignmentArray(GetMulti(AQuery,True,N));
end;


Function TSPPlanAssignmentsEntitySet.ListAll(const AQuery: TQueryParams) : TPSPlanAssignmentArray; 

var N : String;

begin
  Result:=TPSPlanAssignmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPlanAssignmentIntervalsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPlanAssignmentIntervalsEntitySet.ObjectRestKind : String; 

begin
  Result:='PlanAssignmentIntervals';
end;

Class Function TSPPlanAssignmentIntervalsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPlanAssignmentInterval;
end;


Function TSPPlanAssignmentIntervalsEntitySet.Get(const _Name: string) : TPSPlanAssignmentInterval; 


begin
  Result:=TPSPlanAssignmentInterval(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPPlanAssignmentIntervalsEntitySet.List(const AQuery: String; out NextLink: String) : TPSPlanAssignmentIntervalArray; 


begin
  Result:=TPSPlanAssignmentIntervalArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPlanAssignmentIntervalsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPlanAssignmentIntervalArray; 


begin
  Result:=TPSPlanAssignmentIntervalArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPlanAssignmentIntervalsEntitySet.ListAll(const AQuery: String) : TPSPlanAssignmentIntervalArray; 

var N : String;

begin
  Result:=TPSPlanAssignmentIntervalArray(GetMulti(AQuery,True,N));
end;


Function TSPPlanAssignmentIntervalsEntitySet.ListAll(const AQuery: TQueryParams) : TPSPlanAssignmentIntervalArray; 

var N : String;

begin
  Result:=TPSPlanAssignmentIntervalArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProjectsEntitySet
  --------------------------------------------------------------------}


Class Function TSPProjectsEntitySet.ObjectRestKind : String; 

begin
  Result:='Projects';
end;

Class Function TSPProjectsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSProject;
end;


Function TSPProjectsEntitySet.Get(const Id: TGUIDString) : TPSProject; 


begin
  Result:=TPSProject(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPProjectsEntitySet.List(const AQuery: String; out NextLink: String) : TPSProjectArray; 


begin
  Result:=TPSProjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSProjectArray; 


begin
  Result:=TPSProjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectsEntitySet.ListAll(const AQuery: String) : TPSProjectArray; 

var N : String;

begin
  Result:=TPSProjectArray(GetMulti(AQuery,True,N));
end;


Function TSPProjectsEntitySet.ListAll(const AQuery: TQueryParams) : TPSProjectArray; 

var N : String;

begin
  Result:=TPSProjectArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProjectDetailPagesEntitySet
  --------------------------------------------------------------------}


Class Function TSPProjectDetailPagesEntitySet.ObjectRestKind : String; 

begin
  Result:='ProjectDetailPages';
end;

Class Function TSPProjectDetailPagesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSProjectDetailPage;
end;


Function TSPProjectDetailPagesEntitySet.Get(const Id: TGUIDString) : TPSProjectDetailPage; 


begin
  Result:=TPSProjectDetailPage(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPProjectDetailPagesEntitySet.List(const AQuery: String; out NextLink: String) : TPSProjectDetailPageArray; 


begin
  Result:=TPSProjectDetailPageArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectDetailPagesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSProjectDetailPageArray; 


begin
  Result:=TPSProjectDetailPageArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectDetailPagesEntitySet.ListAll(const AQuery: String) : TPSProjectDetailPageArray; 

var N : String;

begin
  Result:=TPSProjectDetailPageArray(GetMulti(AQuery,True,N));
end;


Function TSPProjectDetailPagesEntitySet.ListAll(const AQuery: TQueryParams) : TPSProjectDetailPageArray; 

var N : String;

begin
  Result:=TPSProjectDetailPageArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProjectResourcesEntitySet
  --------------------------------------------------------------------}


Class Function TSPProjectResourcesEntitySet.ObjectRestKind : String; 

begin
  Result:='ProjectResources';
end;

Class Function TSPProjectResourcesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSProjectResource;
end;


Function TSPProjectResourcesEntitySet.Get(const Id: TGUIDString) : TPSProjectResource; 


begin
  Result:=TPSProjectResource(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPProjectResourcesEntitySet.List(const AQuery: String; out NextLink: String) : TPSProjectResourceArray; 


begin
  Result:=TPSProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectResourcesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSProjectResourceArray; 


begin
  Result:=TPSProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectResourcesEntitySet.ListAll(const AQuery: String) : TPSProjectResourceArray; 

var N : String;

begin
  Result:=TPSProjectResourceArray(GetMulti(AQuery,True,N));
end;


Function TSPProjectResourcesEntitySet.ListAll(const AQuery: TQueryParams) : TPSProjectResourceArray; 

var N : String;

begin
  Result:=TPSProjectResourceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProjectServersEntitySet
  --------------------------------------------------------------------}


Class Function TSPProjectServersEntitySet.ObjectRestKind : String; 

begin
  Result:='ProjectServers';
end;

Class Function TSPProjectServersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSProjectServer;
end;


Function TSPProjectServersEntitySet.Get(const IsDelegate: boolean) : TPSProjectServer; 


begin
  Result:=TPSProjectServer(GetSingle(BoolToStr(IsDelegate,'true','false')));
end;


Function TSPProjectServersEntitySet.List(const AQuery: String; out NextLink: String) : TPSProjectServerArray; 


begin
  Result:=TPSProjectServerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectServersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSProjectServerArray; 


begin
  Result:=TPSProjectServerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectServersEntitySet.ListAll(const AQuery: String) : TPSProjectServerArray; 

var N : String;

begin
  Result:=TPSProjectServerArray(GetMulti(AQuery,True,N));
end;


Function TSPProjectServersEntitySet.ListAll(const AQuery: TQueryParams) : TPSProjectServerArray; 

var N : String;

begin
  Result:=TPSProjectServerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProjectServerDatasEntitySet
  --------------------------------------------------------------------}


Class Function TSPProjectServerDatasEntitySet.ObjectRestKind : String; 

begin
  Result:='ProjectServerDatas';
end;

Class Function TSPProjectServerDatasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSProjectServerData;
end;


Function TSPProjectServerDatasEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TPSProjectServerData; 


begin
  Result:=TPSProjectServerData(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPProjectServerDatasEntitySet.List(const AQuery: String; out NextLink: String) : TPSProjectServerDataArray; 


begin
  Result:=TPSProjectServerDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectServerDatasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSProjectServerDataArray; 


begin
  Result:=TPSProjectServerDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProjectServerDatasEntitySet.ListAll(const AQuery: String) : TPSProjectServerDataArray; 

var N : String;

begin
  Result:=TPSProjectServerDataArray(GetMulti(AQuery,True,N));
end;


Function TSPProjectServerDatasEntitySet.ListAll(const AQuery: TQueryParams) : TPSProjectServerDataArray; 

var N : String;

begin
  Result:=TPSProjectServerDataArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPublishedAssignmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPublishedAssignmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='PublishedAssignments';
end;

Class Function TSPPublishedAssignmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPublishedAssignment;
end;


Function TSPPublishedAssignmentsEntitySet.Get(const Id: TGUIDString) : TPSPublishedAssignment; 


begin
  Result:=TPSPublishedAssignment(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPublishedAssignmentsEntitySet.List(const AQuery: String; out NextLink: String) : TPSPublishedAssignmentArray; 


begin
  Result:=TPSPublishedAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedAssignmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPublishedAssignmentArray; 


begin
  Result:=TPSPublishedAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedAssignmentsEntitySet.ListAll(const AQuery: String) : TPSPublishedAssignmentArray; 

var N : String;

begin
  Result:=TPSPublishedAssignmentArray(GetMulti(AQuery,True,N));
end;


Function TSPPublishedAssignmentsEntitySet.ListAll(const AQuery: TQueryParams) : TPSPublishedAssignmentArray; 

var N : String;

begin
  Result:=TPSPublishedAssignmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPublishedProjectsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPublishedProjectsEntitySet.ObjectRestKind : String; 

begin
  Result:='PublishedProjects';
end;

Class Function TSPPublishedProjectsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPublishedProject;
end;


Function TSPPublishedProjectsEntitySet.Get(const Id: TGUIDString) : TPSPublishedProject; 


begin
  Result:=TPSPublishedProject(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPublishedProjectsEntitySet.List(const AQuery: String; out NextLink: String) : TPSPublishedProjectArray; 


begin
  Result:=TPSPublishedProjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedProjectsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPublishedProjectArray; 


begin
  Result:=TPSPublishedProjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedProjectsEntitySet.ListAll(const AQuery: String) : TPSPublishedProjectArray; 

var N : String;

begin
  Result:=TPSPublishedProjectArray(GetMulti(AQuery,True,N));
end;


Function TSPPublishedProjectsEntitySet.ListAll(const AQuery: TQueryParams) : TPSPublishedProjectArray; 

var N : String;

begin
  Result:=TPSPublishedProjectArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPublishedProjectResourcesEntitySet
  --------------------------------------------------------------------}


Class Function TSPPublishedProjectResourcesEntitySet.ObjectRestKind : String; 

begin
  Result:='PublishedProjectResources';
end;

Class Function TSPPublishedProjectResourcesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPublishedProjectResource;
end;


Function TSPPublishedProjectResourcesEntitySet.Get(const Id: TGUIDString) : TPSPublishedProjectResource; 


begin
  Result:=TPSPublishedProjectResource(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPublishedProjectResourcesEntitySet.List(const AQuery: String; out NextLink: String) : TPSPublishedProjectResourceArray; 


begin
  Result:=TPSPublishedProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedProjectResourcesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPublishedProjectResourceArray; 


begin
  Result:=TPSPublishedProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedProjectResourcesEntitySet.ListAll(const AQuery: String) : TPSPublishedProjectResourceArray; 

var N : String;

begin
  Result:=TPSPublishedProjectResourceArray(GetMulti(AQuery,True,N));
end;


Function TSPPublishedProjectResourcesEntitySet.ListAll(const AQuery: TQueryParams) : TPSPublishedProjectResourceArray; 

var N : String;

begin
  Result:=TPSPublishedProjectResourceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPublishedTasksEntitySet
  --------------------------------------------------------------------}


Class Function TSPPublishedTasksEntitySet.ObjectRestKind : String; 

begin
  Result:='PublishedTasks';
end;

Class Function TSPPublishedTasksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPublishedTask;
end;


Function TSPPublishedTasksEntitySet.Get(const Id: TGUIDString) : TPSPublishedTask; 


begin
  Result:=TPSPublishedTask(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPublishedTasksEntitySet.List(const AQuery: String; out NextLink: String) : TPSPublishedTaskArray; 


begin
  Result:=TPSPublishedTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedTasksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPublishedTaskArray; 


begin
  Result:=TPSPublishedTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedTasksEntitySet.ListAll(const AQuery: String) : TPSPublishedTaskArray; 

var N : String;

begin
  Result:=TPSPublishedTaskArray(GetMulti(AQuery,True,N));
end;


Function TSPPublishedTasksEntitySet.ListAll(const AQuery: TQueryParams) : TPSPublishedTaskArray; 

var N : String;

begin
  Result:=TPSPublishedTaskArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPublishedTaskLinksEntitySet
  --------------------------------------------------------------------}


Class Function TSPPublishedTaskLinksEntitySet.ObjectRestKind : String; 

begin
  Result:='PublishedTaskLinks';
end;

Class Function TSPPublishedTaskLinksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSPublishedTaskLink;
end;


Function TSPPublishedTaskLinksEntitySet.Get(const Id: TGUIDString) : TPSPublishedTaskLink; 


begin
  Result:=TPSPublishedTaskLink(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPPublishedTaskLinksEntitySet.List(const AQuery: String; out NextLink: String) : TPSPublishedTaskLinkArray; 


begin
  Result:=TPSPublishedTaskLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedTaskLinksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSPublishedTaskLinkArray; 


begin
  Result:=TPSPublishedTaskLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPublishedTaskLinksEntitySet.ListAll(const AQuery: String) : TPSPublishedTaskLinkArray; 

var N : String;

begin
  Result:=TPSPublishedTaskLinkArray(GetMulti(AQuery,True,N));
end;


Function TSPPublishedTaskLinksEntitySet.ListAll(const AQuery: TQueryParams) : TPSPublishedTaskLinkArray; 

var N : String;

begin
  Result:=TPSPublishedTaskLinkArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPQueueJobsEntitySet
  --------------------------------------------------------------------}


Class Function TSPQueueJobsEntitySet.ObjectRestKind : String; 

begin
  Result:='QueueJobs';
end;

Class Function TSPQueueJobsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSQueueJob;
end;


Function TSPQueueJobsEntitySet.Get(const Id: TGUIDString) : TPSQueueJob; 


begin
  Result:=TPSQueueJob(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPQueueJobsEntitySet.List(const AQuery: String; out NextLink: String) : TPSQueueJobArray; 


begin
  Result:=TPSQueueJobArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPQueueJobsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSQueueJobArray; 


begin
  Result:=TPSQueueJobArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPQueueJobsEntitySet.ListAll(const AQuery: String) : TPSQueueJobArray; 

var N : String;

begin
  Result:=TPSQueueJobArray(GetMulti(AQuery,True,N));
end;


Function TSPQueueJobsEntitySet.ListAll(const AQuery: TQueryParams) : TPSQueueJobArray; 

var N : String;

begin
  Result:=TPSQueueJobArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPResourceCalendarExceptionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPResourceCalendarExceptionsEntitySet.ObjectRestKind : String; 

begin
  Result:='ResourceCalendarExceptions';
end;

Class Function TSPResourceCalendarExceptionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSResourceCalendarException;
end;


Function TSPResourceCalendarExceptionsEntitySet.Get(const Id: TInt32) : TPSResourceCalendarException; 


begin
  Result:=TPSResourceCalendarException(GetSingle(IntToStr(Id)));
end;


Function TSPResourceCalendarExceptionsEntitySet.List(const AQuery: String; out NextLink: String) : TPSResourceCalendarExceptionArray; 


begin
  Result:=TPSResourceCalendarExceptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPResourceCalendarExceptionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSResourceCalendarExceptionArray; 


begin
  Result:=TPSResourceCalendarExceptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPResourceCalendarExceptionsEntitySet.ListAll(const AQuery: String) : TPSResourceCalendarExceptionArray; 

var N : String;

begin
  Result:=TPSResourceCalendarExceptionArray(GetMulti(AQuery,True,N));
end;


Function TSPResourceCalendarExceptionsEntitySet.ListAll(const AQuery: TQueryParams) : TPSResourceCalendarExceptionArray; 

var N : String;

begin
  Result:=TPSResourceCalendarExceptionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPResourcePlansEntitySet
  --------------------------------------------------------------------}


Class Function TSPResourcePlansEntitySet.ObjectRestKind : String; 

begin
  Result:='ResourcePlans';
end;

Class Function TSPResourcePlansEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSResourcePlan;
end;


Function TSPResourcePlansEntitySet.Get(const Id: TGUIDString) : TPSResourcePlan; 


begin
  Result:=TPSResourcePlan(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPResourcePlansEntitySet.List(const AQuery: String; out NextLink: String) : TPSResourcePlanArray; 


begin
  Result:=TPSResourcePlanArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPResourcePlansEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSResourcePlanArray; 


begin
  Result:=TPSResourcePlanArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPResourcePlansEntitySet.ListAll(const AQuery: String) : TPSResourcePlanArray; 

var N : String;

begin
  Result:=TPSResourcePlanArray(GetMulti(AQuery,True,N));
end;


Function TSPResourcePlansEntitySet.ListAll(const AQuery: TQueryParams) : TPSResourcePlanArray; 

var N : String;

begin
  Result:=TPSResourcePlanArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPServiceStatussEntitySet
  --------------------------------------------------------------------}


Class Function TSPServiceStatussEntitySet.ObjectRestKind : String; 

begin
  Result:='ServiceStatuss';
end;

Class Function TSPServiceStatussEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSServiceStatus;
end;


Function TSPServiceStatussEntitySet.Get(const IsDelegate: boolean) : TPSServiceStatus; 


begin
  Result:=TPSServiceStatus(GetSingle(BoolToStr(IsDelegate,'true','false')));
end;


Function TSPServiceStatussEntitySet.List(const AQuery: String; out NextLink: String) : TPSServiceStatusArray; 


begin
  Result:=TPSServiceStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPServiceStatussEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSServiceStatusArray; 


begin
  Result:=TPSServiceStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPServiceStatussEntitySet.ListAll(const AQuery: String) : TPSServiceStatusArray; 

var N : String;

begin
  Result:=TPSServiceStatusArray(GetMulti(AQuery,True,N));
end;


Function TSPServiceStatussEntitySet.ListAll(const AQuery: TQueryParams) : TPSServiceStatusArray; 

var N : String;

begin
  Result:=TPSServiceStatusArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStagesEntitySet
  --------------------------------------------------------------------}


Class Function TSPStagesEntitySet.ObjectRestKind : String; 

begin
  Result:='Stages';
end;

Class Function TSPStagesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSStage;
end;


Function TSPStagesEntitySet.Get(const Id: TGUIDString) : TPSStage; 


begin
  Result:=TPSStage(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPStagesEntitySet.List(const AQuery: String; out NextLink: String) : TPSStageArray; 


begin
  Result:=TPSStageArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStagesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSStageArray; 


begin
  Result:=TPSStageArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStagesEntitySet.ListAll(const AQuery: String) : TPSStageArray; 

var N : String;

begin
  Result:=TPSStageArray(GetMulti(AQuery,True,N));
end;


Function TSPStagesEntitySet.ListAll(const AQuery: TQueryParams) : TPSStageArray; 

var N : String;

begin
  Result:=TPSStageArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStageCustomFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPStageCustomFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='StageCustomFields';
end;

Class Function TSPStageCustomFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSStageCustomField;
end;


Function TSPStageCustomFieldsEntitySet.Get(const Id: TGUIDString) : TPSStageCustomField; 


begin
  Result:=TPSStageCustomField(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPStageCustomFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TPSStageCustomFieldArray; 


begin
  Result:=TPSStageCustomFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStageCustomFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSStageCustomFieldArray; 


begin
  Result:=TPSStageCustomFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStageCustomFieldsEntitySet.ListAll(const AQuery: String) : TPSStageCustomFieldArray; 

var N : String;

begin
  Result:=TPSStageCustomFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPStageCustomFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TPSStageCustomFieldArray; 

var N : String;

begin
  Result:=TPSStageCustomFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStageDetailPagesEntitySet
  --------------------------------------------------------------------}


Class Function TSPStageDetailPagesEntitySet.ObjectRestKind : String; 

begin
  Result:='StageDetailPages';
end;

Class Function TSPStageDetailPagesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSStageDetailPage;
end;


Function TSPStageDetailPagesEntitySet.Get(const Id: TGUIDString) : TPSStageDetailPage; 


begin
  Result:=TPSStageDetailPage(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPStageDetailPagesEntitySet.List(const AQuery: String; out NextLink: String) : TPSStageDetailPageArray; 


begin
  Result:=TPSStageDetailPageArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStageDetailPagesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSStageDetailPageArray; 


begin
  Result:=TPSStageDetailPageArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStageDetailPagesEntitySet.ListAll(const AQuery: String) : TPSStageDetailPageArray; 

var N : String;

begin
  Result:=TPSStageDetailPageArray(GetMulti(AQuery,True,N));
end;


Function TSPStageDetailPagesEntitySet.ListAll(const AQuery: TQueryParams) : TPSStageDetailPageArray; 

var N : String;

begin
  Result:=TPSStageDetailPageArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStatusAssignmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPStatusAssignmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='StatusAssignments';
end;

Class Function TSPStatusAssignmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSStatusAssignment;
end;


Function TSPStatusAssignmentsEntitySet.Get(const Id: TGUIDString) : TPSStatusAssignment; 


begin
  Result:=TPSStatusAssignment(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPStatusAssignmentsEntitySet.List(const AQuery: String; out NextLink: String) : TPSStatusAssignmentArray; 


begin
  Result:=TPSStatusAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStatusAssignmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSStatusAssignmentArray; 


begin
  Result:=TPSStatusAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStatusAssignmentsEntitySet.ListAll(const AQuery: String) : TPSStatusAssignmentArray; 

var N : String;

begin
  Result:=TPSStatusAssignmentArray(GetMulti(AQuery,True,N));
end;


Function TSPStatusAssignmentsEntitySet.ListAll(const AQuery: TQueryParams) : TPSStatusAssignmentArray; 

var N : String;

begin
  Result:=TPSStatusAssignmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPStatusTasksEntitySet
  --------------------------------------------------------------------}


Class Function TSPStatusTasksEntitySet.ObjectRestKind : String; 

begin
  Result:='StatusTasks';
end;

Class Function TSPStatusTasksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSStatusTask;
end;


Function TSPStatusTasksEntitySet.Get(const Id: TGUIDString) : TPSStatusTask; 


begin
  Result:=TPSStatusTask(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPStatusTasksEntitySet.List(const AQuery: String; out NextLink: String) : TPSStatusTaskArray; 


begin
  Result:=TPSStatusTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStatusTasksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSStatusTaskArray; 


begin
  Result:=TPSStatusTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPStatusTasksEntitySet.ListAll(const AQuery: String) : TPSStatusTaskArray; 

var N : String;

begin
  Result:=TPSStatusTaskArray(GetMulti(AQuery,True,N));
end;


Function TSPStatusTasksEntitySet.ListAll(const AQuery: TQueryParams) : TPSStatusTaskArray; 

var N : String;

begin
  Result:=TPSStatusTaskArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTasksEntitySet
  --------------------------------------------------------------------}


Class Function TSPTasksEntitySet.ObjectRestKind : String; 

begin
  Result:='Tasks';
end;

Class Function TSPTasksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTask;
end;


Function TSPTasksEntitySet.Get(const Id: TGUIDString) : TPSTask; 


begin
  Result:=TPSTask(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTasksEntitySet.List(const AQuery: String; out NextLink: String) : TPSTaskArray; 


begin
  Result:=TPSTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTasksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTaskArray; 


begin
  Result:=TPSTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTasksEntitySet.ListAll(const AQuery: String) : TPSTaskArray; 

var N : String;

begin
  Result:=TPSTaskArray(GetMulti(AQuery,True,N));
end;


Function TSPTasksEntitySet.ListAll(const AQuery: TQueryParams) : TPSTaskArray; 

var N : String;

begin
  Result:=TPSTaskArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskLinksEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskLinksEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskLinks';
end;

Class Function TSPTaskLinksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTaskLink;
end;


Function TSPTaskLinksEntitySet.Get(const Id: TGUIDString) : TPSTaskLink; 


begin
  Result:=TPSTaskLink(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTaskLinksEntitySet.List(const AQuery: String; out NextLink: String) : TPSTaskLinkArray; 


begin
  Result:=TPSTaskLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskLinksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTaskLinkArray; 


begin
  Result:=TPSTaskLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskLinksEntitySet.ListAll(const AQuery: String) : TPSTaskLinkArray; 

var N : String;

begin
  Result:=TPSTaskLinkArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskLinksEntitySet.ListAll(const AQuery: TQueryParams) : TPSTaskLinkArray; 

var N : String;

begin
  Result:=TPSTaskLinkArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskServiceOdataEndpointsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskServiceOdataEndpointsEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskServiceOdataEndpoints';
end;

Class Function TSPTaskServiceOdataEndpointsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTaskServiceOdataEndpoint;
end;


Function TSPTaskServiceOdataEndpointsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TPSTaskServiceOdataEndpoint; 


begin
  Result:=TPSTaskServiceOdataEndpoint(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPTaskServiceOdataEndpointsEntitySet.List(const AQuery: String; out NextLink: String) : TPSTaskServiceOdataEndpointArray; 


begin
  Result:=TPSTaskServiceOdataEndpointArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskServiceOdataEndpointsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTaskServiceOdataEndpointArray; 


begin
  Result:=TPSTaskServiceOdataEndpointArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskServiceOdataEndpointsEntitySet.ListAll(const AQuery: String) : TPSTaskServiceOdataEndpointArray; 

var N : String;

begin
  Result:=TPSTaskServiceOdataEndpointArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskServiceOdataEndpointsEntitySet.ListAll(const AQuery: TQueryParams) : TPSTaskServiceOdataEndpointArray; 

var N : String;

begin
  Result:=TPSTaskServiceOdataEndpointArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTimePhasesEntitySet
  --------------------------------------------------------------------}


Class Function TSPTimePhasesEntitySet.ObjectRestKind : String; 

begin
  Result:='TimePhases';
end;

Class Function TSPTimePhasesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTimePhase;
end;


Function TSPTimePhasesEntitySet.Get(const _End: TDateTime) : TPSTimePhase; 


begin
  Result:=TPSTimePhase(GetSingle(FormatDateTime('yyyy-mm-dd"T"hhmmss',_End)));
end;


Function TSPTimePhasesEntitySet.List(const AQuery: String; out NextLink: String) : TPSTimePhaseArray; 


begin
  Result:=TPSTimePhaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimePhasesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTimePhaseArray; 


begin
  Result:=TPSTimePhaseArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimePhasesEntitySet.ListAll(const AQuery: String) : TPSTimePhaseArray; 

var N : String;

begin
  Result:=TPSTimePhaseArray(GetMulti(AQuery,True,N));
end;


Function TSPTimePhasesEntitySet.ListAll(const AQuery: TQueryParams) : TPSTimePhaseArray; 

var N : String;

begin
  Result:=TPSTimePhaseArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTimeSheetsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTimeSheetsEntitySet.ObjectRestKind : String; 

begin
  Result:='TimeSheets';
end;

Class Function TSPTimeSheetsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTimeSheet;
end;


Function TSPTimeSheetsEntitySet.Get(const Id: TGUIDString) : TPSTimeSheet; 


begin
  Result:=TPSTimeSheet(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTimeSheetsEntitySet.List(const AQuery: String; out NextLink: String) : TPSTimeSheetArray; 


begin
  Result:=TPSTimeSheetArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTimeSheetArray; 


begin
  Result:=TPSTimeSheetArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetsEntitySet.ListAll(const AQuery: String) : TPSTimeSheetArray; 

var N : String;

begin
  Result:=TPSTimeSheetArray(GetMulti(AQuery,True,N));
end;


Function TSPTimeSheetsEntitySet.ListAll(const AQuery: TQueryParams) : TPSTimeSheetArray; 

var N : String;

begin
  Result:=TPSTimeSheetArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTimeSheetLinesEntitySet
  --------------------------------------------------------------------}


Class Function TSPTimeSheetLinesEntitySet.ObjectRestKind : String; 

begin
  Result:='TimeSheetLines';
end;

Class Function TSPTimeSheetLinesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTimeSheetLine;
end;


Function TSPTimeSheetLinesEntitySet.Get(const Id: TGUIDString) : TPSTimeSheetLine; 


begin
  Result:=TPSTimeSheetLine(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTimeSheetLinesEntitySet.List(const AQuery: String; out NextLink: String) : TPSTimeSheetLineArray; 


begin
  Result:=TPSTimeSheetLineArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetLinesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTimeSheetLineArray; 


begin
  Result:=TPSTimeSheetLineArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetLinesEntitySet.ListAll(const AQuery: String) : TPSTimeSheetLineArray; 

var N : String;

begin
  Result:=TPSTimeSheetLineArray(GetMulti(AQuery,True,N));
end;


Function TSPTimeSheetLinesEntitySet.ListAll(const AQuery: TQueryParams) : TPSTimeSheetLineArray; 

var N : String;

begin
  Result:=TPSTimeSheetLineArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTimeSheetPeriodsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTimeSheetPeriodsEntitySet.ObjectRestKind : String; 

begin
  Result:='TimeSheetPeriods';
end;

Class Function TSPTimeSheetPeriodsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTimeSheetPeriod;
end;


Function TSPTimeSheetPeriodsEntitySet.Get(const Id: TGUIDString) : TPSTimeSheetPeriod; 


begin
  Result:=TPSTimeSheetPeriod(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTimeSheetPeriodsEntitySet.List(const AQuery: String; out NextLink: String) : TPSTimeSheetPeriodArray; 


begin
  Result:=TPSTimeSheetPeriodArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetPeriodsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTimeSheetPeriodArray; 


begin
  Result:=TPSTimeSheetPeriodArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetPeriodsEntitySet.ListAll(const AQuery: String) : TPSTimeSheetPeriodArray; 

var N : String;

begin
  Result:=TPSTimeSheetPeriodArray(GetMulti(AQuery,True,N));
end;


Function TSPTimeSheetPeriodsEntitySet.ListAll(const AQuery: TQueryParams) : TPSTimeSheetPeriodArray; 

var N : String;

begin
  Result:=TPSTimeSheetPeriodArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTimeSheetWorksEntitySet
  --------------------------------------------------------------------}


Class Function TSPTimeSheetWorksEntitySet.ObjectRestKind : String; 

begin
  Result:='TimeSheetWorks';
end;

Class Function TSPTimeSheetWorksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSTimeSheetWork;
end;


Function TSPTimeSheetWorksEntitySet.Get(const Id: TGUIDString) : TPSTimeSheetWork; 


begin
  Result:=TPSTimeSheetWork(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTimeSheetWorksEntitySet.List(const AQuery: String; out NextLink: String) : TPSTimeSheetWorkArray; 


begin
  Result:=TPSTimeSheetWorkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetWorksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSTimeSheetWorkArray; 


begin
  Result:=TPSTimeSheetWorkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeSheetWorksEntitySet.ListAll(const AQuery: String) : TPSTimeSheetWorkArray; 

var N : String;

begin
  Result:=TPSTimeSheetWorkArray(GetMulti(AQuery,True,N));
end;


Function TSPTimeSheetWorksEntitySet.ListAll(const AQuery: TQueryParams) : TPSTimeSheetWorkArray; 

var N : String;

begin
  Result:=TPSTimeSheetWorkArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowActivitiessEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowActivitiessEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowActivitiess';
end;

Class Function TSPWorkflowActivitiessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSWorkflowActivities;
end;


Function TSPWorkflowActivitiessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TPSWorkflowActivities; 


begin
  Result:=TPSWorkflowActivities(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWorkflowActivitiessEntitySet.List(const AQuery: String; out NextLink: String) : TPSWorkflowActivitiesArray; 


begin
  Result:=TPSWorkflowActivitiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowActivitiessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSWorkflowActivitiesArray; 


begin
  Result:=TPSWorkflowActivitiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowActivitiessEntitySet.ListAll(const AQuery: String) : TPSWorkflowActivitiesArray; 

var N : String;

begin
  Result:=TPSWorkflowActivitiesArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowActivitiessEntitySet.ListAll(const AQuery: TQueryParams) : TPSWorkflowActivitiesArray; 

var N : String;

begin
  Result:=TPSWorkflowActivitiesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowDesignersEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowDesignersEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowDesigners';
end;

Class Function TSPWorkflowDesignersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSWorkflowDesigner;
end;


Function TSPWorkflowDesignersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TPSWorkflowDesigner; 


begin
  Result:=TPSWorkflowDesigner(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWorkflowDesignersEntitySet.List(const AQuery: String; out NextLink: String) : TPSWorkflowDesignerArray; 


begin
  Result:=TPSWorkflowDesignerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDesignersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSWorkflowDesignerArray; 


begin
  Result:=TPSWorkflowDesignerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDesignersEntitySet.ListAll(const AQuery: String) : TPSWorkflowDesignerArray; 

var N : String;

begin
  Result:=TPSWorkflowDesignerArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowDesignersEntitySet.ListAll(const AQuery: TQueryParams) : TPSWorkflowDesignerArray; 

var N : String;

begin
  Result:=TPSWorkflowDesignerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowDesignerFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowDesignerFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowDesignerFields';
end;

Class Function TSPWorkflowDesignerFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSWorkflowDesignerField;
end;


Function TSPWorkflowDesignerFieldsEntitySet.Get(const Id: string) : TPSWorkflowDesignerField; 


begin
  Result:=TPSWorkflowDesignerField(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWorkflowDesignerFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TPSWorkflowDesignerFieldArray; 


begin
  Result:=TPSWorkflowDesignerFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDesignerFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSWorkflowDesignerFieldArray; 


begin
  Result:=TPSWorkflowDesignerFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDesignerFieldsEntitySet.ListAll(const AQuery: String) : TPSWorkflowDesignerFieldArray; 

var N : String;

begin
  Result:=TPSWorkflowDesignerFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowDesignerFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TPSWorkflowDesignerFieldArray; 

var N : String;

begin
  Result:=TPSWorkflowDesignerFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAccessRequestssEntitySet
  --------------------------------------------------------------------}


Class Function TSPAccessRequestssEntitySet.ObjectRestKind : String; 

begin
  Result:='AccessRequestss';
end;

Class Function TSPAccessRequestssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAccessRequests;
end;


Function TSPAccessRequestssEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAccessRequests; 


begin
  Result:=TSPAccessRequests(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAccessRequestssEntitySet.List(const AQuery: String; out NextLink: String) : TSPAccessRequestsArray; 


begin
  Result:=TSPAccessRequestsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAccessRequestssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAccessRequestsArray; 


begin
  Result:=TSPAccessRequestsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAccessRequestssEntitySet.ListAll(const AQuery: String) : TSPAccessRequestsArray; 

var N : String;

begin
  Result:=TSPAccessRequestsArray(GetMulti(AQuery,True,N));
end;


Function TSPAccessRequestssEntitySet.ListAll(const AQuery: TQueryParams) : TSPAccessRequestsArray; 

var N : String;

begin
  Result:=TSPAccessRequestsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAlternateUrlsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAlternateUrlsEntitySet.ObjectRestKind : String; 

begin
  Result:='AlternateUrls';
end;

Class Function TSPAlternateUrlsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAlternateUrl;
end;


Function TSPAlternateUrlsEntitySet.Get(const Uri: string) : TSPAlternateUrl; 


begin
  Result:=TSPAlternateUrl(GetSingle(TODataObject.MakeKeyString(Uri)));
end;


Function TSPAlternateUrlsEntitySet.List(const AQuery: String; out NextLink: String) : TSPAlternateUrlArray; 


begin
  Result:=TSPAlternateUrlArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAlternateUrlsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAlternateUrlArray; 


begin
  Result:=TSPAlternateUrlArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAlternateUrlsEntitySet.ListAll(const AQuery: String) : TSPAlternateUrlArray; 

var N : String;

begin
  Result:=TSPAlternateUrlArray(GetMulti(AQuery,True,N));
end;


Function TSPAlternateUrlsEntitySet.ListAll(const AQuery: TQueryParams) : TSPAlternateUrlArray; 

var N : String;

begin
  Result:=TSPAlternateUrlArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAnalyticsUsageEntrysEntitySet
  --------------------------------------------------------------------}


Class Function TSPAnalyticsUsageEntrysEntitySet.ObjectRestKind : String; 

begin
  Result:='AnalyticsUsageEntrys';
end;

Class Function TSPAnalyticsUsageEntrysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_AnalyticsAnalyticsUsageEntry;
end;


Function TSPAnalyticsUsageEntrysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_AnalyticsAnalyticsUsageEntry; 


begin
  Result:=TSP_AnalyticsAnalyticsUsageEntry(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAnalyticsUsageEntrysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_AnalyticsAnalyticsUsageEntryArray; 


begin
  Result:=TSP_AnalyticsAnalyticsUsageEntryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAnalyticsUsageEntrysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_AnalyticsAnalyticsUsageEntryArray; 


begin
  Result:=TSP_AnalyticsAnalyticsUsageEntryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAnalyticsUsageEntrysEntitySet.ListAll(const AQuery: String) : TSP_AnalyticsAnalyticsUsageEntryArray; 

var N : String;

begin
  Result:=TSP_AnalyticsAnalyticsUsageEntryArray(GetMulti(AQuery,True,N));
end;


Function TSPAnalyticsUsageEntrysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_AnalyticsAnalyticsUsageEntryArray; 

var N : String;

begin
  Result:=TSP_AnalyticsAnalyticsUsageEntryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPApiMetadatasEntitySet
  --------------------------------------------------------------------}


Class Function TSPApiMetadatasEntitySet.ObjectRestKind : String; 

begin
  Result:='ApiMetadatas';
end;

Class Function TSPApiMetadatasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPApiMetadata;
end;


Function TSPApiMetadatasEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPApiMetadata; 


begin
  Result:=TSPApiMetadata(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPApiMetadatasEntitySet.List(const AQuery: String; out NextLink: String) : TSPApiMetadataArray; 


begin
  Result:=TSPApiMetadataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPApiMetadatasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPApiMetadataArray; 


begin
  Result:=TSPApiMetadataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPApiMetadatasEntitySet.ListAll(const AQuery: String) : TSPApiMetadataArray; 

var N : String;

begin
  Result:=TSPApiMetadataArray(GetMulti(AQuery,True,N));
end;


Function TSPApiMetadatasEntitySet.ListAll(const AQuery: TQueryParams) : TSPApiMetadataArray; 

var N : String;

begin
  Result:=TSPApiMetadataArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPApps12EntitySet
  --------------------------------------------------------------------}


Class Function TSPApps12EntitySet.ObjectRestKind : String; 

begin
  Result:='Apps12';
end;

Class Function TSPApps12EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPApp;
end;


Function TSPApps12EntitySet.Get(const AssetId: string) : TSPApp; 


begin
  Result:=TSPApp(GetSingle(TODataObject.MakeKeyString(AssetId)));
end;


Function TSPApps12EntitySet.List(const AQuery: String; out NextLink: String) : TSPAppArray; 


begin
  Result:=TSPAppArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPApps12EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppArray; 


begin
  Result:=TSPAppArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPApps12EntitySet.ListAll(const AQuery: String) : TSPAppArray; 

var N : String;

begin
  Result:=TSPAppArray(GetMulti(AQuery,True,N));
end;


Function TSPApps12EntitySet.ListAll(const AQuery: TQueryParams) : TSPAppArray; 

var N : String;

begin
  Result:=TSPAppArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppCatalogsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppCatalogsEntitySet.ObjectRestKind : String; 

begin
  Result:='AppCatalogs';
end;

Class Function TSPAppCatalogsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppCatalog;
end;


Function TSPAppCatalogsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAppCatalog; 


begin
  Result:=TSPAppCatalog(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppCatalogsEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppCatalogArray; 


begin
  Result:=TSPAppCatalogArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppCatalogsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppCatalogArray; 


begin
  Result:=TSPAppCatalogArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppCatalogsEntitySet.ListAll(const AQuery: String) : TSPAppCatalogArray; 

var N : String;

begin
  Result:=TSPAppCatalogArray(GetMulti(AQuery,True,N));
end;


Function TSPAppCatalogsEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppCatalogArray; 

var N : String;

begin
  Result:=TSPAppCatalogArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppContextSitesEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppContextSitesEntitySet.ObjectRestKind : String; 

begin
  Result:='AppContextSites';
end;

Class Function TSPAppContextSitesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppContextSite;
end;


Function TSPAppContextSitesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAppContextSite; 


begin
  Result:=TSPAppContextSite(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppContextSitesEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppContextSiteArray; 


begin
  Result:=TSPAppContextSiteArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppContextSitesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppContextSiteArray; 


begin
  Result:=TSPAppContextSiteArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppContextSitesEntitySet.ListAll(const AQuery: String) : TSPAppContextSiteArray; 

var N : String;

begin
  Result:=TSPAppContextSiteArray(GetMulti(AQuery,True,N));
end;


Function TSPAppContextSitesEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppContextSiteArray; 

var N : String;

begin
  Result:=TSPAppContextSiteArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppInstancesEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppInstancesEntitySet.ObjectRestKind : String; 

begin
  Result:='AppInstances';
end;

Class Function TSPAppInstancesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppInstance;
end;


Function TSPAppInstancesEntitySet.Get(const Id: TGUIDString) : TSPAppInstance; 


begin
  Result:=TSPAppInstance(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPAppInstancesEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppInstanceArray; 


begin
  Result:=TSPAppInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppInstancesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppInstanceArray; 


begin
  Result:=TSPAppInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppInstancesEntitySet.ListAll(const AQuery: String) : TSPAppInstanceArray; 

var N : String;

begin
  Result:=TSPAppInstanceArray(GetMulti(AQuery,True,N));
end;


Function TSPAppInstancesEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppInstanceArray; 

var N : String;

begin
  Result:=TSPAppInstanceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppInstanceErrorDetailssEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppInstanceErrorDetailssEntitySet.ObjectRestKind : String; 

begin
  Result:='AppInstanceErrorDetailss';
end;

Class Function TSPAppInstanceErrorDetailssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppInstanceErrorDetails;
end;


Function TSPAppInstanceErrorDetailssEntitySet.Get(const CorrelationId: TGUIDString) : TSPAppInstanceErrorDetails; 


begin
  Result:=TSPAppInstanceErrorDetails(GetSingle(TODataObject.MakeKeyString(CorrelationId)));
end;


Function TSPAppInstanceErrorDetailssEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppInstanceErrorDetailsArray; 


begin
  Result:=TSPAppInstanceErrorDetailsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppInstanceErrorDetailssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppInstanceErrorDetailsArray; 


begin
  Result:=TSPAppInstanceErrorDetailsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppInstanceErrorDetailssEntitySet.ListAll(const AQuery: String) : TSPAppInstanceErrorDetailsArray; 

var N : String;

begin
  Result:=TSPAppInstanceErrorDetailsArray(GetMulti(AQuery,True,N));
end;


Function TSPAppInstanceErrorDetailssEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppInstanceErrorDetailsArray; 

var N : String;

begin
  Result:=TSPAppInstanceErrorDetailsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppTilesEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppTilesEntitySet.ObjectRestKind : String; 

begin
  Result:='AppTiles';
end;

Class Function TSPAppTilesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppTile;
end;


Function TSPAppTilesEntitySet.Get(const AppType: TInt32) : TSPAppTile; 


begin
  Result:=TSPAppTile(GetSingle(IntToStr(AppType)));
end;


Function TSPAppTilesEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppTileArray; 


begin
  Result:=TSPAppTileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppTilesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppTileArray; 


begin
  Result:=TSPAppTileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppTilesEntitySet.ListAll(const AQuery: String) : TSPAppTileArray; 

var N : String;

begin
  Result:=TSPAppTileArray(GetMulti(AQuery,True,N));
end;


Function TSPAppTilesEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppTileArray; 

var N : String;

begin
  Result:=TSPAppTileArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAttachmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAttachmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='Attachments';
end;

Class Function TSPAttachmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAttachment;
end;


Function TSPAttachmentsEntitySet.Get(const FileName: string) : TSPAttachment; 


begin
  Result:=TSPAttachment(GetSingle(TODataObject.MakeKeyString(FileName)));
end;


Function TSPAttachmentsEntitySet.List(const AQuery: String; out NextLink: String) : TSPAttachmentArray; 


begin
  Result:=TSPAttachmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAttachmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAttachmentArray; 


begin
  Result:=TSPAttachmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAttachmentsEntitySet.ListAll(const AQuery: String) : TSPAttachmentArray; 

var N : String;

begin
  Result:=TSPAttachmentArray(GetMulti(AQuery,True,N));
end;


Function TSPAttachmentsEntitySet.ListAll(const AQuery: TQueryParams) : TSPAttachmentArray; 

var N : String;

begin
  Result:=TSPAttachmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAuditsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAuditsEntitySet.ObjectRestKind : String; 

begin
  Result:='Audits';
end;

Class Function TSPAuditsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAudit;
end;


Function TSPAuditsEntitySet.Get(const AuditFlags: TInt32) : TSPAudit; 


begin
  Result:=TSPAudit(GetSingle(IntToStr(AuditFlags)));
end;


Function TSPAuditsEntitySet.List(const AQuery: String; out NextLink: String) : TSPAuditArray; 


begin
  Result:=TSPAuditArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAuditsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAuditArray; 


begin
  Result:=TSPAuditArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAuditsEntitySet.ListAll(const AQuery: String) : TSPAuditArray; 

var N : String;

begin
  Result:=TSPAuditArray(GetMulti(AQuery,True,N));
end;


Function TSPAuditsEntitySet.ListAll(const AQuery: TQueryParams) : TSPAuditArray; 

var N : String;

begin
  Result:=TSPAuditArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppBdcCatalogsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppBdcCatalogsEntitySet.ObjectRestKind : String; 

begin
  Result:='AppBdcCatalogs';
end;

Class Function TSPAppBdcCatalogsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataAppBdcCatalog;
end;


Function TSPAppBdcCatalogsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_BusinessDataAppBdcCatalog; 


begin
  Result:=TSP_BusinessDataAppBdcCatalog(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppBdcCatalogsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataAppBdcCatalogArray; 


begin
  Result:=TSP_BusinessDataAppBdcCatalogArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppBdcCatalogsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataAppBdcCatalogArray; 


begin
  Result:=TSP_BusinessDataAppBdcCatalogArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppBdcCatalogsEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataAppBdcCatalogArray; 

var N : String;

begin
  Result:=TSP_BusinessDataAppBdcCatalogArray(GetMulti(AQuery,True,N));
end;


Function TSPAppBdcCatalogsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataAppBdcCatalogArray; 

var N : String;

begin
  Result:=TSP_BusinessDataAppBdcCatalogArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntitysEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntitysEntitySet.ObjectRestKind : String; 

begin
  Result:='Entitys';
end;

Class Function TSPEntitysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataEntity;
end;


Function TSPEntitysEntitySet.Get(const _Name: string) : TSP_BusinessDataEntity; 


begin
  Result:=TSP_BusinessDataEntity(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPEntitysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataEntityArray; 


begin
  Result:=TSP_BusinessDataEntityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntitysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataEntityArray; 


begin
  Result:=TSP_BusinessDataEntityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntitysEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataEntityArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityArray(GetMulti(AQuery,True,N));
end;


Function TSPEntitysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataEntityArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityFields';
end;

Class Function TSPEntityFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataEntityField;
end;


Function TSPEntityFieldsEntitySet.Get(const _Name: string) : TSP_BusinessDataEntityField; 


begin
  Result:=TSP_BusinessDataEntityField(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPEntityFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataEntityFieldArray; 


begin
  Result:=TSP_BusinessDataEntityFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataEntityFieldArray; 


begin
  Result:=TSP_BusinessDataEntityFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityFieldsEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataEntityFieldArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataEntityFieldArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityIdentifiersEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityIdentifiersEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityIdentifiers';
end;

Class Function TSPEntityIdentifiersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataEntityIdentifier;
end;


Function TSPEntityIdentifiersEntitySet.Get(const _Name: string) : TSP_BusinessDataEntityIdentifier; 


begin
  Result:=TSP_BusinessDataEntityIdentifier(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPEntityIdentifiersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataEntityIdentifierArray; 


begin
  Result:=TSP_BusinessDataEntityIdentifierArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityIdentifiersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataEntityIdentifierArray; 


begin
  Result:=TSP_BusinessDataEntityIdentifierArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityIdentifiersEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataEntityIdentifierArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityIdentifierArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityIdentifiersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataEntityIdentifierArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityIdentifierArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityViewsEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityViewsEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityViews';
end;

Class Function TSPEntityViewsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataEntityView;
end;


Function TSPEntityViewsEntitySet.Get(const _Name: string) : TSP_BusinessDataEntityView; 


begin
  Result:=TSP_BusinessDataEntityView(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPEntityViewsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataEntityViewArray; 


begin
  Result:=TSP_BusinessDataEntityViewArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityViewsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataEntityViewArray; 


begin
  Result:=TSP_BusinessDataEntityViewArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityViewsEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataEntityViewArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityViewArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityViewsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataEntityViewArray; 

var N : String;

begin
  Result:=TSP_BusinessDataEntityViewArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFiltersEntitySet
  --------------------------------------------------------------------}


Class Function TSPFiltersEntitySet.ObjectRestKind : String; 

begin
  Result:='Filters';
end;

Class Function TSPFiltersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataFilter;
end;


Function TSPFiltersEntitySet.Get(const _Name: string) : TSP_BusinessDataFilter; 


begin
  Result:=TSP_BusinessDataFilter(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPFiltersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataFilterArray; 


begin
  Result:=TSP_BusinessDataFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFiltersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataFilterArray; 


begin
  Result:=TSP_BusinessDataFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFiltersEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataFilterArray; 

var N : String;

begin
  Result:=TSP_BusinessDataFilterArray(GetMulti(AQuery,True,N));
end;


Function TSPFiltersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataFilterArray; 

var N : String;

begin
  Result:=TSP_BusinessDataFilterArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPExternalSubscriptionStoresEntitySet
  --------------------------------------------------------------------}


Class Function TSPExternalSubscriptionStoresEntitySet.ObjectRestKind : String; 

begin
  Result:='ExternalSubscriptionStores';
end;

Class Function TSPExternalSubscriptionStoresEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessData_InfrastructureExternalSubscriptionStore;
end;


Function TSPExternalSubscriptionStoresEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_BusinessData_InfrastructureExternalSubscriptionStore; 


begin
  Result:=TSP_BusinessData_InfrastructureExternalSubscriptionStore(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPExternalSubscriptionStoresEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray; 


begin
  Result:=TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExternalSubscriptionStoresEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray; 


begin
  Result:=TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExternalSubscriptionStoresEntitySet.ListAll(const AQuery: String) : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray; 

var N : String;

begin
  Result:=TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray(GetMulti(AQuery,True,N));
end;


Function TSPExternalSubscriptionStoresEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray; 

var N : String;

begin
  Result:=TSP_BusinessData_InfrastructureExternalSubscriptionStoreArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLobSystemsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLobSystemsEntitySet.ObjectRestKind : String; 

begin
  Result:='LobSystems';
end;

Class Function TSPLobSystemsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataLobSystem;
end;


Function TSPLobSystemsEntitySet.Get(const _Name: string) : TSP_BusinessDataLobSystem; 


begin
  Result:=TSP_BusinessDataLobSystem(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPLobSystemsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataLobSystemArray; 


begin
  Result:=TSP_BusinessDataLobSystemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLobSystemsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataLobSystemArray; 


begin
  Result:=TSP_BusinessDataLobSystemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLobSystemsEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataLobSystemArray; 

var N : String;

begin
  Result:=TSP_BusinessDataLobSystemArray(GetMulti(AQuery,True,N));
end;


Function TSPLobSystemsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataLobSystemArray; 

var N : String;

begin
  Result:=TSP_BusinessDataLobSystemArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLobSystemInstancesEntitySet
  --------------------------------------------------------------------}


Class Function TSPLobSystemInstancesEntitySet.ObjectRestKind : String; 

begin
  Result:='LobSystemInstances';
end;

Class Function TSPLobSystemInstancesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataLobSystemInstance;
end;


Function TSPLobSystemInstancesEntitySet.Get(const _Name: string) : TSP_BusinessDataLobSystemInstance; 


begin
  Result:=TSP_BusinessDataLobSystemInstance(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPLobSystemInstancesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataLobSystemInstanceArray; 


begin
  Result:=TSP_BusinessDataLobSystemInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLobSystemInstancesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataLobSystemInstanceArray; 


begin
  Result:=TSP_BusinessDataLobSystemInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLobSystemInstancesEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataLobSystemInstanceArray; 

var N : String;

begin
  Result:=TSP_BusinessDataLobSystemInstanceArray(GetMulti(AQuery,True,N));
end;


Function TSPLobSystemInstancesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataLobSystemInstanceArray; 

var N : String;

begin
  Result:=TSP_BusinessDataLobSystemInstanceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMethodExecutionResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMethodExecutionResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='MethodExecutionResults';
end;

Class Function TSPMethodExecutionResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataMethodExecutionResult;
end;


Function TSPMethodExecutionResultsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_BusinessDataMethodExecutionResult; 


begin
  Result:=TSP_BusinessDataMethodExecutionResult(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMethodExecutionResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataMethodExecutionResultArray; 


begin
  Result:=TSP_BusinessDataMethodExecutionResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMethodExecutionResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataMethodExecutionResultArray; 


begin
  Result:=TSP_BusinessDataMethodExecutionResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMethodExecutionResultsEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataMethodExecutionResultArray; 

var N : String;

begin
  Result:=TSP_BusinessDataMethodExecutionResultArray(GetMulti(AQuery,True,N));
end;


Function TSPMethodExecutionResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataMethodExecutionResultArray; 

var N : String;

begin
  Result:=TSP_BusinessDataMethodExecutionResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityFieldValueDictionarysEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityFieldValueDictionarysEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityFieldValueDictionarys';
end;

Class Function TSPEntityFieldValueDictionarysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionary;
end;


Function TSPEntityFieldValueDictionarysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_BusinessData_RuntimeEntityFieldValueDictionary; 


begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionary(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPEntityFieldValueDictionarysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray; 


begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityFieldValueDictionarysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray; 


begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityFieldValueDictionarysEntitySet.ListAll(const AQuery: String) : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityFieldValueDictionarysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeEntityFieldValueDictionaryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityIdentitysEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityIdentitysEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityIdentitys';
end;

Class Function TSPEntityIdentitysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessData_RuntimeEntityIdentity;
end;


Function TSPEntityIdentitysEntitySet.Get(const IdentifierCount: TInt32) : TSP_BusinessData_RuntimeEntityIdentity; 


begin
  Result:=TSP_BusinessData_RuntimeEntityIdentity(GetSingle(IntToStr(IdentifierCount)));
end;


Function TSPEntityIdentitysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessData_RuntimeEntityIdentityArray; 


begin
  Result:=TSP_BusinessData_RuntimeEntityIdentityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityIdentitysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessData_RuntimeEntityIdentityArray; 


begin
  Result:=TSP_BusinessData_RuntimeEntityIdentityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityIdentitysEntitySet.ListAll(const AQuery: String) : TSP_BusinessData_RuntimeEntityIdentityArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeEntityIdentityArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityIdentitysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessData_RuntimeEntityIdentityArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeEntityIdentityArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEntityInstancesEntitySet
  --------------------------------------------------------------------}


Class Function TSPEntityInstancesEntitySet.ObjectRestKind : String; 

begin
  Result:='EntityInstances';
end;

Class Function TSPEntityInstancesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessData_RuntimeEntityInstance;
end;


Function TSPEntityInstancesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_BusinessData_RuntimeEntityInstance; 


begin
  Result:=TSP_BusinessData_RuntimeEntityInstance(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPEntityInstancesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessData_RuntimeEntityInstanceArray; 


begin
  Result:=TSP_BusinessData_RuntimeEntityInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityInstancesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessData_RuntimeEntityInstanceArray; 


begin
  Result:=TSP_BusinessData_RuntimeEntityInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEntityInstancesEntitySet.ListAll(const AQuery: String) : TSP_BusinessData_RuntimeEntityInstanceArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeEntityInstanceArray(GetMulti(AQuery,True,N));
end;


Function TSPEntityInstancesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessData_RuntimeEntityInstanceArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeEntityInstanceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNotificationCallbacksEntitySet
  --------------------------------------------------------------------}


Class Function TSPNotificationCallbacksEntitySet.ObjectRestKind : String; 

begin
  Result:='NotificationCallbacks';
end;

Class Function TSPNotificationCallbacksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessData_RuntimeNotificationCallback;
end;


Function TSPNotificationCallbacksEntitySet.Get(const NotificationContext: string) : TSP_BusinessData_RuntimeNotificationCallback; 


begin
  Result:=TSP_BusinessData_RuntimeNotificationCallback(GetSingle(TODataObject.MakeKeyString(NotificationContext)));
end;


Function TSPNotificationCallbacksEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessData_RuntimeNotificationCallbackArray; 


begin
  Result:=TSP_BusinessData_RuntimeNotificationCallbackArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNotificationCallbacksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessData_RuntimeNotificationCallbackArray; 


begin
  Result:=TSP_BusinessData_RuntimeNotificationCallbackArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNotificationCallbacksEntitySet.ListAll(const AQuery: String) : TSP_BusinessData_RuntimeNotificationCallbackArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeNotificationCallbackArray(GetMulti(AQuery,True,N));
end;


Function TSPNotificationCallbacksEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessData_RuntimeNotificationCallbackArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeNotificationCallbackArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSubscriptionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSubscriptionsEntitySet.ObjectRestKind : String; 

begin
  Result:='Subscriptions';
end;

Class Function TSPSubscriptionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessData_RuntimeSubscription;
end;


Function TSPSubscriptionsEntitySet.Get(const Hash: string) : TSP_BusinessData_RuntimeSubscription; 


begin
  Result:=TSP_BusinessData_RuntimeSubscription(GetSingle(TODataObject.MakeKeyString(Hash)));
end;


Function TSPSubscriptionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessData_RuntimeSubscriptionArray; 


begin
  Result:=TSP_BusinessData_RuntimeSubscriptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSubscriptionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessData_RuntimeSubscriptionArray; 


begin
  Result:=TSP_BusinessData_RuntimeSubscriptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSubscriptionsEntitySet.ListAll(const AQuery: String) : TSP_BusinessData_RuntimeSubscriptionArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeSubscriptionArray(GetMulti(AQuery,True,N));
end;


Function TSPSubscriptionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessData_RuntimeSubscriptionArray; 

var N : String;

begin
  Result:=TSP_BusinessData_RuntimeSubscriptionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTypeDescriptorsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTypeDescriptorsEntitySet.ObjectRestKind : String; 

begin
  Result:='TypeDescriptors';
end;

Class Function TSPTypeDescriptorsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_BusinessDataTypeDescriptor;
end;


Function TSPTypeDescriptorsEntitySet.Get(const _Name: string) : TSP_BusinessDataTypeDescriptor; 


begin
  Result:=TSP_BusinessDataTypeDescriptor(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPTypeDescriptorsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_BusinessDataTypeDescriptorArray; 


begin
  Result:=TSP_BusinessDataTypeDescriptorArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTypeDescriptorsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_BusinessDataTypeDescriptorArray; 


begin
  Result:=TSP_BusinessDataTypeDescriptorArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTypeDescriptorsEntitySet.ListAll(const AQuery: String) : TSP_BusinessDataTypeDescriptorArray; 

var N : String;

begin
  Result:=TSP_BusinessDataTypeDescriptorArray(GetMulti(AQuery,True,N));
end;


Function TSPTypeDescriptorsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_BusinessDataTypeDescriptorArray; 

var N : String;

begin
  Result:=TSP_BusinessDataTypeDescriptorArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPChangesEntitySet
  --------------------------------------------------------------------}


Class Function TSPChangesEntitySet.ObjectRestKind : String; 

begin
  Result:='Changes';
end;

Class Function TSPChangesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPChange;
end;


Function TSPChangesEntitySet.Get(const ChangeType: TInt32) : TSPChange; 


begin
  Result:=TSPChange(GetSingle(IntToStr(ChangeType)));
end;


Function TSPChangesEntitySet.List(const AQuery: String; out NextLink: String) : TSPChangeArray; 


begin
  Result:=TSPChangeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPChangesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPChangeArray; 


begin
  Result:=TSPChangeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPChangesEntitySet.ListAll(const AQuery: String) : TSPChangeArray; 

var N : String;

begin
  Result:=TSPChangeArray(GetMulti(AQuery,True,N));
end;


Function TSPChangesEntitySet.ListAll(const AQuery: TQueryParams) : TSPChangeArray; 

var N : String;

begin
  Result:=TSPChangeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCompatibilityRangesEntitySet
  --------------------------------------------------------------------}


Class Function TSPCompatibilityRangesEntitySet.ObjectRestKind : String; 

begin
  Result:='CompatibilityRanges';
end;

Class Function TSPCompatibilityRangesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPCompatibilityRange;
end;


Function TSPCompatibilityRangesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPCompatibilityRange; 


begin
  Result:=TSPCompatibilityRange(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPCompatibilityRangesEntitySet.List(const AQuery: String; out NextLink: String) : TSPCompatibilityRangeArray; 


begin
  Result:=TSPCompatibilityRangeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCompatibilityRangesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPCompatibilityRangeArray; 


begin
  Result:=TSPCompatibilityRangeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCompatibilityRangesEntitySet.ListAll(const AQuery: String) : TSPCompatibilityRangeArray; 

var N : String;

begin
  Result:=TSPCompatibilityRangeArray(GetMulti(AQuery,True,N));
end;


Function TSPCompatibilityRangesEntitySet.ListAll(const AQuery: TQueryParams) : TSPCompatibilityRangeArray; 

var N : String;

begin
  Result:=TSPCompatibilityRangeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPolicyEvaluationInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPPolicyEvaluationInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='PolicyEvaluationInfos';
end;

Class Function TSPPolicyEvaluationInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_CompliancePolicyPolicyEvaluationInfo;
end;


Function TSPPolicyEvaluationInfosEntitySet.Get(const DlpAccessScope: TInt32) : TSP_CompliancePolicyPolicyEvaluationInfo; 


begin
  Result:=TSP_CompliancePolicyPolicyEvaluationInfo(GetSingle(IntToStr(DlpAccessScope)));
end;


Function TSPPolicyEvaluationInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_CompliancePolicyPolicyEvaluationInfoArray; 


begin
  Result:=TSP_CompliancePolicyPolicyEvaluationInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPolicyEvaluationInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_CompliancePolicyPolicyEvaluationInfoArray; 


begin
  Result:=TSP_CompliancePolicyPolicyEvaluationInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPolicyEvaluationInfosEntitySet.ListAll(const AQuery: String) : TSP_CompliancePolicyPolicyEvaluationInfoArray; 

var N : String;

begin
  Result:=TSP_CompliancePolicyPolicyEvaluationInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPPolicyEvaluationInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_CompliancePolicyPolicyEvaluationInfoArray; 

var N : String;

begin
  Result:=TSP_CompliancePolicyPolicyEvaluationInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPPolicyStoreProxysEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPPolicyStoreProxysEntitySet.ObjectRestKind : String; 

begin
  Result:='SPPolicyStoreProxys';
end;

Class Function TSPSPPolicyStoreProxysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_CompliancePolicySPPolicyStoreProxy;
end;


Function TSPSPPolicyStoreProxysEntitySet.Get(const PolicyStoreUrl: string) : TSP_CompliancePolicySPPolicyStoreProxy; 


begin
  Result:=TSP_CompliancePolicySPPolicyStoreProxy(GetSingle(TODataObject.MakeKeyString(PolicyStoreUrl)));
end;


Function TSPSPPolicyStoreProxysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_CompliancePolicySPPolicyStoreProxyArray; 


begin
  Result:=TSP_CompliancePolicySPPolicyStoreProxyArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPPolicyStoreProxysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_CompliancePolicySPPolicyStoreProxyArray; 


begin
  Result:=TSP_CompliancePolicySPPolicyStoreProxyArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPPolicyStoreProxysEntitySet.ListAll(const AQuery: String) : TSP_CompliancePolicySPPolicyStoreProxyArray; 

var N : String;

begin
  Result:=TSP_CompliancePolicySPPolicyStoreProxyArray(GetMulti(AQuery,True,N));
end;


Function TSPSPPolicyStoreProxysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_CompliancePolicySPPolicyStoreProxyArray; 

var N : String;

begin
  Result:=TSP_CompliancePolicySPPolicyStoreProxyArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPContentTypesEntitySet
  --------------------------------------------------------------------}


Class Function TSPContentTypesEntitySet.ObjectRestKind : String; 

begin
  Result:='ContentTypes';
end;

Class Function TSPContentTypesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPContentType;
end;


Function TSPContentTypesEntitySet.Get(const StringId: string) : TSPContentType; 


begin
  Result:=TSPContentType(GetSingle(TODataObject.MakeKeyString(StringId)));
end;


Function TSPContentTypesEntitySet.List(const AQuery: String; out NextLink: String) : TSPContentTypeArray; 


begin
  Result:=TSPContentTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPContentTypesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPContentTypeArray; 


begin
  Result:=TSPContentTypeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPContentTypesEntitySet.ListAll(const AQuery: String) : TSPContentTypeArray; 

var N : String;

begin
  Result:=TSPContentTypeArray(GetMulti(AQuery,True,N));
end;


Function TSPContentTypesEntitySet.ListAll(const AQuery: TQueryParams) : TSPContentTypeArray; 

var N : String;

begin
  Result:=TSPContentTypeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCreatablesInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPCreatablesInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='CreatablesInfos';
end;

Class Function TSPCreatablesInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPCreatablesInfo;
end;


Function TSPCreatablesInfosEntitySet.Get(const CanCreateFolders: boolean) : TSPCreatablesInfo; 


begin
  Result:=TSPCreatablesInfo(GetSingle(BoolToStr(CanCreateFolders,'true','false')));
end;


Function TSPCreatablesInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSPCreatablesInfoArray; 


begin
  Result:=TSPCreatablesInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCreatablesInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPCreatablesInfoArray; 


begin
  Result:=TSPCreatablesInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCreatablesInfosEntitySet.ListAll(const AQuery: String) : TSPCreatablesInfoArray; 

var N : String;

begin
  Result:=TSPCreatablesInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPCreatablesInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSPCreatablesInfoArray; 

var N : String;

begin
  Result:=TSPCreatablesInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDirectorySessionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDirectorySessionsEntitySet.ObjectRestKind : String; 

begin
  Result:='DirectorySessions';
end;

Class Function TSPDirectorySessionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryDirectorySession;
end;


Function TSPDirectorySessionsEntitySet.Get(const SessionOptions: TInt32) : TSP_DirectoryDirectorySession; 


begin
  Result:=TSP_DirectoryDirectorySession(GetSingle(IntToStr(SessionOptions)));
end;


Function TSPDirectorySessionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryDirectorySessionArray; 


begin
  Result:=TSP_DirectoryDirectorySessionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDirectorySessionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryDirectorySessionArray; 


begin
  Result:=TSP_DirectoryDirectorySessionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDirectorySessionsEntitySet.ListAll(const AQuery: String) : TSP_DirectoryDirectorySessionArray; 

var N : String;

begin
  Result:=TSP_DirectoryDirectorySessionArray(GetMulti(AQuery,True,N));
end;


Function TSPDirectorySessionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryDirectorySessionArray; 

var N : String;

begin
  Result:=TSP_DirectoryDirectorySessionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPGroupsEntitySet
  --------------------------------------------------------------------}


Class Function TSPGroupsEntitySet.ObjectRestKind : String; 

begin
  Result:='Groups';
end;

Class Function TSPGroupsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryGroup;
end;


Function TSPGroupsEntitySet.Get(const Id: TGUIDString) : TSP_DirectoryGroup; 


begin
  Result:=TSP_DirectoryGroup(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPGroupsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryGroupArray; 


begin
  Result:=TSP_DirectoryGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGroupsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryGroupArray; 


begin
  Result:=TSP_DirectoryGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGroupsEntitySet.ListAll(const AQuery: String) : TSP_DirectoryGroupArray; 

var N : String;

begin
  Result:=TSP_DirectoryGroupArray(GetMulti(AQuery,True,N));
end;


Function TSPGroupsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryGroupArray; 

var N : String;

begin
  Result:=TSP_DirectoryGroupArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPGroupAndUserStatussEntitySet
  --------------------------------------------------------------------}


Class Function TSPGroupAndUserStatussEntitySet.ObjectRestKind : String; 

begin
  Result:='GroupAndUserStatuss';
end;

Class Function TSPGroupAndUserStatussEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryGroupAndUserStatus;
end;


Function TSPGroupAndUserStatussEntitySet.Get(const Status: TInt32) : TSP_DirectoryGroupAndUserStatus; 


begin
  Result:=TSP_DirectoryGroupAndUserStatus(GetSingle(IntToStr(Status)));
end;


Function TSPGroupAndUserStatussEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryGroupAndUserStatusArray; 


begin
  Result:=TSP_DirectoryGroupAndUserStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGroupAndUserStatussEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryGroupAndUserStatusArray; 


begin
  Result:=TSP_DirectoryGroupAndUserStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGroupAndUserStatussEntitySet.ListAll(const AQuery: String) : TSP_DirectoryGroupAndUserStatusArray; 

var N : String;

begin
  Result:=TSP_DirectoryGroupAndUserStatusArray(GetMulti(AQuery,True,N));
end;


Function TSPGroupAndUserStatussEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryGroupAndUserStatusArray; 

var N : String;

begin
  Result:=TSP_DirectoryGroupAndUserStatusArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLinkCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLinkCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='LinkCollections';
end;

Class Function TSPLinkCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryLinkCollection;
end;


Function TSPLinkCollectionsEntitySet.Get(const Count: TInt32) : TSP_DirectoryLinkCollection; 


begin
  Result:=TSP_DirectoryLinkCollection(GetSingle(IntToStr(Count)));
end;


Function TSPLinkCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryLinkCollectionArray; 


begin
  Result:=TSP_DirectoryLinkCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLinkCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryLinkCollectionArray; 


begin
  Result:=TSP_DirectoryLinkCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLinkCollectionsEntitySet.ListAll(const AQuery: String) : TSP_DirectoryLinkCollectionArray; 

var N : String;

begin
  Result:=TSP_DirectoryLinkCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPLinkCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryLinkCollectionArray; 

var N : String;

begin
  Result:=TSP_DirectoryLinkCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMembershipResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMembershipResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='MembershipResults';
end;

Class Function TSPMembershipResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryMembershipResult;
end;


Function TSPMembershipResultsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_DirectoryMembershipResult; 


begin
  Result:=TSP_DirectoryMembershipResult(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMembershipResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryMembershipResultArray; 


begin
  Result:=TSP_DirectoryMembershipResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMembershipResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryMembershipResultArray; 


begin
  Result:=TSP_DirectoryMembershipResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMembershipResultsEntitySet.ListAll(const AQuery: String) : TSP_DirectoryMembershipResultArray; 

var N : String;

begin
  Result:=TSP_DirectoryMembershipResultArray(GetMulti(AQuery,True,N));
end;


Function TSPMembershipResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryMembershipResultArray; 

var N : String;

begin
  Result:=TSP_DirectoryMembershipResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMembersInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPMembersInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='MembersInfos';
end;

Class Function TSPMembersInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryMembersInfo;
end;


Function TSPMembersInfosEntitySet.Get(const TotalCount: TInt32) : TSP_DirectoryMembersInfo; 


begin
  Result:=TSP_DirectoryMembersInfo(GetSingle(IntToStr(TotalCount)));
end;


Function TSPMembersInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryMembersInfoArray; 


begin
  Result:=TSP_DirectoryMembersInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMembersInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryMembersInfoArray; 


begin
  Result:=TSP_DirectoryMembersInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMembersInfosEntitySet.ListAll(const AQuery: String) : TSP_DirectoryMembersInfoArray; 

var N : String;

begin
  Result:=TSP_DirectoryMembersInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPMembersInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryMembersInfoArray; 

var N : String;

begin
  Result:=TSP_DirectoryMembersInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMyGroupsResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMyGroupsResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='MyGroupsResults';
end;

Class Function TSPMyGroupsResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryMyGroupsResult;
end;


Function TSPMyGroupsResultsEntitySet.Get(const HasNext: boolean) : TSP_DirectoryMyGroupsResult; 


begin
  Result:=TSP_DirectoryMyGroupsResult(GetSingle(BoolToStr(HasNext,'true','false')));
end;


Function TSPMyGroupsResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryMyGroupsResultArray; 


begin
  Result:=TSP_DirectoryMyGroupsResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMyGroupsResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryMyGroupsResultArray; 


begin
  Result:=TSP_DirectoryMyGroupsResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMyGroupsResultsEntitySet.ListAll(const AQuery: String) : TSP_DirectoryMyGroupsResultArray; 

var N : String;

begin
  Result:=TSP_DirectoryMyGroupsResultArray(GetMulti(AQuery,True,N));
end;


Function TSPMyGroupsResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryMyGroupsResultArray; 

var N : String;

begin
  Result:=TSP_DirectoryMyGroupsResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPropertysEntitySet
  --------------------------------------------------------------------}


Class Function TSPPropertysEntitySet.ObjectRestKind : String; 

begin
  Result:='Propertys';
end;

Class Function TSPPropertysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_Directory_Property;
end;


Function TSPPropertysEntitySet.Get(const _Name: string) : TSP_Directory_Property; 


begin
  Result:=TSP_Directory_Property(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPPropertysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_Directory_PropertyArray; 


begin
  Result:=TSP_Directory_PropertyArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPropertysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_Directory_PropertyArray; 


begin
  Result:=TSP_Directory_PropertyArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPropertysEntitySet.ListAll(const AQuery: String) : TSP_Directory_PropertyArray; 

var N : String;

begin
  Result:=TSP_Directory_PropertyArray(GetMulti(AQuery,True,N));
end;


Function TSPPropertysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_Directory_PropertyArray; 

var N : String;

begin
  Result:=TSP_Directory_PropertyArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPropertyDictionarysEntitySet
  --------------------------------------------------------------------}


Class Function TSPPropertyDictionarysEntitySet.ObjectRestKind : String; 

begin
  Result:='PropertyDictionarys';
end;

Class Function TSPPropertyDictionarysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryPropertyDictionary;
end;


Function TSPPropertyDictionarysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_DirectoryPropertyDictionary; 


begin
  Result:=TSP_DirectoryPropertyDictionary(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPropertyDictionarysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryPropertyDictionaryArray; 


begin
  Result:=TSP_DirectoryPropertyDictionaryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPropertyDictionarysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryPropertyDictionaryArray; 


begin
  Result:=TSP_DirectoryPropertyDictionaryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPropertyDictionarysEntitySet.ListAll(const AQuery: String) : TSP_DirectoryPropertyDictionaryArray; 

var N : String;

begin
  Result:=TSP_DirectoryPropertyDictionaryArray(GetMulti(AQuery,True,N));
end;


Function TSPPropertyDictionarysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryPropertyDictionaryArray; 

var N : String;

begin
  Result:=TSP_DirectoryPropertyDictionaryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSharePointDirectoryProvidersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSharePointDirectoryProvidersEntitySet.ObjectRestKind : String; 

begin
  Result:='SharePointDirectoryProviders';
end;

Class Function TSPSharePointDirectoryProvidersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_Directory_ProviderSharePointDirectoryProvider;
end;


Function TSPSharePointDirectoryProvidersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_Directory_ProviderSharePointDirectoryProvider; 


begin
  Result:=TSP_Directory_ProviderSharePointDirectoryProvider(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSharePointDirectoryProvidersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_Directory_ProviderSharePointDirectoryProviderArray; 


begin
  Result:=TSP_Directory_ProviderSharePointDirectoryProviderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharePointDirectoryProvidersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_Directory_ProviderSharePointDirectoryProviderArray; 


begin
  Result:=TSP_Directory_ProviderSharePointDirectoryProviderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharePointDirectoryProvidersEntitySet.ListAll(const AQuery: String) : TSP_Directory_ProviderSharePointDirectoryProviderArray; 

var N : String;

begin
  Result:=TSP_Directory_ProviderSharePointDirectoryProviderArray(GetMulti(AQuery,True,N));
end;


Function TSPSharePointDirectoryProvidersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_Directory_ProviderSharePointDirectoryProviderArray; 

var N : String;

begin
  Result:=TSP_Directory_ProviderSharePointDirectoryProviderArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPHelpersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPHelpersEntitySet.ObjectRestKind : String; 

begin
  Result:='SPHelpers';
end;

Class Function TSPSPHelpersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectorySPHelper;
end;


Function TSPSPHelpersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_DirectorySPHelper; 


begin
  Result:=TSP_DirectorySPHelper(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPHelpersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectorySPHelperArray; 


begin
  Result:=TSP_DirectorySPHelperArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPHelpersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectorySPHelperArray; 


begin
  Result:=TSP_DirectorySPHelperArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPHelpersEntitySet.ListAll(const AQuery: String) : TSP_DirectorySPHelperArray; 

var N : String;

begin
  Result:=TSP_DirectorySPHelperArray(GetMulti(AQuery,True,N));
end;


Function TSPSPHelpersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectorySPHelperArray; 

var N : String;

begin
  Result:=TSP_DirectorySPHelperArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUsersEntitySet
  --------------------------------------------------------------------}


Class Function TSPUsersEntitySet.ObjectRestKind : String; 

begin
  Result:='Users';
end;

Class Function TSPUsersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryUser;
end;


Function TSPUsersEntitySet.Get(const Id: TGUIDString) : TSP_DirectoryUser; 


begin
  Result:=TSP_DirectoryUser(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPUsersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryUserArray; 


begin
  Result:=TSP_DirectoryUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUsersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryUserArray; 


begin
  Result:=TSP_DirectoryUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUsersEntitySet.ListAll(const AQuery: String) : TSP_DirectoryUserArray; 

var N : String;

begin
  Result:=TSP_DirectoryUserArray(GetMulti(AQuery,True,N));
end;


Function TSPUsersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryUserArray; 

var N : String;

begin
  Result:=TSP_DirectoryUserArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserRequestSchemasEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserRequestSchemasEntitySet.ObjectRestKind : String; 

begin
  Result:='UserRequestSchemas';
end;

Class Function TSPUserRequestSchemasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DirectoryUserRequestSchema;
end;


Function TSPUserRequestSchemasEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_DirectoryUserRequestSchema; 


begin
  Result:=TSP_DirectoryUserRequestSchema(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPUserRequestSchemasEntitySet.List(const AQuery: String; out NextLink: String) : TSP_DirectoryUserRequestSchemaArray; 


begin
  Result:=TSP_DirectoryUserRequestSchemaArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserRequestSchemasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_DirectoryUserRequestSchemaArray; 


begin
  Result:=TSP_DirectoryUserRequestSchemaArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserRequestSchemasEntitySet.ListAll(const AQuery: String) : TSP_DirectoryUserRequestSchemaArray; 

var N : String;

begin
  Result:=TSP_DirectoryUserRequestSchemaArray(GetMulti(AQuery,True,N));
end;


Function TSPUserRequestSchemasEntitySet.ListAll(const AQuery: TQueryParams) : TSP_DirectoryUserRequestSchemaArray; 

var N : String;

begin
  Result:=TSP_DirectoryUserRequestSchemaArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDlpPolicyTipsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDlpPolicyTipsEntitySet.ObjectRestKind : String; 

begin
  Result:='DlpPolicyTips';
end;

Class Function TSPDlpPolicyTipsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPDlpPolicyTip;
end;


Function TSPDlpPolicyTipsEntitySet.Get(const AppliedActionsText: string) : TSPDlpPolicyTip; 


begin
  Result:=TSPDlpPolicyTip(GetSingle(TODataObject.MakeKeyString(AppliedActionsText)));
end;


Function TSPDlpPolicyTipsEntitySet.List(const AQuery: String; out NextLink: String) : TSPDlpPolicyTipArray; 


begin
  Result:=TSPDlpPolicyTipArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDlpPolicyTipsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPDlpPolicyTipArray; 


begin
  Result:=TSPDlpPolicyTipArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDlpPolicyTipsEntitySet.ListAll(const AQuery: String) : TSPDlpPolicyTipArray; 

var N : String;

begin
  Result:=TSPDlpPolicyTipArray(GetMulti(AQuery,True,N));
end;


Function TSPDlpPolicyTipsEntitySet.ListAll(const AQuery: TQueryParams) : TSPDlpPolicyTipArray; 

var N : String;

begin
  Result:=TSPDlpPolicyTipArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPEventReceiverDefinitionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPEventReceiverDefinitionsEntitySet.ObjectRestKind : String; 

begin
  Result:='EventReceiverDefinitions';
end;

Class Function TSPEventReceiverDefinitionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPEventReceiverDefinition;
end;


Function TSPEventReceiverDefinitionsEntitySet.Get(const ReceiverId: TGUIDString) : TSPEventReceiverDefinition; 


begin
  Result:=TSPEventReceiverDefinition(GetSingle(TODataObject.MakeKeyString(ReceiverId)));
end;


Function TSPEventReceiverDefinitionsEntitySet.List(const AQuery: String; out NextLink: String) : TSPEventReceiverDefinitionArray; 


begin
  Result:=TSPEventReceiverDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEventReceiverDefinitionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPEventReceiverDefinitionArray; 


begin
  Result:=TSPEventReceiverDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPEventReceiverDefinitionsEntitySet.ListAll(const AQuery: String) : TSPEventReceiverDefinitionArray; 

var N : String;

begin
  Result:=TSPEventReceiverDefinitionArray(GetMulti(AQuery,True,N));
end;


Function TSPEventReceiverDefinitionsEntitySet.ListAll(const AQuery: TQueryParams) : TSPEventReceiverDefinitionArray; 

var N : String;

begin
  Result:=TSPEventReceiverDefinitionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFeaturesEntitySet
  --------------------------------------------------------------------}


Class Function TSPFeaturesEntitySet.ObjectRestKind : String; 

begin
  Result:='Features';
end;

Class Function TSPFeaturesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPFeature;
end;


Function TSPFeaturesEntitySet.Get(const DefinitionId: TGUIDString) : TSPFeature; 


begin
  Result:=TSPFeature(GetSingle(TODataObject.MakeKeyString(DefinitionId)));
end;


Function TSPFeaturesEntitySet.List(const AQuery: String; out NextLink: String) : TSPFeatureArray; 


begin
  Result:=TSPFeatureArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFeaturesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFeatureArray; 


begin
  Result:=TSPFeatureArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFeaturesEntitySet.ListAll(const AQuery: String) : TSPFeatureArray; 

var N : String;

begin
  Result:=TSPFeatureArray(GetMulti(AQuery,True,N));
end;


Function TSPFeaturesEntitySet.ListAll(const AQuery: TQueryParams) : TSPFeatureArray; 

var N : String;

begin
  Result:=TSPFeatureArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFields1EntitySet
  --------------------------------------------------------------------}


Class Function TSPFields1EntitySet.ObjectRestKind : String; 

begin
  Result:='Fields1';
end;

Class Function TSPFields1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPField;
end;


Function TSPFields1EntitySet.Get(const Id: TGUIDString) : TSPField; 


begin
  Result:=TSPField(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFields1EntitySet.List(const AQuery: String; out NextLink: String) : TSPFieldArray; 


begin
  Result:=TSPFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFields1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFieldArray; 


begin
  Result:=TSPFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFields1EntitySet.ListAll(const AQuery: String) : TSPFieldArray; 

var N : String;

begin
  Result:=TSPFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPFields1EntitySet.ListAll(const AQuery: TQueryParams) : TSPFieldArray; 

var N : String;

begin
  Result:=TSPFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFieldLinksEntitySet
  --------------------------------------------------------------------}


Class Function TSPFieldLinksEntitySet.ObjectRestKind : String; 

begin
  Result:='FieldLinks';
end;

Class Function TSPFieldLinksEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPFieldLink;
end;


Function TSPFieldLinksEntitySet.Get(const Id: TGUIDString) : TSPFieldLink; 


begin
  Result:=TSPFieldLink(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFieldLinksEntitySet.List(const AQuery: String; out NextLink: String) : TSPFieldLinkArray; 


begin
  Result:=TSPFieldLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFieldLinksEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFieldLinkArray; 


begin
  Result:=TSPFieldLinkArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFieldLinksEntitySet.ListAll(const AQuery: String) : TSPFieldLinkArray; 

var N : String;

begin
  Result:=TSPFieldLinkArray(GetMulti(AQuery,True,N));
end;


Function TSPFieldLinksEntitySet.ListAll(const AQuery: TQueryParams) : TSPFieldLinkArray; 

var N : String;

begin
  Result:=TSPFieldLinkArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFieldStringValuessEntitySet
  --------------------------------------------------------------------}


Class Function TSPFieldStringValuessEntitySet.ObjectRestKind : String; 

begin
  Result:='FieldStringValuess';
end;

Class Function TSPFieldStringValuessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPFieldStringValues;
end;


Function TSPFieldStringValuessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPFieldStringValues; 


begin
  Result:=TSPFieldStringValues(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPFieldStringValuessEntitySet.List(const AQuery: String; out NextLink: String) : TSPFieldStringValuesArray; 


begin
  Result:=TSPFieldStringValuesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFieldStringValuessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFieldStringValuesArray; 


begin
  Result:=TSPFieldStringValuesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFieldStringValuessEntitySet.ListAll(const AQuery: String) : TSPFieldStringValuesArray; 

var N : String;

begin
  Result:=TSPFieldStringValuesArray(GetMulti(AQuery,True,N));
end;


Function TSPFieldStringValuessEntitySet.ListAll(const AQuery: TQueryParams) : TSPFieldStringValuesArray; 

var N : String;

begin
  Result:=TSPFieldStringValuesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFiles12EntitySet
  --------------------------------------------------------------------}


Class Function TSPFiles12EntitySet.ObjectRestKind : String; 

begin
  Result:='Files12';
end;

Class Function TSPFiles12EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_File;
end;


Function TSPFiles12EntitySet.Get(const _Name: string) : TSP_File; 


begin
  Result:=TSP_File(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPFiles12EntitySet.List(const AQuery: String; out NextLink: String) : TSP_FileArray; 


begin
  Result:=TSP_FileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFiles12EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_FileArray; 


begin
  Result:=TSP_FileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFiles12EntitySet.ListAll(const AQuery: String) : TSP_FileArray; 

var N : String;

begin
  Result:=TSP_FileArray(GetMulti(AQuery,True,N));
end;


Function TSPFiles12EntitySet.ListAll(const AQuery: TQueryParams) : TSP_FileArray; 

var N : String;

begin
  Result:=TSP_FileArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFileVersionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPFileVersionsEntitySet.ObjectRestKind : String; 

begin
  Result:='FileVersions';
end;

Class Function TSPFileVersionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPFileVersion;
end;


Function TSPFileVersionsEntitySet.Get(const ID: TInt32) : TSPFileVersion; 


begin
  Result:=TSPFileVersion(GetSingle(IntToStr(ID)));
end;


Function TSPFileVersionsEntitySet.List(const AQuery: String; out NextLink: String) : TSPFileVersionArray; 


begin
  Result:=TSPFileVersionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFileVersionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFileVersionArray; 


begin
  Result:=TSPFileVersionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFileVersionsEntitySet.ListAll(const AQuery: String) : TSPFileVersionArray; 

var N : String;

begin
  Result:=TSPFileVersionArray(GetMulti(AQuery,True,N));
end;


Function TSPFileVersionsEntitySet.ListAll(const AQuery: TQueryParams) : TSPFileVersionArray; 

var N : String;

begin
  Result:=TSPFileVersionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFolders1EntitySet
  --------------------------------------------------------------------}


Class Function TSPFolders1EntitySet.ObjectRestKind : String; 

begin
  Result:='Folders1';
end;

Class Function TSPFolders1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPFolder;
end;


Function TSPFolders1EntitySet.Get(const ServerRelativeUrl: string) : TSPFolder; 


begin
  Result:=TSPFolder(GetSingle(TODataObject.MakeKeyString(ServerRelativeUrl)));
end;


Function TSPFolders1EntitySet.List(const AQuery: String; out NextLink: String) : TSPFolderArray; 


begin
  Result:=TSPFolderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFolders1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFolderArray; 


begin
  Result:=TSPFolderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFolders1EntitySet.ListAll(const AQuery: String) : TSPFolderArray; 

var N : String;

begin
  Result:=TSPFolderArray(GetMulti(AQuery,True,N));
end;


Function TSPFolders1EntitySet.ListAll(const AQuery: TQueryParams) : TSPFolderArray; 

var N : String;

begin
  Result:=TSPFolderArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFormsEntitySet
  --------------------------------------------------------------------}


Class Function TSPFormsEntitySet.ObjectRestKind : String; 

begin
  Result:='Forms';
end;

Class Function TSPFormsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPForm;
end;


Function TSPFormsEntitySet.Get(const Id: TGUIDString) : TSPForm; 


begin
  Result:=TSPForm(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPFormsEntitySet.List(const AQuery: String; out NextLink: String) : TSPFormArray; 


begin
  Result:=TSPFormArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFormsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPFormArray; 


begin
  Result:=TSPFormArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFormsEntitySet.ListAll(const AQuery: String) : TSPFormArray; 

var N : String;

begin
  Result:=TSPFormArray(GetMulti(AQuery,True,N));
end;


Function TSPFormsEntitySet.ListAll(const AQuery: TQueryParams) : TSPFormArray; 

var N : String;

begin
  Result:=TSPFormArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPGroups1EntitySet
  --------------------------------------------------------------------}


Class Function TSPGroups1EntitySet.ObjectRestKind : String; 

begin
  Result:='Groups1';
end;

Class Function TSPGroups1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPGroup;
end;


Function TSPGroups1EntitySet.Get(const Id: TInt32) : TSPGroup; 


begin
  Result:=TSPGroup(GetSingle(IntToStr(Id)));
end;


Function TSPGroups1EntitySet.List(const AQuery: String; out NextLink: String) : TSPGroupArray; 


begin
  Result:=TSPGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGroups1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPGroupArray; 


begin
  Result:=TSPGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPGroups1EntitySet.ListAll(const AQuery: String) : TSPGroupArray; 

var N : String;

begin
  Result:=TSPGroupArray(GetMulti(AQuery,True,N));
end;


Function TSPGroups1EntitySet.ListAll(const AQuery: TQueryParams) : TSPGroupArray; 

var N : String;

begin
  Result:=TSPGroupArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPInformationRightsManagementSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPInformationRightsManagementSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='InformationRightsManagementSettingss';
end;

Class Function TSPInformationRightsManagementSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPInformationRightsManagementSettings;
end;


Function TSPInformationRightsManagementSettingssEntitySet.Get(const AllowPrint: boolean) : TSPInformationRightsManagementSettings; 


begin
  Result:=TSPInformationRightsManagementSettings(GetSingle(BoolToStr(AllowPrint,'true','false')));
end;


Function TSPInformationRightsManagementSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPInformationRightsManagementSettingsArray; 


begin
  Result:=TSPInformationRightsManagementSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPInformationRightsManagementSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPInformationRightsManagementSettingsArray; 


begin
  Result:=TSPInformationRightsManagementSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPInformationRightsManagementSettingssEntitySet.ListAll(const AQuery: String) : TSPInformationRightsManagementSettingsArray; 

var N : String;

begin
  Result:=TSPInformationRightsManagementSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPInformationRightsManagementSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPInformationRightsManagementSettingsArray; 

var N : String;

begin
  Result:=TSPInformationRightsManagementSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPListItemsEntitySet
  --------------------------------------------------------------------}


Class Function TSPListItemsEntitySet.ObjectRestKind : String; 

begin
  Result:='ListItems';
end;

Class Function TSPListItemsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPListItem;
end;


Function TSPListItemsEntitySet.Get(const HasUniqueRoleAssignments: boolean) : TSPListItem; 


begin
  Result:=TSPListItem(GetSingle(BoolToStr(HasUniqueRoleAssignments,'true','false')));
end;


Function TSPListItemsEntitySet.List(const AQuery: String; out NextLink: String) : TSPListItemArray; 


begin
  Result:=TSPListItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPListItemsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPListItemArray; 


begin
  Result:=TSPListItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPListItemsEntitySet.ListAll(const AQuery: String) : TSPListItemArray; 

var N : String;

begin
  Result:=TSPListItemArray(GetMulti(AQuery,True,N));
end;


Function TSPListItemsEntitySet.ListAll(const AQuery: TQueryParams) : TSPListItemArray; 

var N : String;

begin
  Result:=TSPListItemArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPListTemplatesEntitySet
  --------------------------------------------------------------------}


Class Function TSPListTemplatesEntitySet.ObjectRestKind : String; 

begin
  Result:='ListTemplates';
end;

Class Function TSPListTemplatesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPListTemplate;
end;


Function TSPListTemplatesEntitySet.Get(const _Name: string) : TSPListTemplate; 


begin
  Result:=TSPListTemplate(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPListTemplatesEntitySet.List(const AQuery: String; out NextLink: String) : TSPListTemplateArray; 


begin
  Result:=TSPListTemplateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPListTemplatesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPListTemplateArray; 


begin
  Result:=TSPListTemplateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPListTemplatesEntitySet.ListAll(const AQuery: String) : TSPListTemplateArray; 

var N : String;

begin
  Result:=TSPListTemplateArray(GetMulti(AQuery,True,N));
end;


Function TSPListTemplatesEntitySet.ListAll(const AQuery: TQueryParams) : TSPListTemplateArray; 

var N : String;

begin
  Result:=TSPListTemplateArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMicrofeedAttachmentStoresEntitySet
  --------------------------------------------------------------------}


Class Function TSPMicrofeedAttachmentStoresEntitySet.ObjectRestKind : String; 

begin
  Result:='MicrofeedAttachmentStores';
end;

Class Function TSPMicrofeedAttachmentStoresEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_MicrofeedMicrofeedAttachmentStore;
end;


Function TSPMicrofeedAttachmentStoresEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_MicrofeedMicrofeedAttachmentStore; 


begin
  Result:=TSP_MicrofeedMicrofeedAttachmentStore(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMicrofeedAttachmentStoresEntitySet.List(const AQuery: String; out NextLink: String) : TSP_MicrofeedMicrofeedAttachmentStoreArray; 


begin
  Result:=TSP_MicrofeedMicrofeedAttachmentStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedAttachmentStoresEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_MicrofeedMicrofeedAttachmentStoreArray; 


begin
  Result:=TSP_MicrofeedMicrofeedAttachmentStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedAttachmentStoresEntitySet.ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedAttachmentStoreArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedAttachmentStoreArray(GetMulti(AQuery,True,N));
end;


Function TSPMicrofeedAttachmentStoresEntitySet.ListAll(const AQuery: TQueryParams) : TSP_MicrofeedMicrofeedAttachmentStoreArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedAttachmentStoreArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMicrofeedDatasEntitySet
  --------------------------------------------------------------------}


Class Function TSPMicrofeedDatasEntitySet.ObjectRestKind : String; 

begin
  Result:='MicrofeedDatas';
end;

Class Function TSPMicrofeedDatasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_MicrofeedMicrofeedData;
end;


Function TSPMicrofeedDatasEntitySet.Get(const Created: TDateTime) : TSP_MicrofeedMicrofeedData; 


begin
  Result:=TSP_MicrofeedMicrofeedData(GetSingle(FormatDateTime('yyyy-mm-dd"T"hhmmss',Created)));
end;


Function TSPMicrofeedDatasEntitySet.List(const AQuery: String; out NextLink: String) : TSP_MicrofeedMicrofeedDataArray; 


begin
  Result:=TSP_MicrofeedMicrofeedDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedDatasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_MicrofeedMicrofeedDataArray; 


begin
  Result:=TSP_MicrofeedMicrofeedDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedDatasEntitySet.ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedDataArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedDataArray(GetMulti(AQuery,True,N));
end;


Function TSPMicrofeedDatasEntitySet.ListAll(const AQuery: TQueryParams) : TSP_MicrofeedMicrofeedDataArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedDataArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMicrofeedManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPMicrofeedManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='MicrofeedManagers';
end;

Class Function TSPMicrofeedManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_MicrofeedMicrofeedManager;
end;


Function TSPMicrofeedManagersEntitySet.Get(const IsFeedActivityPublic: boolean) : TSP_MicrofeedMicrofeedManager; 


begin
  Result:=TSP_MicrofeedMicrofeedManager(GetSingle(BoolToStr(IsFeedActivityPublic,'true','false')));
end;


Function TSPMicrofeedManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_MicrofeedMicrofeedManagerArray; 


begin
  Result:=TSP_MicrofeedMicrofeedManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_MicrofeedMicrofeedManagerArray; 


begin
  Result:=TSP_MicrofeedMicrofeedManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedManagersEntitySet.ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedManagerArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPMicrofeedManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_MicrofeedMicrofeedManagerArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMicrofeedPostDefinitionManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPMicrofeedPostDefinitionManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostDefinitionManagers';
end;

Class Function TSPMicrofeedPostDefinitionManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_MicrofeedMicrofeedPostDefinitionManager;
end;


Function TSPMicrofeedPostDefinitionManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_MicrofeedMicrofeedPostDefinitionManager; 


begin
  Result:=TSP_MicrofeedMicrofeedPostDefinitionManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMicrofeedPostDefinitionManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_MicrofeedMicrofeedPostDefinitionManagerArray; 


begin
  Result:=TSP_MicrofeedMicrofeedPostDefinitionManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedPostDefinitionManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_MicrofeedMicrofeedPostDefinitionManagerArray; 


begin
  Result:=TSP_MicrofeedMicrofeedPostDefinitionManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedPostDefinitionManagersEntitySet.ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedPostDefinitionManagerArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedPostDefinitionManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPMicrofeedPostDefinitionManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_MicrofeedMicrofeedPostDefinitionManagerArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedPostDefinitionManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMicrofeedPostOptionCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMicrofeedPostOptionCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='MicrofeedPostOptionCollections';
end;

Class Function TSPMicrofeedPostOptionCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_MicrofeedMicrofeedPostOptionCollection;
end;


Function TSPMicrofeedPostOptionCollectionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_MicrofeedMicrofeedPostOptionCollection; 


begin
  Result:=TSP_MicrofeedMicrofeedPostOptionCollection(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMicrofeedPostOptionCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_MicrofeedMicrofeedPostOptionCollectionArray; 


begin
  Result:=TSP_MicrofeedMicrofeedPostOptionCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedPostOptionCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_MicrofeedMicrofeedPostOptionCollectionArray; 


begin
  Result:=TSP_MicrofeedMicrofeedPostOptionCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedPostOptionCollectionsEntitySet.ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedPostOptionCollectionArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedPostOptionCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPMicrofeedPostOptionCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_MicrofeedMicrofeedPostOptionCollectionArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedPostOptionCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMicrofeedStoresEntitySet
  --------------------------------------------------------------------}


Class Function TSPMicrofeedStoresEntitySet.ObjectRestKind : String; 

begin
  Result:='MicrofeedStores';
end;

Class Function TSPMicrofeedStoresEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_MicrofeedMicrofeedStore;
end;


Function TSPMicrofeedStoresEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_MicrofeedMicrofeedStore; 


begin
  Result:=TSP_MicrofeedMicrofeedStore(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMicrofeedStoresEntitySet.List(const AQuery: String; out NextLink: String) : TSP_MicrofeedMicrofeedStoreArray; 


begin
  Result:=TSP_MicrofeedMicrofeedStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedStoresEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_MicrofeedMicrofeedStoreArray; 


begin
  Result:=TSP_MicrofeedMicrofeedStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMicrofeedStoresEntitySet.ListAll(const AQuery: String) : TSP_MicrofeedMicrofeedStoreArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedStoreArray(GetMulti(AQuery,True,N));
end;


Function TSPMicrofeedStoresEntitySet.ListAll(const AQuery: TQueryParams) : TSP_MicrofeedMicrofeedStoreArray; 

var N : String;

begin
  Result:=TSP_MicrofeedMicrofeedStoreArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMountedFolderInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPMountedFolderInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='MountedFolderInfos';
end;

Class Function TSPMountedFolderInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPMountedFolderInfo;
end;


Function TSPMountedFolderInfosEntitySet.Get(const FolderUrl: string) : TSPMountedFolderInfo; 


begin
  Result:=TSPMountedFolderInfo(GetSingle(TODataObject.MakeKeyString(FolderUrl)));
end;


Function TSPMountedFolderInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSPMountedFolderInfoArray; 


begin
  Result:=TSPMountedFolderInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMountedFolderInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPMountedFolderInfoArray; 


begin
  Result:=TSPMountedFolderInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMountedFolderInfosEntitySet.ListAll(const AQuery: String) : TSPMountedFolderInfoArray; 

var N : String;

begin
  Result:=TSPMountedFolderInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPMountedFolderInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSPMountedFolderInfoArray; 

var N : String;

begin
  Result:=TSPMountedFolderInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMountPointsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMountPointsEntitySet.ObjectRestKind : String; 

begin
  Result:='MountPoints';
end;

Class Function TSPMountPointsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPMountPoint;
end;


Function TSPMountPointsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPMountPoint; 


begin
  Result:=TSPMountPoint(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMountPointsEntitySet.List(const AQuery: String; out NextLink: String) : TSPMountPointArray; 


begin
  Result:=TSPMountPointArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMountPointsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPMountPointArray; 


begin
  Result:=TSPMountPointArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMountPointsEntitySet.ListAll(const AQuery: String) : TSPMountPointArray; 

var N : String;

begin
  Result:=TSPMountPointArray(GetMulti(AQuery,True,N));
end;


Function TSPMountPointsEntitySet.ListAll(const AQuery: TQueryParams) : TSPMountPointArray; 

var N : String;

begin
  Result:=TSPMountPointArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMountPointInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPMountPointInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='MountPointInfos';
end;

Class Function TSPMountPointInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPMountPointInfo;
end;


Function TSPMountPointInfosEntitySet.Get(const _Name: string) : TSPMountPointInfo; 


begin
  Result:=TSPMountPointInfo(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPMountPointInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSPMountPointInfoArray; 


begin
  Result:=TSPMountPointInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMountPointInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPMountPointInfoArray; 


begin
  Result:=TSPMountPointInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMountPointInfosEntitySet.ListAll(const AQuery: String) : TSPMountPointInfoArray; 

var N : String;

begin
  Result:=TSPMountPointInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPMountPointInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSPMountPointInfoArray; 

var N : String;

begin
  Result:=TSPMountPointInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMoveCopyUtilsEntitySet
  --------------------------------------------------------------------}


Class Function TSPMoveCopyUtilsEntitySet.ObjectRestKind : String; 

begin
  Result:='MoveCopyUtils';
end;

Class Function TSPMoveCopyUtilsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPMoveCopyUtil;
end;


Function TSPMoveCopyUtilsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPMoveCopyUtil; 


begin
  Result:=TSPMoveCopyUtil(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMoveCopyUtilsEntitySet.List(const AQuery: String; out NextLink: String) : TSPMoveCopyUtilArray; 


begin
  Result:=TSPMoveCopyUtilArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMoveCopyUtilsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPMoveCopyUtilArray; 


begin
  Result:=TSPMoveCopyUtilArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMoveCopyUtilsEntitySet.ListAll(const AQuery: String) : TSPMoveCopyUtilArray; 

var N : String;

begin
  Result:=TSPMoveCopyUtilArray(GetMulti(AQuery,True,N));
end;


Function TSPMoveCopyUtilsEntitySet.ListAll(const AQuery: TQueryParams) : TSPMoveCopyUtilArray; 

var N : String;

begin
  Result:=TSPMoveCopyUtilArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNavigationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPNavigationsEntitySet.ObjectRestKind : String; 

begin
  Result:='Navigations';
end;

Class Function TSPNavigationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPNavigation;
end;


Function TSPNavigationsEntitySet.Get(const UseShared: boolean) : TSPNavigation; 


begin
  Result:=TSPNavigation(GetSingle(BoolToStr(UseShared,'true','false')));
end;


Function TSPNavigationsEntitySet.List(const AQuery: String; out NextLink: String) : TSPNavigationArray; 


begin
  Result:=TSPNavigationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNavigationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPNavigationArray; 


begin
  Result:=TSPNavigationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNavigationsEntitySet.ListAll(const AQuery: String) : TSPNavigationArray; 

var N : String;

begin
  Result:=TSPNavigationArray(GetMulti(AQuery,True,N));
end;


Function TSPNavigationsEntitySet.ListAll(const AQuery: TQueryParams) : TSPNavigationArray; 

var N : String;

begin
  Result:=TSPNavigationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNavigationNodesEntitySet
  --------------------------------------------------------------------}


Class Function TSPNavigationNodesEntitySet.ObjectRestKind : String; 

begin
  Result:='NavigationNodes';
end;

Class Function TSPNavigationNodesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPNavigationNode;
end;


Function TSPNavigationNodesEntitySet.Get(const Id: TInt32) : TSPNavigationNode; 


begin
  Result:=TSPNavigationNode(GetSingle(IntToStr(Id)));
end;


Function TSPNavigationNodesEntitySet.List(const AQuery: String; out NextLink: String) : TSPNavigationNodeArray; 


begin
  Result:=TSPNavigationNodeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNavigationNodesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPNavigationNodeArray; 


begin
  Result:=TSPNavigationNodeArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNavigationNodesEntitySet.ListAll(const AQuery: String) : TSPNavigationNodeArray; 

var N : String;

begin
  Result:=TSPNavigationNodeArray(GetMulti(AQuery,True,N));
end;


Function TSPNavigationNodesEntitySet.ListAll(const AQuery: TQueryParams) : TSPNavigationNodeArray; 

var N : String;

begin
  Result:=TSPNavigationNodeArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNativeClientsEntitySet
  --------------------------------------------------------------------}


Class Function TSPNativeClientsEntitySet.ObjectRestKind : String; 

begin
  Result:='NativeClients';
end;

Class Function TSPNativeClientsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_OAuthNativeClient;
end;


Function TSPNativeClientsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_OAuthNativeClient; 


begin
  Result:=TSP_OAuthNativeClient(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPNativeClientsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_OAuthNativeClientArray; 


begin
  Result:=TSP_OAuthNativeClientArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNativeClientsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_OAuthNativeClientArray; 


begin
  Result:=TSP_OAuthNativeClientArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNativeClientsEntitySet.ListAll(const AQuery: String) : TSP_OAuthNativeClientArray; 

var N : String;

begin
  Result:=TSP_OAuthNativeClientArray(GetMulti(AQuery,True,N));
end;


Function TSPNativeClientsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_OAuthNativeClientArray; 

var N : String;

begin
  Result:=TSP_OAuthNativeClientArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPObjectSharingInformationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPObjectSharingInformationsEntitySet.ObjectRestKind : String; 

begin
  Result:='ObjectSharingInformations';
end;

Class Function TSPObjectSharingInformationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPObjectSharingInformation;
end;


Function TSPObjectSharingInformationsEntitySet.Get(const AnonymousEditLink: string) : TSPObjectSharingInformation; 


begin
  Result:=TSPObjectSharingInformation(GetSingle(TODataObject.MakeKeyString(AnonymousEditLink)));
end;


Function TSPObjectSharingInformationsEntitySet.List(const AQuery: String; out NextLink: String) : TSPObjectSharingInformationArray; 


begin
  Result:=TSPObjectSharingInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPObjectSharingInformationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPObjectSharingInformationArray; 


begin
  Result:=TSPObjectSharingInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPObjectSharingInformationsEntitySet.ListAll(const AQuery: String) : TSPObjectSharingInformationArray; 

var N : String;

begin
  Result:=TSPObjectSharingInformationArray(GetMulti(AQuery,True,N));
end;


Function TSPObjectSharingInformationsEntitySet.ListAll(const AQuery: TQueryParams) : TSPObjectSharingInformationArray; 

var N : String;

begin
  Result:=TSPObjectSharingInformationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPObjectSharingInformationUsersEntitySet
  --------------------------------------------------------------------}


Class Function TSPObjectSharingInformationUsersEntitySet.ObjectRestKind : String; 

begin
  Result:='ObjectSharingInformationUsers';
end;

Class Function TSPObjectSharingInformationUsersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPObjectSharingInformationUser;
end;


Function TSPObjectSharingInformationUsersEntitySet.Get(const Id: TInt32) : TSPObjectSharingInformationUser; 


begin
  Result:=TSPObjectSharingInformationUser(GetSingle(IntToStr(Id)));
end;


Function TSPObjectSharingInformationUsersEntitySet.List(const AQuery: String; out NextLink: String) : TSPObjectSharingInformationUserArray; 


begin
  Result:=TSPObjectSharingInformationUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPObjectSharingInformationUsersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPObjectSharingInformationUserArray; 


begin
  Result:=TSPObjectSharingInformationUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPObjectSharingInformationUsersEntitySet.ListAll(const AQuery: String) : TSPObjectSharingInformationUserArray; 

var N : String;

begin
  Result:=TSPObjectSharingInformationUserArray(GetMulti(AQuery,True,N));
end;


Function TSPObjectSharingInformationUsersEntitySet.ListAll(const AQuery: TQueryParams) : TSPObjectSharingInformationUserArray; 

var N : String;

begin
  Result:=TSPObjectSharingInformationUserArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPObjectSharingSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPObjectSharingSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='ObjectSharingSettingss';
end;

Class Function TSPObjectSharingSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPObjectSharingSettings;
end;


Function TSPObjectSharingSettingssEntitySet.Get(const AccessRequestMode: boolean) : TSPObjectSharingSettings; 


begin
  Result:=TSPObjectSharingSettings(GetSingle(BoolToStr(AccessRequestMode,'true','false')));
end;


Function TSPObjectSharingSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPObjectSharingSettingsArray; 


begin
  Result:=TSPObjectSharingSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPObjectSharingSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPObjectSharingSettingsArray; 


begin
  Result:=TSPObjectSharingSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPObjectSharingSettingssEntitySet.ListAll(const AQuery: String) : TSPObjectSharingSettingsArray; 

var N : String;

begin
  Result:=TSPObjectSharingSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPObjectSharingSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPObjectSharingSettingsArray; 

var N : String;

begin
  Result:=TSPObjectSharingSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPClickManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPClickManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='ClickManagers';
end;

Class Function TSPClickManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PageInstrumentationClickManager;
end;


Function TSPClickManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_PageInstrumentationClickManager; 


begin
  Result:=TSP_PageInstrumentationClickManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPClickManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PageInstrumentationClickManagerArray; 


begin
  Result:=TSP_PageInstrumentationClickManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPClickManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PageInstrumentationClickManagerArray; 


begin
  Result:=TSP_PageInstrumentationClickManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPClickManagersEntitySet.ListAll(const AQuery: String) : TSP_PageInstrumentationClickManagerArray; 

var N : String;

begin
  Result:=TSP_PageInstrumentationClickManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPClickManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PageInstrumentationClickManagerArray; 

var N : String;

begin
  Result:=TSP_PageInstrumentationClickManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPickerSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPPickerSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='PickerSettingss';
end;

Class Function TSPPickerSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPPickerSettings;
end;


Function TSPPickerSettingssEntitySet.Get(const AllowEmailAddresses: boolean) : TSPPickerSettings; 


begin
  Result:=TSPPickerSettings(GetSingle(BoolToStr(AllowEmailAddresses,'true','false')));
end;


Function TSPPickerSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPPickerSettingsArray; 


begin
  Result:=TSPPickerSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPickerSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPPickerSettingsArray; 


begin
  Result:=TSPPickerSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPickerSettingssEntitySet.ListAll(const AQuery: String) : TSPPickerSettingsArray; 

var N : String;

begin
  Result:=TSPPickerSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPPickerSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPPickerSettingsArray; 

var N : String;

begin
  Result:=TSPPickerSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPrincipalsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPrincipalsEntitySet.ObjectRestKind : String; 

begin
  Result:='Principals';
end;

Class Function TSPPrincipalsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPPrincipal;
end;


Function TSPPrincipalsEntitySet.Get(const Id: TInt32) : TSPPrincipal; 


begin
  Result:=TSPPrincipal(GetSingle(IntToStr(Id)));
end;


Function TSPPrincipalsEntitySet.List(const AQuery: String; out NextLink: String) : TSPPrincipalArray; 


begin
  Result:=TSPPrincipalArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPrincipalsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPPrincipalArray; 


begin
  Result:=TSPPrincipalArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPrincipalsEntitySet.ListAll(const AQuery: String) : TSPPrincipalArray; 

var N : String;

begin
  Result:=TSPPrincipalArray(GetMulti(AQuery,True,N));
end;


Function TSPPrincipalsEntitySet.ListAll(const AQuery: TQueryParams) : TSPPrincipalArray; 

var N : String;

begin
  Result:=TSPPrincipalArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPropertyValuessEntitySet
  --------------------------------------------------------------------}


Class Function TSPPropertyValuessEntitySet.ObjectRestKind : String; 

begin
  Result:='PropertyValuess';
end;

Class Function TSPPropertyValuessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPPropertyValues;
end;


Function TSPPropertyValuessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPPropertyValues; 


begin
  Result:=TSPPropertyValues(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPropertyValuessEntitySet.List(const AQuery: String; out NextLink: String) : TSPPropertyValuesArray; 


begin
  Result:=TSPPropertyValuesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPropertyValuessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPPropertyValuesArray; 


begin
  Result:=TSPPropertyValuesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPropertyValuessEntitySet.ListAll(const AQuery: String) : TSPPropertyValuesArray; 

var N : String;

begin
  Result:=TSPPropertyValuesArray(GetMulti(AQuery,True,N));
end;


Function TSPPropertyValuessEntitySet.ListAll(const AQuery: TQueryParams) : TSPPropertyValuesArray; 

var N : String;

begin
  Result:=TSPPropertyValuesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPersonMagazinesEntitySet
  --------------------------------------------------------------------}


Class Function TSPPersonMagazinesEntitySet.ObjectRestKind : String; 

begin
  Result:='PersonMagazines';
end;

Class Function TSPPersonMagazinesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPersonMagazine;
end;


Function TSPPersonMagazinesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_PublishingPersonMagazine; 


begin
  Result:=TSP_PublishingPersonMagazine(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPersonMagazinesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPersonMagazineArray; 


begin
  Result:=TSP_PublishingPersonMagazineArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPersonMagazinesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPersonMagazineArray; 


begin
  Result:=TSP_PublishingPersonMagazineArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPersonMagazinesEntitySet.ListAll(const AQuery: String) : TSP_PublishingPersonMagazineArray; 

var N : String;

begin
  Result:=TSP_PublishingPersonMagazineArray(GetMulti(AQuery,True,N));
end;


Function TSPPersonMagazinesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPersonMagazineArray; 

var N : String;

begin
  Result:=TSP_PublishingPersonMagazineArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingDocPropssEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingDocPropssEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingDocPropss';
end;

Class Function TSPPointPublishingDocPropssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingDocProps;
end;


Function TSPPointPublishingDocPropssEntitySet.Get(const Author: string) : TSP_PublishingPointPublishingDocProps; 


begin
  Result:=TSP_PublishingPointPublishingDocProps(GetSingle(TODataObject.MakeKeyString(Author)));
end;


Function TSPPointPublishingDocPropssEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingDocPropsArray; 


begin
  Result:=TSP_PublishingPointPublishingDocPropsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingDocPropssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingDocPropsArray; 


begin
  Result:=TSP_PublishingPointPublishingDocPropsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingDocPropssEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingDocPropsArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingDocPropsArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingDocPropssEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingDocPropsArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingDocPropsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingMagazinePropssEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingMagazinePropssEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingMagazinePropss';
end;

Class Function TSPPointPublishingMagazinePropssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingMagazineProps;
end;


Function TSPPointPublishingMagazinePropssEntitySet.Get(const BannerColor: string) : TSP_PublishingPointPublishingMagazineProps; 


begin
  Result:=TSP_PublishingPointPublishingMagazineProps(GetSingle(TODataObject.MakeKeyString(BannerColor)));
end;


Function TSPPointPublishingMagazinePropssEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingMagazinePropsArray; 


begin
  Result:=TSP_PublishingPointPublishingMagazinePropsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingMagazinePropssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingMagazinePropsArray; 


begin
  Result:=TSP_PublishingPointPublishingMagazinePropsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingMagazinePropssEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingMagazinePropsArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingMagazinePropsArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingMagazinePropssEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingMagazinePropsArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingMagazinePropsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingPostsEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingPostsEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingPosts';
end;

Class Function TSPPointPublishingPostsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingPost;
end;


Function TSPPointPublishingPostsEntitySet.Get(const Id: TInt32) : TSP_PublishingPointPublishingPost; 


begin
  Result:=TSP_PublishingPointPublishingPost(GetSingle(IntToStr(Id)));
end;


Function TSPPointPublishingPostsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingPostArray; 


begin
  Result:=TSP_PublishingPointPublishingPostArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingPostsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingPostArray; 


begin
  Result:=TSP_PublishingPointPublishingPostArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingPostsEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingPostArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingPostArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingPostsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingPostArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingPostArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingPostServiceManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingPostServiceManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingPostServiceManagers';
end;

Class Function TSPPointPublishingPostServiceManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingPostServiceManager;
end;


Function TSPPointPublishingPostServiceManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_PublishingPointPublishingPostServiceManager; 


begin
  Result:=TSP_PublishingPointPublishingPostServiceManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPointPublishingPostServiceManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingPostServiceManagerArray; 


begin
  Result:=TSP_PublishingPointPublishingPostServiceManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingPostServiceManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingPostServiceManagerArray; 


begin
  Result:=TSP_PublishingPointPublishingPostServiceManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingPostServiceManagersEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingPostServiceManagerArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingPostServiceManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingPostServiceManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingPostServiceManagerArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingPostServiceManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingSiteManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingSiteManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingSiteManagers';
end;

Class Function TSPPointPublishingSiteManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingSiteManager;
end;


Function TSPPointPublishingSiteManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_PublishingPointPublishingSiteManager; 


begin
  Result:=TSP_PublishingPointPublishingSiteManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPPointPublishingSiteManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingSiteManagerArray; 


begin
  Result:=TSP_PublishingPointPublishingSiteManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingSiteManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingSiteManagerArray; 


begin
  Result:=TSP_PublishingPointPublishingSiteManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingSiteManagersEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingSiteManagerArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingSiteManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingSiteManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingSiteManagerArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingSiteManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingSiteStatussEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingSiteStatussEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingSiteStatuss';
end;

Class Function TSPPointPublishingSiteStatussEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingSiteStatus;
end;


Function TSPPointPublishingSiteStatussEntitySet.Get(const FriendlyUrl: string) : TSP_PublishingPointPublishingSiteStatus; 


begin
  Result:=TSP_PublishingPointPublishingSiteStatus(GetSingle(TODataObject.MakeKeyString(FriendlyUrl)));
end;


Function TSPPointPublishingSiteStatussEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingSiteStatusArray; 


begin
  Result:=TSP_PublishingPointPublishingSiteStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingSiteStatussEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingSiteStatusArray; 


begin
  Result:=TSP_PublishingPointPublishingSiteStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingSiteStatussEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingSiteStatusArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingSiteStatusArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingSiteStatussEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingSiteStatusArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingSiteStatusArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPointPublishingUsersEntitySet
  --------------------------------------------------------------------}


Class Function TSPPointPublishingUsersEntitySet.ObjectRestKind : String; 

begin
  Result:='PointPublishingUsers';
end;

Class Function TSPPointPublishingUsersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingPointPublishingUser;
end;


Function TSPPointPublishingUsersEntitySet.Get(const _Name: string) : TSP_PublishingPointPublishingUser; 


begin
  Result:=TSP_PublishingPointPublishingUser(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPPointPublishingUsersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingPointPublishingUserArray; 


begin
  Result:=TSP_PublishingPointPublishingUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingUsersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingPointPublishingUserArray; 


begin
  Result:=TSP_PublishingPointPublishingUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPointPublishingUsersEntitySet.ListAll(const AQuery: String) : TSP_PublishingPointPublishingUserArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingUserArray(GetMulti(AQuery,True,N));
end;


Function TSPPointPublishingUsersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingPointPublishingUserArray; 

var N : String;

begin
  Result:=TSP_PublishingPointPublishingUserArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSearchsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSearchsEntitySet.ObjectRestKind : String; 

begin
  Result:='Searchs';
end;

Class Function TSPSearchsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingSearch;
end;


Function TSPSearchsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_PublishingSearch; 


begin
  Result:=TSP_PublishingSearch(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSearchsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingSearchArray; 


begin
  Result:=TSP_PublishingSearchArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSearchsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingSearchArray; 


begin
  Result:=TSP_PublishingSearchArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSearchsEntitySet.ListAll(const AQuery: String) : TSP_PublishingSearchArray; 

var N : String;

begin
  Result:=TSP_PublishingSearchArray(GetMulti(AQuery,True,N));
end;


Function TSPSearchsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingSearchArray; 

var N : String;

begin
  Result:=TSP_PublishingSearchArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSpotlightChannelsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSpotlightChannelsEntitySet.ObjectRestKind : String; 

begin
  Result:='SpotlightChannels';
end;

Class Function TSPSpotlightChannelsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingSpotlightChannel;
end;


Function TSPSpotlightChannelsEntitySet.Get(const Id: TInt32) : TSP_PublishingSpotlightChannel; 


begin
  Result:=TSP_PublishingSpotlightChannel(GetSingle(IntToStr(Id)));
end;


Function TSPSpotlightChannelsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingSpotlightChannelArray; 


begin
  Result:=TSP_PublishingSpotlightChannelArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSpotlightChannelsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingSpotlightChannelArray; 


begin
  Result:=TSP_PublishingSpotlightChannelArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSpotlightChannelsEntitySet.ListAll(const AQuery: String) : TSP_PublishingSpotlightChannelArray; 

var N : String;

begin
  Result:=TSP_PublishingSpotlightChannelArray(GetMulti(AQuery,True,N));
end;


Function TSPSpotlightChannelsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingSpotlightChannelArray; 

var N : String;

begin
  Result:=TSP_PublishingSpotlightChannelArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSpotlightVideosEntitySet
  --------------------------------------------------------------------}


Class Function TSPSpotlightVideosEntitySet.ObjectRestKind : String; 

begin
  Result:='SpotlightVideos';
end;

Class Function TSPSpotlightVideosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingSpotlightVideo;
end;


Function TSPSpotlightVideosEntitySet.Get(const Id: TInt32) : TSP_PublishingSpotlightVideo; 


begin
  Result:=TSP_PublishingSpotlightVideo(GetSingle(IntToStr(Id)));
end;


Function TSPSpotlightVideosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingSpotlightVideoArray; 


begin
  Result:=TSP_PublishingSpotlightVideoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSpotlightVideosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingSpotlightVideoArray; 


begin
  Result:=TSP_PublishingSpotlightVideoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSpotlightVideosEntitySet.ListAll(const AQuery: String) : TSP_PublishingSpotlightVideoArray; 

var N : String;

begin
  Result:=TSP_PublishingSpotlightVideoArray(GetMulti(AQuery,True,N));
end;


Function TSPSpotlightVideosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingSpotlightVideoArray; 

var N : String;

begin
  Result:=TSP_PublishingSpotlightVideoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPVideoChannelsEntitySet
  --------------------------------------------------------------------}


Class Function TSPVideoChannelsEntitySet.ObjectRestKind : String; 

begin
  Result:='VideoChannels';
end;

Class Function TSPVideoChannelsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingVideoChannel;
end;


Function TSPVideoChannelsEntitySet.Get(const Id: TGUIDString) : TSP_PublishingVideoChannel; 


begin
  Result:=TSP_PublishingVideoChannel(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPVideoChannelsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingVideoChannelArray; 


begin
  Result:=TSP_PublishingVideoChannelArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoChannelsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingVideoChannelArray; 


begin
  Result:=TSP_PublishingVideoChannelArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoChannelsEntitySet.ListAll(const AQuery: String) : TSP_PublishingVideoChannelArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoChannelArray(GetMulti(AQuery,True,N));
end;


Function TSPVideoChannelsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingVideoChannelArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoChannelArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPVideoItemsEntitySet
  --------------------------------------------------------------------}


Class Function TSPVideoItemsEntitySet.ObjectRestKind : String; 

begin
  Result:='VideoItems';
end;

Class Function TSPVideoItemsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingVideoItem;
end;


Function TSPVideoItemsEntitySet.Get(const ID: TGUIDString) : TSP_PublishingVideoItem; 


begin
  Result:=TSP_PublishingVideoItem(GetSingle(TODataObject.MakeKeyString(ID)));
end;


Function TSPVideoItemsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingVideoItemArray; 


begin
  Result:=TSP_PublishingVideoItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoItemsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingVideoItemArray; 


begin
  Result:=TSP_PublishingVideoItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoItemsEntitySet.ListAll(const AQuery: String) : TSP_PublishingVideoItemArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoItemArray(GetMulti(AQuery,True,N));
end;


Function TSPVideoItemsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingVideoItemArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoItemArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPVideoPermissionGroupsEntitySet
  --------------------------------------------------------------------}


Class Function TSPVideoPermissionGroupsEntitySet.ObjectRestKind : String; 

begin
  Result:='VideoPermissionGroups';
end;

Class Function TSPVideoPermissionGroupsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingVideoPermissionGroup;
end;


Function TSPVideoPermissionGroupsEntitySet.Get(const Id: TInt32) : TSP_PublishingVideoPermissionGroup; 


begin
  Result:=TSP_PublishingVideoPermissionGroup(GetSingle(IntToStr(Id)));
end;


Function TSPVideoPermissionGroupsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingVideoPermissionGroupArray; 


begin
  Result:=TSP_PublishingVideoPermissionGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoPermissionGroupsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingVideoPermissionGroupArray; 


begin
  Result:=TSP_PublishingVideoPermissionGroupArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoPermissionGroupsEntitySet.ListAll(const AQuery: String) : TSP_PublishingVideoPermissionGroupArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoPermissionGroupArray(GetMulti(AQuery,True,N));
end;


Function TSPVideoPermissionGroupsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingVideoPermissionGroupArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoPermissionGroupArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPVideoServiceDiscoverersEntitySet
  --------------------------------------------------------------------}


Class Function TSPVideoServiceDiscoverersEntitySet.ObjectRestKind : String; 

begin
  Result:='VideoServiceDiscoverers';
end;

Class Function TSPVideoServiceDiscoverersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingVideoServiceDiscoverer;
end;


Function TSPVideoServiceDiscoverersEntitySet.Get(const ChannelUrlTemplate: string) : TSP_PublishingVideoServiceDiscoverer; 


begin
  Result:=TSP_PublishingVideoServiceDiscoverer(GetSingle(TODataObject.MakeKeyString(ChannelUrlTemplate)));
end;


Function TSPVideoServiceDiscoverersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingVideoServiceDiscovererArray; 


begin
  Result:=TSP_PublishingVideoServiceDiscovererArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoServiceDiscoverersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingVideoServiceDiscovererArray; 


begin
  Result:=TSP_PublishingVideoServiceDiscovererArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoServiceDiscoverersEntitySet.ListAll(const AQuery: String) : TSP_PublishingVideoServiceDiscovererArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoServiceDiscovererArray(GetMulti(AQuery,True,N));
end;


Function TSPVideoServiceDiscoverersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingVideoServiceDiscovererArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoServiceDiscovererArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPVideoServiceManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPVideoServiceManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='VideoServiceManagers';
end;

Class Function TSPVideoServiceManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_PublishingVideoServiceManager;
end;


Function TSPVideoServiceManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_PublishingVideoServiceManager; 


begin
  Result:=TSP_PublishingVideoServiceManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPVideoServiceManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_PublishingVideoServiceManagerArray; 


begin
  Result:=TSP_PublishingVideoServiceManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoServiceManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_PublishingVideoServiceManagerArray; 


begin
  Result:=TSP_PublishingVideoServiceManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVideoServiceManagersEntitySet.ListAll(const AQuery: String) : TSP_PublishingVideoServiceManagerArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoServiceManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPVideoServiceManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_PublishingVideoServiceManagerArray; 

var N : String;

begin
  Result:=TSP_PublishingVideoServiceManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPushNotificationSubscribersEntitySet
  --------------------------------------------------------------------}


Class Function TSPPushNotificationSubscribersEntitySet.ObjectRestKind : String; 

begin
  Result:='PushNotificationSubscribers';
end;

Class Function TSPPushNotificationSubscribersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPPushNotificationSubscriber;
end;


Function TSPPushNotificationSubscribersEntitySet.Get(const CustomArgs: string) : TSPPushNotificationSubscriber; 


begin
  Result:=TSPPushNotificationSubscriber(GetSingle(TODataObject.MakeKeyString(CustomArgs)));
end;


Function TSPPushNotificationSubscribersEntitySet.List(const AQuery: String; out NextLink: String) : TSPPushNotificationSubscriberArray; 


begin
  Result:=TSPPushNotificationSubscriberArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPushNotificationSubscribersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPPushNotificationSubscriberArray; 


begin
  Result:=TSPPushNotificationSubscriberArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPushNotificationSubscribersEntitySet.ListAll(const AQuery: String) : TSPPushNotificationSubscriberArray; 

var N : String;

begin
  Result:=TSPPushNotificationSubscriberArray(GetMulti(AQuery,True,N));
end;


Function TSPPushNotificationSubscribersEntitySet.ListAll(const AQuery: TQueryParams) : TSPPushNotificationSubscriberArray; 

var N : String;

begin
  Result:=TSPPushNotificationSubscriberArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRecycleBinItemsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRecycleBinItemsEntitySet.ObjectRestKind : String; 

begin
  Result:='RecycleBinItems';
end;

Class Function TSPRecycleBinItemsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRecycleBinItem;
end;


Function TSPRecycleBinItemsEntitySet.Get(const Id: TGUIDString) : TSPRecycleBinItem; 


begin
  Result:=TSPRecycleBinItem(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPRecycleBinItemsEntitySet.List(const AQuery: String; out NextLink: String) : TSPRecycleBinItemArray; 


begin
  Result:=TSPRecycleBinItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRecycleBinItemsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRecycleBinItemArray; 


begin
  Result:=TSPRecycleBinItemArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRecycleBinItemsEntitySet.ListAll(const AQuery: String) : TSPRecycleBinItemArray; 

var N : String;

begin
  Result:=TSPRecycleBinItemArray(GetMulti(AQuery,True,N));
end;


Function TSPRecycleBinItemsEntitySet.ListAll(const AQuery: TQueryParams) : TSPRecycleBinItemArray; 

var N : String;

begin
  Result:=TSPRecycleBinItemArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRegionalSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPRegionalSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='RegionalSettingss';
end;

Class Function TSPRegionalSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRegionalSettings;
end;


Function TSPRegionalSettingssEntitySet.Get(const AdjustHijriDays: TInt16) : TSPRegionalSettings; 


begin
  Result:=TSPRegionalSettings(GetSingle(IntToStr(AdjustHijriDays)));
end;


Function TSPRegionalSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPRegionalSettingsArray; 


begin
  Result:=TSPRegionalSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRegionalSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRegionalSettingsArray; 


begin
  Result:=TSPRegionalSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRegionalSettingssEntitySet.ListAll(const AQuery: String) : TSPRegionalSettingsArray; 

var N : String;

begin
  Result:=TSPRegionalSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPRegionalSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPRegionalSettingsArray; 

var N : String;

begin
  Result:=TSPRegionalSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRelatedFieldsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRelatedFieldsEntitySet.ObjectRestKind : String; 

begin
  Result:='RelatedFields';
end;

Class Function TSPRelatedFieldsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRelatedField;
end;


Function TSPRelatedFieldsEntitySet.Get(const FieldId: TGUIDString) : TSPRelatedField; 


begin
  Result:=TSPRelatedField(GetSingle(TODataObject.MakeKeyString(FieldId)));
end;


Function TSPRelatedFieldsEntitySet.List(const AQuery: String; out NextLink: String) : TSPRelatedFieldArray; 


begin
  Result:=TSPRelatedFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRelatedFieldsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRelatedFieldArray; 


begin
  Result:=TSPRelatedFieldArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRelatedFieldsEntitySet.ListAll(const AQuery: String) : TSPRelatedFieldArray; 

var N : String;

begin
  Result:=TSPRelatedFieldArray(GetMulti(AQuery,True,N));
end;


Function TSPRelatedFieldsEntitySet.ListAll(const AQuery: TQueryParams) : TSPRelatedFieldArray; 

var N : String;

begin
  Result:=TSPRelatedFieldArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRelatedItemManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPRelatedItemManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='RelatedItemManagers';
end;

Class Function TSPRelatedItemManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRelatedItemManager;
end;


Function TSPRelatedItemManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPRelatedItemManager; 


begin
  Result:=TSPRelatedItemManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPRelatedItemManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSPRelatedItemManagerArray; 


begin
  Result:=TSPRelatedItemManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRelatedItemManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRelatedItemManagerArray; 


begin
  Result:=TSPRelatedItemManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRelatedItemManagersEntitySet.ListAll(const AQuery: String) : TSPRelatedItemManagerArray; 

var N : String;

begin
  Result:=TSPRelatedItemManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPRelatedItemManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSPRelatedItemManagerArray; 

var N : String;

begin
  Result:=TSPRelatedItemManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRemoteWebsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRemoteWebsEntitySet.ObjectRestKind : String; 

begin
  Result:='RemoteWebs';
end;

Class Function TSPRemoteWebsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRemoteWeb;
end;


Function TSPRemoteWebsEntitySet.Get(const CanSendEmail: boolean) : TSPRemoteWeb; 


begin
  Result:=TSPRemoteWeb(GetSingle(BoolToStr(CanSendEmail,'true','false')));
end;


Function TSPRemoteWebsEntitySet.List(const AQuery: String; out NextLink: String) : TSPRemoteWebArray; 


begin
  Result:=TSPRemoteWebArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRemoteWebsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRemoteWebArray; 


begin
  Result:=TSPRemoteWebArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRemoteWebsEntitySet.ListAll(const AQuery: String) : TSPRemoteWebArray; 

var N : String;

begin
  Result:=TSPRemoteWebArray(GetMulti(AQuery,True,N));
end;


Function TSPRemoteWebsEntitySet.ListAll(const AQuery: TQueryParams) : TSPRemoteWebArray; 

var N : String;

begin
  Result:=TSPRemoteWebArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRequestContexts1EntitySet
  --------------------------------------------------------------------}


Class Function TSPRequestContexts1EntitySet.ObjectRestKind : String; 

begin
  Result:='RequestContexts1';
end;

Class Function TSPRequestContexts1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRequestContext;
end;


Function TSPRequestContexts1EntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPRequestContext; 


begin
  Result:=TSPRequestContext(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPRequestContexts1EntitySet.List(const AQuery: String; out NextLink: String) : TSPRequestContextArray; 


begin
  Result:=TSPRequestContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRequestContexts1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRequestContextArray; 


begin
  Result:=TSPRequestContextArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRequestContexts1EntitySet.ListAll(const AQuery: String) : TSPRequestContextArray; 

var N : String;

begin
  Result:=TSPRequestContextArray(GetMulti(AQuery,True,N));
end;


Function TSPRequestContexts1EntitySet.ListAll(const AQuery: TQueryParams) : TSPRequestContextArray; 

var N : String;

begin
  Result:=TSPRequestContextArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRoleAssignmentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRoleAssignmentsEntitySet.ObjectRestKind : String; 

begin
  Result:='RoleAssignments';
end;

Class Function TSPRoleAssignmentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRoleAssignment;
end;


Function TSPRoleAssignmentsEntitySet.Get(const PrincipalId: TInt32) : TSPRoleAssignment; 


begin
  Result:=TSPRoleAssignment(GetSingle(IntToStr(PrincipalId)));
end;


Function TSPRoleAssignmentsEntitySet.List(const AQuery: String; out NextLink: String) : TSPRoleAssignmentArray; 


begin
  Result:=TSPRoleAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRoleAssignmentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRoleAssignmentArray; 


begin
  Result:=TSPRoleAssignmentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRoleAssignmentsEntitySet.ListAll(const AQuery: String) : TSPRoleAssignmentArray; 

var N : String;

begin
  Result:=TSPRoleAssignmentArray(GetMulti(AQuery,True,N));
end;


Function TSPRoleAssignmentsEntitySet.ListAll(const AQuery: TQueryParams) : TSPRoleAssignmentArray; 

var N : String;

begin
  Result:=TSPRoleAssignmentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRoleDefinitionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRoleDefinitionsEntitySet.ObjectRestKind : String; 

begin
  Result:='RoleDefinitions';
end;

Class Function TSPRoleDefinitionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPRoleDefinition;
end;


Function TSPRoleDefinitionsEntitySet.Get(const Id: TInt32) : TSPRoleDefinition; 


begin
  Result:=TSPRoleDefinition(GetSingle(IntToStr(Id)));
end;


Function TSPRoleDefinitionsEntitySet.List(const AQuery: String; out NextLink: String) : TSPRoleDefinitionArray; 


begin
  Result:=TSPRoleDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRoleDefinitionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPRoleDefinitionArray; 


begin
  Result:=TSPRoleDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRoleDefinitionsEntitySet.ListAll(const AQuery: String) : TSPRoleDefinitionArray; 

var N : String;

begin
  Result:=TSPRoleDefinitionArray(GetMulti(AQuery,True,N));
end;


Function TSPRoleDefinitionsEntitySet.ListAll(const AQuery: TQueryParams) : TSPRoleDefinitionArray; 

var N : String;

begin
  Result:=TSPRoleDefinitionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSecurableObjectsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSecurableObjectsEntitySet.ObjectRestKind : String; 

begin
  Result:='SecurableObjects';
end;

Class Function TSPSecurableObjectsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSecurableObject;
end;


Function TSPSecurableObjectsEntitySet.Get(const HasUniqueRoleAssignments: boolean) : TSPSecurableObject; 


begin
  Result:=TSPSecurableObject(GetSingle(BoolToStr(HasUniqueRoleAssignments,'true','false')));
end;


Function TSPSecurableObjectsEntitySet.List(const AQuery: String; out NextLink: String) : TSPSecurableObjectArray; 


begin
  Result:=TSPSecurableObjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSecurableObjectsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSecurableObjectArray; 


begin
  Result:=TSPSecurableObjectArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSecurableObjectsEntitySet.ListAll(const AQuery: String) : TSPSecurableObjectArray; 

var N : String;

begin
  Result:=TSPSecurableObjectArray(GetMulti(AQuery,True,N));
end;


Function TSPSecurableObjectsEntitySet.ListAll(const AQuery: TQueryParams) : TSPSecurableObjectArray; 

var N : String;

begin
  Result:=TSPSecurableObjectArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPServerSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPServerSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='ServerSettingss';
end;

Class Function TSPServerSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPServerSettings;
end;


Function TSPServerSettingssEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPServerSettings; 


begin
  Result:=TSPServerSettings(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPServerSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPServerSettingsArray; 


begin
  Result:=TSPServerSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPServerSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPServerSettingsArray; 


begin
  Result:=TSPServerSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPServerSettingssEntitySet.ListAll(const AQuery: String) : TSPServerSettingsArray; 

var N : String;

begin
  Result:=TSPServerSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPServerSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPServerSettingsArray; 

var N : String;

begin
  Result:=TSPServerSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSharePointSharingSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPSharePointSharingSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='SharePointSharingSettingss';
end;

Class Function TSPSharePointSharingSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSharePointSharingSettings;
end;


Function TSPSharePointSharingSettingssEntitySet.Get(const AddToGroupModeName: string) : TSPSharePointSharingSettings; 


begin
  Result:=TSPSharePointSharingSettings(GetSingle(TODataObject.MakeKeyString(AddToGroupModeName)));
end;


Function TSPSharePointSharingSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPSharePointSharingSettingsArray; 


begin
  Result:=TSPSharePointSharingSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharePointSharingSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSharePointSharingSettingsArray; 


begin
  Result:=TSPSharePointSharingSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharePointSharingSettingssEntitySet.ListAll(const AQuery: String) : TSPSharePointSharingSettingsArray; 

var N : String;

begin
  Result:=TSPSharePointSharingSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPSharePointSharingSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPSharePointSharingSettingsArray; 

var N : String;

begin
  Result:=TSPSharePointSharingSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDocumentSharingManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPDocumentSharingManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='DocumentSharingManagers';
end;

Class Function TSPDocumentSharingManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SharingDocumentSharingManager;
end;


Function TSPDocumentSharingManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_SharingDocumentSharingManager; 


begin
  Result:=TSP_SharingDocumentSharingManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPDocumentSharingManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SharingDocumentSharingManagerArray; 


begin
  Result:=TSP_SharingDocumentSharingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentSharingManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SharingDocumentSharingManagerArray; 


begin
  Result:=TSP_SharingDocumentSharingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDocumentSharingManagersEntitySet.ListAll(const AQuery: String) : TSP_SharingDocumentSharingManagerArray; 

var N : String;

begin
  Result:=TSP_SharingDocumentSharingManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPDocumentSharingManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SharingDocumentSharingManagerArray; 

var N : String;

begin
  Result:=TSP_SharingDocumentSharingManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebSharingManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebSharingManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='WebSharingManagers';
end;

Class Function TSPWebSharingManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SharingWebSharingManager;
end;


Function TSPWebSharingManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_SharingWebSharingManager; 


begin
  Result:=TSP_SharingWebSharingManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWebSharingManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SharingWebSharingManagerArray; 


begin
  Result:=TSP_SharingWebSharingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebSharingManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SharingWebSharingManagerArray; 


begin
  Result:=TSP_SharingWebSharingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebSharingManagersEntitySet.ListAll(const AQuery: String) : TSP_SharingWebSharingManagerArray; 

var N : String;

begin
  Result:=TSP_SharingWebSharingManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPWebSharingManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SharingWebSharingManagerArray; 

var N : String;

begin
  Result:=TSP_SharingWebSharingManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSharingResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSharingResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='SharingResults';
end;

Class Function TSPSharingResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSharingResult;
end;


Function TSPSharingResultsEntitySet.Get(const _Name: string) : TSPSharingResult; 


begin
  Result:=TSPSharingResult(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPSharingResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSPSharingResultArray; 


begin
  Result:=TSPSharingResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharingResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSharingResultArray; 


begin
  Result:=TSPSharingResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSharingResultsEntitySet.ListAll(const AQuery: String) : TSPSharingResultArray; 

var N : String;

begin
  Result:=TSPSharingResultArray(GetMulti(AQuery,True,N));
end;


Function TSPSharingResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSPSharingResultArray; 

var N : String;

begin
  Result:=TSPSharingResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSiteHealthSummarysEntitySet
  --------------------------------------------------------------------}


Class Function TSPSiteHealthSummarysEntitySet.ObjectRestKind : String; 

begin
  Result:='SiteHealthSummarys';
end;

Class Function TSPSiteHealthSummarysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SiteHealthSiteHealthSummary;
end;


Function TSPSiteHealthSummarysEntitySet.Get(const FailedErrorCount: TInt32) : TSP_SiteHealthSiteHealthSummary; 


begin
  Result:=TSP_SiteHealthSiteHealthSummary(GetSingle(IntToStr(FailedErrorCount)));
end;


Function TSPSiteHealthSummarysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SiteHealthSiteHealthSummaryArray; 


begin
  Result:=TSP_SiteHealthSiteHealthSummaryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSiteHealthSummarysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SiteHealthSiteHealthSummaryArray; 


begin
  Result:=TSP_SiteHealthSiteHealthSummaryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSiteHealthSummarysEntitySet.ListAll(const AQuery: String) : TSP_SiteHealthSiteHealthSummaryArray; 

var N : String;

begin
  Result:=TSP_SiteHealthSiteHealthSummaryArray(GetMulti(AQuery,True,N));
end;


Function TSPSiteHealthSummarysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SiteHealthSiteHealthSummaryArray; 

var N : String;

begin
  Result:=TSP_SiteHealthSiteHealthSummaryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSiteUrlsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSiteUrlsEntitySet.ObjectRestKind : String; 

begin
  Result:='SiteUrls';
end;

Class Function TSPSiteUrlsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSiteUrl;
end;


Function TSPSiteUrlsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPSiteUrl; 


begin
  Result:=TSPSiteUrl(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSiteUrlsEntitySet.List(const AQuery: String; out NextLink: String) : TSPSiteUrlArray; 


begin
  Result:=TSPSiteUrlArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSiteUrlsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSiteUrlArray; 


begin
  Result:=TSPSiteUrlArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSiteUrlsEntitySet.ListAll(const AQuery: String) : TSPSiteUrlArray; 

var N : String;

begin
  Result:=TSPSiteUrlArray(GetMulti(AQuery,True,N));
end;


Function TSPSiteUrlsEntitySet.ListAll(const AQuery: TQueryParams) : TSPSiteUrlArray; 

var N : String;

begin
  Result:=TSPSiteUrlArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialAnnouncementManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialAnnouncementManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialAnnouncementManagers';
end;

Class Function TSPSocialAnnouncementManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialAnnouncementManager;
end;


Function TSPSocialAnnouncementManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_SocialSocialAnnouncementManager; 


begin
  Result:=TSP_SocialSocialAnnouncementManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSocialAnnouncementManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialAnnouncementManagerArray; 


begin
  Result:=TSP_SocialSocialAnnouncementManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialAnnouncementManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialAnnouncementManagerArray; 


begin
  Result:=TSP_SocialSocialAnnouncementManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialAnnouncementManagersEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialAnnouncementManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialAnnouncementManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialAnnouncementManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialAnnouncementManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialAnnouncementManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialFeedManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialFeedManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialFeedManagers';
end;

Class Function TSPSocialFeedManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialFeedManager;
end;


Function TSPSocialFeedManagersEntitySet.Get(const PersonalSitePortalUri: string) : TSP_SocialSocialFeedManager; 


begin
  Result:=TSP_SocialSocialFeedManager(GetSingle(TODataObject.MakeKeyString(PersonalSitePortalUri)));
end;


Function TSPSocialFeedManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialFeedManagerArray; 


begin
  Result:=TSP_SocialSocialFeedManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialFeedManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialFeedManagerArray; 


begin
  Result:=TSP_SocialSocialFeedManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialFeedManagersEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialFeedManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialFeedManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialFeedManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialFeedManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialFeedManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialFollowingManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialFollowingManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialFollowingManagers';
end;

Class Function TSPSocialFollowingManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialFollowingManager;
end;


Function TSPSocialFollowingManagersEntitySet.Get(const FollowedDocumentsUri: string) : TSP_SocialSocialFollowingManager; 


begin
  Result:=TSP_SocialSocialFollowingManager(GetSingle(TODataObject.MakeKeyString(FollowedDocumentsUri)));
end;


Function TSPSocialFollowingManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialFollowingManagerArray; 


begin
  Result:=TSP_SocialSocialFollowingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialFollowingManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialFollowingManagerArray; 


begin
  Result:=TSP_SocialSocialFollowingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialFollowingManagersEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialFollowingManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialFollowingManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialFollowingManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialFollowingManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialFollowingManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialRestActorsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialRestActorsEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialRestActors';
end;

Class Function TSPSocialRestActorsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialRestActor;
end;


Function TSPSocialRestActorsEntitySet.Get(const FollowableItem: string) : TSP_SocialSocialRestActor; 


begin
  Result:=TSP_SocialSocialRestActor(GetSingle(TODataObject.MakeKeyString(FollowableItem)));
end;


Function TSPSocialRestActorsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialRestActorArray; 


begin
  Result:=TSP_SocialSocialRestActorArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestActorsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialRestActorArray; 


begin
  Result:=TSP_SocialSocialRestActorArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestActorsEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialRestActorArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestActorArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialRestActorsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialRestActorArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestActorArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialRestFeedsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialRestFeedsEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialRestFeeds';
end;

Class Function TSPSocialRestFeedsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialRestFeed;
end;


Function TSPSocialRestFeedsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_SocialSocialRestFeed; 


begin
  Result:=TSP_SocialSocialRestFeed(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSocialRestFeedsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialRestFeedArray; 


begin
  Result:=TSP_SocialSocialRestFeedArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestFeedsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialRestFeedArray; 


begin
  Result:=TSP_SocialSocialRestFeedArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestFeedsEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialRestFeedArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestFeedArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialRestFeedsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialRestFeedArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestFeedArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialRestFeedManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialRestFeedManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialRestFeedManagers';
end;

Class Function TSPSocialRestFeedManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialRestFeedManager;
end;


Function TSPSocialRestFeedManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_SocialSocialRestFeedManager; 


begin
  Result:=TSP_SocialSocialRestFeedManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSocialRestFeedManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialRestFeedManagerArray; 


begin
  Result:=TSP_SocialSocialRestFeedManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestFeedManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialRestFeedManagerArray; 


begin
  Result:=TSP_SocialSocialRestFeedManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestFeedManagersEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialRestFeedManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestFeedManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialRestFeedManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialRestFeedManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestFeedManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialRestFollowingManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialRestFollowingManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialRestFollowingManagers';
end;

Class Function TSPSocialRestFollowingManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialRestFollowingManager;
end;


Function TSPSocialRestFollowingManagersEntitySet.Get(const FollowedDocumentsUri: string) : TSP_SocialSocialRestFollowingManager; 


begin
  Result:=TSP_SocialSocialRestFollowingManager(GetSingle(TODataObject.MakeKeyString(FollowedDocumentsUri)));
end;


Function TSPSocialRestFollowingManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialRestFollowingManagerArray; 


begin
  Result:=TSP_SocialSocialRestFollowingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestFollowingManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialRestFollowingManagerArray; 


begin
  Result:=TSP_SocialSocialRestFollowingManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestFollowingManagersEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialRestFollowingManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestFollowingManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialRestFollowingManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialRestFollowingManagerArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestFollowingManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSocialRestThreadsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSocialRestThreadsEntitySet.ObjectRestKind : String; 

begin
  Result:='SocialRestThreads';
end;

Class Function TSPSocialRestThreadsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_SocialSocialRestThread;
end;


Function TSPSocialRestThreadsEntitySet.Get(const ID: string) : TSP_SocialSocialRestThread; 


begin
  Result:=TSP_SocialSocialRestThread(GetSingle(TODataObject.MakeKeyString(ID)));
end;


Function TSPSocialRestThreadsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_SocialSocialRestThreadArray; 


begin
  Result:=TSP_SocialSocialRestThreadArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestThreadsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_SocialSocialRestThreadArray; 


begin
  Result:=TSP_SocialSocialRestThreadArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSocialRestThreadsEntitySet.ListAll(const AQuery: String) : TSP_SocialSocialRestThreadArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestThreadArray(GetMulti(AQuery,True,N));
end;


Function TSPSocialRestThreadsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_SocialSocialRestThreadArray; 

var N : String;

begin
  Result:=TSP_SocialSocialRestThreadArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSolutionExportersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSolutionExportersEntitySet.ObjectRestKind : String; 

begin
  Result:='SolutionExporters';
end;

Class Function TSPSolutionExportersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSolutionExporter;
end;


Function TSPSolutionExportersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPSolutionExporter; 


begin
  Result:=TSPSolutionExporter(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSolutionExportersEntitySet.List(const AQuery: String; out NextLink: String) : TSPSolutionExporterArray; 


begin
  Result:=TSPSolutionExporterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSolutionExportersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSolutionExporterArray; 


begin
  Result:=TSPSolutionExporterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSolutionExportersEntitySet.ListAll(const AQuery: String) : TSPSolutionExporterArray; 

var N : String;

begin
  Result:=TSPSolutionExporterArray(GetMulti(AQuery,True,N));
end;


Function TSPSolutionExportersEntitySet.ListAll(const AQuery: TQueryParams) : TSPSolutionExporterArray; 

var N : String;

begin
  Result:=TSPSolutionExporterArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPAppLicenseManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPAppLicenseManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SPAppLicenseManagers';
end;

Class Function TSPSPAppLicenseManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSPAppLicenseManager;
end;


Function TSPSPAppLicenseManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPSPAppLicenseManager; 


begin
  Result:=TSPSPAppLicenseManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPAppLicenseManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSPSPAppLicenseManagerArray; 


begin
  Result:=TSPSPAppLicenseManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAppLicenseManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSPAppLicenseManagerArray; 


begin
  Result:=TSPSPAppLicenseManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPAppLicenseManagersEntitySet.ListAll(const AQuery: String) : TSPSPAppLicenseManagerArray; 

var N : String;

begin
  Result:=TSPSPAppLicenseManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSPAppLicenseManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSPSPAppLicenseManagerArray; 

var N : String;

begin
  Result:=TSPSPAppLicenseManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPDataLeakagePreventionStatusInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPDataLeakagePreventionStatusInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='SPDataLeakagePreventionStatusInfos';
end;

Class Function TSPSPDataLeakagePreventionStatusInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPSPDataLeakagePreventionStatusInfo;
end;


Function TSPSPDataLeakagePreventionStatusInfosEntitySet.Get(const ContainsConfidentialInfo: boolean) : TSPSPDataLeakagePreventionStatusInfo; 


begin
  Result:=TSPSPDataLeakagePreventionStatusInfo(GetSingle(BoolToStr(ContainsConfidentialInfo,'true','false')));
end;


Function TSPSPDataLeakagePreventionStatusInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSPSPDataLeakagePreventionStatusInfoArray; 


begin
  Result:=TSPSPDataLeakagePreventionStatusInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPDataLeakagePreventionStatusInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPSPDataLeakagePreventionStatusInfoArray; 


begin
  Result:=TSPSPDataLeakagePreventionStatusInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPDataLeakagePreventionStatusInfosEntitySet.ListAll(const AQuery: String) : TSPSPDataLeakagePreventionStatusInfoArray; 

var N : String;

begin
  Result:=TSPSPDataLeakagePreventionStatusInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPSPDataLeakagePreventionStatusInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSPSPDataLeakagePreventionStatusInfoArray; 

var N : String;

begin
  Result:=TSPSPDataLeakagePreventionStatusInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTenantAppInstancesEntitySet
  --------------------------------------------------------------------}


Class Function TSPTenantAppInstancesEntitySet.ObjectRestKind : String; 

begin
  Result:='TenantAppInstances';
end;

Class Function TSPTenantAppInstancesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPTenantAppInstance;
end;


Function TSPTenantAppInstancesEntitySet.Get(const Id: TGUIDString) : TSPTenantAppInstance; 


begin
  Result:=TSPTenantAppInstance(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPTenantAppInstancesEntitySet.List(const AQuery: String; out NextLink: String) : TSPTenantAppInstanceArray; 


begin
  Result:=TSPTenantAppInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTenantAppInstancesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPTenantAppInstanceArray; 


begin
  Result:=TSPTenantAppInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTenantAppInstancesEntitySet.ListAll(const AQuery: String) : TSPTenantAppInstanceArray; 

var N : String;

begin
  Result:=TSPTenantAppInstanceArray(GetMulti(AQuery,True,N));
end;


Function TSPTenantAppInstancesEntitySet.ListAll(const AQuery: TQueryParams) : TSPTenantAppInstanceArray; 

var N : String;

begin
  Result:=TSPTenantAppInstanceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTenantAppUtilitysEntitySet
  --------------------------------------------------------------------}


Class Function TSPTenantAppUtilitysEntitySet.ObjectRestKind : String; 

begin
  Result:='TenantAppUtilitys';
end;

Class Function TSPTenantAppUtilitysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPTenantAppUtility;
end;


Function TSPTenantAppUtilitysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPTenantAppUtility; 


begin
  Result:=TSPTenantAppUtility(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPTenantAppUtilitysEntitySet.List(const AQuery: String; out NextLink: String) : TSPTenantAppUtilityArray; 


begin
  Result:=TSPTenantAppUtilityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTenantAppUtilitysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPTenantAppUtilityArray; 


begin
  Result:=TSPTenantAppUtilityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTenantAppUtilitysEntitySet.ListAll(const AQuery: String) : TSPTenantAppUtilityArray; 

var N : String;

begin
  Result:=TSPTenantAppUtilityArray(GetMulti(AQuery,True,N));
end;


Function TSPTenantAppUtilitysEntitySet.ListAll(const AQuery: TQueryParams) : TSPTenantAppUtilityArray; 

var N : String;

begin
  Result:=TSPTenantAppUtilityArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTenantSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPTenantSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='TenantSettingss';
end;

Class Function TSPTenantSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPTenantSettings;
end;


Function TSPTenantSettingssEntitySet.Get(const CorporateCatalogUrl: string) : TSPTenantSettings; 


begin
  Result:=TSPTenantSettings(GetSingle(TODataObject.MakeKeyString(CorporateCatalogUrl)));
end;


Function TSPTenantSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSPTenantSettingsArray; 


begin
  Result:=TSPTenantSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTenantSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPTenantSettingsArray; 


begin
  Result:=TSPTenantSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTenantSettingssEntitySet.ListAll(const AQuery: String) : TSPTenantSettingsArray; 

var N : String;

begin
  Result:=TSPTenantSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPTenantSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSPTenantSettingsArray; 

var N : String;

begin
  Result:=TSPTenantSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPThemeInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPThemeInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='ThemeInfos';
end;

Class Function TSPThemeInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPThemeInfo;
end;


Function TSPThemeInfosEntitySet.Get(const AccessibleDescription: string) : TSPThemeInfo; 


begin
  Result:=TSPThemeInfo(GetSingle(TODataObject.MakeKeyString(AccessibleDescription)));
end;


Function TSPThemeInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSPThemeInfoArray; 


begin
  Result:=TSPThemeInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPThemeInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPThemeInfoArray; 


begin
  Result:=TSPThemeInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPThemeInfosEntitySet.ListAll(const AQuery: String) : TSPThemeInfoArray; 

var N : String;

begin
  Result:=TSPThemeInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPThemeInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSPThemeInfoArray; 

var N : String;

begin
  Result:=TSPThemeInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTimeZonesEntitySet
  --------------------------------------------------------------------}


Class Function TSPTimeZonesEntitySet.ObjectRestKind : String; 

begin
  Result:='TimeZones';
end;

Class Function TSPTimeZonesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPTimeZone;
end;


Function TSPTimeZonesEntitySet.Get(const Id: TInt32) : TSPTimeZone; 


begin
  Result:=TSPTimeZone(GetSingle(IntToStr(Id)));
end;


Function TSPTimeZonesEntitySet.List(const AQuery: String; out NextLink: String) : TSPTimeZoneArray; 


begin
  Result:=TSPTimeZoneArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeZonesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPTimeZoneArray; 


begin
  Result:=TSPTimeZoneArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTimeZonesEntitySet.ListAll(const AQuery: String) : TSPTimeZoneArray; 

var N : String;

begin
  Result:=TSPTimeZoneArray(GetMulti(AQuery,True,N));
end;


Function TSPTimeZonesEntitySet.ListAll(const AQuery: TQueryParams) : TSPTimeZoneArray; 

var N : String;

begin
  Result:=TSPTimeZoneArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSyncTranslatorsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSyncTranslatorsEntitySet.ObjectRestKind : String; 

begin
  Result:='SyncTranslators';
end;

Class Function TSPSyncTranslatorsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_TranslationSyncTranslator;
end;


Function TSPSyncTranslatorsEntitySet.Get(const OutputSaveBehavior: TInt32) : TSP_TranslationSyncTranslator; 


begin
  Result:=TSP_TranslationSyncTranslator(GetSingle(IntToStr(OutputSaveBehavior)));
end;


Function TSPSyncTranslatorsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_TranslationSyncTranslatorArray; 


begin
  Result:=TSP_TranslationSyncTranslatorArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSyncTranslatorsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_TranslationSyncTranslatorArray; 


begin
  Result:=TSP_TranslationSyncTranslatorArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSyncTranslatorsEntitySet.ListAll(const AQuery: String) : TSP_TranslationSyncTranslatorArray; 

var N : String;

begin
  Result:=TSP_TranslationSyncTranslatorArray(GetMulti(AQuery,True,N));
end;


Function TSPSyncTranslatorsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_TranslationSyncTranslatorArray; 

var N : String;

begin
  Result:=TSP_TranslationSyncTranslatorArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTranslationJobsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTranslationJobsEntitySet.ObjectRestKind : String; 

begin
  Result:='TranslationJobs';
end;

Class Function TSPTranslationJobsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_TranslationTranslationJob;
end;


Function TSPTranslationJobsEntitySet.Get(const _Name: string) : TSP_TranslationTranslationJob; 


begin
  Result:=TSP_TranslationTranslationJob(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPTranslationJobsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_TranslationTranslationJobArray; 


begin
  Result:=TSP_TranslationTranslationJobArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTranslationJobsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_TranslationTranslationJobArray; 


begin
  Result:=TSP_TranslationTranslationJobArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTranslationJobsEntitySet.ListAll(const AQuery: String) : TSP_TranslationTranslationJobArray; 

var N : String;

begin
  Result:=TSP_TranslationTranslationJobArray(GetMulti(AQuery,True,N));
end;


Function TSPTranslationJobsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_TranslationTranslationJobArray; 

var N : String;

begin
  Result:=TSP_TranslationTranslationJobArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTranslationJobStatussEntitySet
  --------------------------------------------------------------------}


Class Function TSPTranslationJobStatussEntitySet.ObjectRestKind : String; 

begin
  Result:='TranslationJobStatuss';
end;

Class Function TSPTranslationJobStatussEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_TranslationTranslationJobStatus;
end;


Function TSPTranslationJobStatussEntitySet.Get(const _Name: string) : TSP_TranslationTranslationJobStatus; 


begin
  Result:=TSP_TranslationTranslationJobStatus(GetSingle(TODataObject.MakeKeyString(_Name)));
end;


Function TSPTranslationJobStatussEntitySet.List(const AQuery: String; out NextLink: String) : TSP_TranslationTranslationJobStatusArray; 


begin
  Result:=TSP_TranslationTranslationJobStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTranslationJobStatussEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_TranslationTranslationJobStatusArray; 


begin
  Result:=TSP_TranslationTranslationJobStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTranslationJobStatussEntitySet.ListAll(const AQuery: String) : TSP_TranslationTranslationJobStatusArray; 

var N : String;

begin
  Result:=TSP_TranslationTranslationJobStatusArray(GetMulti(AQuery,True,N));
end;


Function TSPTranslationJobStatussEntitySet.ListAll(const AQuery: TQueryParams) : TSP_TranslationTranslationJobStatusArray; 

var N : String;

begin
  Result:=TSP_TranslationTranslationJobStatusArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPVariationsTranslationTimerJobsEntitySet
  --------------------------------------------------------------------}


Class Function TSPVariationsTranslationTimerJobsEntitySet.ObjectRestKind : String; 

begin
  Result:='VariationsTranslationTimerJobs';
end;

Class Function TSPVariationsTranslationTimerJobsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_TranslationVariationsTranslationTimerJob;
end;


Function TSPVariationsTranslationTimerJobsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_TranslationVariationsTranslationTimerJob; 


begin
  Result:=TSP_TranslationVariationsTranslationTimerJob(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPVariationsTranslationTimerJobsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_TranslationVariationsTranslationTimerJobArray; 


begin
  Result:=TSP_TranslationVariationsTranslationTimerJobArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVariationsTranslationTimerJobsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_TranslationVariationsTranslationTimerJobArray; 


begin
  Result:=TSP_TranslationVariationsTranslationTimerJobArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPVariationsTranslationTimerJobsEntitySet.ListAll(const AQuery: String) : TSP_TranslationVariationsTranslationTimerJobArray; 

var N : String;

begin
  Result:=TSP_TranslationVariationsTranslationTimerJobArray(GetMulti(AQuery,True,N));
end;


Function TSPVariationsTranslationTimerJobsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_TranslationVariationsTranslationTimerJobArray; 

var N : String;

begin
  Result:=TSP_TranslationVariationsTranslationTimerJobArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTypeInformationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTypeInformationsEntitySet.ObjectRestKind : String; 

begin
  Result:='TypeInformations';
end;

Class Function TSPTypeInformationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPTypeInformation;
end;


Function TSPTypeInformationsEntitySet.Get(const BaseTypeFullName: string) : TSPTypeInformation; 


begin
  Result:=TSPTypeInformation(GetSingle(TODataObject.MakeKeyString(BaseTypeFullName)));
end;


Function TSPTypeInformationsEntitySet.List(const AQuery: String; out NextLink: String) : TSPTypeInformationArray; 


begin
  Result:=TSPTypeInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTypeInformationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPTypeInformationArray; 


begin
  Result:=TSPTypeInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTypeInformationsEntitySet.ListAll(const AQuery: String) : TSPTypeInformationArray; 

var N : String;

begin
  Result:=TSPTypeInformationArray(GetMulti(AQuery,True,N));
end;


Function TSPTypeInformationsEntitySet.ListAll(const AQuery: TQueryParams) : TSPTypeInformationArray; 

var N : String;

begin
  Result:=TSPTypeInformationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPClientPeoplePickerWebServiceInterfacesEntitySet
  --------------------------------------------------------------------}


Class Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.ObjectRestKind : String; 

begin
  Result:='ClientPeoplePickerWebServiceInterfaces';
end;

Class Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface;
end;


Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface; 


begin
  Result:=TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterface(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray; 


begin
  Result:=TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray; 


begin
  Result:=TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.ListAll(const AQuery: String) : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray; 

var N : String;

begin
  Result:=TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray(GetMulti(AQuery,True,N));
end;


Function TSPClientPeoplePickerWebServiceInterfacesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray; 

var N : String;

begin
  Result:=TSP_UI_ApplicationPagesClientPeoplePickerWebServiceInterfaceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUsers1EntitySet
  --------------------------------------------------------------------}


Class Function TSPUsers1EntitySet.ObjectRestKind : String; 

begin
  Result:='Users1';
end;

Class Function TSPUsers1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPUser;
end;


Function TSPUsers1EntitySet.Get(const Id: TInt32) : TSPUser; 


begin
  Result:=TSPUser(GetSingle(IntToStr(Id)));
end;


Function TSPUsers1EntitySet.List(const AQuery: String; out NextLink: String) : TSPUserArray; 


begin
  Result:=TSPUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUsers1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPUserArray; 


begin
  Result:=TSPUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUsers1EntitySet.ListAll(const AQuery: String) : TSPUserArray; 

var N : String;

begin
  Result:=TSPUserArray(GetMulti(AQuery,True,N));
end;


Function TSPUsers1EntitySet.ListAll(const AQuery: TQueryParams) : TSPUserArray; 

var N : String;

begin
  Result:=TSPUserArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserCustomActionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserCustomActionsEntitySet.ObjectRestKind : String; 

begin
  Result:='UserCustomActions';
end;

Class Function TSPUserCustomActionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPUserCustomAction;
end;


Function TSPUserCustomActionsEntitySet.Get(const Id: TGUIDString) : TSPUserCustomAction; 


begin
  Result:=TSPUserCustomAction(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPUserCustomActionsEntitySet.List(const AQuery: String; out NextLink: String) : TSPUserCustomActionArray; 


begin
  Result:=TSPUserCustomActionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserCustomActionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPUserCustomActionArray; 


begin
  Result:=TSPUserCustomActionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserCustomActionsEntitySet.ListAll(const AQuery: String) : TSPUserCustomActionArray; 

var N : String;

begin
  Result:=TSPUserCustomActionArray(GetMulti(AQuery,True,N));
end;


Function TSPUserCustomActionsEntitySet.ListAll(const AQuery: TQueryParams) : TSPUserCustomActionArray; 

var N : String;

begin
  Result:=TSPUserCustomActionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFollowedContentsEntitySet
  --------------------------------------------------------------------}


Class Function TSPFollowedContentsEntitySet.ObjectRestKind : String; 

begin
  Result:='FollowedContents';
end;

Class Function TSPFollowedContentsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesFollowedContent;
end;


Function TSPFollowedContentsEntitySet.Get(const FollowedDocumentsUrl: string) : TSP_UserProfilesFollowedContent; 


begin
  Result:=TSP_UserProfilesFollowedContent(GetSingle(TODataObject.MakeKeyString(FollowedDocumentsUrl)));
end;


Function TSPFollowedContentsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesFollowedContentArray; 


begin
  Result:=TSP_UserProfilesFollowedContentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFollowedContentsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesFollowedContentArray; 


begin
  Result:=TSP_UserProfilesFollowedContentArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFollowedContentsEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesFollowedContentArray; 

var N : String;

begin
  Result:=TSP_UserProfilesFollowedContentArray(GetMulti(AQuery,True,N));
end;


Function TSPFollowedContentsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesFollowedContentArray; 

var N : String;

begin
  Result:=TSP_UserProfilesFollowedContentArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPFollowedItemDatasEntitySet
  --------------------------------------------------------------------}


Class Function TSPFollowedItemDatasEntitySet.ObjectRestKind : String; 

begin
  Result:='FollowedItemDatas';
end;

Class Function TSPFollowedItemDatasEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesFollowedItemData;
end;


Function TSPFollowedItemDatasEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UserProfilesFollowedItemData; 


begin
  Result:=TSP_UserProfilesFollowedItemData(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPFollowedItemDatasEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesFollowedItemDataArray; 


begin
  Result:=TSP_UserProfilesFollowedItemDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFollowedItemDatasEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesFollowedItemDataArray; 


begin
  Result:=TSP_UserProfilesFollowedItemDataArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPFollowedItemDatasEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesFollowedItemDataArray; 

var N : String;

begin
  Result:=TSP_UserProfilesFollowedItemDataArray(GetMulti(AQuery,True,N));
end;


Function TSPFollowedItemDatasEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesFollowedItemDataArray; 

var N : String;

begin
  Result:=TSP_UserProfilesFollowedItemDataArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPHashTagCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPHashTagCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='HashTagCollections';
end;

Class Function TSPHashTagCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesHashTagCollection;
end;


Function TSPHashTagCollectionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UserProfilesHashTagCollection; 


begin
  Result:=TSP_UserProfilesHashTagCollection(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPHashTagCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesHashTagCollectionArray; 


begin
  Result:=TSP_UserProfilesHashTagCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPHashTagCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesHashTagCollectionArray; 


begin
  Result:=TSP_UserProfilesHashTagCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPHashTagCollectionsEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesHashTagCollectionArray; 

var N : String;

begin
  Result:=TSP_UserProfilesHashTagCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPHashTagCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesHashTagCollectionArray; 

var N : String;

begin
  Result:=TSP_UserProfilesHashTagCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPeopleManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPPeopleManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='PeopleManagers';
end;

Class Function TSPPeopleManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesPeopleManager;
end;


Function TSPPeopleManagersEntitySet.Get(const EditProfileLink: string) : TSP_UserProfilesPeopleManager; 


begin
  Result:=TSP_UserProfilesPeopleManager(GetSingle(TODataObject.MakeKeyString(EditProfileLink)));
end;


Function TSPPeopleManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesPeopleManagerArray; 


begin
  Result:=TSP_UserProfilesPeopleManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPeopleManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesPeopleManagerArray; 


begin
  Result:=TSP_UserProfilesPeopleManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPeopleManagersEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesPeopleManagerArray; 

var N : String;

begin
  Result:=TSP_UserProfilesPeopleManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPPeopleManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesPeopleManagerArray; 

var N : String;

begin
  Result:=TSP_UserProfilesPeopleManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPersonPropertiessEntitySet
  --------------------------------------------------------------------}


Class Function TSPPersonPropertiessEntitySet.ObjectRestKind : String; 

begin
  Result:='PersonPropertiess';
end;

Class Function TSPPersonPropertiessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesPersonProperties;
end;


Function TSPPersonPropertiessEntitySet.Get(const AccountName: string) : TSP_UserProfilesPersonProperties; 


begin
  Result:=TSP_UserProfilesPersonProperties(GetSingle(TODataObject.MakeKeyString(AccountName)));
end;


Function TSPPersonPropertiessEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesPersonPropertiesArray; 


begin
  Result:=TSP_UserProfilesPersonPropertiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPersonPropertiessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesPersonPropertiesArray; 


begin
  Result:=TSP_UserProfilesPersonPropertiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPersonPropertiessEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesPersonPropertiesArray; 

var N : String;

begin
  Result:=TSP_UserProfilesPersonPropertiesArray(GetMulti(AQuery,True,N));
end;


Function TSPPersonPropertiessEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesPersonPropertiesArray; 

var N : String;

begin
  Result:=TSP_UserProfilesPersonPropertiesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProfileImageStoresEntitySet
  --------------------------------------------------------------------}


Class Function TSPProfileImageStoresEntitySet.ObjectRestKind : String; 

begin
  Result:='ProfileImageStores';
end;

Class Function TSPProfileImageStoresEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesProfileImageStore;
end;


Function TSPProfileImageStoresEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UserProfilesProfileImageStore; 


begin
  Result:=TSP_UserProfilesProfileImageStore(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPProfileImageStoresEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesProfileImageStoreArray; 


begin
  Result:=TSP_UserProfilesProfileImageStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProfileImageStoresEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesProfileImageStoreArray; 


begin
  Result:=TSP_UserProfilesProfileImageStoreArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProfileImageStoresEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesProfileImageStoreArray; 

var N : String;

begin
  Result:=TSP_UserProfilesProfileImageStoreArray(GetMulti(AQuery,True,N));
end;


Function TSPProfileImageStoresEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesProfileImageStoreArray; 

var N : String;

begin
  Result:=TSP_UserProfilesProfileImageStoreArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProfileLoadersEntitySet
  --------------------------------------------------------------------}


Class Function TSPProfileLoadersEntitySet.ObjectRestKind : String; 

begin
  Result:='ProfileLoaders';
end;

Class Function TSPProfileLoadersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesProfileLoader;
end;


Function TSPProfileLoadersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UserProfilesProfileLoader; 


begin
  Result:=TSP_UserProfilesProfileLoader(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPProfileLoadersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesProfileLoaderArray; 


begin
  Result:=TSP_UserProfilesProfileLoaderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProfileLoadersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesProfileLoaderArray; 


begin
  Result:=TSP_UserProfilesProfileLoaderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProfileLoadersEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesProfileLoaderArray; 

var N : String;

begin
  Result:=TSP_UserProfilesProfileLoaderArray(GetMulti(AQuery,True,N));
end;


Function TSPProfileLoadersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesProfileLoaderArray; 

var N : String;

begin
  Result:=TSP_UserProfilesProfileLoaderArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserProfilesEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserProfilesEntitySet.ObjectRestKind : String; 

begin
  Result:='UserProfiles';
end;

Class Function TSPUserProfilesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesUserProfile;
end;


Function TSPUserProfilesEntitySet.Get(const AccountName: string) : TSP_UserProfilesUserProfile; 


begin
  Result:=TSP_UserProfilesUserProfile(GetSingle(TODataObject.MakeKeyString(AccountName)));
end;


Function TSPUserProfilesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesUserProfileArray; 


begin
  Result:=TSP_UserProfilesUserProfileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserProfilesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesUserProfileArray; 


begin
  Result:=TSP_UserProfilesUserProfileArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserProfilesEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesUserProfileArray; 

var N : String;

begin
  Result:=TSP_UserProfilesUserProfileArray(GetMulti(AQuery,True,N));
end;


Function TSPUserProfilesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesUserProfileArray; 

var N : String;

begin
  Result:=TSP_UserProfilesUserProfileArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserProfilePropertiesForUsersEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserProfilePropertiesForUsersEntitySet.ObjectRestKind : String; 

begin
  Result:='UserProfilePropertiesForUsers';
end;

Class Function TSPUserProfilePropertiesForUsersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UserProfilesUserProfilePropertiesForUser;
end;


Function TSPUserProfilePropertiesForUsersEntitySet.Get(const AccountName: string) : TSP_UserProfilesUserProfilePropertiesForUser; 


begin
  Result:=TSP_UserProfilesUserProfilePropertiesForUser(GetSingle(TODataObject.MakeKeyString(AccountName)));
end;


Function TSPUserProfilePropertiesForUsersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UserProfilesUserProfilePropertiesForUserArray; 


begin
  Result:=TSP_UserProfilesUserProfilePropertiesForUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserProfilePropertiesForUsersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UserProfilesUserProfilePropertiesForUserArray; 


begin
  Result:=TSP_UserProfilesUserProfilePropertiesForUserArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserProfilePropertiesForUsersEntitySet.ListAll(const AQuery: String) : TSP_UserProfilesUserProfilePropertiesForUserArray; 

var N : String;

begin
  Result:=TSP_UserProfilesUserProfilePropertiesForUserArray(GetMulti(AQuery,True,N));
end;


Function TSPUserProfilePropertiesForUsersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UserProfilesUserProfilePropertiesForUserArray; 

var N : String;

begin
  Result:=TSP_UserProfilesUserProfilePropertiesForUserArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserResourcesEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserResourcesEntitySet.ObjectRestKind : String; 

begin
  Result:='UserResources';
end;

Class Function TSPUserResourcesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPUserResource;
end;


Function TSPUserResourcesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPUserResource; 


begin
  Result:=TSPUserResource(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPUserResourcesEntitySet.List(const AQuery: String; out NextLink: String) : TSPUserResourceArray; 


begin
  Result:=TSPUserResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserResourcesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPUserResourceArray; 


begin
  Result:=TSPUserResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserResourcesEntitySet.ListAll(const AQuery: String) : TSPUserResourceArray; 

var N : String;

begin
  Result:=TSPUserResourceArray(GetMulti(AQuery,True,N));
end;


Function TSPUserResourcesEntitySet.ListAll(const AQuery: TQueryParams) : TSPUserResourceArray; 

var N : String;

begin
  Result:=TSPUserResourceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserSolutionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserSolutionsEntitySet.ObjectRestKind : String; 

begin
  Result:='UserSolutions';
end;

Class Function TSPUserSolutionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPUserSolution;
end;


Function TSPUserSolutionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPUserSolution; 


begin
  Result:=TSPUserSolution(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPUserSolutionsEntitySet.List(const AQuery: String; out NextLink: String) : TSPUserSolutionArray; 


begin
  Result:=TSPUserSolutionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserSolutionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPUserSolutionArray; 


begin
  Result:=TSPUserSolutionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserSolutionsEntitySet.ListAll(const AQuery: String) : TSPUserSolutionArray; 

var N : String;

begin
  Result:=TSPUserSolutionArray(GetMulti(AQuery,True,N));
end;


Function TSPUserSolutionsEntitySet.ListAll(const AQuery: TQueryParams) : TSPUserSolutionArray; 

var N : String;

begin
  Result:=TSPUserSolutionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPMarketplaceUtilitiessEntitySet
  --------------------------------------------------------------------}


Class Function TSPMarketplaceUtilitiessEntitySet.ObjectRestKind : String; 

begin
  Result:='MarketplaceUtilitiess';
end;

Class Function TSPMarketplaceUtilitiessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UtilitiesMarketplaceUtilities;
end;


Function TSPMarketplaceUtilitiessEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UtilitiesMarketplaceUtilities; 


begin
  Result:=TSP_UtilitiesMarketplaceUtilities(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPMarketplaceUtilitiessEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UtilitiesMarketplaceUtilitiesArray; 


begin
  Result:=TSP_UtilitiesMarketplaceUtilitiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMarketplaceUtilitiessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UtilitiesMarketplaceUtilitiesArray; 


begin
  Result:=TSP_UtilitiesMarketplaceUtilitiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPMarketplaceUtilitiessEntitySet.ListAll(const AQuery: String) : TSP_UtilitiesMarketplaceUtilitiesArray; 

var N : String;

begin
  Result:=TSP_UtilitiesMarketplaceUtilitiesArray(GetMulti(AQuery,True,N));
end;


Function TSPMarketplaceUtilitiessEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UtilitiesMarketplaceUtilitiesArray; 

var N : String;

begin
  Result:=TSP_UtilitiesMarketplaceUtilitiesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUtilitysEntitySet
  --------------------------------------------------------------------}


Class Function TSPUtilitysEntitySet.ObjectRestKind : String; 

begin
  Result:='Utilitys';
end;

Class Function TSPUtilitysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_UtilitiesUtility;
end;


Function TSPUtilitysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_UtilitiesUtility; 


begin
  Result:=TSP_UtilitiesUtility(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPUtilitysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_UtilitiesUtilityArray; 


begin
  Result:=TSP_UtilitiesUtilityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUtilitysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_UtilitiesUtilityArray; 


begin
  Result:=TSP_UtilitiesUtilityArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUtilitysEntitySet.ListAll(const AQuery: String) : TSP_UtilitiesUtilityArray; 

var N : String;

begin
  Result:=TSP_UtilitiesUtilityArray(GetMulti(AQuery,True,N));
end;


Function TSPUtilitysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_UtilitiesUtilityArray; 

var N : String;

begin
  Result:=TSP_UtilitiesUtilityArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPViewsEntitySet
  --------------------------------------------------------------------}


Class Function TSPViewsEntitySet.ObjectRestKind : String; 

begin
  Result:='Views';
end;

Class Function TSPViewsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPView;
end;


Function TSPViewsEntitySet.Get(const Id: TGUIDString) : TSPView; 


begin
  Result:=TSPView(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPViewsEntitySet.List(const AQuery: String; out NextLink: String) : TSPViewArray; 


begin
  Result:=TSPViewArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPViewsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPViewArray; 


begin
  Result:=TSPViewArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPViewsEntitySet.ListAll(const AQuery: String) : TSPViewArray; 

var N : String;

begin
  Result:=TSPViewArray(GetMulti(AQuery,True,N));
end;


Function TSPViewsEntitySet.ListAll(const AQuery: TQueryParams) : TSPViewArray; 

var N : String;

begin
  Result:=TSPViewArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPViewFieldCollectionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPViewFieldCollectionsEntitySet.ObjectRestKind : String; 

begin
  Result:='ViewFieldCollections';
end;

Class Function TSPViewFieldCollectionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPViewFieldCollection;
end;


Function TSPViewFieldCollectionsEntitySet.Get(const SchemaXml: string) : TSPViewFieldCollection; 


begin
  Result:=TSPViewFieldCollection(GetSingle(TODataObject.MakeKeyString(SchemaXml)));
end;


Function TSPViewFieldCollectionsEntitySet.List(const AQuery: String; out NextLink: String) : TSPViewFieldCollectionArray; 


begin
  Result:=TSPViewFieldCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPViewFieldCollectionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPViewFieldCollectionArray; 


begin
  Result:=TSPViewFieldCollectionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPViewFieldCollectionsEntitySet.ListAll(const AQuery: String) : TSPViewFieldCollectionArray; 

var N : String;

begin
  Result:=TSPViewFieldCollectionArray(GetMulti(AQuery,True,N));
end;


Function TSPViewFieldCollectionsEntitySet.ListAll(const AQuery: TQueryParams) : TSPViewFieldCollectionArray; 

var N : String;

begin
  Result:=TSPViewFieldCollectionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebInformationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebInformationsEntitySet.ObjectRestKind : String; 

begin
  Result:='WebInformations';
end;

Class Function TSPWebInformationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPWebInformation;
end;


Function TSPWebInformationsEntitySet.Get(const Id: TGUIDString) : TSPWebInformation; 


begin
  Result:=TSPWebInformation(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWebInformationsEntitySet.List(const AQuery: String; out NextLink: String) : TSPWebInformationArray; 


begin
  Result:=TSPWebInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebInformationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPWebInformationArray; 


begin
  Result:=TSPWebInformationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebInformationsEntitySet.ListAll(const AQuery: String) : TSPWebInformationArray; 

var N : String;

begin
  Result:=TSPWebInformationArray(GetMulti(AQuery,True,N));
end;


Function TSPWebInformationsEntitySet.ListAll(const AQuery: TQueryParams) : TSPWebInformationArray; 

var N : String;

begin
  Result:=TSPWebInformationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLimitedWebPartManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPLimitedWebPartManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='LimitedWebPartManagers';
end;

Class Function TSPLimitedWebPartManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WebPartsLimitedWebPartManager;
end;


Function TSPLimitedWebPartManagersEntitySet.Get(const HasPersonalizedParts: boolean) : TSP_WebPartsLimitedWebPartManager; 


begin
  Result:=TSP_WebPartsLimitedWebPartManager(GetSingle(BoolToStr(HasPersonalizedParts,'true','false')));
end;


Function TSPLimitedWebPartManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WebPartsLimitedWebPartManagerArray; 


begin
  Result:=TSP_WebPartsLimitedWebPartManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLimitedWebPartManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WebPartsLimitedWebPartManagerArray; 


begin
  Result:=TSP_WebPartsLimitedWebPartManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLimitedWebPartManagersEntitySet.ListAll(const AQuery: String) : TSP_WebPartsLimitedWebPartManagerArray; 

var N : String;

begin
  Result:=TSP_WebPartsLimitedWebPartManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPLimitedWebPartManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WebPartsLimitedWebPartManagerArray; 

var N : String;

begin
  Result:=TSP_WebPartsLimitedWebPartManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebPartsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebPartsEntitySet.ObjectRestKind : String; 

begin
  Result:='WebParts';
end;

Class Function TSPWebPartsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WebPartsWebPart;
end;


Function TSPWebPartsEntitySet.Get(const Hidden: boolean) : TSP_WebPartsWebPart; 


begin
  Result:=TSP_WebPartsWebPart(GetSingle(BoolToStr(Hidden,'true','false')));
end;


Function TSPWebPartsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WebPartsWebPartArray; 


begin
  Result:=TSP_WebPartsWebPartArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebPartsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WebPartsWebPartArray; 


begin
  Result:=TSP_WebPartsWebPartArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebPartsEntitySet.ListAll(const AQuery: String) : TSP_WebPartsWebPartArray; 

var N : String;

begin
  Result:=TSP_WebPartsWebPartArray(GetMulti(AQuery,True,N));
end;


Function TSPWebPartsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WebPartsWebPartArray; 

var N : String;

begin
  Result:=TSP_WebPartsWebPartArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebPartDefinitionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebPartDefinitionsEntitySet.ObjectRestKind : String; 

begin
  Result:='WebPartDefinitions';
end;

Class Function TSPWebPartDefinitionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WebPartsWebPartDefinition;
end;


Function TSPWebPartDefinitionsEntitySet.Get(const Id: TGUIDString) : TSP_WebPartsWebPartDefinition; 


begin
  Result:=TSP_WebPartsWebPartDefinition(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWebPartDefinitionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WebPartsWebPartDefinitionArray; 


begin
  Result:=TSP_WebPartsWebPartDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebPartDefinitionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WebPartsWebPartDefinitionArray; 


begin
  Result:=TSP_WebPartsWebPartDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebPartDefinitionsEntitySet.ListAll(const AQuery: String) : TSP_WebPartsWebPartDefinitionArray; 

var N : String;

begin
  Result:=TSP_WebPartsWebPartDefinitionArray(GetMulti(AQuery,True,N));
end;


Function TSPWebPartDefinitionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WebPartsWebPartDefinitionArray; 

var N : String;

begin
  Result:=TSP_WebPartsWebPartDefinitionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebProxysEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebProxysEntitySet.ObjectRestKind : String; 

begin
  Result:='WebProxys';
end;

Class Function TSPWebProxysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPWebProxy;
end;


Function TSPWebProxysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPWebProxy; 


begin
  Result:=TSPWebProxy(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWebProxysEntitySet.List(const AQuery: String; out NextLink: String) : TSPWebProxyArray; 


begin
  Result:=TSPWebProxyArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebProxysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPWebProxyArray; 


begin
  Result:=TSPWebProxyArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebProxysEntitySet.ListAll(const AQuery: String) : TSPWebProxyArray; 

var N : String;

begin
  Result:=TSPWebProxyArray(GetMulti(AQuery,True,N));
end;


Function TSPWebProxysEntitySet.ListAll(const AQuery: TQueryParams) : TSPWebProxyArray; 

var N : String;

begin
  Result:=TSPWebProxyArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWebTemplatesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWebTemplatesEntitySet.ObjectRestKind : String; 

begin
  Result:='WebTemplates';
end;

Class Function TSPWebTemplatesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPWebTemplate;
end;


Function TSPWebTemplatesEntitySet.Get(const Id: TInt32) : TSPWebTemplate; 


begin
  Result:=TSPWebTemplate(GetSingle(IntToStr(Id)));
end;


Function TSPWebTemplatesEntitySet.List(const AQuery: String; out NextLink: String) : TSPWebTemplateArray; 


begin
  Result:=TSPWebTemplateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebTemplatesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPWebTemplateArray; 


begin
  Result:=TSPWebTemplateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWebTemplatesEntitySet.ListAll(const AQuery: String) : TSPWebTemplateArray; 

var N : String;

begin
  Result:=TSPWebTemplateArray(GetMulti(AQuery,True,N));
end;


Function TSPWebTemplatesEntitySet.ListAll(const AQuery: TQueryParams) : TSPWebTemplateArray; 

var N : String;

begin
  Result:=TSPWebTemplateArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPWorkflowsEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPWorkflowsEntitySet.ObjectRestKind : String; 

begin
  Result:='SPWorkflows';
end;

Class Function TSPSPWorkflowsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowSPWorkflow;
end;


Function TSPSPWorkflowsEntitySet.Get(const AssociationId: TGUIDString) : TSP_WorkflowSPWorkflow; 


begin
  Result:=TSP_WorkflowSPWorkflow(GetSingle(TODataObject.MakeKeyString(AssociationId)));
end;


Function TSPSPWorkflowsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowSPWorkflowArray; 


begin
  Result:=TSP_WorkflowSPWorkflowArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWorkflowsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowSPWorkflowArray; 


begin
  Result:=TSP_WorkflowSPWorkflowArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWorkflowsEntitySet.ListAll(const AQuery: String) : TSP_WorkflowSPWorkflowArray; 

var N : String;

begin
  Result:=TSP_WorkflowSPWorkflowArray(GetMulti(AQuery,True,N));
end;


Function TSPSPWorkflowsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowSPWorkflowArray; 

var N : String;

begin
  Result:=TSP_WorkflowSPWorkflowArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPWorkflowManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPWorkflowManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SPWorkflowManagers';
end;

Class Function TSPSPWorkflowManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowSPWorkflowManager;
end;


Function TSPSPWorkflowManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkflowSPWorkflowManager; 


begin
  Result:=TSP_WorkflowSPWorkflowManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPWorkflowManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowSPWorkflowManagerArray; 


begin
  Result:=TSP_WorkflowSPWorkflowManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWorkflowManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowSPWorkflowManagerArray; 


begin
  Result:=TSP_WorkflowSPWorkflowManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPWorkflowManagersEntitySet.ListAll(const AQuery: String) : TSP_WorkflowSPWorkflowManagerArray; 

var N : String;

begin
  Result:=TSP_WorkflowSPWorkflowManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSPWorkflowManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowSPWorkflowManagerArray; 

var N : String;

begin
  Result:=TSP_WorkflowSPWorkflowManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowAssociationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowAssociationsEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowAssociations';
end;

Class Function TSPWorkflowAssociationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowWorkflowAssociation;
end;


Function TSPWorkflowAssociationsEntitySet.Get(const Id: TGUIDString) : TSP_WorkflowWorkflowAssociation; 


begin
  Result:=TSP_WorkflowWorkflowAssociation(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWorkflowAssociationsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowWorkflowAssociationArray; 


begin
  Result:=TSP_WorkflowWorkflowAssociationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowAssociationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowWorkflowAssociationArray; 


begin
  Result:=TSP_WorkflowWorkflowAssociationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowAssociationsEntitySet.ListAll(const AQuery: String) : TSP_WorkflowWorkflowAssociationArray; 

var N : String;

begin
  Result:=TSP_WorkflowWorkflowAssociationArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowAssociationsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowWorkflowAssociationArray; 

var N : String;

begin
  Result:=TSP_WorkflowWorkflowAssociationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowTemplatesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowTemplatesEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowTemplates';
end;

Class Function TSPWorkflowTemplatesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowWorkflowTemplate;
end;


Function TSPWorkflowTemplatesEntitySet.Get(const Id: TGUIDString) : TSP_WorkflowWorkflowTemplate; 


begin
  Result:=TSP_WorkflowWorkflowTemplate(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWorkflowTemplatesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowWorkflowTemplateArray; 


begin
  Result:=TSP_WorkflowWorkflowTemplateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowTemplatesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowWorkflowTemplateArray; 


begin
  Result:=TSP_WorkflowWorkflowTemplateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowTemplatesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowWorkflowTemplateArray; 

var N : String;

begin
  Result:=TSP_WorkflowWorkflowTemplateArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowTemplatesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowWorkflowTemplateArray; 

var N : String;

begin
  Result:=TSP_WorkflowWorkflowTemplateArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPInteropServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPInteropServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='InteropServices';
end;

Class Function TSPInteropServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesInteropService;
end;


Function TSPInteropServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkflowServicesInteropService; 


begin
  Result:=TSP_WorkflowServicesInteropService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPInteropServicesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesInteropServiceArray; 


begin
  Result:=TSP_WorkflowServicesInteropServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPInteropServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesInteropServiceArray; 


begin
  Result:=TSP_WorkflowServicesInteropServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPInteropServicesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesInteropServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesInteropServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPInteropServicesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesInteropServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesInteropServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowDefinitionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowDefinitionsEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowDefinitions';
end;

Class Function TSPWorkflowDefinitionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowDefinition;
end;


Function TSPWorkflowDefinitionsEntitySet.Get(const Id: TGUIDString) : TSP_WorkflowServicesWorkflowDefinition; 


begin
  Result:=TSP_WorkflowServicesWorkflowDefinition(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWorkflowDefinitionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowDefinitionArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDefinitionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowDefinitionArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowDefinitionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDefinitionsEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowDefinitionArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowDefinitionArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowDefinitionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowDefinitionArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowDefinitionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowDeploymentServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowDeploymentServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowDeploymentServices';
end;

Class Function TSPWorkflowDeploymentServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowDeploymentService;
end;


Function TSPWorkflowDeploymentServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkflowServicesWorkflowDeploymentService; 


begin
  Result:=TSP_WorkflowServicesWorkflowDeploymentService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWorkflowDeploymentServicesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowDeploymentServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowDeploymentServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDeploymentServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowDeploymentServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowDeploymentServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowDeploymentServicesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowDeploymentServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowDeploymentServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowDeploymentServicesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowDeploymentServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowDeploymentServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowInstancesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowInstancesEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowInstances';
end;

Class Function TSPWorkflowInstancesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowInstance;
end;


Function TSPWorkflowInstancesEntitySet.Get(const Id: TGUIDString) : TSP_WorkflowServicesWorkflowInstance; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstance(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWorkflowInstancesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowInstanceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowInstancesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowInstanceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstanceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowInstancesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowInstanceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowInstanceArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowInstancesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowInstanceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowInstanceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowInstanceServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowInstanceServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowInstanceServices';
end;

Class Function TSPWorkflowInstanceServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowInstanceService;
end;


Function TSPWorkflowInstanceServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkflowServicesWorkflowInstanceService; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstanceService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWorkflowInstanceServicesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowInstanceServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstanceServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowInstanceServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowInstanceServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowInstanceServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowInstanceServicesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowInstanceServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowInstanceServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowInstanceServicesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowInstanceServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowInstanceServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowMessagingServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowMessagingServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowMessagingServices';
end;

Class Function TSPWorkflowMessagingServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowMessagingService;
end;


Function TSPWorkflowMessagingServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkflowServicesWorkflowMessagingService; 


begin
  Result:=TSP_WorkflowServicesWorkflowMessagingService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWorkflowMessagingServicesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowMessagingServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowMessagingServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowMessagingServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowMessagingServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowMessagingServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowMessagingServicesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowMessagingServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowMessagingServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowMessagingServicesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowMessagingServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowMessagingServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowServicesManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowServicesManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowServicesManagers';
end;

Class Function TSPWorkflowServicesManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowServicesManager;
end;


Function TSPWorkflowServicesManagersEntitySet.Get(const AppId: string) : TSP_WorkflowServicesWorkflowServicesManager; 


begin
  Result:=TSP_WorkflowServicesWorkflowServicesManager(GetSingle(TODataObject.MakeKeyString(AppId)));
end;


Function TSPWorkflowServicesManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowServicesManagerArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowServicesManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowServicesManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowServicesManagerArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowServicesManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowServicesManagersEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowServicesManagerArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowServicesManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowServicesManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowServicesManagerArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowServicesManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowSubscriptionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowSubscriptionsEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowSubscriptions';
end;

Class Function TSPWorkflowSubscriptionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowSubscription;
end;


Function TSPWorkflowSubscriptionsEntitySet.Get(const Id: TGUIDString) : TSP_WorkflowServicesWorkflowSubscription; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscription(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPWorkflowSubscriptionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowSubscriptionArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowSubscriptionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowSubscriptionArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowSubscriptionsEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowSubscriptionArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowSubscriptionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowSubscriptionArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPWorkflowSubscriptionServicesEntitySet
  --------------------------------------------------------------------}


Class Function TSPWorkflowSubscriptionServicesEntitySet.ObjectRestKind : String; 

begin
  Result:='WorkflowSubscriptionServices';
end;

Class Function TSPWorkflowSubscriptionServicesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionService;
end;


Function TSPWorkflowSubscriptionServicesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkflowServicesWorkflowSubscriptionService; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionService(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPWorkflowSubscriptionServicesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkflowServicesWorkflowSubscriptionServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowSubscriptionServicesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkflowServicesWorkflowSubscriptionServiceArray; 


begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionServiceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPWorkflowSubscriptionServicesEntitySet.ListAll(const AQuery: String) : TSP_WorkflowServicesWorkflowSubscriptionServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionServiceArray(GetMulti(AQuery,True,N));
end;


Function TSPWorkflowSubscriptionServicesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkflowServicesWorkflowSubscriptionServiceArray; 

var N : String;

begin
  Result:=TSP_WorkflowServicesWorkflowSubscriptionServiceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPBaseSessionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPBaseSessionsEntitySet.ObjectRestKind : String; 

begin
  Result:='BaseSessions';
end;

Class Function TSPBaseSessionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMBaseSession;
end;


Function TSPBaseSessionsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMBaseSession; 


begin
  Result:=TSP_WorkManagement_OMBaseSession(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPBaseSessionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMBaseSessionArray; 


begin
  Result:=TSP_WorkManagement_OMBaseSessionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPBaseSessionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMBaseSessionArray; 


begin
  Result:=TSP_WorkManagement_OMBaseSessionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPBaseSessionsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMBaseSessionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMBaseSessionArray(GetMulti(AQuery,True,N));
end;


Function TSPBaseSessionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMBaseSessionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMBaseSessionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPBooleanCriterionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPBooleanCriterionsEntitySet.ObjectRestKind : String; 

begin
  Result:='BooleanCriterions';
end;

Class Function TSPBooleanCriterionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMBooleanCriterion;
end;


Function TSPBooleanCriterionsEntitySet.Get(const CompareType: TInt32) : TSP_WorkManagement_OMBooleanCriterion; 


begin
  Result:=TSP_WorkManagement_OMBooleanCriterion(GetSingle(IntToStr(CompareType)));
end;


Function TSPBooleanCriterionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMBooleanCriterionArray; 


begin
  Result:=TSP_WorkManagement_OMBooleanCriterionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPBooleanCriterionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMBooleanCriterionArray; 


begin
  Result:=TSP_WorkManagement_OMBooleanCriterionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPBooleanCriterionsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMBooleanCriterionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMBooleanCriterionArray(GetMulti(AQuery,True,N));
end;


Function TSPBooleanCriterionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMBooleanCriterionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMBooleanCriterionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCalloutInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPCalloutInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='CalloutInfos';
end;

Class Function TSPCalloutInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMCalloutInfo;
end;


Function TSPCalloutInfosEntitySet.Get(const DirectLinkTitle: string) : TSP_WorkManagement_OMCalloutInfo; 


begin
  Result:=TSP_WorkManagement_OMCalloutInfo(GetSingle(TODataObject.MakeKeyString(DirectLinkTitle)));
end;


Function TSPCalloutInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMCalloutInfoArray; 


begin
  Result:=TSP_WorkManagement_OMCalloutInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCalloutInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMCalloutInfoArray; 


begin
  Result:=TSP_WorkManagement_OMCalloutInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCalloutInfosEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMCalloutInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMCalloutInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPCalloutInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMCalloutInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMCalloutInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCreateRefreshJobResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPCreateRefreshJobResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='CreateRefreshJobResults';
end;

Class Function TSPCreateRefreshJobResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMCreateRefreshJobResult;
end;


Function TSPCreateRefreshJobResultsEntitySet.Get(const CreatedJob: boolean) : TSP_WorkManagement_OMCreateRefreshJobResult; 


begin
  Result:=TSP_WorkManagement_OMCreateRefreshJobResult(GetSingle(BoolToStr(CreatedJob,'true','false')));
end;


Function TSPCreateRefreshJobResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMCreateRefreshJobResultArray; 


begin
  Result:=TSP_WorkManagement_OMCreateRefreshJobResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCreateRefreshJobResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMCreateRefreshJobResultArray; 


begin
  Result:=TSP_WorkManagement_OMCreateRefreshJobResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCreateRefreshJobResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMCreateRefreshJobResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMCreateRefreshJobResultArray(GetMulti(AQuery,True,N));
end;


Function TSPCreateRefreshJobResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMCreateRefreshJobResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMCreateRefreshJobResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPCustomAttributeFiltersEntitySet
  --------------------------------------------------------------------}


Class Function TSPCustomAttributeFiltersEntitySet.ObjectRestKind : String; 

begin
  Result:='CustomAttributeFilters';
end;

Class Function TSPCustomAttributeFiltersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilter;
end;


Function TSPCustomAttributeFiltersEntitySet.Get(const ConcatType: TInt32) : TSP_WorkManagement_OMCustomAttributeFilter; 


begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilter(GetSingle(IntToStr(ConcatType)));
end;


Function TSPCustomAttributeFiltersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMCustomAttributeFilterArray; 


begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCustomAttributeFiltersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMCustomAttributeFilterArray; 


begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPCustomAttributeFiltersEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMCustomAttributeFilterArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilterArray(GetMulti(AQuery,True,N));
end;


Function TSPCustomAttributeFiltersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMCustomAttributeFilterArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMCustomAttributeFilterArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDashboardScriptExtensionInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPDashboardScriptExtensionInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='DashboardScriptExtensionInfos';
end;

Class Function TSPDashboardScriptExtensionInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfo;
end;


Function TSPDashboardScriptExtensionInfosEntitySet.Get(const ProviderKey: string) : TSP_WorkManagement_OMDashboardScriptExtensionInfo; 


begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfo(GetSingle(TODataObject.MakeKeyString(ProviderKey)));
end;


Function TSPDashboardScriptExtensionInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray; 


begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDashboardScriptExtensionInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray; 


begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDashboardScriptExtensionInfosEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPDashboardScriptExtensionInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMDashboardScriptExtensionInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMDashboardScriptExtensionInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDateRangeCriterionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPDateRangeCriterionsEntitySet.ObjectRestKind : String; 

begin
  Result:='DateRangeCriterions';
end;

Class Function TSPDateRangeCriterionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMDateRangeCriterion;
end;


Function TSPDateRangeCriterionsEntitySet.Get(const RangeEndValue: TDateTime) : TSP_WorkManagement_OMDateRangeCriterion; 


begin
  Result:=TSP_WorkManagement_OMDateRangeCriterion(GetSingle(FormatDateTime('yyyy-mm-dd"T"hhmmss',RangeEndValue)));
end;


Function TSPDateRangeCriterionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMDateRangeCriterionArray; 


begin
  Result:=TSP_WorkManagement_OMDateRangeCriterionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDateRangeCriterionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMDateRangeCriterionArray; 


begin
  Result:=TSP_WorkManagement_OMDateRangeCriterionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDateRangeCriterionsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMDateRangeCriterionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMDateRangeCriterionArray(GetMulti(AQuery,True,N));
end;


Function TSPDateRangeCriterionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMDateRangeCriterionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMDateRangeCriterionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPExchangeUserSyncStatesEntitySet
  --------------------------------------------------------------------}


Class Function TSPExchangeUserSyncStatesEntitySet.ObjectRestKind : String; 

begin
  Result:='ExchangeUserSyncStates';
end;

Class Function TSPExchangeUserSyncStatesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMExchangeUserSyncState;
end;


Function TSPExchangeUserSyncStatesEntitySet.Get(const IsOptedIn: boolean) : TSP_WorkManagement_OMExchangeUserSyncState; 


begin
  Result:=TSP_WorkManagement_OMExchangeUserSyncState(GetSingle(BoolToStr(IsOptedIn,'true','false')));
end;


Function TSPExchangeUserSyncStatesEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMExchangeUserSyncStateArray; 


begin
  Result:=TSP_WorkManagement_OMExchangeUserSyncStateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExchangeUserSyncStatesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMExchangeUserSyncStateArray; 


begin
  Result:=TSP_WorkManagement_OMExchangeUserSyncStateArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPExchangeUserSyncStatesEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMExchangeUserSyncStateArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMExchangeUserSyncStateArray(GetMulti(AQuery,True,N));
end;


Function TSPExchangeUserSyncStatesEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMExchangeUserSyncStateArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMExchangeUserSyncStateArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLocationsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLocationsEntitySet.ObjectRestKind : String; 

begin
  Result:='Locations';
end;

Class Function TSPLocationsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMLocation;
end;


Function TSPLocationsEntitySet.Get(const Id: TInt32) : TSP_WorkManagement_OMLocation; 


begin
  Result:=TSP_WorkManagement_OMLocation(GetSingle(IntToStr(Id)));
end;


Function TSPLocationsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMLocationArray; 


begin
  Result:=TSP_WorkManagement_OMLocationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMLocationArray; 


begin
  Result:=TSP_WorkManagement_OMLocationArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMLocationArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationArray(GetMulti(AQuery,True,N));
end;


Function TSPLocationsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMLocationArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLocationDisplaySettingsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLocationDisplaySettingsEntitySet.ObjectRestKind : String; 

begin
  Result:='LocationDisplaySettings';
end;

Class Function TSPLocationDisplaySettingsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMLocationDisplaySetting;
end;


Function TSPLocationDisplaySettingsEntitySet.Get(const Id: TInt32) : TSP_WorkManagement_OMLocationDisplaySetting; 


begin
  Result:=TSP_WorkManagement_OMLocationDisplaySetting(GetSingle(IntToStr(Id)));
end;


Function TSPLocationDisplaySettingsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMLocationDisplaySettingArray; 


begin
  Result:=TSP_WorkManagement_OMLocationDisplaySettingArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationDisplaySettingsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMLocationDisplaySettingArray; 


begin
  Result:=TSP_WorkManagement_OMLocationDisplaySettingArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationDisplaySettingsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMLocationDisplaySettingArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationDisplaySettingArray(GetMulti(AQuery,True,N));
end;


Function TSPLocationDisplaySettingsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMLocationDisplaySettingArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationDisplaySettingArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLocationFiltersEntitySet
  --------------------------------------------------------------------}


Class Function TSPLocationFiltersEntitySet.ObjectRestKind : String; 

begin
  Result:='LocationFilters';
end;

Class Function TSPLocationFiltersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMLocationFilter;
end;


Function TSPLocationFiltersEntitySet.Get(const IncludeUncategorizedTasks: boolean) : TSP_WorkManagement_OMLocationFilter; 


begin
  Result:=TSP_WorkManagement_OMLocationFilter(GetSingle(BoolToStr(IncludeUncategorizedTasks,'true','false')));
end;


Function TSPLocationFiltersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMLocationFilterArray; 


begin
  Result:=TSP_WorkManagement_OMLocationFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationFiltersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMLocationFilterArray; 


begin
  Result:=TSP_WorkManagement_OMLocationFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationFiltersEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMLocationFilterArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationFilterArray(GetMulti(AQuery,True,N));
end;


Function TSPLocationFiltersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMLocationFilterArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationFilterArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPLocationUpdateResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPLocationUpdateResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='LocationUpdateResults';
end;

Class Function TSPLocationUpdateResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMLocationUpdateResult;
end;


Function TSPLocationUpdateResultsEntitySet.Get(const ActiveAddedCount: int64) : TSP_WorkManagement_OMLocationUpdateResult; 


begin
  Result:=TSP_WorkManagement_OMLocationUpdateResult(GetSingle(IntToStr(ActiveAddedCount)));
end;


Function TSPLocationUpdateResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMLocationUpdateResultArray; 


begin
  Result:=TSP_WorkManagement_OMLocationUpdateResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationUpdateResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMLocationUpdateResultArray; 


begin
  Result:=TSP_WorkManagement_OMLocationUpdateResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPLocationUpdateResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMLocationUpdateResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationUpdateResultArray(GetMulti(AQuery,True,N));
end;


Function TSPLocationUpdateResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMLocationUpdateResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMLocationUpdateResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNameCriterionsEntitySet
  --------------------------------------------------------------------}


Class Function TSPNameCriterionsEntitySet.ObjectRestKind : String; 

begin
  Result:='NameCriterions';
end;

Class Function TSPNameCriterionsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMNameCriterion;
end;


Function TSPNameCriterionsEntitySet.Get(const CompareType: TInt32) : TSP_WorkManagement_OMNameCriterion; 


begin
  Result:=TSP_WorkManagement_OMNameCriterion(GetSingle(IntToStr(CompareType)));
end;


Function TSPNameCriterionsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMNameCriterionArray; 


begin
  Result:=TSP_WorkManagement_OMNameCriterionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNameCriterionsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMNameCriterionArray; 


begin
  Result:=TSP_WorkManagement_OMNameCriterionArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNameCriterionsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMNameCriterionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMNameCriterionArray(GetMulti(AQuery,True,N));
end;


Function TSPNameCriterionsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMNameCriterionArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMNameCriterionArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPNonTaskDataReadResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPNonTaskDataReadResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='NonTaskDataReadResults';
end;

Class Function TSPNonTaskDataReadResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMNonTaskDataReadResult;
end;


Function TSPNonTaskDataReadResultsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMNonTaskDataReadResult; 


begin
  Result:=TSP_WorkManagement_OMNonTaskDataReadResult(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPNonTaskDataReadResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMNonTaskDataReadResultArray; 


begin
  Result:=TSP_WorkManagement_OMNonTaskDataReadResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNonTaskDataReadResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMNonTaskDataReadResultArray; 


begin
  Result:=TSP_WorkManagement_OMNonTaskDataReadResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPNonTaskDataReadResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMNonTaskDataReadResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMNonTaskDataReadResultArray(GetMulti(AQuery,True,N));
end;


Function TSPNonTaskDataReadResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMNonTaskDataReadResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMNonTaskDataReadResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPOrderInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPOrderInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='OrderInfos';
end;

Class Function TSPOrderInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMOrderInfo;
end;


Function TSPOrderInfosEntitySet.Get(const Field: TInt32) : TSP_WorkManagement_OMOrderInfo; 


begin
  Result:=TSP_WorkManagement_OMOrderInfo(GetSingle(IntToStr(Field)));
end;


Function TSPOrderInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMOrderInfoArray; 


begin
  Result:=TSP_WorkManagement_OMOrderInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPOrderInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMOrderInfoArray; 


begin
  Result:=TSP_WorkManagement_OMOrderInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPOrderInfosEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMOrderInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMOrderInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPOrderInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMOrderInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMOrderInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPPersistedPropertiessEntitySet
  --------------------------------------------------------------------}


Class Function TSPPersistedPropertiessEntitySet.ObjectRestKind : String; 

begin
  Result:='PersistedPropertiess';
end;

Class Function TSPPersistedPropertiessEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMPersistedProperties;
end;


Function TSPPersistedPropertiessEntitySet.Get(const GroupByProjects: boolean) : TSP_WorkManagement_OMPersistedProperties; 


begin
  Result:=TSP_WorkManagement_OMPersistedProperties(GetSingle(BoolToStr(GroupByProjects,'true','false')));
end;


Function TSPPersistedPropertiessEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMPersistedPropertiesArray; 


begin
  Result:=TSP_WorkManagement_OMPersistedPropertiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPersistedPropertiessEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMPersistedPropertiesArray; 


begin
  Result:=TSP_WorkManagement_OMPersistedPropertiesArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPPersistedPropertiessEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMPersistedPropertiesArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMPersistedPropertiesArray(GetMulti(AQuery,True,N));
end;


Function TSPPersistedPropertiessEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMPersistedPropertiesArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMPersistedPropertiesArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProviderErrorInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPProviderErrorInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='ProviderErrorInfos';
end;

Class Function TSPProviderErrorInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMProviderErrorInfo;
end;


Function TSPProviderErrorInfosEntitySet.Get(const CorrelationId: string) : TSP_WorkManagement_OMProviderErrorInfo; 


begin
  Result:=TSP_WorkManagement_OMProviderErrorInfo(GetSingle(TODataObject.MakeKeyString(CorrelationId)));
end;


Function TSPProviderErrorInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMProviderErrorInfoArray; 


begin
  Result:=TSP_WorkManagement_OMProviderErrorInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProviderErrorInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMProviderErrorInfoArray; 


begin
  Result:=TSP_WorkManagement_OMProviderErrorInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProviderErrorInfosEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMProviderErrorInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMProviderErrorInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPProviderErrorInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMProviderErrorInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMProviderErrorInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPProviderRefreshStatussEntitySet
  --------------------------------------------------------------------}


Class Function TSPProviderRefreshStatussEntitySet.ObjectRestKind : String; 

begin
  Result:='ProviderRefreshStatuss';
end;

Class Function TSPProviderRefreshStatussEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatus;
end;


Function TSPProviderRefreshStatussEntitySet.Get(const ProviderKey: string) : TSP_WorkManagement_OMProviderRefreshStatus; 


begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatus(GetSingle(TODataObject.MakeKeyString(ProviderKey)));
end;


Function TSPProviderRefreshStatussEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMProviderRefreshStatusArray; 


begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProviderRefreshStatussEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMProviderRefreshStatusArray; 


begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatusArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPProviderRefreshStatussEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMProviderRefreshStatusArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatusArray(GetMulti(AQuery,True,N));
end;


Function TSPProviderRefreshStatussEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMProviderRefreshStatusArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMProviderRefreshStatusArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRefreshHealthInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPRefreshHealthInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='RefreshHealthInfos';
end;

Class Function TSPRefreshHealthInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMRefreshHealthInfo;
end;


Function TSPRefreshHealthInfosEntitySet.Get(const LatestRefreshTime: TDateTime) : TSP_WorkManagement_OMRefreshHealthInfo; 


begin
  Result:=TSP_WorkManagement_OMRefreshHealthInfo(GetSingle(FormatDateTime('yyyy-mm-dd"T"hhmmss',LatestRefreshTime)));
end;


Function TSPRefreshHealthInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMRefreshHealthInfoArray; 


begin
  Result:=TSP_WorkManagement_OMRefreshHealthInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRefreshHealthInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMRefreshHealthInfoArray; 


begin
  Result:=TSP_WorkManagement_OMRefreshHealthInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRefreshHealthInfosEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMRefreshHealthInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMRefreshHealthInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPRefreshHealthInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMRefreshHealthInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMRefreshHealthInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRefreshHistorysEntitySet
  --------------------------------------------------------------------}


Class Function TSPRefreshHistorysEntitySet.ObjectRestKind : String; 

begin
  Result:='RefreshHistorys';
end;

Class Function TSPRefreshHistorysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMRefreshHistory;
end;


Function TSPRefreshHistorysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMRefreshHistory; 


begin
  Result:=TSP_WorkManagement_OMRefreshHistory(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPRefreshHistorysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMRefreshHistoryArray; 


begin
  Result:=TSP_WorkManagement_OMRefreshHistoryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRefreshHistorysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMRefreshHistoryArray; 


begin
  Result:=TSP_WorkManagement_OMRefreshHistoryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRefreshHistorysEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMRefreshHistoryArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMRefreshHistoryArray(GetMulti(AQuery,True,N));
end;


Function TSPRefreshHistorysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMRefreshHistoryArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMRefreshHistoryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPRefreshResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPRefreshResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='RefreshResults';
end;

Class Function TSPRefreshResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMRefreshResult;
end;


Function TSPRefreshResultsEntitySet.Get(const AggregatorRefreshState: TInt32) : TSP_WorkManagement_OMRefreshResult; 


begin
  Result:=TSP_WorkManagement_OMRefreshResult(GetSingle(IntToStr(AggregatorRefreshState)));
end;


Function TSPRefreshResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMRefreshResultArray; 


begin
  Result:=TSP_WorkManagement_OMRefreshResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRefreshResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMRefreshResultArray; 


begin
  Result:=TSP_WorkManagement_OMRefreshResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPRefreshResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMRefreshResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMRefreshResultArray(GetMulti(AQuery,True,N));
end;


Function TSPRefreshResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMRefreshResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMRefreshResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSortableSessionManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSortableSessionManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='SortableSessionManagers';
end;

Class Function TSPSortableSessionManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMSortableSessionManager;
end;


Function TSPSortableSessionManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMSortableSessionManager; 


begin
  Result:=TSP_WorkManagement_OMSortableSessionManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSortableSessionManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMSortableSessionManagerArray; 


begin
  Result:=TSP_WorkManagement_OMSortableSessionManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSortableSessionManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMSortableSessionManagerArray; 


begin
  Result:=TSP_WorkManagement_OMSortableSessionManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSortableSessionManagersEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMSortableSessionManagerArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMSortableSessionManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPSortableSessionManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMSortableSessionManagerArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMSortableSessionManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSortableTaskQuerysEntitySet
  --------------------------------------------------------------------}


Class Function TSPSortableTaskQuerysEntitySet.ObjectRestKind : String; 

begin
  Result:='SortableTaskQuerys';
end;

Class Function TSPSortableTaskQuerysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMSortableTaskQuery;
end;


Function TSPSortableTaskQuerysEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMSortableTaskQuery; 


begin
  Result:=TSP_WorkManagement_OMSortableTaskQuery(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSortableTaskQuerysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMSortableTaskQueryArray; 


begin
  Result:=TSP_WorkManagement_OMSortableTaskQueryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSortableTaskQuerysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMSortableTaskQueryArray; 


begin
  Result:=TSP_WorkManagement_OMSortableTaskQueryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSortableTaskQuerysEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMSortableTaskQueryArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMSortableTaskQueryArray(GetMulti(AQuery,True,N));
end;


Function TSPSortableTaskQuerysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMSortableTaskQueryArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMSortableTaskQueryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTasks1EntitySet
  --------------------------------------------------------------------}


Class Function TSPTasks1EntitySet.ObjectRestKind : String; 

begin
  Result:='Tasks1';
end;

Class Function TSPTasks1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTask;
end;


Function TSPTasks1EntitySet.Get(const Id: TInt32) : TSP_WorkManagement_OMTask; 


begin
  Result:=TSP_WorkManagement_OMTask(GetSingle(IntToStr(Id)));
end;


Function TSPTasks1EntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskArray; 


begin
  Result:=TSP_WorkManagement_OMTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTasks1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskArray; 


begin
  Result:=TSP_WorkManagement_OMTaskArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTasks1EntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskArray(GetMulti(AQuery,True,N));
end;


Function TSPTasks1EntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskFiltersEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskFiltersEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskFilters';
end;

Class Function TSPTaskFiltersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTaskFilter;
end;


Function TSPTaskFiltersEntitySet.Get(const CriterionConcatType: TInt32) : TSP_WorkManagement_OMTaskFilter; 


begin
  Result:=TSP_WorkManagement_OMTaskFilter(GetSingle(IntToStr(CriterionConcatType)));
end;


Function TSPTaskFiltersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskFilterArray; 


begin
  Result:=TSP_WorkManagement_OMTaskFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskFiltersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskFilterArray; 


begin
  Result:=TSP_WorkManagement_OMTaskFilterArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskFiltersEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskFilterArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskFilterArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskFiltersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskFilterArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskFilterArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskQuerysEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskQuerysEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskQuerys';
end;

Class Function TSPTaskQuerysEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTaskQuery;
end;


Function TSPTaskQuerysEntitySet.Get(const KeywordFilter: string) : TSP_WorkManagement_OMTaskQuery; 


begin
  Result:=TSP_WorkManagement_OMTaskQuery(GetSingle(TODataObject.MakeKeyString(KeywordFilter)));
end;


Function TSPTaskQuerysEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskQueryArray; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskQuerysEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskQueryArray; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskQuerysEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskQueryArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskQueryArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskQuerysEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskQueryArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskQueryArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskQueryByLocationResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskQueryByLocationResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskQueryByLocationResults';
end;

Class Function TSPTaskQueryByLocationResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTaskQueryByLocationResult;
end;


Function TSPTaskQueryByLocationResultsEntitySet.Get(const Error: TInt32) : TSP_WorkManagement_OMTaskQueryByLocationResult; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryByLocationResult(GetSingle(IntToStr(Error)));
end;


Function TSPTaskQueryByLocationResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskQueryByLocationResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryByLocationResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskQueryByLocationResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskQueryByLocationResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryByLocationResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskQueryByLocationResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskQueryByLocationResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskQueryByLocationResultArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskQueryByLocationResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskQueryByLocationResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskQueryByLocationResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskQueryResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskQueryResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskQueryResults';
end;

Class Function TSPTaskQueryResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTaskQueryResult;
end;


Function TSPTaskQueryResultsEntitySet.Get(const Error: TInt32) : TSP_WorkManagement_OMTaskQueryResult; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryResult(GetSingle(IntToStr(Error)));
end;


Function TSPTaskQueryResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskQueryResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskQueryResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskQueryResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskQueryResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskQueryResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskQueryResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskQueryResultArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskQueryResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskQueryResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskQueryResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskRefreshResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskRefreshResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskRefreshResults';
end;

Class Function TSPTaskRefreshResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTaskRefreshResult;
end;


Function TSPTaskRefreshResultsEntitySet.Get(const ErrorCorrelationId: string) : TSP_WorkManagement_OMTaskRefreshResult; 


begin
  Result:=TSP_WorkManagement_OMTaskRefreshResult(GetSingle(TODataObject.MakeKeyString(ErrorCorrelationId)));
end;


Function TSPTaskRefreshResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskRefreshResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskRefreshResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskRefreshResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskRefreshResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskRefreshResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskRefreshResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskRefreshResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskRefreshResultArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskRefreshResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskRefreshResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskRefreshResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPTaskWriteResultsEntitySet
  --------------------------------------------------------------------}


Class Function TSPTaskWriteResultsEntitySet.ObjectRestKind : String; 

begin
  Result:='TaskWriteResults';
end;

Class Function TSPTaskWriteResultsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMTaskWriteResult;
end;


Function TSPTaskWriteResultsEntitySet.Get(const Error: TInt32) : TSP_WorkManagement_OMTaskWriteResult; 


begin
  Result:=TSP_WorkManagement_OMTaskWriteResult(GetSingle(IntToStr(Error)));
end;


Function TSPTaskWriteResultsEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMTaskWriteResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskWriteResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskWriteResultsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMTaskWriteResultArray; 


begin
  Result:=TSP_WorkManagement_OMTaskWriteResultArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPTaskWriteResultsEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMTaskWriteResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskWriteResultArray(GetMulti(AQuery,True,N));
end;


Function TSPTaskWriteResultsEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMTaskWriteResultArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMTaskWriteResultArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserOrderedSessionManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserOrderedSessionManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='UserOrderedSessionManagers';
end;

Class Function TSPUserOrderedSessionManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMUserOrderedSessionManager;
end;


Function TSPUserOrderedSessionManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMUserOrderedSessionManager; 


begin
  Result:=TSP_WorkManagement_OMUserOrderedSessionManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPUserOrderedSessionManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMUserOrderedSessionManagerArray; 


begin
  Result:=TSP_WorkManagement_OMUserOrderedSessionManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserOrderedSessionManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMUserOrderedSessionManagerArray; 


begin
  Result:=TSP_WorkManagement_OMUserOrderedSessionManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserOrderedSessionManagersEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMUserOrderedSessionManagerArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMUserOrderedSessionManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPUserOrderedSessionManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMUserOrderedSessionManagerArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMUserOrderedSessionManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserSettingssEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserSettingssEntitySet.ObjectRestKind : String; 

begin
  Result:='UserSettingss';
end;

Class Function TSPUserSettingssEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMUserSettings;
end;


Function TSPUserSettingssEntitySet.Get(const DaysAfterCurrentDateTimelineEnds: TInt32) : TSP_WorkManagement_OMUserSettings; 


begin
  Result:=TSP_WorkManagement_OMUserSettings(GetSingle(IntToStr(DaysAfterCurrentDateTimelineEnds)));
end;


Function TSPUserSettingssEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMUserSettingsArray; 


begin
  Result:=TSP_WorkManagement_OMUserSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserSettingssEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMUserSettingsArray; 


begin
  Result:=TSP_WorkManagement_OMUserSettingsArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserSettingssEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMUserSettingsArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMUserSettingsArray(GetMulti(AQuery,True,N));
end;


Function TSPUserSettingssEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMUserSettingsArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMUserSettingsArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPUserSettingsManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPUserSettingsManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='UserSettingsManagers';
end;

Class Function TSPUserSettingsManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMUserSettingsManager;
end;


Function TSPUserSettingsManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSP_WorkManagement_OMUserSettingsManager; 


begin
  Result:=TSP_WorkManagement_OMUserSettingsManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPUserSettingsManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMUserSettingsManagerArray; 


begin
  Result:=TSP_WorkManagement_OMUserSettingsManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserSettingsManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMUserSettingsManagerArray; 


begin
  Result:=TSP_WorkManagement_OMUserSettingsManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPUserSettingsManagersEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMUserSettingsManagerArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMUserSettingsManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPUserSettingsManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMUserSettingsManagerArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMUserSettingsManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPViewSelectionInfosEntitySet
  --------------------------------------------------------------------}


Class Function TSPViewSelectionInfosEntitySet.ObjectRestKind : String; 

begin
  Result:='ViewSelectionInfos';
end;

Class Function TSPViewSelectionInfosEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_WorkManagement_OMViewSelectionInfo;
end;


Function TSPViewSelectionInfosEntitySet.Get(const Id: TInt32) : TSP_WorkManagement_OMViewSelectionInfo; 


begin
  Result:=TSP_WorkManagement_OMViewSelectionInfo(GetSingle(IntToStr(Id)));
end;


Function TSPViewSelectionInfosEntitySet.List(const AQuery: String; out NextLink: String) : TSP_WorkManagement_OMViewSelectionInfoArray; 


begin
  Result:=TSP_WorkManagement_OMViewSelectionInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPViewSelectionInfosEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSP_WorkManagement_OMViewSelectionInfoArray; 


begin
  Result:=TSP_WorkManagement_OMViewSelectionInfoArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPViewSelectionInfosEntitySet.ListAll(const AQuery: String) : TSP_WorkManagement_OMViewSelectionInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMViewSelectionInfoArray(GetMulti(AQuery,True,N));
end;


Function TSPViewSelectionInfosEntitySet.ListAll(const AQuery: TQueryParams) : TSP_WorkManagement_OMViewSelectionInfoArray; 

var N : String;

begin
  Result:=TSP_WorkManagement_OMViewSelectionInfoArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPSPOIdentityHelpersEntitySet
  --------------------------------------------------------------------}


Class Function TSPSPOIdentityHelpersEntitySet.ObjectRestKind : String; 

begin
  Result:='SPOIdentityHelpers';
end;

Class Function TSPSPOIdentityHelpersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPO_IdentitySPOIdentityHelper;
end;


Function TSPSPOIdentityHelpersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPO_IdentitySPOIdentityHelper; 


begin
  Result:=TSPO_IdentitySPOIdentityHelper(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPSPOIdentityHelpersEntitySet.List(const AQuery: String; out NextLink: String) : TSPO_IdentitySPOIdentityHelperArray; 


begin
  Result:=TSPO_IdentitySPOIdentityHelperArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPOIdentityHelpersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPO_IdentitySPOIdentityHelperArray; 


begin
  Result:=TSPO_IdentitySPOIdentityHelperArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPSPOIdentityHelpersEntitySet.ListAll(const AQuery: String) : TSPO_IdentitySPOIdentityHelperArray; 

var N : String;

begin
  Result:=TSPO_IdentitySPOIdentityHelperArray(GetMulti(AQuery,True,N));
end;


Function TSPSPOIdentityHelpersEntitySet.ListAll(const AQuery: TQueryParams) : TSPO_IdentitySPOIdentityHelperArray; 

var N : String;

begin
  Result:=TSPO_IdentitySPOIdentityHelperArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalIdentityProvidersEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalIdentityProvidersEntitySet.ObjectRestKind : String; 

begin
  Result:='AppPrincipalIdentityProviders';
end;

Class Function TSPAppPrincipalIdentityProvidersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppPrincipalIdentityProvider;
end;


Function TSPAppPrincipalIdentityProvidersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAppPrincipalIdentityProvider; 


begin
  Result:=TSPAppPrincipalIdentityProvider(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppPrincipalIdentityProvidersEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppPrincipalIdentityProviderArray; 


begin
  Result:=TSPAppPrincipalIdentityProviderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalIdentityProvidersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppPrincipalIdentityProviderArray; 


begin
  Result:=TSPAppPrincipalIdentityProviderArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalIdentityProvidersEntitySet.ListAll(const AQuery: String) : TSPAppPrincipalIdentityProviderArray; 

var N : String;

begin
  Result:=TSPAppPrincipalIdentityProviderArray(GetMulti(AQuery,True,N));
end;


Function TSPAppPrincipalIdentityProvidersEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppPrincipalIdentityProviderArray; 

var N : String;

begin
  Result:=TSPAppPrincipalIdentityProviderArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalManagersEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalManagersEntitySet.ObjectRestKind : String; 

begin
  Result:='AppPrincipalManagers';
end;

Class Function TSPAppPrincipalManagersEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppPrincipalManager;
end;


Function TSPAppPrincipalManagersEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAppPrincipalManager; 


begin
  Result:=TSPAppPrincipalManager(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppPrincipalManagersEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppPrincipalManagerArray; 


begin
  Result:=TSPAppPrincipalManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalManagersEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppPrincipalManagerArray; 


begin
  Result:=TSPAppPrincipalManagerArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalManagersEntitySet.ListAll(const AQuery: String) : TSPAppPrincipalManagerArray; 

var N : String;

begin
  Result:=TSPAppPrincipalManagerArray(GetMulti(AQuery,True,N));
end;


Function TSPAppPrincipalManagersEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppPrincipalManagerArray; 

var N : String;

begin
  Result:=TSPAppPrincipalManagerArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalCredentialsEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalCredentialsEntitySet.ObjectRestKind : String; 

begin
  Result:='AppPrincipalCredentials';
end;

Class Function TSPAppPrincipalCredentialsEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppPrincipalCredential;
end;


Function TSPAppPrincipalCredentialsEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAppPrincipalCredential; 


begin
  Result:=TSPAppPrincipalCredential(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppPrincipalCredentialsEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppPrincipalCredentialArray; 


begin
  Result:=TSPAppPrincipalCredentialArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalCredentialsEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppPrincipalCredentialArray; 


begin
  Result:=TSPAppPrincipalCredentialArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalCredentialsEntitySet.ListAll(const AQuery: String) : TSPAppPrincipalCredentialArray; 

var N : String;

begin
  Result:=TSPAppPrincipalCredentialArray(GetMulti(AQuery,True,N));
end;


Function TSPAppPrincipalCredentialsEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppPrincipalCredentialArray; 

var N : String;

begin
  Result:=TSPAppPrincipalCredentialArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPAppPrincipalNamesEntitySet
  --------------------------------------------------------------------}


Class Function TSPAppPrincipalNamesEntitySet.ObjectRestKind : String; 

begin
  Result:='AppPrincipalNames';
end;

Class Function TSPAppPrincipalNamesEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSPAppPrincipalName;
end;


Function TSPAppPrincipalNamesEntitySet.Get(const Id4a81de82eeb94d6080ea5bf63e27023a: string) : TSPAppPrincipalName; 


begin
  Result:=TSPAppPrincipalName(GetSingle(TODataObject.MakeKeyString(Id4a81de82eeb94d6080ea5bf63e27023a)));
end;


Function TSPAppPrincipalNamesEntitySet.List(const AQuery: String; out NextLink: String) : TSPAppPrincipalNameArray; 


begin
  Result:=TSPAppPrincipalNameArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalNamesEntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TSPAppPrincipalNameArray; 


begin
  Result:=TSPAppPrincipalNameArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPAppPrincipalNamesEntitySet.ListAll(const AQuery: String) : TSPAppPrincipalNameArray; 

var N : String;

begin
  Result:=TSPAppPrincipalNameArray(GetMulti(AQuery,True,N));
end;


Function TSPAppPrincipalNamesEntitySet.ListAll(const AQuery: TQueryParams) : TSPAppPrincipalNameArray; 

var N : String;

begin
  Result:=TSPAppPrincipalNameArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSPDraftProjectResources1EntitySet
  --------------------------------------------------------------------}


Class Function TSPDraftProjectResources1EntitySet.ObjectRestKind : String; 

begin
  Result:='DraftProjectResources1';
end;

Class Function TSPDraftProjectResources1EntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TPSDraftProjectResource;
end;


Function TSPDraftProjectResources1EntitySet.Get(const Id: TGUIDString) : TPSDraftProjectResource; 


begin
  Result:=TPSDraftProjectResource(GetSingle(TODataObject.MakeKeyString(Id)));
end;


Function TSPDraftProjectResources1EntitySet.List(const AQuery: String; out NextLink: String) : TPSDraftProjectResourceArray; 


begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftProjectResources1EntitySet.List(const AQuery: TQueryParams; out NextLink: String) : TPSDraftProjectResourceArray; 


begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,False,NextLink));
end;


Function TSPDraftProjectResources1EntitySet.ListAll(const AQuery: String) : TPSDraftProjectResourceArray; 

var N : String;

begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,True,N));
end;


Function TSPDraftProjectResources1EntitySet.ListAll(const AQuery: TQueryParams) : TPSDraftProjectResourceArray; 

var N : String;

begin
  Result:=TPSDraftProjectResourceArray(GetMulti(AQuery,True,N));
end;


{ --------------------------------------------------------------------
  TSP_DataUserInfoItemImplicitEntitySet
  --------------------------------------------------------------------}


Class Function TSP_DataUserInfoItemImplicitEntitySet.ObjectRestKind : String; 

begin
  Result:='UserInfoItemImplicitEntitySet';
end;

Class Function TSP_DataUserInfoItemImplicitEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DataUserInfoItem;
end;


Function TSP_DataUserInfoItemImplicitEntitySet.Get(const HasUniqueRoleAssignments: boolean) : TSP_DataUserInfoItem; 


begin
  Result:=TSP_DataUserInfoItem(GetSingle(BoolToStr(HasUniqueRoleAssignments,'true','false')));
end;


{ --------------------------------------------------------------------
  TSP_DataTaxonomyHiddenListListItemImplicitEntitySet
  --------------------------------------------------------------------}


Class Function TSP_DataTaxonomyHiddenListListItemImplicitEntitySet.ObjectRestKind : String; 

begin
  Result:='TaxonomyHiddenListListItemImplicitEntitySet';
end;

Class Function TSP_DataTaxonomyHiddenListListItemImplicitEntitySet.EntityClass : TODataEntityClass; 

begin
  Result:=TSP_DataTaxonomyHiddenListListItem;
end;


Function TSP_DataTaxonomyHiddenListListItemImplicitEntitySet.Get(const HasUniqueRoleAssignments: boolean) : TSP_DataTaxonomyHiddenListListItem; 


begin
  Result:=TSP_DataTaxonomyHiddenListListItem(GetSingle(BoolToStr(HasUniqueRoleAssignments,'true','false')));
end;


{ --------------------------------------------------------------------
  TSPService
  --------------------------------------------------------------------}


Class Function TSPService.ObjectRestKind : String; 

begin
  Result:='SP';
end;

Function TSPService.CreateNewApiData : TSPApiData; 

begin
  Result:=TSPApiData(CreateEntityContainer(TSPApiData));
end;


Function TSPService.GetApiData : TSPApiData; 


begin
  If Not Assigned(FApiData) then
    FApiData:=TSPApiData(CreateEntityContainer(TSPApiData));
  Result:=FApiData;
end;

end.
