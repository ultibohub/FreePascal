#
#   Makefile.fpc for MSDOS RTL
#
[package]
main=rtl
[target]
#loaders=prt0s prt0t prt0m prt0c prt0l prt0h # exceptn fpu
units=system si_prc $(UUCHARUNIT) $(OBJPASUNIT) $(ISO7185UNIT) $(STRINGSUNIT) $(CHARSETUNIT) $(CPALLUNIT) \
      $(GETOPTSUNIT) $(EXEINFOUNIT) $(HEAPTRCUNIT)
#$(UUCHARUNIT) $(OBJPASUNIT) $(STRINGSUNIT) dos $(HEAPTRCUNIT) $(LNFODWRFUNIT) sysconst sysutils \
#      $(MATHUNIT) $(MACPASUNIT) $(ISO7185UNIT) $(EXTPASUNIT) rtlconsts typinfo cpu types \
#      $(GETOPTSUNIT) $(SORTBASEUNIT) $(FGLUNIT) classes \
#      msmouse $(PORTSUNIT)  \
#      $(CHARSETUNIT) $(CPALLUNIT) ctypes \
#      $(FPWIDESTRINGUNIT) $(CHARACTERUNIT) $(UNICODEDATAUNIT)
#     $(CMEMUNIT)
#      initc profile dxetype dxeload emu387 \
#      cpu $(MMXUNIT) \
#      vesamode \
# rsts=$(MATHUNIT) typinfo classes dateutil sysconst
implicitunits= $(CP_UNITS)

[require]
nortl=y
[install]
fpcpackage=y
[default]
target=msxdos
cpu=z80
[compiler]
includedir=$(INC) $(PROCINC)
sourcedir=$(INC) $(PROCINC) $(COMMON)
[prerules]
RTL=..
INC=../inc
COMMON=$(RTL)/common
PROCINC=../$(CPU_TARGET)
UNITPREFIX=rtl
SYSTEMUNIT=system

# Paths
OBJPASDIR=$(RTL)/objpas
# Insert exception handler in system unit
ifdef EXCEPTIONS_IN_SYSTEM
override FPCOPT+=-dEXCEPTIONS_IN_SYSTEM
endif
# Insert exception handler in system unit
ifdef NO_EXCEPTIONS_IN_SYSTEM
override FPCOPT+=-dNO_EXCEPTIONS_IN_SYSTEM
endif
[rules]
# Get the system independent include file names.
# This will set the following variables :
# SYSINCNAMES
include $(INC)/makefile.inc
SYSINCDEPS=$(addprefix $(INC)/,$(SYSINCNAMES))
# Get the processor dependent include file names.
# This will set the following variables :
# CPUINCNAMES
include $(PROCINC)/makefile.cpu
SYSCPUDEPS=$(addprefix $(PROCINC)/,$(CPUINCNAMES))
# Put system unit dependencies together.
SYSDEPS=$(SYSINCDEPS) $(SYSCPUDEPS)
#
# Loaders
#
ifneq ($(findstring -dTEST_I8086_SMARTLINK_SECTIONS,$(FPCOPT)),)
override NASM_OPT+=-D__I8086_SMARTLINK_SECTIONS__
endif

#
# System Units (System, Objpas, Strings)
#
system$(PPUEXT) : system.pp $(SYSDEPS) $(INC)/tnyheaph.inc $(INC)/tinyheap.inc registers.inc
        $(COMPILER) $(FPC_SYSTEM_OPT) -Us -Sg system.pp
	$(EXECPPAS)

#
# System Dependent Units
#

#
# TP7 Compatible RTL Units
#
dos$(PPUEXT) : dos.pp registers.inc \
               $(INC)/dosh.inc $(INC)/dos.inc $(INC)/fexpand.inc \
               strings$(PPUEXT) system$(PPUEXT)
	$(COMPILER) dos.pp
	$(EXECPPAS)

#
# Delphi Compatible Units
#
sysutils$(PPUEXT) : sysutils.pp $(wildcard $(OBJPASDIR)/sysutils/*.inc) \
                    $(OBJPASUNIT)$(PPUEXT) dos$(PPUEXT) sysconst$(PPUEXT) system$(PPUEXT)
        $(COMPILER) -Fi$(OBJPASDIR)/sysutils sysutils.pp
	$(EXECPPAS)

classes$(PPUEXT) : classes.pp $(wildcard $(OBJPASDIR)/classes/*.inc) \
                   sysutils$(PPUEXT) typinfo$(PPUEXT) rtlconsts$(PPUEXT) \
                   types$(PPUEXT) $(FGLUNIT)$(PPUEXT) sortbase$(PPUEXT) \
                   $(OBJPASUNIT)$(PPUEXT) system$(PPUEXT)
        $(COMPILER) -Fi$(OBJPASDIR)/classes classes.pp
	$(EXECPPAS)

typinfo$(PPUEXT): $(OBJPASDIR)/typinfo.pp sysutils$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) rtlconsts$(PPUEXT) system$(PPUEXT)
        $(COMPILER) -Sg -Fi$(OBJPASDIR) $(OBJPASDIR)/typinfo.pp
	$(EXECPPAS)

types$(PPUEXT) : $(OBJPASDIR)/types.pp $(OBJPASUNIT)$(PPUEXT) $(MATHUNIT)$(PPUEXT) system$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/types.pp
	$(EXECPPAS)

rtlconsts$(PPUEXT) : $(OBJPASDIR)/rtlconsts.pp $(OBJPASDIR)/rtlconst.inc $(OBJPASUNIT)$(PPUEXT) system$(PPUEXT)
        $(COMPILER) -Fi$(OBJPASDIR) $(OBJPASDIR)/rtlconsts.pp
	$(EXECPPAS)

sysconst$(PPUEXT) : $(OBJPASDIR)/sysconst.pp $(OBJPASUNIT)$(PPUEXT) system$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/sysconst.pp
	$(EXECPPAS)

#
# Other system-independent RTL Units
#
cpu$(PPUEXT) : $(PROCINC)/cpu.pp sysutils$(PPUEXT) system$(PPUEXT)
	$(COMPILER) $(PROCINC)/cpu.pp
	$(EXECPPAS)

#
# Other system-dependent RTL Units
#
msmouse$(PPUEXT) : msmouse.pp system$(PPUEXT)
        $(COMPILER) msmouse.pp $(REDIR)
	$(EXECPPAS)

ctypes$(PPUEXT) : $(INC)/ctypes.pp system$(PPUEXT)
        $(COMPILER) $(INC)/ctypes.pp $(REDIR)
	$(EXECPPAS)

si_prc$(PPUEXT) : system$(PPUEXT)
        $(COMPILER) si_prc.pp
